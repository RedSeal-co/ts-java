// module.ts
// This file was generated by ts-java.
/// <reference path="../typings/java/java.d.ts" />
var _java = require('java');
var BluePromise = require('bluebird');
var path = require('path');
_java.asyncOptions = {
    syncSuffix: "",
    asyncSuffix: "A",
    promiseSuffix: "P",
    promisify: BluePromise.promisify
};
// JVM initialization callback which adds tsjava.classpath to the JVM classpath.
function beforeJvm() {
    var moduleJars = ['target/reflection-1.0.0.jar'];
    moduleJars.forEach(function (jarPath) {
        _java.classpath.push(path.join(__dirname, '', jarPath));
    });
    return BluePromise.resolve();
}
_java.registerClientP(beforeJvm);
var Module;
(function (Module) {
    'use strict';
    function ensureJvm() {
        return _java.ensureJvm();
    }
    Module.ensureJvm = ensureJvm;
    function getClassLoader() {
        return _java.getClassLoader();
    }
    Module.getClassLoader = getClassLoader;
    var shortToLongMap = {
        'Boolean': 'java.lang.Boolean',
        'Class': 'java.lang.Class',
        'ClassLoader': 'java.lang.ClassLoader',
        'Integer': 'java.lang.Integer',
        'Object': 'java.lang.Object',
        'AccessibleObject': 'java.lang.reflect.AccessibleObject',
        'Constructor': 'java.lang.reflect.Constructor',
        'Executable': 'java.lang.reflect.Executable',
        'Field': 'java.lang.reflect.Field',
        'Method': 'java.lang.reflect.Method',
        'Modifier': 'java.lang.reflect.Modifier',
        'Parameter': 'java.lang.reflect.Parameter',
        'Type': 'java.lang.reflect.Type',
        'String': 'java.lang.String'
    };
    function importClass(className) {
        if (className in shortToLongMap) {
            className = shortToLongMap[className];
        }
        return _java.import(className);
    }
    Module.importClass = importClass;
    // TODO: All overloads of newInstanceSync
    function newInstanceSync(className) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        args.unshift(className);
        return _java.newInstanceSync.apply(_java, args);
    }
    Module.newInstanceSync = newInstanceSync;
    var Java;
    (function (Java) {
    })(Java = Module.Java || (Module.Java = {})); // module Java
})(Module || (Module = {})); // module Module
module.exports = Module;
//# sourceMappingURL=reflection.js.map