// java.d.ts
// This file was generated by ts-java.
/// <reference path='../typings/bluebird/bluebird.d.ts' />

declare module 'java' {
  var Java: Java.NodeAPI;
  export = Java;
}

declare module Java {
  // Node-java has special handling for methods that return long or java.lang.Long,
  // returning a Javascript Number but with an additional property longValue.
  interface longValue_t extends Number {
    longValue: string;
  }

  // Node-java can automatically coerce a javascript string into a java.lang.String.
  // This special type alias allows to declare that possiblity to Typescript.
  export type string_t = string | java.lang.String;

  // Java methods that take java.lang.Object parameters implicitly will take a java.lang.String.
  // But string_t is not sufficient for this case, we need object_t.
  export type object_t = java.lang.Object | string | number | longValue_t;

  // Java methods that take long or java.lang.Long parameters may take javascript numbers,
  // longValue_t (see above) or java.lang.Long.
  // This special type alias allows to declare that possiblity to Typescript.
  export type long_t = number | longValue_t ;

  // Handling of other primitive numeric types is simpler, as there is no loss of precision.
  export type boolean_t = boolean | java.lang.Boolean;
  export type short_t = number ;
  export type integer_t = number | java.lang.Integer;
  export type double_t = number ;
  export type float_t = number ;
  export type number_t = number ;

  export interface array_t<T> extends java.lang.Object {
    // This is an opaque type for a java array_t T[];
    // Use Java.newArray<T>(className, [...]) to create wherever a Java method expects a T[],
    // most notably for vararg parameteters.
    __dummy: T;
  }

  interface Callback<T> {
    (err: Error, result: T): void;
  }

  interface AsyncOptions {
    promiseSuffix: string;
    promisify: Function;
  }

  // *NodeAPI* declares methods & members exported by the node java module.
  interface NodeAPI {
    classpath: string[];
    asyncOptions: AsyncOptions;
    callMethod(instance: any, className: string, methodName: string, args: any[], callback: Callback<any>): void;
    callMethodSync(instance: any, className: string, methodName: string, ...args: any[]): any;
    callStaticMethodSync(className: string, methodName: string, ...args: any[]): any;
    instanceOf(javaObject: any, className: string): boolean;

                
    getClassLoader(): java.lang.ClassLoader;

    newArray(className: 'java.lang.Class', arg: Class[]): array_t<java.lang.Class>;
    newArray(className: 'java.lang.reflect.Parameter', arg: Parameter[]): array_t<java.lang.reflect.Parameter>;
    newArray(className: 'java.lang.String', arg: string_t[]): array_t<java.lang.String>;
    newArray(className: 'java.lang.reflect.Method', arg: Method[]): array_t<java.lang.reflect.Method>;
    newArray(className: 'java.lang.Integer', arg: integer_t[]): array_t<java.lang.Integer>;
    newArray(className: 'java.lang.reflect.Executable', arg: Executable[]): array_t<java.lang.reflect.Executable>;
    newArray(className: 'java.lang.Object', arg: object_t[]): array_t<java.lang.Object>;
    newArray(className: 'java.lang.Boolean', arg: boolean_t[]): array_t<java.lang.Boolean>;
    newArray(className: 'java.lang.reflect.Constructor', arg: Constructor[]): array_t<java.lang.reflect.Constructor>;
    newArray(className: 'java.lang.reflect.Field', arg: Field[]): array_t<java.lang.reflect.Field>;
    newArray(className: 'java.lang.ClassLoader', arg: ClassLoader[]): array_t<java.lang.ClassLoader>;
    newArray(className: 'java.lang.reflect.AccessibleObject', arg: AccessibleObject[]): array_t<java.lang.reflect.AccessibleObject>;
    newArray(className: 'java.lang.reflect.Type', arg: Type[]): array_t<java.lang.reflect.Type>;
    newArray<T>(className: string, arg: any[]): array_t<T>;

    import(className: 'java.lang.Class'): java.lang.Class.Static;
    import(className: 'java.lang.reflect.Parameter'): java.lang.reflect.Parameter.Static;
    import(className: 'java.lang.String'): java.lang.String.Static;
    import(className: 'java.lang.reflect.Method'): java.lang.reflect.Method.Static;
    import(className: 'java.lang.Integer'): java.lang.Integer.Static;
    import(className: 'java.lang.reflect.Executable'): java.lang.reflect.Executable.Static;
    import(className: 'java.lang.Object'): java.lang.Object.Static;
    import(className: 'java.lang.Boolean'): java.lang.Boolean.Static;
    import(className: 'java.lang.reflect.Constructor'): java.lang.reflect.Constructor.Static;
    import(className: 'java.lang.reflect.Field'): java.lang.reflect.Field.Static;
    import(className: 'java.lang.ClassLoader'): java.lang.ClassLoader.Static;
    import(className: 'java.lang.reflect.AccessibleObject'): java.lang.reflect.AccessibleObject.Static;
    import(className: 'java.lang.reflect.Type'): java.lang.reflect.Type.Static;
    import(className: string): any;

    newInstance(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t, arg3: object_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t, arg3: string_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: array_t<object_t>, arg1: object_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: array_t<object_t>, arg1: string_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: string_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: array_t<object_t>, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: array_t<object_t>, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', cb: Callback<string>): void;
    newInstance(className: 'java.lang.Integer', arg0: string_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Integer', arg0: integer_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Object', cb: Callback<object_t>): void;
    newInstance(className: 'java.lang.Boolean', arg0: string_t, cb: Callback<boolean>): void;
    newInstance(className: 'java.lang.Boolean', arg0: boolean_t, cb: Callback<boolean>): void;
    newInstance(className: string, ...args: any[]): void;

    newInstanceSync(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t, arg3: object_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t, arg3: string_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: array_t<object_t>, arg1: object_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: array_t<object_t>, arg1: string_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: string_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: array_t<object_t>): string;
    newInstanceSync(className: 'java.lang.String', arg0: array_t<object_t>): string;
    newInstanceSync(className: 'java.lang.String'): string;
    newInstanceSync(className: 'java.lang.Integer', arg0: string_t): number;
    newInstanceSync(className: 'java.lang.Integer', arg0: integer_t): number;
    newInstanceSync(className: 'java.lang.Object'): object_t;
    newInstanceSync(className: 'java.lang.Boolean', arg0: string_t): boolean;
    newInstanceSync(className: 'java.lang.Boolean', arg0: boolean_t): boolean;
    newInstanceSync(className: string, ...args: any[]): any;

    newInstancePromise(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t, arg3: string_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: array_t<object_t>, arg1: object_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: array_t<object_t>, arg1: string_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: array_t<object_t>, arg1: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: string_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: array_t<object_t>): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: array_t<object_t>): Promise<string>;
    newInstancePromise(className: 'java.lang.String'): Promise<string>;
    newInstancePromise(className: 'java.lang.Integer', arg0: string_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Integer', arg0: integer_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Object'): Promise<object_t>;
    newInstancePromise(className: 'java.lang.Boolean', arg0: string_t): Promise<boolean>;
    newInstancePromise(className: 'java.lang.Boolean', arg0: boolean_t): Promise<boolean>;
    newInstancePromise(className: string, ...args: any[]): Promise<any>;
  }

  export import Class = java.lang.Class;
  export import Parameter = java.lang.reflect.Parameter;
  export import String = java.lang.String;
  export import Method = java.lang.reflect.Method;
  export import Integer = java.lang.Integer;
  export import Executable = java.lang.reflect.Executable;
  export import Object = java.lang.Object;
  export import Boolean = java.lang.Boolean;
  export import Constructor = java.lang.reflect.Constructor;
  export import Field = java.lang.reflect.Field;
  export import ClassLoader = java.lang.ClassLoader;
  export import AccessibleObject = java.lang.reflect.AccessibleObject;
  export import Type = java.lang.reflect.Type;

  export module java.lang {
    export interface Class extends Java.java.lang.Object,Java.java.lang.reflect.Type {
      // asSubclass
      // public <U> java.lang.Class<? extends U> java.lang.Class.asSubclass(java.lang.Class<U>)
      asSubclass(arg0: Class, cb: Callback<Class>): void;
      asSubclassSync(arg0: Class): Class;
      asSubclassPromise(arg0: Class): Promise<Class>;
      // cast
      // public T java.lang.Class.cast(java.lang.Object)
      cast(arg0: object_t, cb: Callback<object_t>): void;
      castSync(arg0: object_t): object_t;
      castPromise(arg0: object_t): Promise<object_t>;
      // desiredAssertionStatus
      // public boolean java.lang.Class.desiredAssertionStatus()
      desiredAssertionStatus( cb: Callback<boolean>): void;
      desiredAssertionStatusSync(): boolean;
      desiredAssertionStatusPromise(): Promise<boolean>;
      // equals
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // forName
      // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader) throws java.lang.ClassNotFoundException
      // static method, see .Static
      // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String) throws java.lang.ClassNotFoundException
      // static method, see .Static
      // getAnnotatedInterfaces
      // public java.lang.reflect.AnnotatedType[] java.lang.Class.getAnnotatedInterfaces()
      getAnnotatedInterfaces( cb: Callback<object_t[]>): void;
      getAnnotatedInterfacesSync(): object_t[];
      getAnnotatedInterfacesPromise(): Promise<object_t[]>;
      // getAnnotatedSuperclass
      // public java.lang.reflect.AnnotatedType java.lang.Class.getAnnotatedSuperclass()
      getAnnotatedSuperclass( cb: Callback<object_t>): void;
      getAnnotatedSuperclassSync(): object_t;
      getAnnotatedSuperclassPromise(): Promise<object_t>;
      // getAnnotation
      // public <A> A java.lang.Class.getAnnotation(java.lang.Class<A>)
      getAnnotation(arg0: Class, cb: Callback<object_t>): void;
      getAnnotationSync(arg0: Class): object_t;
      getAnnotationPromise(arg0: Class): Promise<object_t>;
      // getAnnotations
      // public java.lang.annotation.Annotation[] java.lang.Class.getAnnotations()
      getAnnotations( cb: Callback<object_t[]>): void;
      getAnnotationsSync(): object_t[];
      getAnnotationsPromise(): Promise<object_t[]>;
      // getAnnotationsByType
      // public <A> A[] java.lang.Class.getAnnotationsByType(java.lang.Class<A>)
      getAnnotationsByType(arg0: Class, cb: Callback<object_t[]>): void;
      getAnnotationsByTypeSync(arg0: Class): object_t[];
      getAnnotationsByTypePromise(arg0: Class): Promise<object_t[]>;
      // getCanonicalName
      // public java.lang.String java.lang.Class.getCanonicalName()
      getCanonicalName( cb: Callback<string>): void;
      getCanonicalNameSync(): string;
      getCanonicalNamePromise(): Promise<string>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // getClasses
      // public java.lang.Class<?>[] java.lang.Class.getClasses()
      getClasses( cb: Callback<Class[]>): void;
      getClassesSync(): Class[];
      getClassesPromise(): Promise<Class[]>;
      // getClassLoader
      // public java.lang.ClassLoader java.lang.Class.getClassLoader()
      getClassLoader( cb: Callback<ClassLoader>): void;
      getClassLoaderSync(): ClassLoader;
      getClassLoaderPromise(): Promise<ClassLoader>;
      // getComponentType
      // public native java.lang.Class<?> java.lang.Class.getComponentType()
      getComponentType( cb: Callback<Class>): void;
      getComponentTypeSync(): Class;
      getComponentTypePromise(): Promise<Class>;
      // getConstructor
      // public java.lang.reflect.Constructor<T> java.lang.Class.getConstructor(java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getConstructor(arg0: array_t<Class>, cb: Callback<Constructor>): void;
      getConstructorSync(...arg0: Class[]): Constructor;
      getConstructorPromise(...arg0: Class[]): Promise<Constructor>;
      // getConstructors
      // public java.lang.reflect.Constructor<?>[] java.lang.Class.getConstructors() throws java.lang.SecurityException
      getConstructors( cb: Callback<Constructor[]>): void;
      getConstructorsSync(): Constructor[];
      getConstructorsPromise(): Promise<Constructor[]>;
      // getDeclaredAnnotation
      // public <A> A java.lang.Class.getDeclaredAnnotation(java.lang.Class<A>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<object_t>): void;
      getDeclaredAnnotationSync(arg0: Class): object_t;
      getDeclaredAnnotationPromise(arg0: Class): Promise<object_t>;
      // getDeclaredAnnotations
      // public java.lang.annotation.Annotation[] java.lang.Class.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<object_t[]>): void;
      getDeclaredAnnotationsSync(): object_t[];
      getDeclaredAnnotationsPromise(): Promise<object_t[]>;
      // getDeclaredAnnotationsByType
      // public <A> A[] java.lang.Class.getDeclaredAnnotationsByType(java.lang.Class<A>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<object_t[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): object_t[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<object_t[]>;
      // getDeclaredClasses
      // public java.lang.Class<?>[] java.lang.Class.getDeclaredClasses() throws java.lang.SecurityException
      getDeclaredClasses( cb: Callback<Class[]>): void;
      getDeclaredClassesSync(): Class[];
      getDeclaredClassesPromise(): Promise<Class[]>;
      // getDeclaredConstructor
      // public java.lang.reflect.Constructor<T> java.lang.Class.getDeclaredConstructor(java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getDeclaredConstructor(arg0: array_t<Class>, cb: Callback<Constructor>): void;
      getDeclaredConstructorSync(...arg0: Class[]): Constructor;
      getDeclaredConstructorPromise(...arg0: Class[]): Promise<Constructor>;
      // getDeclaredConstructors
      // public java.lang.reflect.Constructor<?>[] java.lang.Class.getDeclaredConstructors() throws java.lang.SecurityException
      getDeclaredConstructors( cb: Callback<Constructor[]>): void;
      getDeclaredConstructorsSync(): Constructor[];
      getDeclaredConstructorsPromise(): Promise<Constructor[]>;
      // getDeclaredField
      // public java.lang.reflect.Field java.lang.Class.getDeclaredField(java.lang.String) throws java.lang.NoSuchFieldException,java.lang.SecurityException
      getDeclaredField(arg0: string_t, cb: Callback<Field>): void;
      getDeclaredFieldSync(arg0: string_t): Field;
      getDeclaredFieldPromise(arg0: string_t): Promise<Field>;
      // getDeclaredFields
      // public java.lang.reflect.Field[] java.lang.Class.getDeclaredFields() throws java.lang.SecurityException
      getDeclaredFields( cb: Callback<Field[]>): void;
      getDeclaredFieldsSync(): Field[];
      getDeclaredFieldsPromise(): Promise<Field[]>;
      // getDeclaredMethod
      // public java.lang.reflect.Method java.lang.Class.getDeclaredMethod(java.lang.String,java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getDeclaredMethod(arg0: string_t, arg1: array_t<Class>, cb: Callback<Method>): void;
      getDeclaredMethodSync(arg0: string_t, ...arg1: Class[]): Method;
      getDeclaredMethodPromise(arg0: string_t, ...arg1: Class[]): Promise<Method>;
      // getDeclaredMethods
      // public java.lang.reflect.Method[] java.lang.Class.getDeclaredMethods() throws java.lang.SecurityException
      getDeclaredMethods( cb: Callback<Method[]>): void;
      getDeclaredMethodsSync(): Method[];
      getDeclaredMethodsPromise(): Promise<Method[]>;
      // getDeclaringClass
      // public java.lang.Class<?> java.lang.Class.getDeclaringClass() throws java.lang.SecurityException
      getDeclaringClass( cb: Callback<Class>): void;
      getDeclaringClassSync(): Class;
      getDeclaringClassPromise(): Promise<Class>;
      // getEnclosingClass
      // public java.lang.Class<?> java.lang.Class.getEnclosingClass() throws java.lang.SecurityException
      getEnclosingClass( cb: Callback<Class>): void;
      getEnclosingClassSync(): Class;
      getEnclosingClassPromise(): Promise<Class>;
      // getEnclosingConstructor
      // public java.lang.reflect.Constructor<?> java.lang.Class.getEnclosingConstructor() throws java.lang.SecurityException
      getEnclosingConstructor( cb: Callback<Constructor>): void;
      getEnclosingConstructorSync(): Constructor;
      getEnclosingConstructorPromise(): Promise<Constructor>;
      // getEnclosingMethod
      // public java.lang.reflect.Method java.lang.Class.getEnclosingMethod() throws java.lang.SecurityException
      getEnclosingMethod( cb: Callback<Method>): void;
      getEnclosingMethodSync(): Method;
      getEnclosingMethodPromise(): Promise<Method>;
      // getEnumConstants
      // public T[] java.lang.Class.getEnumConstants()
      getEnumConstants( cb: Callback<object_t[]>): void;
      getEnumConstantsSync(): object_t[];
      getEnumConstantsPromise(): Promise<object_t[]>;
      // getField
      // public java.lang.reflect.Field java.lang.Class.getField(java.lang.String) throws java.lang.NoSuchFieldException,java.lang.SecurityException
      getField(arg0: string_t, cb: Callback<Field>): void;
      getFieldSync(arg0: string_t): Field;
      getFieldPromise(arg0: string_t): Promise<Field>;
      // getFields
      // public java.lang.reflect.Field[] java.lang.Class.getFields() throws java.lang.SecurityException
      getFields( cb: Callback<Field[]>): void;
      getFieldsSync(): Field[];
      getFieldsPromise(): Promise<Field[]>;
      // getGenericInterfaces
      // public java.lang.reflect.Type[] java.lang.Class.getGenericInterfaces()
      getGenericInterfaces( cb: Callback<Type[]>): void;
      getGenericInterfacesSync(): Type[];
      getGenericInterfacesPromise(): Promise<Type[]>;
      // getGenericSuperclass
      // public java.lang.reflect.Type java.lang.Class.getGenericSuperclass()
      getGenericSuperclass( cb: Callback<Type>): void;
      getGenericSuperclassSync(): Type;
      getGenericSuperclassPromise(): Promise<Type>;
      // getInterfaces
      // public java.lang.Class<?>[] java.lang.Class.getInterfaces()
      getInterfaces( cb: Callback<Class[]>): void;
      getInterfacesSync(): Class[];
      getInterfacesPromise(): Promise<Class[]>;
      // getMethod
      // public java.lang.reflect.Method java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getMethod(arg0: string_t, arg1: array_t<Class>, cb: Callback<Method>): void;
      getMethodSync(arg0: string_t, ...arg1: Class[]): Method;
      getMethodPromise(arg0: string_t, ...arg1: Class[]): Promise<Method>;
      // getMethods
      // public java.lang.reflect.Method[] java.lang.Class.getMethods() throws java.lang.SecurityException
      getMethods( cb: Callback<Method[]>): void;
      getMethodsSync(): Method[];
      getMethodsPromise(): Promise<Method[]>;
      // getModifiers
      // public native int java.lang.Class.getModifiers()
      getModifiers( cb: Callback<number>): void;
      getModifiersSync(): number;
      getModifiersPromise(): Promise<number>;
      // getName
      // public java.lang.String java.lang.Class.getName()
      getName( cb: Callback<string>): void;
      getNameSync(): string;
      getNamePromise(): Promise<string>;
      // getPackage
      // public java.lang.Package java.lang.Class.getPackage()
      getPackage( cb: Callback<object_t>): void;
      getPackageSync(): object_t;
      getPackagePromise(): Promise<object_t>;
      // getProtectionDomain
      // public java.security.ProtectionDomain java.lang.Class.getProtectionDomain()
      getProtectionDomain( cb: Callback<object_t>): void;
      getProtectionDomainSync(): object_t;
      getProtectionDomainPromise(): Promise<object_t>;
      // getResource
      // public java.net.URL java.lang.Class.getResource(java.lang.String)
      getResource(arg0: string_t, cb: Callback<object_t>): void;
      getResourceSync(arg0: string_t): object_t;
      getResourcePromise(arg0: string_t): Promise<object_t>;
      // getResourceAsStream
      // public java.io.InputStream java.lang.Class.getResourceAsStream(java.lang.String)
      getResourceAsStream(arg0: string_t, cb: Callback<object_t>): void;
      getResourceAsStreamSync(arg0: string_t): object_t;
      getResourceAsStreamPromise(arg0: string_t): Promise<object_t>;
      // getSigners
      // public native java.lang.Object[] java.lang.Class.getSigners()
      getSigners( cb: Callback<object_t[]>): void;
      getSignersSync(): object_t[];
      getSignersPromise(): Promise<object_t[]>;
      // getSimpleName
      // public java.lang.String java.lang.Class.getSimpleName()
      getSimpleName( cb: Callback<string>): void;
      getSimpleNameSync(): string;
      getSimpleNamePromise(): Promise<string>;
      // getSuperclass
      // public native java.lang.Class<? super T> java.lang.Class.getSuperclass()
      getSuperclass( cb: Callback<Class>): void;
      getSuperclassSync(): Class;
      getSuperclassPromise(): Promise<Class>;
      // getTypeName
      // public java.lang.String java.lang.Class.getTypeName()
      getTypeName( cb: Callback<string>): void;
      getTypeNameSync(): string;
      getTypeNamePromise(): Promise<string>;
      // getTypeParameters
      // public java.lang.reflect.TypeVariable<java.lang.Class<T>>[] java.lang.Class.getTypeParameters()
      getTypeParameters( cb: Callback<object_t[]>): void;
      getTypeParametersSync(): object_t[];
      getTypeParametersPromise(): Promise<object_t[]>;
      // hashCode
      // public native int java.lang.Object.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // isAnnotation
      // public boolean java.lang.Class.isAnnotation()
      isAnnotation( cb: Callback<boolean>): void;
      isAnnotationSync(): boolean;
      isAnnotationPromise(): Promise<boolean>;
      // isAnnotationPresent
      // public boolean java.lang.Class.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
      // isAnonymousClass
      // public boolean java.lang.Class.isAnonymousClass()
      isAnonymousClass( cb: Callback<boolean>): void;
      isAnonymousClassSync(): boolean;
      isAnonymousClassPromise(): Promise<boolean>;
      // isArray
      // public native boolean java.lang.Class.isArray()
      isArray( cb: Callback<boolean>): void;
      isArraySync(): boolean;
      isArrayPromise(): Promise<boolean>;
      // isAssignableFrom
      // public native boolean java.lang.Class.isAssignableFrom(java.lang.Class<?>)
      isAssignableFrom(arg0: Class, cb: Callback<boolean>): void;
      isAssignableFromSync(arg0: Class): boolean;
      isAssignableFromPromise(arg0: Class): Promise<boolean>;
      // isEnum
      // public boolean java.lang.Class.isEnum()
      isEnum( cb: Callback<boolean>): void;
      isEnumSync(): boolean;
      isEnumPromise(): Promise<boolean>;
      // isInstance
      // public native boolean java.lang.Class.isInstance(java.lang.Object)
      isInstance(arg0: object_t, cb: Callback<boolean>): void;
      isInstanceSync(arg0: object_t): boolean;
      isInstancePromise(arg0: object_t): Promise<boolean>;
      // isInterface
      // public native boolean java.lang.Class.isInterface()
      isInterface( cb: Callback<boolean>): void;
      isInterfaceSync(): boolean;
      isInterfacePromise(): Promise<boolean>;
      // isLocalClass
      // public boolean java.lang.Class.isLocalClass()
      isLocalClass( cb: Callback<boolean>): void;
      isLocalClassSync(): boolean;
      isLocalClassPromise(): Promise<boolean>;
      // isMemberClass
      // public boolean java.lang.Class.isMemberClass()
      isMemberClass( cb: Callback<boolean>): void;
      isMemberClassSync(): boolean;
      isMemberClassPromise(): Promise<boolean>;
      // isPrimitive
      // public native boolean java.lang.Class.isPrimitive()
      isPrimitive( cb: Callback<boolean>): void;
      isPrimitiveSync(): boolean;
      isPrimitivePromise(): Promise<boolean>;
      // isSynthetic
      // public boolean java.lang.Class.isSynthetic()
      isSynthetic( cb: Callback<boolean>): void;
      isSyntheticSync(): boolean;
      isSyntheticPromise(): Promise<boolean>;
      // newInstance
      // public T java.lang.Class.newInstance() throws java.lang.InstantiationException,java.lang.IllegalAccessException
      newInstance( cb: Callback<object_t>): void;
      newInstanceSync(): object_t;
      newInstancePromise(): Promise<object_t>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // toGenericString
      // public java.lang.String java.lang.Class.toGenericString()
      toGenericString( cb: Callback<string>): void;
      toGenericStringSync(): string;
      toGenericStringPromise(): Promise<string>;
      // toString
      // public java.lang.String java.lang.Class.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
      waitSync(arg0: object_t, arg1: integer_t): void;
      waitPromise(arg0: object_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: object_t, cb: Callback<void>): void;
      waitSync(arg0: object_t): void;
      waitPromise(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module Class {
      export interface Static {
        // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader) throws java.lang.ClassNotFoundException
        forName(arg0: string_t, arg1: boolean_t, arg2: ClassLoader, cb: Callback<Class>): void;
        forNameSync(arg0: string_t, arg1: boolean_t, arg2: ClassLoader): Class;
        forNamePromise(arg0: string_t, arg1: boolean_t, arg2: ClassLoader): Promise<Class>;
        // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String) throws java.lang.ClassNotFoundException
        forName(arg0: string_t, cb: Callback<Class>): void;
        forNameSync(arg0: string_t): Class;
        forNamePromise(arg0: string_t): Promise<Class>;
      }
    }
  }

  export module java.lang.reflect {
    export interface Parameter extends Java.java.lang.Object {
      // equals
      // public boolean java.lang.reflect.Parameter.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // getAnnotatedType
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Parameter.getAnnotatedType()
      getAnnotatedType( cb: Callback<object_t>): void;
      getAnnotatedTypeSync(): object_t;
      getAnnotatedTypePromise(): Promise<object_t>;
      // getAnnotation
      // public <T> T java.lang.reflect.Parameter.getAnnotation(java.lang.Class<T>)
      getAnnotation(arg0: Class, cb: Callback<object_t>): void;
      getAnnotationSync(arg0: Class): object_t;
      getAnnotationPromise(arg0: Class): Promise<object_t>;
      // getAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.Parameter.getAnnotations()
      getAnnotations( cb: Callback<object_t[]>): void;
      getAnnotationsSync(): object_t[];
      getAnnotationsPromise(): Promise<object_t[]>;
      // getAnnotationsByType
      // public <T> T[] java.lang.reflect.Parameter.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByType(arg0: Class, cb: Callback<object_t[]>): void;
      getAnnotationsByTypeSync(arg0: Class): object_t[];
      getAnnotationsByTypePromise(arg0: Class): Promise<object_t[]>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // getDeclaredAnnotation
      // public <T> T java.lang.reflect.Parameter.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<object_t>): void;
      getDeclaredAnnotationSync(arg0: Class): object_t;
      getDeclaredAnnotationPromise(arg0: Class): Promise<object_t>;
      // getDeclaredAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.Parameter.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<object_t[]>): void;
      getDeclaredAnnotationsSync(): object_t[];
      getDeclaredAnnotationsPromise(): Promise<object_t[]>;
      // getDeclaredAnnotationsByType
      // public <T> T[] java.lang.reflect.Parameter.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<object_t[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): object_t[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<object_t[]>;
      // getDeclaringExecutable
      // public java.lang.reflect.Executable java.lang.reflect.Parameter.getDeclaringExecutable()
      getDeclaringExecutable( cb: Callback<Executable>): void;
      getDeclaringExecutableSync(): Executable;
      getDeclaringExecutablePromise(): Promise<Executable>;
      // getModifiers
      // public int java.lang.reflect.Parameter.getModifiers()
      getModifiers( cb: Callback<number>): void;
      getModifiersSync(): number;
      getModifiersPromise(): Promise<number>;
      // getName
      // public java.lang.String java.lang.reflect.Parameter.getName()
      getName( cb: Callback<string>): void;
      getNameSync(): string;
      getNamePromise(): Promise<string>;
      // getParameterizedType
      // public java.lang.reflect.Type java.lang.reflect.Parameter.getParameterizedType()
      getParameterizedType( cb: Callback<Type>): void;
      getParameterizedTypeSync(): Type;
      getParameterizedTypePromise(): Promise<Type>;
      // getType
      // public java.lang.Class<?> java.lang.reflect.Parameter.getType()
      getType( cb: Callback<Class>): void;
      getTypeSync(): Class;
      getTypePromise(): Promise<Class>;
      // hashCode
      // public int java.lang.reflect.Parameter.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // isAnnotationPresent
      // public default boolean java.lang.reflect.AnnotatedElement.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
      // isImplicit
      // public boolean java.lang.reflect.Parameter.isImplicit()
      isImplicit( cb: Callback<boolean>): void;
      isImplicitSync(): boolean;
      isImplicitPromise(): Promise<boolean>;
      // isNamePresent
      // public boolean java.lang.reflect.Parameter.isNamePresent()
      isNamePresent( cb: Callback<boolean>): void;
      isNamePresentSync(): boolean;
      isNamePresentPromise(): Promise<boolean>;
      // isSynthetic
      // public boolean java.lang.reflect.Parameter.isSynthetic()
      isSynthetic( cb: Callback<boolean>): void;
      isSyntheticSync(): boolean;
      isSyntheticPromise(): Promise<boolean>;
      // isVarArgs
      // public boolean java.lang.reflect.Parameter.isVarArgs()
      isVarArgs( cb: Callback<boolean>): void;
      isVarArgsSync(): boolean;
      isVarArgsPromise(): Promise<boolean>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // toString
      // public java.lang.String java.lang.reflect.Parameter.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
      waitSync(arg0: object_t, arg1: integer_t): void;
      waitPromise(arg0: object_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: object_t, cb: Callback<void>): void;
      waitSync(arg0: object_t): void;
      waitPromise(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module Parameter {
      export interface Static {
      }
    }
  }

  export module java.lang {
    export interface String extends Java.java.lang.Object {
      // charAt
      // public char java.lang.String.charAt(int)
      charAt(arg0: integer_t, cb: Callback<object_t>): void;
      charAtSync(arg0: integer_t): object_t;
      charAtPromise(arg0: integer_t): Promise<object_t>;
      // chars
      // public default java.util.stream.IntStream java.lang.CharSequence.chars()
      chars( cb: Callback<object_t>): void;
      charsSync(): object_t;
      charsPromise(): Promise<object_t>;
      // codePointAt
      // public int java.lang.String.codePointAt(int)
      codePointAt(arg0: integer_t, cb: Callback<number>): void;
      codePointAtSync(arg0: integer_t): number;
      codePointAtPromise(arg0: integer_t): Promise<number>;
      // codePointBefore
      // public int java.lang.String.codePointBefore(int)
      codePointBefore(arg0: integer_t, cb: Callback<number>): void;
      codePointBeforeSync(arg0: integer_t): number;
      codePointBeforePromise(arg0: integer_t): Promise<number>;
      // codePointCount
      // public int java.lang.String.codePointCount(int,int)
      codePointCount(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
      codePointCountSync(arg0: integer_t, arg1: integer_t): number;
      codePointCountPromise(arg0: integer_t, arg1: integer_t): Promise<number>;
      // codePoints
      // public default java.util.stream.IntStream java.lang.CharSequence.codePoints()
      codePoints( cb: Callback<object_t>): void;
      codePointsSync(): object_t;
      codePointsPromise(): Promise<object_t>;
      // compareTo
      // public int java.lang.String.compareTo(java.lang.String)
      compareTo(arg0: string_t, cb: Callback<number>): void;
      compareToSync(arg0: string_t): number;
      compareToPromise(arg0: string_t): Promise<number>;
      // public int java.lang.String.compareTo(java.lang.Object)
      compareTo(arg0: object_t, cb: Callback<number>): void;
      compareToSync(arg0: object_t): number;
      compareToPromise(arg0: object_t): Promise<number>;
      // compareToIgnoreCase
      // public int java.lang.String.compareToIgnoreCase(java.lang.String)
      compareToIgnoreCase(arg0: string_t, cb: Callback<number>): void;
      compareToIgnoreCaseSync(arg0: string_t): number;
      compareToIgnoreCasePromise(arg0: string_t): Promise<number>;
      // concat
      // public java.lang.String java.lang.String.concat(java.lang.String)
      concat(arg0: string_t, cb: Callback<string>): void;
      concatSync(arg0: string_t): string;
      concatPromise(arg0: string_t): Promise<string>;
      // contains
      // public boolean java.lang.String.contains(java.lang.CharSequence)
      contains(arg0: object_t, cb: Callback<boolean>): void;
      containsSync(arg0: object_t): boolean;
      containsPromise(arg0: object_t): Promise<boolean>;
      // contentEquals
      // public boolean java.lang.String.contentEquals(java.lang.StringBuffer)
      contentEquals(arg0: object_t, cb: Callback<boolean>): void;
      contentEqualsSync(arg0: object_t): boolean;
      contentEqualsPromise(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.String.contentEquals(java.lang.CharSequence)
      contentEquals(arg0: object_t, cb: Callback<boolean>): void;
      contentEqualsSync(arg0: object_t): boolean;
      contentEqualsPromise(arg0: object_t): Promise<boolean>;
      // copyValueOf
      // public static java.lang.String java.lang.String.copyValueOf(char[],int,int)
      // static method, see .Static
      // public static java.lang.String java.lang.String.copyValueOf(char[])
      // static method, see .Static
      // endsWith
      // public boolean java.lang.String.endsWith(java.lang.String)
      endsWith(arg0: string_t, cb: Callback<boolean>): void;
      endsWithSync(arg0: string_t): boolean;
      endsWithPromise(arg0: string_t): Promise<boolean>;
      // equals
      // public boolean java.lang.String.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // equalsIgnoreCase
      // public boolean java.lang.String.equalsIgnoreCase(java.lang.String)
      equalsIgnoreCase(arg0: string_t, cb: Callback<boolean>): void;
      equalsIgnoreCaseSync(arg0: string_t): boolean;
      equalsIgnoreCasePromise(arg0: string_t): Promise<boolean>;
      // format
      // public static java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object...)
      // static method, see .Static
      // public static java.lang.String java.lang.String.format(java.lang.String,java.lang.Object...)
      // static method, see .Static
      // getBytes
      // public void java.lang.String.getBytes(int,int,byte[],int)
      getBytes(arg0: integer_t, arg1: integer_t, arg2: array_t<object_t>, arg3: integer_t, cb: Callback<void>): void;
      getBytesSync(arg0: integer_t, arg1: integer_t, arg2: array_t<object_t>, arg3: integer_t): void;
      getBytesPromise(arg0: integer_t, arg1: integer_t, arg2: array_t<object_t>, arg3: integer_t): Promise<void>;
      // public byte[] java.lang.String.getBytes(java.nio.charset.Charset)
      getBytes(arg0: object_t, cb: Callback<object_t[]>): void;
      getBytesSync(arg0: object_t): object_t[];
      getBytesPromise(arg0: object_t): Promise<object_t[]>;
      // public byte[] java.lang.String.getBytes(java.lang.String) throws java.io.UnsupportedEncodingException
      getBytes(arg0: string_t, cb: Callback<object_t[]>): void;
      getBytesSync(arg0: string_t): object_t[];
      getBytesPromise(arg0: string_t): Promise<object_t[]>;
      // public byte[] java.lang.String.getBytes()
      getBytes( cb: Callback<object_t[]>): void;
      getBytesSync(): object_t[];
      getBytesPromise(): Promise<object_t[]>;
      // getChars
      // public void java.lang.String.getChars(int,int,char[],int)
      getChars(arg0: integer_t, arg1: integer_t, arg2: array_t<object_t>, arg3: integer_t, cb: Callback<void>): void;
      getCharsSync(arg0: integer_t, arg1: integer_t, arg2: array_t<object_t>, arg3: integer_t): void;
      getCharsPromise(arg0: integer_t, arg1: integer_t, arg2: array_t<object_t>, arg3: integer_t): Promise<void>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // hashCode
      // public int java.lang.String.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // indexOf
      // public int java.lang.String.indexOf(java.lang.String,int)
      indexOf(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
      indexOfSync(arg0: string_t, arg1: integer_t): number;
      indexOfPromise(arg0: string_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.indexOf(int,int)
      indexOf(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
      indexOfSync(arg0: integer_t, arg1: integer_t): number;
      indexOfPromise(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.indexOf(java.lang.String)
      indexOf(arg0: string_t, cb: Callback<number>): void;
      indexOfSync(arg0: string_t): number;
      indexOfPromise(arg0: string_t): Promise<number>;
      // public int java.lang.String.indexOf(int)
      indexOf(arg0: integer_t, cb: Callback<number>): void;
      indexOfSync(arg0: integer_t): number;
      indexOfPromise(arg0: integer_t): Promise<number>;
      // intern
      // public native java.lang.String java.lang.String.intern()
      intern( cb: Callback<string>): void;
      internSync(): string;
      internPromise(): Promise<string>;
      // isEmpty
      // public boolean java.lang.String.isEmpty()
      isEmpty( cb: Callback<boolean>): void;
      isEmptySync(): boolean;
      isEmptyPromise(): Promise<boolean>;
      // join
      // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence...)
      // static method, see .Static
      // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.Iterable<? extends java.lang.CharSequence>)
      // static method, see .Static
      // lastIndexOf
      // public int java.lang.String.lastIndexOf(java.lang.String,int)
      lastIndexOf(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
      lastIndexOfSync(arg0: string_t, arg1: integer_t): number;
      lastIndexOfPromise(arg0: string_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.lastIndexOf(int,int)
      lastIndexOf(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
      lastIndexOfSync(arg0: integer_t, arg1: integer_t): number;
      lastIndexOfPromise(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.lastIndexOf(java.lang.String)
      lastIndexOf(arg0: string_t, cb: Callback<number>): void;
      lastIndexOfSync(arg0: string_t): number;
      lastIndexOfPromise(arg0: string_t): Promise<number>;
      // public int java.lang.String.lastIndexOf(int)
      lastIndexOf(arg0: integer_t, cb: Callback<number>): void;
      lastIndexOfSync(arg0: integer_t): number;
      lastIndexOfPromise(arg0: integer_t): Promise<number>;
      // length
      // public int java.lang.String.length()
      length( cb: Callback<number>): void;
      lengthSync(): number;
      lengthPromise(): Promise<number>;
      // matches
      // public boolean java.lang.String.matches(java.lang.String)
      matches(arg0: string_t, cb: Callback<boolean>): void;
      matchesSync(arg0: string_t): boolean;
      matchesPromise(arg0: string_t): Promise<boolean>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // offsetByCodePoints
      // public int java.lang.String.offsetByCodePoints(int,int)
      offsetByCodePoints(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
      offsetByCodePointsSync(arg0: integer_t, arg1: integer_t): number;
      offsetByCodePointsPromise(arg0: integer_t, arg1: integer_t): Promise<number>;
      // regionMatches
      // public boolean java.lang.String.regionMatches(boolean,int,java.lang.String,int,int)
      regionMatches(arg0: boolean_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t, cb: Callback<boolean>): void;
      regionMatchesSync(arg0: boolean_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t): boolean;
      regionMatchesPromise(arg0: boolean_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t): Promise<boolean>;
      // public boolean java.lang.String.regionMatches(int,java.lang.String,int,int)
      regionMatches(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t, cb: Callback<boolean>): void;
      regionMatchesSync(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t): boolean;
      regionMatchesPromise(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t): Promise<boolean>;
      // replace
      // public java.lang.String java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)
      replace(arg0: object_t, arg1: object_t, cb: Callback<string>): void;
      replaceSync(arg0: object_t, arg1: object_t): string;
      replacePromise(arg0: object_t, arg1: object_t): Promise<string>;
      // public java.lang.String java.lang.String.replace(char,char)
      replace(arg0: object_t, arg1: object_t, cb: Callback<string>): void;
      replaceSync(arg0: object_t, arg1: object_t): string;
      replacePromise(arg0: object_t, arg1: object_t): Promise<string>;
      // replaceAll
      // public java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String)
      replaceAll(arg0: string_t, arg1: string_t, cb: Callback<string>): void;
      replaceAllSync(arg0: string_t, arg1: string_t): string;
      replaceAllPromise(arg0: string_t, arg1: string_t): Promise<string>;
      // replaceFirst
      // public java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String)
      replaceFirst(arg0: string_t, arg1: string_t, cb: Callback<string>): void;
      replaceFirstSync(arg0: string_t, arg1: string_t): string;
      replaceFirstPromise(arg0: string_t, arg1: string_t): Promise<string>;
      // split
      // public java.lang.String[] java.lang.String.split(java.lang.String,int)
      split(arg0: string_t, arg1: integer_t, cb: Callback<string[]>): void;
      splitSync(arg0: string_t, arg1: integer_t): string[];
      splitPromise(arg0: string_t, arg1: integer_t): Promise<string[]>;
      // public java.lang.String[] java.lang.String.split(java.lang.String)
      split(arg0: string_t, cb: Callback<string[]>): void;
      splitSync(arg0: string_t): string[];
      splitPromise(arg0: string_t): Promise<string[]>;
      // startsWith
      // public boolean java.lang.String.startsWith(java.lang.String,int)
      startsWith(arg0: string_t, arg1: integer_t, cb: Callback<boolean>): void;
      startsWithSync(arg0: string_t, arg1: integer_t): boolean;
      startsWithPromise(arg0: string_t, arg1: integer_t): Promise<boolean>;
      // public boolean java.lang.String.startsWith(java.lang.String)
      startsWith(arg0: string_t, cb: Callback<boolean>): void;
      startsWithSync(arg0: string_t): boolean;
      startsWithPromise(arg0: string_t): Promise<boolean>;
      // subSequence
      // public java.lang.CharSequence java.lang.String.subSequence(int,int)
      subSequence(arg0: integer_t, arg1: integer_t, cb: Callback<object_t>): void;
      subSequenceSync(arg0: integer_t, arg1: integer_t): object_t;
      subSequencePromise(arg0: integer_t, arg1: integer_t): Promise<object_t>;
      // substring
      // public java.lang.String java.lang.String.substring(int,int)
      substring(arg0: integer_t, arg1: integer_t, cb: Callback<string>): void;
      substringSync(arg0: integer_t, arg1: integer_t): string;
      substringPromise(arg0: integer_t, arg1: integer_t): Promise<string>;
      // public java.lang.String java.lang.String.substring(int)
      substring(arg0: integer_t, cb: Callback<string>): void;
      substringSync(arg0: integer_t): string;
      substringPromise(arg0: integer_t): Promise<string>;
      // toCharArray
      // public char[] java.lang.String.toCharArray()
      toCharArray( cb: Callback<object_t[]>): void;
      toCharArraySync(): object_t[];
      toCharArrayPromise(): Promise<object_t[]>;
      // toLowerCase
      // public java.lang.String java.lang.String.toLowerCase(java.util.Locale)
      toLowerCase(arg0: object_t, cb: Callback<string>): void;
      toLowerCaseSync(arg0: object_t): string;
      toLowerCasePromise(arg0: object_t): Promise<string>;
      // public java.lang.String java.lang.String.toLowerCase()
      toLowerCase( cb: Callback<string>): void;
      toLowerCaseSync(): string;
      toLowerCasePromise(): Promise<string>;
      // toString
      // public java.lang.String java.lang.String.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // toUpperCase
      // public java.lang.String java.lang.String.toUpperCase(java.util.Locale)
      toUpperCase(arg0: object_t, cb: Callback<string>): void;
      toUpperCaseSync(arg0: object_t): string;
      toUpperCasePromise(arg0: object_t): Promise<string>;
      // public java.lang.String java.lang.String.toUpperCase()
      toUpperCase( cb: Callback<string>): void;
      toUpperCaseSync(): string;
      toUpperCasePromise(): Promise<string>;
      // trim
      // public java.lang.String java.lang.String.trim()
      trim( cb: Callback<string>): void;
      trimSync(): string;
      trimPromise(): Promise<string>;
      // valueOf
      // public static java.lang.String java.lang.String.valueOf(char[],int,int)
      // static method, see .Static
      // public static java.lang.String java.lang.String.valueOf(java.lang.Object)
      // static method, see .Static
      // public static java.lang.String java.lang.String.valueOf(char[])
      // static method, see .Static
      // public static java.lang.String java.lang.String.valueOf(boolean)
      // static method, see .Static
      // public static java.lang.String java.lang.String.valueOf(long)
      // static method, see .Static
      // public static java.lang.String java.lang.String.valueOf(int)
      // static method, see .Static
      // public static java.lang.String java.lang.String.valueOf(float)
      // static method, see .Static
      // public static java.lang.String java.lang.String.valueOf(double)
      // static method, see .Static
      // public static java.lang.String java.lang.String.valueOf(char)
      // static method, see .Static
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
      waitSync(arg0: object_t, arg1: integer_t): void;
      waitPromise(arg0: object_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: object_t, cb: Callback<void>): void;
      waitSync(arg0: object_t): void;
      waitPromise(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module String {
      export interface Static {
        new (arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t, arg3: object_t): java.lang.String;
        new (arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t, arg3: string_t): java.lang.String;
        new (arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t): java.lang.String;
        new (arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: array_t<object_t>, arg1: object_t): java.lang.String;
        new (arg0: array_t<object_t>, arg1: string_t): java.lang.String;
        new (arg0: array_t<object_t>, arg1: integer_t): java.lang.String;
        new (arg0: object_t): java.lang.String;
        new (arg0: object_t): java.lang.String;
        new (arg0: string_t): java.lang.String;
        new (arg0: array_t<object_t>): java.lang.String;
        new (arg0: array_t<object_t>): java.lang.String;
        new (): java.lang.String;
        // public static java.lang.String java.lang.String.copyValueOf(char[],int,int)
        copyValueOf(arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
        copyValueOfSync(arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t): string;
        copyValueOfPromise(arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t): Promise<string>;
        // public static java.lang.String java.lang.String.copyValueOf(char[])
        copyValueOf(arg0: array_t<object_t>, cb: Callback<string>): void;
        copyValueOfSync(arg0: array_t<object_t>): string;
        copyValueOfPromise(arg0: array_t<object_t>): Promise<string>;
        // public static java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object...)
        format(arg0: object_t, arg1: string_t, arg2: array_t<object_t>, cb: Callback<string>): void;
        formatSync(arg0: object_t, arg1: string_t, ...arg2: object_t[]): string;
        formatPromise(arg0: object_t, arg1: string_t, ...arg2: object_t[]): Promise<string>;
        // public static java.lang.String java.lang.String.format(java.lang.String,java.lang.Object...)
        format(arg0: string_t, arg1: array_t<object_t>, cb: Callback<string>): void;
        formatSync(arg0: string_t, ...arg1: object_t[]): string;
        formatPromise(arg0: string_t, ...arg1: object_t[]): Promise<string>;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence...)
        join(arg0: object_t, arg1: array_t<object_t>, cb: Callback<string>): void;
        joinSync(arg0: object_t, ...arg1: object_t[]): string;
        joinPromise(arg0: object_t, ...arg1: object_t[]): Promise<string>;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.Iterable<? extends java.lang.CharSequence>)
        join(arg0: object_t, arg1: object_t, cb: Callback<string>): void;
        joinSync(arg0: object_t, arg1: object_t): string;
        joinPromise(arg0: object_t, arg1: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char[],int,int)
        valueOf(arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
        valueOfSync(arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t): string;
        valueOfPromise(arg0: array_t<object_t>, arg1: integer_t, arg2: integer_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(java.lang.Object)
        valueOf(arg0: object_t, cb: Callback<string>): void;
        valueOfSync(arg0: object_t): string;
        valueOfPromise(arg0: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char[])
        valueOf(arg0: array_t<object_t>, cb: Callback<string>): void;
        valueOfSync(arg0: array_t<object_t>): string;
        valueOfPromise(arg0: array_t<object_t>): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(boolean)
        valueOf(arg0: boolean_t, cb: Callback<string>): void;
        valueOfSync(arg0: boolean_t): string;
        valueOfPromise(arg0: boolean_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(long)
        valueOf(arg0: object_t, cb: Callback<string>): void;
        valueOfSync(arg0: object_t): string;
        valueOfPromise(arg0: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(int)
        valueOf(arg0: integer_t, cb: Callback<string>): void;
        valueOfSync(arg0: integer_t): string;
        valueOfPromise(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(float)
        valueOf(arg0: object_t, cb: Callback<string>): void;
        valueOfSync(arg0: object_t): string;
        valueOfPromise(arg0: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(double)
        valueOf(arg0: object_t, cb: Callback<string>): void;
        valueOfSync(arg0: object_t): string;
        valueOfPromise(arg0: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char)
        valueOf(arg0: object_t, cb: Callback<string>): void;
        valueOfSync(arg0: object_t): string;
        valueOfPromise(arg0: object_t): Promise<string>;
        CASE_INSENSITIVE_ORDER: object_t;
      }
    }
  }

  export module java.lang.reflect {
    export interface Method extends Java.java.lang.reflect.Executable {
      // equals
      // public boolean java.lang.reflect.Method.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // getAnnotatedExceptionTypes
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedExceptionTypes()
      getAnnotatedExceptionTypes( cb: Callback<object_t[]>): void;
      getAnnotatedExceptionTypesSync(): object_t[];
      getAnnotatedExceptionTypesPromise(): Promise<object_t[]>;
      // getAnnotatedParameterTypes
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedParameterTypes()
      getAnnotatedParameterTypes( cb: Callback<object_t[]>): void;
      getAnnotatedParameterTypesSync(): object_t[];
      getAnnotatedParameterTypesPromise(): Promise<object_t[]>;
      // getAnnotatedReceiverType
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Executable.getAnnotatedReceiverType()
      getAnnotatedReceiverType( cb: Callback<object_t>): void;
      getAnnotatedReceiverTypeSync(): object_t;
      getAnnotatedReceiverTypePromise(): Promise<object_t>;
      // getAnnotatedReturnType
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Method.getAnnotatedReturnType()
      getAnnotatedReturnType( cb: Callback<object_t>): void;
      getAnnotatedReturnTypeSync(): object_t;
      getAnnotatedReturnTypePromise(): Promise<object_t>;
      // getAnnotation
      // public <T> T java.lang.reflect.Method.getAnnotation(java.lang.Class<T>)
      getAnnotation(arg0: Class, cb: Callback<object_t>): void;
      getAnnotationSync(arg0: Class): object_t;
      getAnnotationPromise(arg0: Class): Promise<object_t>;
      // getAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
      getAnnotations( cb: Callback<object_t[]>): void;
      getAnnotationsSync(): object_t[];
      getAnnotationsPromise(): Promise<object_t[]>;
      // getAnnotationsByType
      // public <T> T[] java.lang.reflect.Executable.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByType(arg0: Class, cb: Callback<object_t[]>): void;
      getAnnotationsByTypeSync(arg0: Class): object_t[];
      getAnnotationsByTypePromise(arg0: Class): Promise<object_t[]>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // getDeclaredAnnotation
      // public <T> T java.lang.reflect.AccessibleObject.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<object_t>): void;
      getDeclaredAnnotationSync(arg0: Class): object_t;
      getDeclaredAnnotationPromise(arg0: Class): Promise<object_t>;
      // getDeclaredAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.Method.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<object_t[]>): void;
      getDeclaredAnnotationsSync(): object_t[];
      getDeclaredAnnotationsPromise(): Promise<object_t[]>;
      // getDeclaredAnnotationsByType
      // public <T> T[] java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<object_t[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): object_t[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<object_t[]>;
      // getDeclaringClass
      // public java.lang.Class<?> java.lang.reflect.Method.getDeclaringClass()
      getDeclaringClass( cb: Callback<Class>): void;
      getDeclaringClassSync(): Class;
      getDeclaringClassPromise(): Promise<Class>;
      // getDefaultValue
      // public java.lang.Object java.lang.reflect.Method.getDefaultValue()
      getDefaultValue( cb: Callback<object_t>): void;
      getDefaultValueSync(): object_t;
      getDefaultValuePromise(): Promise<object_t>;
      // getExceptionTypes
      // public java.lang.Class<?>[] java.lang.reflect.Method.getExceptionTypes()
      getExceptionTypes( cb: Callback<Class[]>): void;
      getExceptionTypesSync(): Class[];
      getExceptionTypesPromise(): Promise<Class[]>;
      // getGenericExceptionTypes
      // public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericExceptionTypes()
      getGenericExceptionTypes( cb: Callback<Type[]>): void;
      getGenericExceptionTypesSync(): Type[];
      getGenericExceptionTypesPromise(): Promise<Type[]>;
      // getGenericParameterTypes
      // public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()
      getGenericParameterTypes( cb: Callback<Type[]>): void;
      getGenericParameterTypesSync(): Type[];
      getGenericParameterTypesPromise(): Promise<Type[]>;
      // getGenericReturnType
      // public java.lang.reflect.Type java.lang.reflect.Method.getGenericReturnType()
      getGenericReturnType( cb: Callback<Type>): void;
      getGenericReturnTypeSync(): Type;
      getGenericReturnTypePromise(): Promise<Type>;
      // getModifiers
      // public int java.lang.reflect.Method.getModifiers()
      getModifiers( cb: Callback<number>): void;
      getModifiersSync(): number;
      getModifiersPromise(): Promise<number>;
      // getName
      // public java.lang.String java.lang.reflect.Method.getName()
      getName( cb: Callback<string>): void;
      getNameSync(): string;
      getNamePromise(): Promise<string>;
      // getParameterAnnotations
      // public java.lang.annotation.Annotation[][] java.lang.reflect.Method.getParameterAnnotations()
      getParameterAnnotations( cb: Callback<object_t[][]>): void;
      getParameterAnnotationsSync(): object_t[][];
      getParameterAnnotationsPromise(): Promise<object_t[][]>;
      // getParameterCount
      // public int java.lang.reflect.Method.getParameterCount()
      getParameterCount( cb: Callback<number>): void;
      getParameterCountSync(): number;
      getParameterCountPromise(): Promise<number>;
      // getParameters
      // public java.lang.reflect.Parameter[] java.lang.reflect.Executable.getParameters()
      getParameters( cb: Callback<Parameter[]>): void;
      getParametersSync(): Parameter[];
      getParametersPromise(): Promise<Parameter[]>;
      // getParameterTypes
      // public java.lang.Class<?>[] java.lang.reflect.Method.getParameterTypes()
      getParameterTypes( cb: Callback<Class[]>): void;
      getParameterTypesSync(): Class[];
      getParameterTypesPromise(): Promise<Class[]>;
      // getReturnType
      // public java.lang.Class<?> java.lang.reflect.Method.getReturnType()
      getReturnType( cb: Callback<Class>): void;
      getReturnTypeSync(): Class;
      getReturnTypePromise(): Promise<Class>;
      // getTypeParameters
      // public java.lang.reflect.TypeVariable<java.lang.reflect.Method>[] java.lang.reflect.Method.getTypeParameters()
      getTypeParameters( cb: Callback<object_t[]>): void;
      getTypeParametersSync(): object_t[];
      getTypeParametersPromise(): Promise<object_t[]>;
      // hashCode
      // public int java.lang.reflect.Method.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // invoke
      // public java.lang.Object java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) throws java.lang.IllegalAccessException,java.lang.IllegalArgumentException,java.lang.reflect.InvocationTargetException
      invoke(arg0: object_t, arg1: array_t<object_t>, cb: Callback<object_t>): void;
      invokeSync(arg0: object_t, ...arg1: object_t[]): object_t;
      invokePromise(arg0: object_t, ...arg1: object_t[]): Promise<object_t>;
      // isAccessible
      // public boolean java.lang.reflect.AccessibleObject.isAccessible()
      isAccessible( cb: Callback<boolean>): void;
      isAccessibleSync(): boolean;
      isAccessiblePromise(): Promise<boolean>;
      // isAnnotationPresent
      // public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
      // isBridge
      // public boolean java.lang.reflect.Method.isBridge()
      isBridge( cb: Callback<boolean>): void;
      isBridgeSync(): boolean;
      isBridgePromise(): Promise<boolean>;
      // isDefault
      // public boolean java.lang.reflect.Method.isDefault()
      isDefault( cb: Callback<boolean>): void;
      isDefaultSync(): boolean;
      isDefaultPromise(): Promise<boolean>;
      // isSynthetic
      // public boolean java.lang.reflect.Method.isSynthetic()
      isSynthetic( cb: Callback<boolean>): void;
      isSyntheticSync(): boolean;
      isSyntheticPromise(): Promise<boolean>;
      // isVarArgs
      // public boolean java.lang.reflect.Method.isVarArgs()
      isVarArgs( cb: Callback<boolean>): void;
      isVarArgsSync(): boolean;
      isVarArgsPromise(): Promise<boolean>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // setAccessible
      // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
      // static method, see .Static
      // public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException
      setAccessible(arg0: boolean_t, cb: Callback<void>): void;
      setAccessibleSync(arg0: boolean_t): void;
      setAccessiblePromise(arg0: boolean_t): Promise<void>;
      // toGenericString
      // public java.lang.String java.lang.reflect.Method.toGenericString()
      toGenericString( cb: Callback<string>): void;
      toGenericStringSync(): string;
      toGenericStringPromise(): Promise<string>;
      // toString
      // public java.lang.String java.lang.reflect.Method.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
      waitSync(arg0: object_t, arg1: integer_t): void;
      waitPromise(arg0: object_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: object_t, cb: Callback<void>): void;
      waitSync(arg0: object_t): void;
      waitPromise(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module Method {
      export interface Static {
        // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
        setAccessible(arg0: array_t<AccessibleObject>, arg1: boolean_t, cb: Callback<void>): void;
        setAccessibleSync(arg0: array_t<AccessibleObject>, arg1: boolean_t): void;
        setAccessiblePromise(arg0: array_t<AccessibleObject>, arg1: boolean_t): Promise<void>;
        PUBLIC: number;
        DECLARED: number;
      }
    }
  }

  export module java.lang {
    export interface Integer extends Java.java.lang.Object {
      // bitCount
      // public static int java.lang.Integer.bitCount(int)
      // static method, see .Static
      // byteValue
      // public byte java.lang.Integer.byteValue()
      byteValue( cb: Callback<object_t>): void;
      byteValueSync(): object_t;
      byteValuePromise(): Promise<object_t>;
      // compare
      // public static int java.lang.Integer.compare(int,int)
      // static method, see .Static
      // compareTo
      // public int java.lang.Integer.compareTo(java.lang.Integer)
      compareTo(arg0: integer_t, cb: Callback<number>): void;
      compareToSync(arg0: integer_t): number;
      compareToPromise(arg0: integer_t): Promise<number>;
      // public int java.lang.Integer.compareTo(java.lang.Object)
      compareTo(arg0: object_t, cb: Callback<number>): void;
      compareToSync(arg0: object_t): number;
      compareToPromise(arg0: object_t): Promise<number>;
      // compareUnsigned
      // public static int java.lang.Integer.compareUnsigned(int,int)
      // static method, see .Static
      // decode
      // public static java.lang.Integer java.lang.Integer.decode(java.lang.String) throws java.lang.NumberFormatException
      // static method, see .Static
      // divideUnsigned
      // public static int java.lang.Integer.divideUnsigned(int,int)
      // static method, see .Static
      // doubleValue
      // public double java.lang.Integer.doubleValue()
      doubleValue( cb: Callback<object_t>): void;
      doubleValueSync(): object_t;
      doubleValuePromise(): Promise<object_t>;
      // equals
      // public boolean java.lang.Integer.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // floatValue
      // public float java.lang.Integer.floatValue()
      floatValue( cb: Callback<object_t>): void;
      floatValueSync(): object_t;
      floatValuePromise(): Promise<object_t>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // getInteger
      // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,java.lang.Integer)
      // static method, see .Static
      // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,int)
      // static method, see .Static
      // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String)
      // static method, see .Static
      // hashCode
      // public static int java.lang.Integer.hashCode(int)
      // static method, see .Static
      // public int java.lang.Integer.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // highestOneBit
      // public static int java.lang.Integer.highestOneBit(int)
      // static method, see .Static
      // intValue
      // public int java.lang.Integer.intValue()
      intValue( cb: Callback<number>): void;
      intValueSync(): number;
      intValuePromise(): Promise<number>;
      // longValue
      // public long java.lang.Integer.longValue()
      longValue( cb: Callback<object_t>): void;
      longValueSync(): object_t;
      longValuePromise(): Promise<object_t>;
      // lowestOneBit
      // public static int java.lang.Integer.lowestOneBit(int)
      // static method, see .Static
      // max
      // public static int java.lang.Integer.max(int,int)
      // static method, see .Static
      // min
      // public static int java.lang.Integer.min(int,int)
      // static method, see .Static
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // numberOfLeadingZeros
      // public static int java.lang.Integer.numberOfLeadingZeros(int)
      // static method, see .Static
      // numberOfTrailingZeros
      // public static int java.lang.Integer.numberOfTrailingZeros(int)
      // static method, see .Static
      // parseInt
      // public static int java.lang.Integer.parseInt(java.lang.String,int) throws java.lang.NumberFormatException
      // static method, see .Static
      // public static int java.lang.Integer.parseInt(java.lang.String) throws java.lang.NumberFormatException
      // static method, see .Static
      // parseUnsignedInt
      // public static int java.lang.Integer.parseUnsignedInt(java.lang.String,int) throws java.lang.NumberFormatException
      // static method, see .Static
      // public static int java.lang.Integer.parseUnsignedInt(java.lang.String) throws java.lang.NumberFormatException
      // static method, see .Static
      // remainderUnsigned
      // public static int java.lang.Integer.remainderUnsigned(int,int)
      // static method, see .Static
      // reverse
      // public static int java.lang.Integer.reverse(int)
      // static method, see .Static
      // reverseBytes
      // public static int java.lang.Integer.reverseBytes(int)
      // static method, see .Static
      // rotateLeft
      // public static int java.lang.Integer.rotateLeft(int,int)
      // static method, see .Static
      // rotateRight
      // public static int java.lang.Integer.rotateRight(int,int)
      // static method, see .Static
      // shortValue
      // public short java.lang.Integer.shortValue()
      shortValue( cb: Callback<object_t>): void;
      shortValueSync(): object_t;
      shortValuePromise(): Promise<object_t>;
      // signum
      // public static int java.lang.Integer.signum(int)
      // static method, see .Static
      // sum
      // public static int java.lang.Integer.sum(int,int)
      // static method, see .Static
      // toBinaryString
      // public static java.lang.String java.lang.Integer.toBinaryString(int)
      // static method, see .Static
      // toHexString
      // public static java.lang.String java.lang.Integer.toHexString(int)
      // static method, see .Static
      // toOctalString
      // public static java.lang.String java.lang.Integer.toOctalString(int)
      // static method, see .Static
      // toString
      // public static java.lang.String java.lang.Integer.toString(int,int)
      // static method, see .Static
      // public static java.lang.String java.lang.Integer.toString(int)
      // static method, see .Static
      // public java.lang.String java.lang.Integer.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // toUnsignedLong
      // public static long java.lang.Integer.toUnsignedLong(int)
      // static method, see .Static
      // toUnsignedString
      // public static java.lang.String java.lang.Integer.toUnsignedString(int,int)
      // static method, see .Static
      // public static java.lang.String java.lang.Integer.toUnsignedString(int)
      // static method, see .Static
      // valueOf
      // public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
      // static method, see .Static
      // public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String) throws java.lang.NumberFormatException
      // static method, see .Static
      // public static java.lang.Integer java.lang.Integer.valueOf(int)
      // static method, see .Static
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
      waitSync(arg0: object_t, arg1: integer_t): void;
      waitPromise(arg0: object_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: object_t, cb: Callback<void>): void;
      waitSync(arg0: object_t): void;
      waitPromise(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module Integer {
      export interface Static {
        new (arg0: string_t): java.lang.Integer;
        new (arg0: integer_t): java.lang.Integer;
        // public static int java.lang.Integer.bitCount(int)
        bitCount(arg0: integer_t, cb: Callback<number>): void;
        bitCountSync(arg0: integer_t): number;
        bitCountPromise(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.compare(int,int)
        compare(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        compareSync(arg0: integer_t, arg1: integer_t): number;
        comparePromise(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.compareUnsigned(int,int)
        compareUnsigned(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        compareUnsignedSync(arg0: integer_t, arg1: integer_t): number;
        compareUnsignedPromise(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.decode(java.lang.String) throws java.lang.NumberFormatException
        decode(arg0: string_t, cb: Callback<number>): void;
        decodeSync(arg0: string_t): number;
        decodePromise(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.divideUnsigned(int,int)
        divideUnsigned(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        divideUnsignedSync(arg0: integer_t, arg1: integer_t): number;
        divideUnsignedPromise(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,java.lang.Integer)
        getInteger(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
        getIntegerSync(arg0: string_t, arg1: integer_t): number;
        getIntegerPromise(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,int)
        getInteger(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
        getIntegerSync(arg0: string_t, arg1: integer_t): number;
        getIntegerPromise(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String)
        getInteger(arg0: string_t, cb: Callback<number>): void;
        getIntegerSync(arg0: string_t): number;
        getIntegerPromise(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.hashCode(int)
        hashCode(arg0: integer_t, cb: Callback<number>): void;
        hashCodeSync(arg0: integer_t): number;
        hashCodePromise(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.highestOneBit(int)
        highestOneBit(arg0: integer_t, cb: Callback<number>): void;
        highestOneBitSync(arg0: integer_t): number;
        highestOneBitPromise(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.lowestOneBit(int)
        lowestOneBit(arg0: integer_t, cb: Callback<number>): void;
        lowestOneBitSync(arg0: integer_t): number;
        lowestOneBitPromise(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.max(int,int)
        max(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        maxSync(arg0: integer_t, arg1: integer_t): number;
        maxPromise(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.min(int,int)
        min(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        minSync(arg0: integer_t, arg1: integer_t): number;
        minPromise(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.numberOfLeadingZeros(int)
        numberOfLeadingZeros(arg0: integer_t, cb: Callback<number>): void;
        numberOfLeadingZerosSync(arg0: integer_t): number;
        numberOfLeadingZerosPromise(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.numberOfTrailingZeros(int)
        numberOfTrailingZeros(arg0: integer_t, cb: Callback<number>): void;
        numberOfTrailingZerosSync(arg0: integer_t): number;
        numberOfTrailingZerosPromise(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.parseInt(java.lang.String,int) throws java.lang.NumberFormatException
        parseInt(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
        parseIntSync(arg0: string_t, arg1: integer_t): number;
        parseIntPromise(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.parseInt(java.lang.String) throws java.lang.NumberFormatException
        parseInt(arg0: string_t, cb: Callback<number>): void;
        parseIntSync(arg0: string_t): number;
        parseIntPromise(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.parseUnsignedInt(java.lang.String,int) throws java.lang.NumberFormatException
        parseUnsignedInt(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
        parseUnsignedIntSync(arg0: string_t, arg1: integer_t): number;
        parseUnsignedIntPromise(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.parseUnsignedInt(java.lang.String) throws java.lang.NumberFormatException
        parseUnsignedInt(arg0: string_t, cb: Callback<number>): void;
        parseUnsignedIntSync(arg0: string_t): number;
        parseUnsignedIntPromise(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.remainderUnsigned(int,int)
        remainderUnsigned(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        remainderUnsignedSync(arg0: integer_t, arg1: integer_t): number;
        remainderUnsignedPromise(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.reverse(int)
        reverse(arg0: integer_t, cb: Callback<number>): void;
        reverseSync(arg0: integer_t): number;
        reversePromise(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.reverseBytes(int)
        reverseBytes(arg0: integer_t, cb: Callback<number>): void;
        reverseBytesSync(arg0: integer_t): number;
        reverseBytesPromise(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.rotateLeft(int,int)
        rotateLeft(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        rotateLeftSync(arg0: integer_t, arg1: integer_t): number;
        rotateLeftPromise(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.rotateRight(int,int)
        rotateRight(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        rotateRightSync(arg0: integer_t, arg1: integer_t): number;
        rotateRightPromise(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.signum(int)
        signum(arg0: integer_t, cb: Callback<number>): void;
        signumSync(arg0: integer_t): number;
        signumPromise(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.sum(int,int)
        sum(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        sumSync(arg0: integer_t, arg1: integer_t): number;
        sumPromise(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static java.lang.String java.lang.Integer.toBinaryString(int)
        toBinaryString(arg0: integer_t, cb: Callback<string>): void;
        toBinaryStringSync(arg0: integer_t): string;
        toBinaryStringPromise(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toHexString(int)
        toHexString(arg0: integer_t, cb: Callback<string>): void;
        toHexStringSync(arg0: integer_t): string;
        toHexStringPromise(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toOctalString(int)
        toOctalString(arg0: integer_t, cb: Callback<string>): void;
        toOctalStringSync(arg0: integer_t): string;
        toOctalStringPromise(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toString(int,int)
        toString(arg0: integer_t, arg1: integer_t, cb: Callback<string>): void;
        toStringSync(arg0: integer_t, arg1: integer_t): string;
        toStringPromise(arg0: integer_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toString(int)
        toString(arg0: integer_t, cb: Callback<string>): void;
        toStringSync(arg0: integer_t): string;
        toStringPromise(arg0: integer_t): Promise<string>;
        // public static long java.lang.Integer.toUnsignedLong(int)
        toUnsignedLong(arg0: integer_t, cb: Callback<object_t>): void;
        toUnsignedLongSync(arg0: integer_t): object_t;
        toUnsignedLongPromise(arg0: integer_t): Promise<object_t>;
        // public static java.lang.String java.lang.Integer.toUnsignedString(int,int)
        toUnsignedString(arg0: integer_t, arg1: integer_t, cb: Callback<string>): void;
        toUnsignedStringSync(arg0: integer_t, arg1: integer_t): string;
        toUnsignedStringPromise(arg0: integer_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toUnsignedString(int)
        toUnsignedString(arg0: integer_t, cb: Callback<string>): void;
        toUnsignedStringSync(arg0: integer_t): string;
        toUnsignedStringPromise(arg0: integer_t): Promise<string>;
        // public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
        valueOf(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
        valueOfSync(arg0: string_t, arg1: integer_t): number;
        valueOfPromise(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOf(arg0: string_t, cb: Callback<number>): void;
        valueOfSync(arg0: string_t): number;
        valueOfPromise(arg0: string_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.valueOf(int)
        valueOf(arg0: integer_t, cb: Callback<number>): void;
        valueOfSync(arg0: integer_t): number;
        valueOfPromise(arg0: integer_t): Promise<number>;
        MIN_VALUE: number;
        MAX_VALUE: number;
        TYPE: Class;
        SIZE: number;
        BYTES: number;
      }
    }
  }

  export module java.lang.reflect {
    export interface Executable extends Java.java.lang.reflect.AccessibleObject {
      // equals
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // getAnnotatedExceptionTypes
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedExceptionTypes()
      getAnnotatedExceptionTypes( cb: Callback<object_t[]>): void;
      getAnnotatedExceptionTypesSync(): object_t[];
      getAnnotatedExceptionTypesPromise(): Promise<object_t[]>;
      // getAnnotatedParameterTypes
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedParameterTypes()
      getAnnotatedParameterTypes( cb: Callback<object_t[]>): void;
      getAnnotatedParameterTypesSync(): object_t[];
      getAnnotatedParameterTypesPromise(): Promise<object_t[]>;
      // getAnnotatedReceiverType
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Executable.getAnnotatedReceiverType()
      getAnnotatedReceiverType( cb: Callback<object_t>): void;
      getAnnotatedReceiverTypeSync(): object_t;
      getAnnotatedReceiverTypePromise(): Promise<object_t>;
      // getAnnotatedReturnType
      // public abstract java.lang.reflect.AnnotatedType java.lang.reflect.Executable.getAnnotatedReturnType()
      getAnnotatedReturnType( cb: Callback<object_t>): void;
      getAnnotatedReturnTypeSync(): object_t;
      getAnnotatedReturnTypePromise(): Promise<object_t>;
      // getAnnotation
      // public <T> T java.lang.reflect.Executable.getAnnotation(java.lang.Class<T>)
      getAnnotation(arg0: Class, cb: Callback<object_t>): void;
      getAnnotationSync(arg0: Class): object_t;
      getAnnotationPromise(arg0: Class): Promise<object_t>;
      // getAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
      getAnnotations( cb: Callback<object_t[]>): void;
      getAnnotationsSync(): object_t[];
      getAnnotationsPromise(): Promise<object_t[]>;
      // getAnnotationsByType
      // public <T> T[] java.lang.reflect.Executable.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByType(arg0: Class, cb: Callback<object_t[]>): void;
      getAnnotationsByTypeSync(arg0: Class): object_t[];
      getAnnotationsByTypePromise(arg0: Class): Promise<object_t[]>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // getDeclaredAnnotation
      // public <T> T java.lang.reflect.AccessibleObject.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<object_t>): void;
      getDeclaredAnnotationSync(arg0: Class): object_t;
      getDeclaredAnnotationPromise(arg0: Class): Promise<object_t>;
      // getDeclaredAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.Executable.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<object_t[]>): void;
      getDeclaredAnnotationsSync(): object_t[];
      getDeclaredAnnotationsPromise(): Promise<object_t[]>;
      // getDeclaredAnnotationsByType
      // public <T> T[] java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<object_t[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): object_t[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<object_t[]>;
      // getDeclaringClass
      // public abstract java.lang.Class<?> java.lang.reflect.Executable.getDeclaringClass()
      getDeclaringClass( cb: Callback<Class>): void;
      getDeclaringClassSync(): Class;
      getDeclaringClassPromise(): Promise<Class>;
      // getExceptionTypes
      // public abstract java.lang.Class<?>[] java.lang.reflect.Executable.getExceptionTypes()
      getExceptionTypes( cb: Callback<Class[]>): void;
      getExceptionTypesSync(): Class[];
      getExceptionTypesPromise(): Promise<Class[]>;
      // getGenericExceptionTypes
      // public java.lang.reflect.Type[] java.lang.reflect.Executable.getGenericExceptionTypes()
      getGenericExceptionTypes( cb: Callback<Type[]>): void;
      getGenericExceptionTypesSync(): Type[];
      getGenericExceptionTypesPromise(): Promise<Type[]>;
      // getGenericParameterTypes
      // public java.lang.reflect.Type[] java.lang.reflect.Executable.getGenericParameterTypes()
      getGenericParameterTypes( cb: Callback<Type[]>): void;
      getGenericParameterTypesSync(): Type[];
      getGenericParameterTypesPromise(): Promise<Type[]>;
      // getModifiers
      // public abstract int java.lang.reflect.Executable.getModifiers()
      getModifiers( cb: Callback<number>): void;
      getModifiersSync(): number;
      getModifiersPromise(): Promise<number>;
      // getName
      // public abstract java.lang.String java.lang.reflect.Executable.getName()
      getName( cb: Callback<string>): void;
      getNameSync(): string;
      getNamePromise(): Promise<string>;
      // getParameterAnnotations
      // public abstract java.lang.annotation.Annotation[][] java.lang.reflect.Executable.getParameterAnnotations()
      getParameterAnnotations( cb: Callback<object_t[][]>): void;
      getParameterAnnotationsSync(): object_t[][];
      getParameterAnnotationsPromise(): Promise<object_t[][]>;
      // getParameterCount
      // public int java.lang.reflect.Executable.getParameterCount()
      getParameterCount( cb: Callback<number>): void;
      getParameterCountSync(): number;
      getParameterCountPromise(): Promise<number>;
      // getParameters
      // public java.lang.reflect.Parameter[] java.lang.reflect.Executable.getParameters()
      getParameters( cb: Callback<Parameter[]>): void;
      getParametersSync(): Parameter[];
      getParametersPromise(): Promise<Parameter[]>;
      // getParameterTypes
      // public abstract java.lang.Class<?>[] java.lang.reflect.Executable.getParameterTypes()
      getParameterTypes( cb: Callback<Class[]>): void;
      getParameterTypesSync(): Class[];
      getParameterTypesPromise(): Promise<Class[]>;
      // getTypeParameters
      // public abstract java.lang.reflect.TypeVariable<?>[] java.lang.reflect.Executable.getTypeParameters()
      getTypeParameters( cb: Callback<object_t[]>): void;
      getTypeParametersSync(): object_t[];
      getTypeParametersPromise(): Promise<object_t[]>;
      // hashCode
      // public native int java.lang.Object.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // isAccessible
      // public boolean java.lang.reflect.AccessibleObject.isAccessible()
      isAccessible( cb: Callback<boolean>): void;
      isAccessibleSync(): boolean;
      isAccessiblePromise(): Promise<boolean>;
      // isAnnotationPresent
      // public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
      // isSynthetic
      // public boolean java.lang.reflect.Executable.isSynthetic()
      isSynthetic( cb: Callback<boolean>): void;
      isSyntheticSync(): boolean;
      isSyntheticPromise(): Promise<boolean>;
      // isVarArgs
      // public boolean java.lang.reflect.Executable.isVarArgs()
      isVarArgs( cb: Callback<boolean>): void;
      isVarArgsSync(): boolean;
      isVarArgsPromise(): Promise<boolean>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // setAccessible
      // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
      // static method, see .Static
      // public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException
      setAccessible(arg0: boolean_t, cb: Callback<void>): void;
      setAccessibleSync(arg0: boolean_t): void;
      setAccessiblePromise(arg0: boolean_t): Promise<void>;
      // toGenericString
      // public abstract java.lang.String java.lang.reflect.Executable.toGenericString()
      toGenericString( cb: Callback<string>): void;
      toGenericStringSync(): string;
      toGenericStringPromise(): Promise<string>;
      // toString
      // public java.lang.String java.lang.Object.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
      waitSync(arg0: object_t, arg1: integer_t): void;
      waitPromise(arg0: object_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: object_t, cb: Callback<void>): void;
      waitSync(arg0: object_t): void;
      waitPromise(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module Executable {
      export interface Static {
        // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
        setAccessible(arg0: array_t<AccessibleObject>, arg1: boolean_t, cb: Callback<void>): void;
        setAccessibleSync(arg0: array_t<AccessibleObject>, arg1: boolean_t): void;
        setAccessiblePromise(arg0: array_t<AccessibleObject>, arg1: boolean_t): Promise<void>;
        PUBLIC: number;
        DECLARED: number;
      }
    }
  }

  export module java.lang {
    export interface Object  {
      // equals
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // hashCode
      // public native int java.lang.Object.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // toString
      // public java.lang.String java.lang.Object.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
      waitSync(arg0: object_t, arg1: integer_t): void;
      waitPromise(arg0: object_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: object_t, cb: Callback<void>): void;
      waitSync(arg0: object_t): void;
      waitPromise(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module Object {
      export interface Static {
        new (): java.lang.Object;
      }
    }
  }

  export module java.lang {
    export interface Boolean extends Java.java.lang.Object {
      // booleanValue
      // public boolean java.lang.Boolean.booleanValue()
      booleanValue( cb: Callback<boolean>): void;
      booleanValueSync(): boolean;
      booleanValuePromise(): Promise<boolean>;
      // compare
      // public static int java.lang.Boolean.compare(boolean,boolean)
      // static method, see .Static
      // compareTo
      // public int java.lang.Boolean.compareTo(java.lang.Boolean)
      compareTo(arg0: boolean_t, cb: Callback<number>): void;
      compareToSync(arg0: boolean_t): number;
      compareToPromise(arg0: boolean_t): Promise<number>;
      // public int java.lang.Boolean.compareTo(java.lang.Object)
      compareTo(arg0: object_t, cb: Callback<number>): void;
      compareToSync(arg0: object_t): number;
      compareToPromise(arg0: object_t): Promise<number>;
      // equals
      // public boolean java.lang.Boolean.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // getBoolean
      // public static boolean java.lang.Boolean.getBoolean(java.lang.String)
      // static method, see .Static
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // hashCode
      // public static int java.lang.Boolean.hashCode(boolean)
      // static method, see .Static
      // public int java.lang.Boolean.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // logicalAnd
      // public static boolean java.lang.Boolean.logicalAnd(boolean,boolean)
      // static method, see .Static
      // logicalOr
      // public static boolean java.lang.Boolean.logicalOr(boolean,boolean)
      // static method, see .Static
      // logicalXor
      // public static boolean java.lang.Boolean.logicalXor(boolean,boolean)
      // static method, see .Static
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // parseBoolean
      // public static boolean java.lang.Boolean.parseBoolean(java.lang.String)
      // static method, see .Static
      // toString
      // public static java.lang.String java.lang.Boolean.toString(boolean)
      // static method, see .Static
      // public java.lang.String java.lang.Boolean.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // valueOf
      // public static java.lang.Boolean java.lang.Boolean.valueOf(java.lang.String)
      // static method, see .Static
      // public static java.lang.Boolean java.lang.Boolean.valueOf(boolean)
      // static method, see .Static
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
      waitSync(arg0: object_t, arg1: integer_t): void;
      waitPromise(arg0: object_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: object_t, cb: Callback<void>): void;
      waitSync(arg0: object_t): void;
      waitPromise(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module Boolean {
      export interface Static {
        new (arg0: string_t): java.lang.Boolean;
        new (arg0: boolean_t): java.lang.Boolean;
        // public static int java.lang.Boolean.compare(boolean,boolean)
        compare(arg0: boolean_t, arg1: boolean_t, cb: Callback<number>): void;
        compareSync(arg0: boolean_t, arg1: boolean_t): number;
        comparePromise(arg0: boolean_t, arg1: boolean_t): Promise<number>;
        // public static boolean java.lang.Boolean.getBoolean(java.lang.String)
        getBoolean(arg0: string_t, cb: Callback<boolean>): void;
        getBooleanSync(arg0: string_t): boolean;
        getBooleanPromise(arg0: string_t): Promise<boolean>;
        // public static int java.lang.Boolean.hashCode(boolean)
        hashCode(arg0: boolean_t, cb: Callback<number>): void;
        hashCodeSync(arg0: boolean_t): number;
        hashCodePromise(arg0: boolean_t): Promise<number>;
        // public static boolean java.lang.Boolean.logicalAnd(boolean,boolean)
        logicalAnd(arg0: boolean_t, arg1: boolean_t, cb: Callback<boolean>): void;
        logicalAndSync(arg0: boolean_t, arg1: boolean_t): boolean;
        logicalAndPromise(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
        // public static boolean java.lang.Boolean.logicalOr(boolean,boolean)
        logicalOr(arg0: boolean_t, arg1: boolean_t, cb: Callback<boolean>): void;
        logicalOrSync(arg0: boolean_t, arg1: boolean_t): boolean;
        logicalOrPromise(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
        // public static boolean java.lang.Boolean.logicalXor(boolean,boolean)
        logicalXor(arg0: boolean_t, arg1: boolean_t, cb: Callback<boolean>): void;
        logicalXorSync(arg0: boolean_t, arg1: boolean_t): boolean;
        logicalXorPromise(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
        // public static boolean java.lang.Boolean.parseBoolean(java.lang.String)
        parseBoolean(arg0: string_t, cb: Callback<boolean>): void;
        parseBooleanSync(arg0: string_t): boolean;
        parseBooleanPromise(arg0: string_t): Promise<boolean>;
        // public static java.lang.String java.lang.Boolean.toString(boolean)
        toString(arg0: boolean_t, cb: Callback<string>): void;
        toStringSync(arg0: boolean_t): string;
        toStringPromise(arg0: boolean_t): Promise<string>;
        // public static java.lang.Boolean java.lang.Boolean.valueOf(java.lang.String)
        valueOf(arg0: string_t, cb: Callback<boolean>): void;
        valueOfSync(arg0: string_t): boolean;
        valueOfPromise(arg0: string_t): Promise<boolean>;
        // public static java.lang.Boolean java.lang.Boolean.valueOf(boolean)
        valueOf(arg0: boolean_t, cb: Callback<boolean>): void;
        valueOfSync(arg0: boolean_t): boolean;
        valueOfPromise(arg0: boolean_t): Promise<boolean>;
        TRUE: boolean;
        FALSE: boolean;
        TYPE: Class;
      }
    }
  }

  export module java.lang.reflect {
    export interface Constructor extends Java.java.lang.reflect.Executable {
      // equals
      // public boolean java.lang.reflect.Constructor.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // getAnnotatedExceptionTypes
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedExceptionTypes()
      getAnnotatedExceptionTypes( cb: Callback<object_t[]>): void;
      getAnnotatedExceptionTypesSync(): object_t[];
      getAnnotatedExceptionTypesPromise(): Promise<object_t[]>;
      // getAnnotatedParameterTypes
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedParameterTypes()
      getAnnotatedParameterTypes( cb: Callback<object_t[]>): void;
      getAnnotatedParameterTypesSync(): object_t[];
      getAnnotatedParameterTypesPromise(): Promise<object_t[]>;
      // getAnnotatedReceiverType
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Constructor.getAnnotatedReceiverType()
      getAnnotatedReceiverType( cb: Callback<object_t>): void;
      getAnnotatedReceiverTypeSync(): object_t;
      getAnnotatedReceiverTypePromise(): Promise<object_t>;
      // getAnnotatedReturnType
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Constructor.getAnnotatedReturnType()
      getAnnotatedReturnType( cb: Callback<object_t>): void;
      getAnnotatedReturnTypeSync(): object_t;
      getAnnotatedReturnTypePromise(): Promise<object_t>;
      // getAnnotation
      // public <T> T java.lang.reflect.Constructor.getAnnotation(java.lang.Class<T>)
      getAnnotation(arg0: Class, cb: Callback<object_t>): void;
      getAnnotationSync(arg0: Class): object_t;
      getAnnotationPromise(arg0: Class): Promise<object_t>;
      // getAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
      getAnnotations( cb: Callback<object_t[]>): void;
      getAnnotationsSync(): object_t[];
      getAnnotationsPromise(): Promise<object_t[]>;
      // getAnnotationsByType
      // public <T> T[] java.lang.reflect.Executable.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByType(arg0: Class, cb: Callback<object_t[]>): void;
      getAnnotationsByTypeSync(arg0: Class): object_t[];
      getAnnotationsByTypePromise(arg0: Class): Promise<object_t[]>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // getDeclaredAnnotation
      // public <T> T java.lang.reflect.AccessibleObject.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<object_t>): void;
      getDeclaredAnnotationSync(arg0: Class): object_t;
      getDeclaredAnnotationPromise(arg0: Class): Promise<object_t>;
      // getDeclaredAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.Constructor.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<object_t[]>): void;
      getDeclaredAnnotationsSync(): object_t[];
      getDeclaredAnnotationsPromise(): Promise<object_t[]>;
      // getDeclaredAnnotationsByType
      // public <T> T[] java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<object_t[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): object_t[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<object_t[]>;
      // getDeclaringClass
      // public java.lang.Class<T> java.lang.reflect.Constructor.getDeclaringClass()
      getDeclaringClass( cb: Callback<Class>): void;
      getDeclaringClassSync(): Class;
      getDeclaringClassPromise(): Promise<Class>;
      // getExceptionTypes
      // public java.lang.Class<?>[] java.lang.reflect.Constructor.getExceptionTypes()
      getExceptionTypes( cb: Callback<Class[]>): void;
      getExceptionTypesSync(): Class[];
      getExceptionTypesPromise(): Promise<Class[]>;
      // getGenericExceptionTypes
      // public java.lang.reflect.Type[] java.lang.reflect.Constructor.getGenericExceptionTypes()
      getGenericExceptionTypes( cb: Callback<Type[]>): void;
      getGenericExceptionTypesSync(): Type[];
      getGenericExceptionTypesPromise(): Promise<Type[]>;
      // getGenericParameterTypes
      // public java.lang.reflect.Type[] java.lang.reflect.Constructor.getGenericParameterTypes()
      getGenericParameterTypes( cb: Callback<Type[]>): void;
      getGenericParameterTypesSync(): Type[];
      getGenericParameterTypesPromise(): Promise<Type[]>;
      // getModifiers
      // public int java.lang.reflect.Constructor.getModifiers()
      getModifiers( cb: Callback<number>): void;
      getModifiersSync(): number;
      getModifiersPromise(): Promise<number>;
      // getName
      // public java.lang.String java.lang.reflect.Constructor.getName()
      getName( cb: Callback<string>): void;
      getNameSync(): string;
      getNamePromise(): Promise<string>;
      // getParameterAnnotations
      // public java.lang.annotation.Annotation[][] java.lang.reflect.Constructor.getParameterAnnotations()
      getParameterAnnotations( cb: Callback<object_t[][]>): void;
      getParameterAnnotationsSync(): object_t[][];
      getParameterAnnotationsPromise(): Promise<object_t[][]>;
      // getParameterCount
      // public int java.lang.reflect.Constructor.getParameterCount()
      getParameterCount( cb: Callback<number>): void;
      getParameterCountSync(): number;
      getParameterCountPromise(): Promise<number>;
      // getParameters
      // public java.lang.reflect.Parameter[] java.lang.reflect.Executable.getParameters()
      getParameters( cb: Callback<Parameter[]>): void;
      getParametersSync(): Parameter[];
      getParametersPromise(): Promise<Parameter[]>;
      // getParameterTypes
      // public java.lang.Class<?>[] java.lang.reflect.Constructor.getParameterTypes()
      getParameterTypes( cb: Callback<Class[]>): void;
      getParameterTypesSync(): Class[];
      getParameterTypesPromise(): Promise<Class[]>;
      // getTypeParameters
      // public java.lang.reflect.TypeVariable<java.lang.reflect.Constructor<T>>[] java.lang.reflect.Constructor.getTypeParameters()
      getTypeParameters( cb: Callback<object_t[]>): void;
      getTypeParametersSync(): object_t[];
      getTypeParametersPromise(): Promise<object_t[]>;
      // hashCode
      // public int java.lang.reflect.Constructor.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // isAccessible
      // public boolean java.lang.reflect.AccessibleObject.isAccessible()
      isAccessible( cb: Callback<boolean>): void;
      isAccessibleSync(): boolean;
      isAccessiblePromise(): Promise<boolean>;
      // isAnnotationPresent
      // public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
      // isSynthetic
      // public boolean java.lang.reflect.Constructor.isSynthetic()
      isSynthetic( cb: Callback<boolean>): void;
      isSyntheticSync(): boolean;
      isSyntheticPromise(): Promise<boolean>;
      // isVarArgs
      // public boolean java.lang.reflect.Constructor.isVarArgs()
      isVarArgs( cb: Callback<boolean>): void;
      isVarArgsSync(): boolean;
      isVarArgsPromise(): Promise<boolean>;
      // newInstance
      // public T java.lang.reflect.Constructor.newInstance(java.lang.Object...) throws java.lang.InstantiationException,java.lang.IllegalAccessException,java.lang.IllegalArgumentException,java.lang.reflect.InvocationTargetException
      newInstance(arg0: array_t<object_t>, cb: Callback<object_t>): void;
      newInstanceSync(...arg0: object_t[]): object_t;
      newInstancePromise(...arg0: object_t[]): Promise<object_t>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // setAccessible
      // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
      // static method, see .Static
      // public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException
      setAccessible(arg0: boolean_t, cb: Callback<void>): void;
      setAccessibleSync(arg0: boolean_t): void;
      setAccessiblePromise(arg0: boolean_t): Promise<void>;
      // toGenericString
      // public java.lang.String java.lang.reflect.Constructor.toGenericString()
      toGenericString( cb: Callback<string>): void;
      toGenericStringSync(): string;
      toGenericStringPromise(): Promise<string>;
      // toString
      // public java.lang.String java.lang.reflect.Constructor.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
      waitSync(arg0: object_t, arg1: integer_t): void;
      waitPromise(arg0: object_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: object_t, cb: Callback<void>): void;
      waitSync(arg0: object_t): void;
      waitPromise(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module Constructor {
      export interface Static {
        // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
        setAccessible(arg0: array_t<AccessibleObject>, arg1: boolean_t, cb: Callback<void>): void;
        setAccessibleSync(arg0: array_t<AccessibleObject>, arg1: boolean_t): void;
        setAccessiblePromise(arg0: array_t<AccessibleObject>, arg1: boolean_t): Promise<void>;
        PUBLIC: number;
        DECLARED: number;
      }
    }
  }

  export module java.lang.reflect {
    export interface Field extends Java.java.lang.reflect.AccessibleObject {
      // equals
      // public boolean java.lang.reflect.Field.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // get
      // public java.lang.Object java.lang.reflect.Field.get(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      get(arg0: object_t, cb: Callback<object_t>): void;
      getSync(arg0: object_t): object_t;
      getPromise(arg0: object_t): Promise<object_t>;
      // getAnnotatedType
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Field.getAnnotatedType()
      getAnnotatedType( cb: Callback<object_t>): void;
      getAnnotatedTypeSync(): object_t;
      getAnnotatedTypePromise(): Promise<object_t>;
      // getAnnotation
      // public <T> T java.lang.reflect.Field.getAnnotation(java.lang.Class<T>)
      getAnnotation(arg0: Class, cb: Callback<object_t>): void;
      getAnnotationSync(arg0: Class): object_t;
      getAnnotationPromise(arg0: Class): Promise<object_t>;
      // getAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
      getAnnotations( cb: Callback<object_t[]>): void;
      getAnnotationsSync(): object_t[];
      getAnnotationsPromise(): Promise<object_t[]>;
      // getAnnotationsByType
      // public <T> T[] java.lang.reflect.Field.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByType(arg0: Class, cb: Callback<object_t[]>): void;
      getAnnotationsByTypeSync(arg0: Class): object_t[];
      getAnnotationsByTypePromise(arg0: Class): Promise<object_t[]>;
      // getBoolean
      // public boolean java.lang.reflect.Field.getBoolean(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getBoolean(arg0: object_t, cb: Callback<boolean>): void;
      getBooleanSync(arg0: object_t): boolean;
      getBooleanPromise(arg0: object_t): Promise<boolean>;
      // getByte
      // public byte java.lang.reflect.Field.getByte(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getByte(arg0: object_t, cb: Callback<object_t>): void;
      getByteSync(arg0: object_t): object_t;
      getBytePromise(arg0: object_t): Promise<object_t>;
      // getChar
      // public char java.lang.reflect.Field.getChar(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getChar(arg0: object_t, cb: Callback<object_t>): void;
      getCharSync(arg0: object_t): object_t;
      getCharPromise(arg0: object_t): Promise<object_t>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // getDeclaredAnnotation
      // public <T> T java.lang.reflect.AccessibleObject.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<object_t>): void;
      getDeclaredAnnotationSync(arg0: Class): object_t;
      getDeclaredAnnotationPromise(arg0: Class): Promise<object_t>;
      // getDeclaredAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.Field.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<object_t[]>): void;
      getDeclaredAnnotationsSync(): object_t[];
      getDeclaredAnnotationsPromise(): Promise<object_t[]>;
      // getDeclaredAnnotationsByType
      // public <T> T[] java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<object_t[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): object_t[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<object_t[]>;
      // getDeclaringClass
      // public java.lang.Class<?> java.lang.reflect.Field.getDeclaringClass()
      getDeclaringClass( cb: Callback<Class>): void;
      getDeclaringClassSync(): Class;
      getDeclaringClassPromise(): Promise<Class>;
      // getDouble
      // public double java.lang.reflect.Field.getDouble(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getDouble(arg0: object_t, cb: Callback<object_t>): void;
      getDoubleSync(arg0: object_t): object_t;
      getDoublePromise(arg0: object_t): Promise<object_t>;
      // getFloat
      // public float java.lang.reflect.Field.getFloat(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getFloat(arg0: object_t, cb: Callback<object_t>): void;
      getFloatSync(arg0: object_t): object_t;
      getFloatPromise(arg0: object_t): Promise<object_t>;
      // getGenericType
      // public java.lang.reflect.Type java.lang.reflect.Field.getGenericType()
      getGenericType( cb: Callback<Type>): void;
      getGenericTypeSync(): Type;
      getGenericTypePromise(): Promise<Type>;
      // getInt
      // public int java.lang.reflect.Field.getInt(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getInt(arg0: object_t, cb: Callback<number>): void;
      getIntSync(arg0: object_t): number;
      getIntPromise(arg0: object_t): Promise<number>;
      // getLong
      // public long java.lang.reflect.Field.getLong(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getLong(arg0: object_t, cb: Callback<object_t>): void;
      getLongSync(arg0: object_t): object_t;
      getLongPromise(arg0: object_t): Promise<object_t>;
      // getModifiers
      // public int java.lang.reflect.Field.getModifiers()
      getModifiers( cb: Callback<number>): void;
      getModifiersSync(): number;
      getModifiersPromise(): Promise<number>;
      // getName
      // public java.lang.String java.lang.reflect.Field.getName()
      getName( cb: Callback<string>): void;
      getNameSync(): string;
      getNamePromise(): Promise<string>;
      // getShort
      // public short java.lang.reflect.Field.getShort(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getShort(arg0: object_t, cb: Callback<object_t>): void;
      getShortSync(arg0: object_t): object_t;
      getShortPromise(arg0: object_t): Promise<object_t>;
      // getType
      // public java.lang.Class<?> java.lang.reflect.Field.getType()
      getType( cb: Callback<Class>): void;
      getTypeSync(): Class;
      getTypePromise(): Promise<Class>;
      // hashCode
      // public int java.lang.reflect.Field.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // isAccessible
      // public boolean java.lang.reflect.AccessibleObject.isAccessible()
      isAccessible( cb: Callback<boolean>): void;
      isAccessibleSync(): boolean;
      isAccessiblePromise(): Promise<boolean>;
      // isAnnotationPresent
      // public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
      // isEnumConstant
      // public boolean java.lang.reflect.Field.isEnumConstant()
      isEnumConstant( cb: Callback<boolean>): void;
      isEnumConstantSync(): boolean;
      isEnumConstantPromise(): Promise<boolean>;
      // isSynthetic
      // public boolean java.lang.reflect.Field.isSynthetic()
      isSynthetic( cb: Callback<boolean>): void;
      isSyntheticSync(): boolean;
      isSyntheticPromise(): Promise<boolean>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // set
      // public void java.lang.reflect.Field.set(java.lang.Object,java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      set(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      setSync(arg0: object_t, arg1: object_t): void;
      setPromise(arg0: object_t, arg1: object_t): Promise<void>;
      // setAccessible
      // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
      // static method, see .Static
      // public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException
      setAccessible(arg0: boolean_t, cb: Callback<void>): void;
      setAccessibleSync(arg0: boolean_t): void;
      setAccessiblePromise(arg0: boolean_t): Promise<void>;
      // setBoolean
      // public void java.lang.reflect.Field.setBoolean(java.lang.Object,boolean) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setBoolean(arg0: object_t, arg1: boolean_t, cb: Callback<void>): void;
      setBooleanSync(arg0: object_t, arg1: boolean_t): void;
      setBooleanPromise(arg0: object_t, arg1: boolean_t): Promise<void>;
      // setByte
      // public void java.lang.reflect.Field.setByte(java.lang.Object,byte) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setByte(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      setByteSync(arg0: object_t, arg1: object_t): void;
      setBytePromise(arg0: object_t, arg1: object_t): Promise<void>;
      // setChar
      // public void java.lang.reflect.Field.setChar(java.lang.Object,char) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setChar(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      setCharSync(arg0: object_t, arg1: object_t): void;
      setCharPromise(arg0: object_t, arg1: object_t): Promise<void>;
      // setDouble
      // public void java.lang.reflect.Field.setDouble(java.lang.Object,double) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setDouble(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      setDoubleSync(arg0: object_t, arg1: object_t): void;
      setDoublePromise(arg0: object_t, arg1: object_t): Promise<void>;
      // setFloat
      // public void java.lang.reflect.Field.setFloat(java.lang.Object,float) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setFloat(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      setFloatSync(arg0: object_t, arg1: object_t): void;
      setFloatPromise(arg0: object_t, arg1: object_t): Promise<void>;
      // setInt
      // public void java.lang.reflect.Field.setInt(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setInt(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
      setIntSync(arg0: object_t, arg1: integer_t): void;
      setIntPromise(arg0: object_t, arg1: integer_t): Promise<void>;
      // setLong
      // public void java.lang.reflect.Field.setLong(java.lang.Object,long) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setLong(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      setLongSync(arg0: object_t, arg1: object_t): void;
      setLongPromise(arg0: object_t, arg1: object_t): Promise<void>;
      // setShort
      // public void java.lang.reflect.Field.setShort(java.lang.Object,short) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setShort(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      setShortSync(arg0: object_t, arg1: object_t): void;
      setShortPromise(arg0: object_t, arg1: object_t): Promise<void>;
      // toGenericString
      // public java.lang.String java.lang.reflect.Field.toGenericString()
      toGenericString( cb: Callback<string>): void;
      toGenericStringSync(): string;
      toGenericStringPromise(): Promise<string>;
      // toString
      // public java.lang.String java.lang.reflect.Field.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
      waitSync(arg0: object_t, arg1: integer_t): void;
      waitPromise(arg0: object_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: object_t, cb: Callback<void>): void;
      waitSync(arg0: object_t): void;
      waitPromise(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module Field {
      export interface Static {
        // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
        setAccessible(arg0: array_t<AccessibleObject>, arg1: boolean_t, cb: Callback<void>): void;
        setAccessibleSync(arg0: array_t<AccessibleObject>, arg1: boolean_t): void;
        setAccessiblePromise(arg0: array_t<AccessibleObject>, arg1: boolean_t): Promise<void>;
        PUBLIC: number;
        DECLARED: number;
      }
    }
  }

  export module java.lang {
    export interface ClassLoader extends Java.java.lang.Object {
      // clearAssertionStatus
      // public void java.lang.ClassLoader.clearAssertionStatus()
      clearAssertionStatus( cb: Callback<void>): void;
      clearAssertionStatusSync(): void;
      clearAssertionStatusPromise(): Promise<void>;
      // equals
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // getParent
      // public final java.lang.ClassLoader java.lang.ClassLoader.getParent()
      getParent( cb: Callback<ClassLoader>): void;
      getParentSync(): ClassLoader;
      getParentPromise(): Promise<ClassLoader>;
      // getResource
      // public java.net.URL java.lang.ClassLoader.getResource(java.lang.String)
      getResource(arg0: string_t, cb: Callback<object_t>): void;
      getResourceSync(arg0: string_t): object_t;
      getResourcePromise(arg0: string_t): Promise<object_t>;
      // getResourceAsStream
      // public java.io.InputStream java.lang.ClassLoader.getResourceAsStream(java.lang.String)
      getResourceAsStream(arg0: string_t, cb: Callback<object_t>): void;
      getResourceAsStreamSync(arg0: string_t): object_t;
      getResourceAsStreamPromise(arg0: string_t): Promise<object_t>;
      // getResources
      // public java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getResources(java.lang.String) throws java.io.IOException
      getResources(arg0: string_t, cb: Callback<object_t>): void;
      getResourcesSync(arg0: string_t): object_t;
      getResourcesPromise(arg0: string_t): Promise<object_t>;
      // getSystemClassLoader
      // public static java.lang.ClassLoader java.lang.ClassLoader.getSystemClassLoader()
      // static method, see .Static
      // getSystemResource
      // public static java.net.URL java.lang.ClassLoader.getSystemResource(java.lang.String)
      // static method, see .Static
      // getSystemResourceAsStream
      // public static java.io.InputStream java.lang.ClassLoader.getSystemResourceAsStream(java.lang.String)
      // static method, see .Static
      // getSystemResources
      // public static java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getSystemResources(java.lang.String) throws java.io.IOException
      // static method, see .Static
      // hashCode
      // public native int java.lang.Object.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // loadClass
      // public java.lang.Class<?> java.lang.ClassLoader.loadClass(java.lang.String) throws java.lang.ClassNotFoundException
      loadClass(arg0: string_t, cb: Callback<Class>): void;
      loadClassSync(arg0: string_t): Class;
      loadClassPromise(arg0: string_t): Promise<Class>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // setClassAssertionStatus
      // public void java.lang.ClassLoader.setClassAssertionStatus(java.lang.String,boolean)
      setClassAssertionStatus(arg0: string_t, arg1: boolean_t, cb: Callback<void>): void;
      setClassAssertionStatusSync(arg0: string_t, arg1: boolean_t): void;
      setClassAssertionStatusPromise(arg0: string_t, arg1: boolean_t): Promise<void>;
      // setDefaultAssertionStatus
      // public void java.lang.ClassLoader.setDefaultAssertionStatus(boolean)
      setDefaultAssertionStatus(arg0: boolean_t, cb: Callback<void>): void;
      setDefaultAssertionStatusSync(arg0: boolean_t): void;
      setDefaultAssertionStatusPromise(arg0: boolean_t): Promise<void>;
      // setPackageAssertionStatus
      // public void java.lang.ClassLoader.setPackageAssertionStatus(java.lang.String,boolean)
      setPackageAssertionStatus(arg0: string_t, arg1: boolean_t, cb: Callback<void>): void;
      setPackageAssertionStatusSync(arg0: string_t, arg1: boolean_t): void;
      setPackageAssertionStatusPromise(arg0: string_t, arg1: boolean_t): Promise<void>;
      // toString
      // public java.lang.String java.lang.Object.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
      waitSync(arg0: object_t, arg1: integer_t): void;
      waitPromise(arg0: object_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: object_t, cb: Callback<void>): void;
      waitSync(arg0: object_t): void;
      waitPromise(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module ClassLoader {
      export interface Static {
        // public static java.lang.ClassLoader java.lang.ClassLoader.getSystemClassLoader()
        getSystemClassLoader( cb: Callback<ClassLoader>): void;
        getSystemClassLoaderSync(): ClassLoader;
        getSystemClassLoaderPromise(): Promise<ClassLoader>;
        // public static java.net.URL java.lang.ClassLoader.getSystemResource(java.lang.String)
        getSystemResource(arg0: string_t, cb: Callback<object_t>): void;
        getSystemResourceSync(arg0: string_t): object_t;
        getSystemResourcePromise(arg0: string_t): Promise<object_t>;
        // public static java.io.InputStream java.lang.ClassLoader.getSystemResourceAsStream(java.lang.String)
        getSystemResourceAsStream(arg0: string_t, cb: Callback<object_t>): void;
        getSystemResourceAsStreamSync(arg0: string_t): object_t;
        getSystemResourceAsStreamPromise(arg0: string_t): Promise<object_t>;
        // public static java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getSystemResources(java.lang.String) throws java.io.IOException
        getSystemResources(arg0: string_t, cb: Callback<object_t>): void;
        getSystemResourcesSync(arg0: string_t): object_t;
        getSystemResourcesPromise(arg0: string_t): Promise<object_t>;
      }
    }
  }

  export module java.lang.reflect {
    export interface AccessibleObject extends Java.java.lang.Object {
      // equals
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // getAnnotation
      // public <T> T java.lang.reflect.AccessibleObject.getAnnotation(java.lang.Class<T>)
      getAnnotation(arg0: Class, cb: Callback<object_t>): void;
      getAnnotationSync(arg0: Class): object_t;
      getAnnotationPromise(arg0: Class): Promise<object_t>;
      // getAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
      getAnnotations( cb: Callback<object_t[]>): void;
      getAnnotationsSync(): object_t[];
      getAnnotationsPromise(): Promise<object_t[]>;
      // getAnnotationsByType
      // public <T> T[] java.lang.reflect.AccessibleObject.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByType(arg0: Class, cb: Callback<object_t[]>): void;
      getAnnotationsByTypeSync(arg0: Class): object_t[];
      getAnnotationsByTypePromise(arg0: Class): Promise<object_t[]>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // getDeclaredAnnotation
      // public <T> T java.lang.reflect.AccessibleObject.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<object_t>): void;
      getDeclaredAnnotationSync(arg0: Class): object_t;
      getDeclaredAnnotationPromise(arg0: Class): Promise<object_t>;
      // getDeclaredAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<object_t[]>): void;
      getDeclaredAnnotationsSync(): object_t[];
      getDeclaredAnnotationsPromise(): Promise<object_t[]>;
      // getDeclaredAnnotationsByType
      // public <T> T[] java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<object_t[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): object_t[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<object_t[]>;
      // hashCode
      // public native int java.lang.Object.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // isAccessible
      // public boolean java.lang.reflect.AccessibleObject.isAccessible()
      isAccessible( cb: Callback<boolean>): void;
      isAccessibleSync(): boolean;
      isAccessiblePromise(): Promise<boolean>;
      // isAnnotationPresent
      // public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // setAccessible
      // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
      // static method, see .Static
      // public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException
      setAccessible(arg0: boolean_t, cb: Callback<void>): void;
      setAccessibleSync(arg0: boolean_t): void;
      setAccessiblePromise(arg0: boolean_t): Promise<void>;
      // toString
      // public java.lang.String java.lang.Object.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
      waitSync(arg0: object_t, arg1: integer_t): void;
      waitPromise(arg0: object_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: object_t, cb: Callback<void>): void;
      waitSync(arg0: object_t): void;
      waitPromise(arg0: object_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module AccessibleObject {
      export interface Static {
        // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
        setAccessible(arg0: array_t<AccessibleObject>, arg1: boolean_t, cb: Callback<void>): void;
        setAccessibleSync(arg0: array_t<AccessibleObject>, arg1: boolean_t): void;
        setAccessiblePromise(arg0: array_t<AccessibleObject>, arg1: boolean_t): Promise<void>;
      }
    }
  }

  export module java.lang.reflect {
    export interface Type extends Java.java.lang.Object {
      // getTypeName
      // public default java.lang.String java.lang.reflect.Type.getTypeName()
      getTypeName( cb: Callback<string>): void;
      getTypeNameSync(): string;
      getTypeNamePromise(): Promise<string>;
    }
    export module Type {
      export interface Static {
      }
    }
  }

}
