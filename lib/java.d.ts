// java.d.ts
// This file was generated by ts-java.
/// <reference path='../typings/bluebird/bluebird.d.ts' />


declare module 'java' {
  var Java: Java.NodeAPI;
  export = Java;
}

declare module Java {
  // Node-java has special handling for methods that return long or java.lang.Long,
  // returning a Javascript Number but with an additional property longValue.
  interface longValue_t extends Number {
    longValue: string;
  }

  // Node-java can automatically coerce a javascript string into a java.lang.String.
  // This special type alias allows to declare that possiblity to Typescript.
  export type string_t = string | java.lang.String;

  // Java methods that take java.lang.Object parameters implicitly will take a java.lang.String.
  // But string_t is not sufficient for this case, we need object_t.
  export type object_t = java.lang.Object | string | number | longValue_t;

  // Java methods that take long or java.lang.Long parameters may take javascript numbers,
  // longValue_t (see above) or java.lang.Long.
  // This special type alias allows to declare that possiblity to Typescript.
  export type long_t = number | longValue_t ;

  // Handling of other primitive numeric types is simpler, as there is no loss of precision.
  export type boolean_t = boolean | java.lang.Boolean;
  export type short_t = number ;
  export type integer_t = number | java.lang.Integer;
  export type double_t = number ;
  export type float_t = number ;
  export type number_t = number ;

  export interface array_t<T> extends java.lang.Object {
    // This is an opaque type for a java array_t T[];
    // Use Java.newArray<T>(className, [...]) to create wherever a Java method expects a T[],
    // most notably for vararg parameteters.
    __dummy: T;
  }

  interface Callback<T> {
    (err: Error, result: T): void;
  }

  interface AsyncOptions {
    syncSuffix: string;
    asyncSuffix?: string;
    promiseSuffix?: string;
    promisify?: Function;
  }

  // *NodeAPI* declares methods & members exported by the node java module.
  interface NodeAPI {
    classpath: string[];
    asyncOptions: AsyncOptions;
    callMethod(instance: any, className: string, methodName: string, args: any[], callback: Callback<any>): void;
    callMethodSync(instance: any, className: string, methodName: string, ...args: any[]): any;
    callStaticMethodSync(className: string, methodName: string, ...args: any[]): any;
    instanceOf(javaObject: any, className: string): boolean;

                
    getClassLoader(): java.lang.ClassLoader;

    newArray(className: 'java.lang.Class', arg: Class[]): array_t<java.lang.Class>;
    newArray(className: 'java.lang.reflect.Parameter', arg: Parameter[]): array_t<java.lang.reflect.Parameter>;
    newArray(className: 'java.lang.String', arg: string_t[]): array_t<java.lang.String>;
    newArray(className: 'java.lang.reflect.Method', arg: Method[]): array_t<java.lang.reflect.Method>;
    newArray(className: 'java.lang.Integer', arg: integer_t[]): array_t<java.lang.Integer>;
    newArray(className: 'java.lang.reflect.Executable', arg: Executable[]): array_t<java.lang.reflect.Executable>;
    newArray(className: 'java.lang.Object', arg: object_t[]): array_t<java.lang.Object>;
    newArray(className: 'java.lang.Boolean', arg: boolean_t[]): array_t<java.lang.Boolean>;
    newArray(className: 'java.lang.reflect.Constructor', arg: Constructor[]): array_t<java.lang.reflect.Constructor>;
    newArray(className: 'java.lang.reflect.Field', arg: Field[]): array_t<java.lang.reflect.Field>;
    newArray(className: 'java.lang.ClassLoader', arg: ClassLoader[]): array_t<java.lang.ClassLoader>;
    newArray(className: 'java.lang.reflect.AccessibleObject', arg: AccessibleObject[]): array_t<java.lang.reflect.AccessibleObject>;
    newArray(className: 'java.lang.reflect.Type', arg: Type[]): array_t<java.lang.reflect.Type>;
    newArray<T>(className: string, arg: any[]): array_t<T>;

    import(className: 'java.lang.Class'): java.lang.Class.Static;
    import(className: 'java.lang.reflect.Parameter'): java.lang.reflect.Parameter.Static;
    import(className: 'java.lang.String'): java.lang.String.Static;
    import(className: 'java.lang.reflect.Method'): java.lang.reflect.Method.Static;
    import(className: 'java.lang.Integer'): java.lang.Integer.Static;
    import(className: 'java.lang.reflect.Executable'): java.lang.reflect.Executable.Static;
    import(className: 'java.lang.Object'): java.lang.Object.Static;
    import(className: 'java.lang.Boolean'): java.lang.Boolean.Static;
    import(className: 'java.lang.reflect.Constructor'): java.lang.reflect.Constructor.Static;
    import(className: 'java.lang.reflect.Field'): java.lang.reflect.Field.Static;
    import(className: 'java.lang.ClassLoader'): java.lang.ClassLoader.Static;
    import(className: 'java.lang.reflect.AccessibleObject'): java.lang.reflect.AccessibleObject.Static;
    import(className: 'java.lang.reflect.Type'): java.lang.reflect.Type.Static;
    import(className: string): any;

    newInstance(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t, arg3: object_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t, arg3: string_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: object_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: string_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: object_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: string_t, cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), cb: Callback<string>): void;
    newInstance(className: 'java.lang.String', cb: Callback<string>): void;
    newInstance(className: 'java.lang.Integer', arg0: string_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Integer', arg0: integer_t, cb: Callback<number>): void;
    newInstance(className: 'java.lang.Object', cb: Callback<object_t>): void;
    newInstance(className: 'java.lang.Boolean', arg0: string_t, cb: Callback<boolean>): void;
    newInstance(className: 'java.lang.Boolean', arg0: boolean_t, cb: Callback<boolean>): void;
    newInstance(className: string, ...args: any[]): void;

    newInstanceSync(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t, arg3: object_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t, arg3: string_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t, arg3: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: object_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: string_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: object_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: string_t): string;
    newInstanceSync(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[])): string;
    newInstanceSync(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[])): string;
    newInstanceSync(className: 'java.lang.String'): string;
    newInstanceSync(className: 'java.lang.Integer', arg0: string_t): number;
    newInstanceSync(className: 'java.lang.Integer', arg0: integer_t): number;
    newInstanceSync(className: 'java.lang.Object'): object_t;
    newInstanceSync(className: 'java.lang.Boolean', arg0: string_t): boolean;
    newInstanceSync(className: 'java.lang.Boolean', arg0: boolean_t): boolean;
    newInstanceSync(className: string, ...args: any[]): any;

    newInstancePromise(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t, arg3: string_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: object_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: string_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: object_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: string_t): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[])): Promise<string>;
    newInstancePromise(className: 'java.lang.String', arg0: (array_t<java.lang.Object> | object_t[])): Promise<string>;
    newInstancePromise(className: 'java.lang.String'): Promise<string>;
    newInstancePromise(className: 'java.lang.Integer', arg0: string_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Integer', arg0: integer_t): Promise<number>;
    newInstancePromise(className: 'java.lang.Object'): Promise<object_t>;
    newInstancePromise(className: 'java.lang.Boolean', arg0: string_t): Promise<boolean>;
    newInstancePromise(className: 'java.lang.Boolean', arg0: boolean_t): Promise<boolean>;
    newInstancePromise(className: string, ...args: any[]): Promise<any>;
  }

  export import Class = java.lang.Class;
  export import Parameter = java.lang.reflect.Parameter;
  export import String = java.lang.String;
  export import Method = java.lang.reflect.Method;
  export import Integer = java.lang.Integer;
  export import Executable = java.lang.reflect.Executable;
  export import Object = java.lang.Object;
  export import Boolean = java.lang.Boolean;
  export import Constructor = java.lang.reflect.Constructor;
  export import Field = java.lang.reflect.Field;
  export import ClassLoader = java.lang.ClassLoader;
  export import AccessibleObject = java.lang.reflect.AccessibleObject;
  export import Type = java.lang.reflect.Type;

  export module java.lang {
    export interface Class extends Java.java.lang.Object,Java.java.lang.reflect.Type {
      // public <U> java.lang.Class<? extends U> java.lang.Class.asSubclass(java.lang.Class<U>)
      asSubclassSync(arg0: Class): Class;
      // public T java.lang.Class.cast(java.lang.Object)
      castSync(arg0: object_t): object_t;
      // public boolean java.lang.Class.desiredAssertionStatus()
      desiredAssertionStatusSync(): boolean;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsSync(arg0: object_t): boolean;
      // public java.lang.reflect.AnnotatedType[] java.lang.Class.getAnnotatedInterfaces()
      getAnnotatedInterfacesSync(): object_t[];
      // public java.lang.reflect.AnnotatedType java.lang.Class.getAnnotatedSuperclass()
      getAnnotatedSuperclassSync(): object_t;
      // public <A> A java.lang.Class.getAnnotation(java.lang.Class<A>)
      getAnnotationSync(arg0: Class): object_t;
      // public java.lang.annotation.Annotation[] java.lang.Class.getAnnotations()
      getAnnotationsSync(): object_t[];
      // public <A> A[] java.lang.Class.getAnnotationsByType(java.lang.Class<A>)
      getAnnotationsByTypeSync(arg0: Class): object_t[];
      // public java.lang.String java.lang.Class.getCanonicalName()
      getCanonicalNameSync(): string;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassSync(): Class;
      // public java.lang.Class<?>[] java.lang.Class.getClasses()
      getClassesSync(): Class[];
      // public java.lang.ClassLoader java.lang.Class.getClassLoader()
      getClassLoaderSync(): ClassLoader;
      // public native java.lang.Class<?> java.lang.Class.getComponentType()
      getComponentTypeSync(): Class;
      // public java.lang.reflect.Constructor<T> java.lang.Class.getConstructor(java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getConstructorSync(...arg0: Class[]): Constructor;
      getConstructorSync(arg0: array_t<Class>): Constructor;
      // public java.lang.reflect.Constructor<?>[] java.lang.Class.getConstructors() throws java.lang.SecurityException
      getConstructorsSync(): Constructor[];
      // public <A> A java.lang.Class.getDeclaredAnnotation(java.lang.Class<A>)
      getDeclaredAnnotationSync(arg0: Class): object_t;
      // public java.lang.annotation.Annotation[] java.lang.Class.getDeclaredAnnotations()
      getDeclaredAnnotationsSync(): object_t[];
      // public <A> A[] java.lang.Class.getDeclaredAnnotationsByType(java.lang.Class<A>)
      getDeclaredAnnotationsByTypeSync(arg0: Class): object_t[];
      // public java.lang.Class<?>[] java.lang.Class.getDeclaredClasses() throws java.lang.SecurityException
      getDeclaredClassesSync(): Class[];
      // public java.lang.reflect.Constructor<T> java.lang.Class.getDeclaredConstructor(java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getDeclaredConstructorSync(...arg0: Class[]): Constructor;
      getDeclaredConstructorSync(arg0: array_t<Class>): Constructor;
      // public java.lang.reflect.Constructor<?>[] java.lang.Class.getDeclaredConstructors() throws java.lang.SecurityException
      getDeclaredConstructorsSync(): Constructor[];
      // public java.lang.reflect.Field java.lang.Class.getDeclaredField(java.lang.String) throws java.lang.NoSuchFieldException,java.lang.SecurityException
      getDeclaredFieldSync(arg0: string_t): Field;
      // public java.lang.reflect.Field[] java.lang.Class.getDeclaredFields() throws java.lang.SecurityException
      getDeclaredFieldsSync(): Field[];
      // public java.lang.reflect.Method java.lang.Class.getDeclaredMethod(java.lang.String,java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getDeclaredMethodSync(arg0: string_t, ...arg1: Class[]): Method;
      getDeclaredMethodSync(arg0: string_t, arg1: array_t<Class>): Method;
      // public java.lang.reflect.Method[] java.lang.Class.getDeclaredMethods() throws java.lang.SecurityException
      getDeclaredMethodsSync(): Method[];
      // public java.lang.Class<?> java.lang.Class.getDeclaringClass() throws java.lang.SecurityException
      getDeclaringClassSync(): Class;
      // public java.lang.Class<?> java.lang.Class.getEnclosingClass() throws java.lang.SecurityException
      getEnclosingClassSync(): Class;
      // public java.lang.reflect.Constructor<?> java.lang.Class.getEnclosingConstructor() throws java.lang.SecurityException
      getEnclosingConstructorSync(): Constructor;
      // public java.lang.reflect.Method java.lang.Class.getEnclosingMethod() throws java.lang.SecurityException
      getEnclosingMethodSync(): Method;
      // public T[] java.lang.Class.getEnumConstants()
      getEnumConstantsSync(): object_t[];
      // public java.lang.reflect.Field java.lang.Class.getField(java.lang.String) throws java.lang.NoSuchFieldException,java.lang.SecurityException
      getFieldSync(arg0: string_t): Field;
      // public java.lang.reflect.Field[] java.lang.Class.getFields() throws java.lang.SecurityException
      getFieldsSync(): Field[];
      // public java.lang.reflect.Type[] java.lang.Class.getGenericInterfaces()
      getGenericInterfacesSync(): Type[];
      // public java.lang.reflect.Type java.lang.Class.getGenericSuperclass()
      getGenericSuperclassSync(): Type;
      // public java.lang.Class<?>[] java.lang.Class.getInterfaces()
      getInterfacesSync(): Class[];
      // public java.lang.reflect.Method java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getMethodSync(arg0: string_t, ...arg1: Class[]): Method;
      getMethodSync(arg0: string_t, arg1: array_t<Class>): Method;
      // public java.lang.reflect.Method[] java.lang.Class.getMethods() throws java.lang.SecurityException
      getMethodsSync(): Method[];
      // public native int java.lang.Class.getModifiers()
      getModifiersSync(): number;
      // public java.lang.String java.lang.Class.getName()
      getNameSync(): string;
      // public java.lang.Package java.lang.Class.getPackage()
      getPackageSync(): object_t;
      // public java.security.ProtectionDomain java.lang.Class.getProtectionDomain()
      getProtectionDomainSync(): object_t;
      // public java.net.URL java.lang.Class.getResource(java.lang.String)
      getResourceSync(arg0: string_t): object_t;
      // public java.io.InputStream java.lang.Class.getResourceAsStream(java.lang.String)
      getResourceAsStreamSync(arg0: string_t): object_t;
      // public native java.lang.Object[] java.lang.Class.getSigners()
      getSignersSync(): object_t[];
      // public java.lang.String java.lang.Class.getSimpleName()
      getSimpleNameSync(): string;
      // public native java.lang.Class<? super T> java.lang.Class.getSuperclass()
      getSuperclassSync(): Class;
      // public java.lang.String java.lang.Class.getTypeName()
      getTypeNameSync(): string;
      // public java.lang.reflect.TypeVariable<java.lang.Class<T>>[] java.lang.Class.getTypeParameters()
      getTypeParametersSync(): object_t[];
      // public native int java.lang.Object.hashCode()
      hashCodeSync(): number;
      // public boolean java.lang.Class.isAnnotation()
      isAnnotationSync(): boolean;
      // public boolean java.lang.Class.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresentSync(arg0: Class): boolean;
      // public boolean java.lang.Class.isAnonymousClass()
      isAnonymousClassSync(): boolean;
      // public native boolean java.lang.Class.isArray()
      isArraySync(): boolean;
      // public native boolean java.lang.Class.isAssignableFrom(java.lang.Class<?>)
      isAssignableFromSync(arg0: Class): boolean;
      // public boolean java.lang.Class.isEnum()
      isEnumSync(): boolean;
      // public native boolean java.lang.Class.isInstance(java.lang.Object)
      isInstanceSync(arg0: object_t): boolean;
      // public native boolean java.lang.Class.isInterface()
      isInterfaceSync(): boolean;
      // public boolean java.lang.Class.isLocalClass()
      isLocalClassSync(): boolean;
      // public boolean java.lang.Class.isMemberClass()
      isMemberClassSync(): boolean;
      // public native boolean java.lang.Class.isPrimitive()
      isPrimitiveSync(): boolean;
      // public boolean java.lang.Class.isSynthetic()
      isSyntheticSync(): boolean;
      // public T java.lang.Class.newInstance() throws java.lang.InstantiationException,java.lang.IllegalAccessException
      newInstanceSync(): object_t;
      // public final native void java.lang.Object.notify()
      notifySync(): void;
      // public final native void java.lang.Object.notifyAll()
      notifyAllSync(): void;
      // public java.lang.String java.lang.Class.toGenericString()
      toGenericStringSync(): string;
      // public java.lang.String java.lang.Class.toString()
      toStringSync(): string;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitSync(arg0: object_t, arg1: integer_t): void;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitSync(arg0: object_t): void;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitSync(): void;
    }
    export module Class {
      export interface Static {
        // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader) throws java.lang.ClassNotFoundException
        forNameSync(arg0: string_t, arg1: boolean_t, arg2: ClassLoader): Class;
        // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String) throws java.lang.ClassNotFoundException
        forNameSync(arg0: string_t): Class;
      }
    }
  }

  export module java.lang.reflect {
    export interface Parameter extends Java.java.lang.Object {
      // public boolean java.lang.reflect.Parameter.equals(java.lang.Object)
      equalsSync(arg0: object_t): boolean;
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Parameter.getAnnotatedType()
      getAnnotatedTypeSync(): object_t;
      // public <T> T java.lang.reflect.Parameter.getAnnotation(java.lang.Class<T>)
      getAnnotationSync(arg0: Class): object_t;
      // public java.lang.annotation.Annotation[] java.lang.reflect.Parameter.getAnnotations()
      getAnnotationsSync(): object_t[];
      // public <T> T[] java.lang.reflect.Parameter.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByTypeSync(arg0: Class): object_t[];
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassSync(): Class;
      // public <T> T java.lang.reflect.Parameter.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotationSync(arg0: Class): object_t;
      // public java.lang.annotation.Annotation[] java.lang.reflect.Parameter.getDeclaredAnnotations()
      getDeclaredAnnotationsSync(): object_t[];
      // public <T> T[] java.lang.reflect.Parameter.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByTypeSync(arg0: Class): object_t[];
      // public java.lang.reflect.Executable java.lang.reflect.Parameter.getDeclaringExecutable()
      getDeclaringExecutableSync(): Executable;
      // public int java.lang.reflect.Parameter.getModifiers()
      getModifiersSync(): number;
      // public java.lang.String java.lang.reflect.Parameter.getName()
      getNameSync(): string;
      // public java.lang.reflect.Type java.lang.reflect.Parameter.getParameterizedType()
      getParameterizedTypeSync(): Type;
      // public java.lang.Class<?> java.lang.reflect.Parameter.getType()
      getTypeSync(): Class;
      // public int java.lang.reflect.Parameter.hashCode()
      hashCodeSync(): number;
      // public default boolean java.lang.reflect.AnnotatedElement.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresentSync(arg0: Class): boolean;
      // public boolean java.lang.reflect.Parameter.isImplicit()
      isImplicitSync(): boolean;
      // public boolean java.lang.reflect.Parameter.isNamePresent()
      isNamePresentSync(): boolean;
      // public boolean java.lang.reflect.Parameter.isSynthetic()
      isSyntheticSync(): boolean;
      // public boolean java.lang.reflect.Parameter.isVarArgs()
      isVarArgsSync(): boolean;
      // public final native void java.lang.Object.notify()
      notifySync(): void;
      // public final native void java.lang.Object.notifyAll()
      notifyAllSync(): void;
      // public java.lang.String java.lang.reflect.Parameter.toString()
      toStringSync(): string;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitSync(arg0: object_t, arg1: integer_t): void;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitSync(arg0: object_t): void;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitSync(): void;
    }
    export module Parameter {
      export interface Static {
      }
    }
  }

  export module java.lang {
    export interface String extends Java.java.lang.Object {
      // public char java.lang.String.charAt(int)
      charAtSync(arg0: integer_t): object_t;
      // public default java.util.stream.IntStream java.lang.CharSequence.chars()
      charsSync(): object_t;
      // public int java.lang.String.codePointAt(int)
      codePointAtSync(arg0: integer_t): number;
      // public int java.lang.String.codePointBefore(int)
      codePointBeforeSync(arg0: integer_t): number;
      // public int java.lang.String.codePointCount(int,int)
      codePointCountSync(arg0: integer_t, arg1: integer_t): number;
      // public default java.util.stream.IntStream java.lang.CharSequence.codePoints()
      codePointsSync(): object_t;
      // public int java.lang.String.compareTo(java.lang.String)
      compareToSync(arg0: string_t): number;
      // public int java.lang.String.compareTo(java.lang.Object)
      compareToSync(arg0: object_t): number;
      // public int java.lang.String.compareToIgnoreCase(java.lang.String)
      compareToIgnoreCaseSync(arg0: string_t): number;
      // public java.lang.String java.lang.String.concat(java.lang.String)
      concatSync(arg0: string_t): string;
      // public boolean java.lang.String.contains(java.lang.CharSequence)
      containsSync(arg0: object_t): boolean;
      // public boolean java.lang.String.contentEquals(java.lang.StringBuffer)
      contentEqualsSync(arg0: object_t): boolean;
      // public boolean java.lang.String.contentEquals(java.lang.CharSequence)
      contentEqualsSync(arg0: object_t): boolean;
      // public boolean java.lang.String.endsWith(java.lang.String)
      endsWithSync(arg0: string_t): boolean;
      // public boolean java.lang.String.equals(java.lang.Object)
      equalsSync(arg0: object_t): boolean;
      // public boolean java.lang.String.equalsIgnoreCase(java.lang.String)
      equalsIgnoreCaseSync(arg0: string_t): boolean;
      // public void java.lang.String.getBytes(int,int,byte[],int)
      getBytesSync(arg0: integer_t, arg1: integer_t, arg2: (array_t<java.lang.Object> | object_t[]), arg3: integer_t): void;
      // public byte[] java.lang.String.getBytes(java.nio.charset.Charset)
      getBytesSync(arg0: object_t): object_t[];
      // public byte[] java.lang.String.getBytes(java.lang.String) throws java.io.UnsupportedEncodingException
      getBytesSync(arg0: string_t): object_t[];
      // public byte[] java.lang.String.getBytes()
      getBytesSync(): object_t[];
      // public void java.lang.String.getChars(int,int,char[],int)
      getCharsSync(arg0: integer_t, arg1: integer_t, arg2: (array_t<java.lang.Object> | object_t[]), arg3: integer_t): void;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassSync(): Class;
      // public int java.lang.String.hashCode()
      hashCodeSync(): number;
      // public int java.lang.String.indexOf(java.lang.String,int)
      indexOfSync(arg0: string_t, arg1: integer_t): number;
      // public int java.lang.String.indexOf(int,int)
      indexOfSync(arg0: integer_t, arg1: integer_t): number;
      // public int java.lang.String.indexOf(java.lang.String)
      indexOfSync(arg0: string_t): number;
      // public int java.lang.String.indexOf(int)
      indexOfSync(arg0: integer_t): number;
      // public native java.lang.String java.lang.String.intern()
      internSync(): string;
      // public boolean java.lang.String.isEmpty()
      isEmptySync(): boolean;
      // public int java.lang.String.lastIndexOf(java.lang.String,int)
      lastIndexOfSync(arg0: string_t, arg1: integer_t): number;
      // public int java.lang.String.lastIndexOf(int,int)
      lastIndexOfSync(arg0: integer_t, arg1: integer_t): number;
      // public int java.lang.String.lastIndexOf(java.lang.String)
      lastIndexOfSync(arg0: string_t): number;
      // public int java.lang.String.lastIndexOf(int)
      lastIndexOfSync(arg0: integer_t): number;
      // public int java.lang.String.length()
      lengthSync(): number;
      // public boolean java.lang.String.matches(java.lang.String)
      matchesSync(arg0: string_t): boolean;
      // public final native void java.lang.Object.notify()
      notifySync(): void;
      // public final native void java.lang.Object.notifyAll()
      notifyAllSync(): void;
      // public int java.lang.String.offsetByCodePoints(int,int)
      offsetByCodePointsSync(arg0: integer_t, arg1: integer_t): number;
      // public boolean java.lang.String.regionMatches(boolean,int,java.lang.String,int,int)
      regionMatchesSync(arg0: boolean_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t): boolean;
      // public boolean java.lang.String.regionMatches(int,java.lang.String,int,int)
      regionMatchesSync(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t): boolean;
      // public java.lang.String java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)
      replaceSync(arg0: object_t, arg1: object_t): string;
      // public java.lang.String java.lang.String.replace(char,char)
      replaceSync(arg0: object_t, arg1: object_t): string;
      // public java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String)
      replaceAllSync(arg0: string_t, arg1: string_t): string;
      // public java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String)
      replaceFirstSync(arg0: string_t, arg1: string_t): string;
      // public java.lang.String[] java.lang.String.split(java.lang.String,int)
      splitSync(arg0: string_t, arg1: integer_t): string[];
      // public java.lang.String[] java.lang.String.split(java.lang.String)
      splitSync(arg0: string_t): string[];
      // public boolean java.lang.String.startsWith(java.lang.String,int)
      startsWithSync(arg0: string_t, arg1: integer_t): boolean;
      // public boolean java.lang.String.startsWith(java.lang.String)
      startsWithSync(arg0: string_t): boolean;
      // public java.lang.CharSequence java.lang.String.subSequence(int,int)
      subSequenceSync(arg0: integer_t, arg1: integer_t): object_t;
      // public java.lang.String java.lang.String.substring(int,int)
      substringSync(arg0: integer_t, arg1: integer_t): string;
      // public java.lang.String java.lang.String.substring(int)
      substringSync(arg0: integer_t): string;
      // public char[] java.lang.String.toCharArray()
      toCharArraySync(): object_t[];
      // public java.lang.String java.lang.String.toLowerCase(java.util.Locale)
      toLowerCaseSync(arg0: object_t): string;
      // public java.lang.String java.lang.String.toLowerCase()
      toLowerCaseSync(): string;
      // public java.lang.String java.lang.String.toString()
      toStringSync(): string;
      // public java.lang.String java.lang.String.toUpperCase(java.util.Locale)
      toUpperCaseSync(arg0: object_t): string;
      // public java.lang.String java.lang.String.toUpperCase()
      toUpperCaseSync(): string;
      // public java.lang.String java.lang.String.trim()
      trimSync(): string;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitSync(arg0: object_t, arg1: integer_t): void;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitSync(arg0: object_t): void;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitSync(): void;
    }
    export module String {
      export interface Static {
        new (arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t, arg3: object_t): java.lang.String;
        new (arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t, arg3: string_t): java.lang.String;
        new (arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t, arg3: integer_t): java.lang.String;
        new (arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: (array_t<java.lang.Object> | object_t[]), arg1: object_t): java.lang.String;
        new (arg0: (array_t<java.lang.Object> | object_t[]), arg1: string_t): java.lang.String;
        new (arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t): java.lang.String;
        new (arg0: object_t): java.lang.String;
        new (arg0: object_t): java.lang.String;
        new (arg0: string_t): java.lang.String;
        new (arg0: (array_t<java.lang.Object> | object_t[])): java.lang.String;
        new (arg0: (array_t<java.lang.Object> | object_t[])): java.lang.String;
        new (): java.lang.String;
        // public static java.lang.String java.lang.String.copyValueOf(char[],int,int)
        copyValueOfSync(arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t): string;
        // public static java.lang.String java.lang.String.copyValueOf(char[])
        copyValueOfSync(arg0: (array_t<java.lang.Object> | object_t[])): string;
        // public static java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object...)
        formatSync(arg0: object_t, arg1: string_t, ...arg2: object_t[]): string;
        formatSync(arg0: object_t, arg1: string_t, arg2: (array_t<java.lang.Object> | object_t[])): string;
        // public static java.lang.String java.lang.String.format(java.lang.String,java.lang.Object...)
        formatSync(arg0: string_t, ...arg1: object_t[]): string;
        formatSync(arg0: string_t, arg1: (array_t<java.lang.Object> | object_t[])): string;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence...)
        joinSync(arg0: object_t, ...arg1: object_t[]): string;
        joinSync(arg0: object_t, arg1: (array_t<java.lang.Object> | object_t[])): string;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.Iterable<? extends java.lang.CharSequence>)
        joinSync(arg0: object_t, arg1: object_t): string;
        // public static java.lang.String java.lang.String.valueOf(char[],int,int)
        valueOfSync(arg0: (array_t<java.lang.Object> | object_t[]), arg1: integer_t, arg2: integer_t): string;
        // public static java.lang.String java.lang.String.valueOf(java.lang.Object)
        valueOfSync(arg0: object_t): string;
        // public static java.lang.String java.lang.String.valueOf(char[])
        valueOfSync(arg0: (array_t<java.lang.Object> | object_t[])): string;
        // public static java.lang.String java.lang.String.valueOf(boolean)
        valueOfSync(arg0: boolean_t): string;
        // public static java.lang.String java.lang.String.valueOf(long)
        valueOfSync(arg0: object_t): string;
        // public static java.lang.String java.lang.String.valueOf(int)
        valueOfSync(arg0: integer_t): string;
        // public static java.lang.String java.lang.String.valueOf(float)
        valueOfSync(arg0: object_t): string;
        // public static java.lang.String java.lang.String.valueOf(double)
        valueOfSync(arg0: object_t): string;
        // public static java.lang.String java.lang.String.valueOf(char)
        valueOfSync(arg0: object_t): string;
        CASE_INSENSITIVE_ORDER: object_t;
      }
    }
  }

  export module java.lang.reflect {
    export interface Method extends Java.java.lang.reflect.Executable {
      // public boolean java.lang.reflect.Method.equals(java.lang.Object)
      equalsSync(arg0: object_t): boolean;
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedExceptionTypes()
      getAnnotatedExceptionTypesSync(): object_t[];
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedParameterTypes()
      getAnnotatedParameterTypesSync(): object_t[];
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Executable.getAnnotatedReceiverType()
      getAnnotatedReceiverTypeSync(): object_t;
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Method.getAnnotatedReturnType()
      getAnnotatedReturnTypeSync(): object_t;
      // public <T> T java.lang.reflect.Method.getAnnotation(java.lang.Class<T>)
      getAnnotationSync(arg0: Class): object_t;
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
      getAnnotationsSync(): object_t[];
      // public <T> T[] java.lang.reflect.Executable.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByTypeSync(arg0: Class): object_t[];
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassSync(): Class;
      // public <T> T java.lang.reflect.AccessibleObject.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotationSync(arg0: Class): object_t;
      // public java.lang.annotation.Annotation[] java.lang.reflect.Method.getDeclaredAnnotations()
      getDeclaredAnnotationsSync(): object_t[];
      // public <T> T[] java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByTypeSync(arg0: Class): object_t[];
      // public java.lang.Class<?> java.lang.reflect.Method.getDeclaringClass()
      getDeclaringClassSync(): Class;
      // public java.lang.Object java.lang.reflect.Method.getDefaultValue()
      getDefaultValueSync(): object_t;
      // public java.lang.Class<?>[] java.lang.reflect.Method.getExceptionTypes()
      getExceptionTypesSync(): Class[];
      // public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericExceptionTypes()
      getGenericExceptionTypesSync(): Type[];
      // public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()
      getGenericParameterTypesSync(): Type[];
      // public java.lang.reflect.Type java.lang.reflect.Method.getGenericReturnType()
      getGenericReturnTypeSync(): Type;
      // public int java.lang.reflect.Method.getModifiers()
      getModifiersSync(): number;
      // public java.lang.String java.lang.reflect.Method.getName()
      getNameSync(): string;
      // public java.lang.annotation.Annotation[][] java.lang.reflect.Method.getParameterAnnotations()
      getParameterAnnotationsSync(): object_t[][];
      // public int java.lang.reflect.Method.getParameterCount()
      getParameterCountSync(): number;
      // public java.lang.reflect.Parameter[] java.lang.reflect.Executable.getParameters()
      getParametersSync(): Parameter[];
      // public java.lang.Class<?>[] java.lang.reflect.Method.getParameterTypes()
      getParameterTypesSync(): Class[];
      // public java.lang.Class<?> java.lang.reflect.Method.getReturnType()
      getReturnTypeSync(): Class;
      // public java.lang.reflect.TypeVariable<java.lang.reflect.Method>[] java.lang.reflect.Method.getTypeParameters()
      getTypeParametersSync(): object_t[];
      // public int java.lang.reflect.Method.hashCode()
      hashCodeSync(): number;
      // public java.lang.Object java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) throws java.lang.IllegalAccessException,java.lang.IllegalArgumentException,java.lang.reflect.InvocationTargetException
      invokeSync(arg0: object_t, ...arg1: object_t[]): object_t;
      invokeSync(arg0: object_t, arg1: (array_t<java.lang.Object> | object_t[])): object_t;
      // public boolean java.lang.reflect.AccessibleObject.isAccessible()
      isAccessibleSync(): boolean;
      // public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresentSync(arg0: Class): boolean;
      // public boolean java.lang.reflect.Method.isBridge()
      isBridgeSync(): boolean;
      // public boolean java.lang.reflect.Method.isDefault()
      isDefaultSync(): boolean;
      // public boolean java.lang.reflect.Method.isSynthetic()
      isSyntheticSync(): boolean;
      // public boolean java.lang.reflect.Method.isVarArgs()
      isVarArgsSync(): boolean;
      // public final native void java.lang.Object.notify()
      notifySync(): void;
      // public final native void java.lang.Object.notifyAll()
      notifyAllSync(): void;
      // public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException
      setAccessibleSync(arg0: boolean_t): void;
      // public java.lang.String java.lang.reflect.Method.toGenericString()
      toGenericStringSync(): string;
      // public java.lang.String java.lang.reflect.Method.toString()
      toStringSync(): string;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitSync(arg0: object_t, arg1: integer_t): void;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitSync(arg0: object_t): void;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitSync(): void;
    }
    export module Method {
      export interface Static {
        // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
        setAccessibleSync(arg0: array_t<AccessibleObject>, arg1: boolean_t): void;
        PUBLIC: number;
        DECLARED: number;
      }
    }
  }

  export module java.lang {
    export interface Integer extends Java.java.lang.Object {
      // public byte java.lang.Integer.byteValue()
      byteValueSync(): object_t;
      // public int java.lang.Integer.compareTo(java.lang.Integer)
      compareToSync(arg0: integer_t): number;
      // public int java.lang.Integer.compareTo(java.lang.Object)
      compareToSync(arg0: object_t): number;
      // public double java.lang.Integer.doubleValue()
      doubleValueSync(): object_t;
      // public boolean java.lang.Integer.equals(java.lang.Object)
      equalsSync(arg0: object_t): boolean;
      // public float java.lang.Integer.floatValue()
      floatValueSync(): object_t;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassSync(): Class;
      // public int java.lang.Integer.hashCode()
      hashCodeSync(): number;
      // public int java.lang.Integer.intValue()
      intValueSync(): number;
      // public long java.lang.Integer.longValue()
      longValueSync(): object_t;
      // public final native void java.lang.Object.notify()
      notifySync(): void;
      // public final native void java.lang.Object.notifyAll()
      notifyAllSync(): void;
      // public short java.lang.Integer.shortValue()
      shortValueSync(): object_t;
      // public java.lang.String java.lang.Integer.toString()
      toStringSync(): string;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitSync(arg0: object_t, arg1: integer_t): void;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitSync(arg0: object_t): void;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitSync(): void;
    }
    export module Integer {
      export interface Static {
        new (arg0: string_t): java.lang.Integer;
        new (arg0: integer_t): java.lang.Integer;
        // public static int java.lang.Integer.bitCount(int)
        bitCountSync(arg0: integer_t): number;
        // public static int java.lang.Integer.compare(int,int)
        compareSync(arg0: integer_t, arg1: integer_t): number;
        // public static int java.lang.Integer.compareUnsigned(int,int)
        compareUnsignedSync(arg0: integer_t, arg1: integer_t): number;
        // public static java.lang.Integer java.lang.Integer.decode(java.lang.String) throws java.lang.NumberFormatException
        decodeSync(arg0: string_t): number;
        // public static int java.lang.Integer.divideUnsigned(int,int)
        divideUnsignedSync(arg0: integer_t, arg1: integer_t): number;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,java.lang.Integer)
        getIntegerSync(arg0: string_t, arg1: integer_t): number;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,int)
        getIntegerSync(arg0: string_t, arg1: integer_t): number;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String)
        getIntegerSync(arg0: string_t): number;
        // public static int java.lang.Integer.hashCode(int)
        hashCodeSync(arg0: integer_t): number;
        // public static int java.lang.Integer.highestOneBit(int)
        highestOneBitSync(arg0: integer_t): number;
        // public static int java.lang.Integer.lowestOneBit(int)
        lowestOneBitSync(arg0: integer_t): number;
        // public static int java.lang.Integer.max(int,int)
        maxSync(arg0: integer_t, arg1: integer_t): number;
        // public static int java.lang.Integer.min(int,int)
        minSync(arg0: integer_t, arg1: integer_t): number;
        // public static int java.lang.Integer.numberOfLeadingZeros(int)
        numberOfLeadingZerosSync(arg0: integer_t): number;
        // public static int java.lang.Integer.numberOfTrailingZeros(int)
        numberOfTrailingZerosSync(arg0: integer_t): number;
        // public static int java.lang.Integer.parseInt(java.lang.String,int) throws java.lang.NumberFormatException
        parseIntSync(arg0: string_t, arg1: integer_t): number;
        // public static int java.lang.Integer.parseInt(java.lang.String) throws java.lang.NumberFormatException
        parseIntSync(arg0: string_t): number;
        // public static int java.lang.Integer.parseUnsignedInt(java.lang.String,int) throws java.lang.NumberFormatException
        parseUnsignedIntSync(arg0: string_t, arg1: integer_t): number;
        // public static int java.lang.Integer.parseUnsignedInt(java.lang.String) throws java.lang.NumberFormatException
        parseUnsignedIntSync(arg0: string_t): number;
        // public static int java.lang.Integer.remainderUnsigned(int,int)
        remainderUnsignedSync(arg0: integer_t, arg1: integer_t): number;
        // public static int java.lang.Integer.reverse(int)
        reverseSync(arg0: integer_t): number;
        // public static int java.lang.Integer.reverseBytes(int)
        reverseBytesSync(arg0: integer_t): number;
        // public static int java.lang.Integer.rotateLeft(int,int)
        rotateLeftSync(arg0: integer_t, arg1: integer_t): number;
        // public static int java.lang.Integer.rotateRight(int,int)
        rotateRightSync(arg0: integer_t, arg1: integer_t): number;
        // public static int java.lang.Integer.signum(int)
        signumSync(arg0: integer_t): number;
        // public static int java.lang.Integer.sum(int,int)
        sumSync(arg0: integer_t, arg1: integer_t): number;
        // public static java.lang.String java.lang.Integer.toBinaryString(int)
        toBinaryStringSync(arg0: integer_t): string;
        // public static java.lang.String java.lang.Integer.toHexString(int)
        toHexStringSync(arg0: integer_t): string;
        // public static java.lang.String java.lang.Integer.toOctalString(int)
        toOctalStringSync(arg0: integer_t): string;
        // public static java.lang.String java.lang.Integer.toString(int,int)
        toStringSync(arg0: integer_t, arg1: integer_t): string;
        // public static java.lang.String java.lang.Integer.toString(int)
        toStringSync(arg0: integer_t): string;
        // public static long java.lang.Integer.toUnsignedLong(int)
        toUnsignedLongSync(arg0: integer_t): object_t;
        // public static java.lang.String java.lang.Integer.toUnsignedString(int,int)
        toUnsignedStringSync(arg0: integer_t, arg1: integer_t): string;
        // public static java.lang.String java.lang.Integer.toUnsignedString(int)
        toUnsignedStringSync(arg0: integer_t): string;
        // public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
        valueOfSync(arg0: string_t, arg1: integer_t): number;
        // public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOfSync(arg0: string_t): number;
        // public static java.lang.Integer java.lang.Integer.valueOf(int)
        valueOfSync(arg0: integer_t): number;
        MIN_VALUE: number;
        MAX_VALUE: number;
        TYPE: Class;
        SIZE: number;
        BYTES: number;
      }
    }
  }

  export module java.lang.reflect {
    export interface Executable extends Java.java.lang.reflect.AccessibleObject {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsSync(arg0: object_t): boolean;
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedExceptionTypes()
      getAnnotatedExceptionTypesSync(): object_t[];
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedParameterTypes()
      getAnnotatedParameterTypesSync(): object_t[];
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Executable.getAnnotatedReceiverType()
      getAnnotatedReceiverTypeSync(): object_t;
      // public abstract java.lang.reflect.AnnotatedType java.lang.reflect.Executable.getAnnotatedReturnType()
      getAnnotatedReturnTypeSync(): object_t;
      // public <T> T java.lang.reflect.Executable.getAnnotation(java.lang.Class<T>)
      getAnnotationSync(arg0: Class): object_t;
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
      getAnnotationsSync(): object_t[];
      // public <T> T[] java.lang.reflect.Executable.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByTypeSync(arg0: Class): object_t[];
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassSync(): Class;
      // public <T> T java.lang.reflect.AccessibleObject.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotationSync(arg0: Class): object_t;
      // public java.lang.annotation.Annotation[] java.lang.reflect.Executable.getDeclaredAnnotations()
      getDeclaredAnnotationsSync(): object_t[];
      // public <T> T[] java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByTypeSync(arg0: Class): object_t[];
      // public abstract java.lang.Class<?> java.lang.reflect.Executable.getDeclaringClass()
      getDeclaringClassSync(): Class;
      // public abstract java.lang.Class<?>[] java.lang.reflect.Executable.getExceptionTypes()
      getExceptionTypesSync(): Class[];
      // public java.lang.reflect.Type[] java.lang.reflect.Executable.getGenericExceptionTypes()
      getGenericExceptionTypesSync(): Type[];
      // public java.lang.reflect.Type[] java.lang.reflect.Executable.getGenericParameterTypes()
      getGenericParameterTypesSync(): Type[];
      // public abstract int java.lang.reflect.Executable.getModifiers()
      getModifiersSync(): number;
      // public abstract java.lang.String java.lang.reflect.Executable.getName()
      getNameSync(): string;
      // public abstract java.lang.annotation.Annotation[][] java.lang.reflect.Executable.getParameterAnnotations()
      getParameterAnnotationsSync(): object_t[][];
      // public int java.lang.reflect.Executable.getParameterCount()
      getParameterCountSync(): number;
      // public java.lang.reflect.Parameter[] java.lang.reflect.Executable.getParameters()
      getParametersSync(): Parameter[];
      // public abstract java.lang.Class<?>[] java.lang.reflect.Executable.getParameterTypes()
      getParameterTypesSync(): Class[];
      // public abstract java.lang.reflect.TypeVariable<?>[] java.lang.reflect.Executable.getTypeParameters()
      getTypeParametersSync(): object_t[];
      // public native int java.lang.Object.hashCode()
      hashCodeSync(): number;
      // public boolean java.lang.reflect.AccessibleObject.isAccessible()
      isAccessibleSync(): boolean;
      // public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresentSync(arg0: Class): boolean;
      // public boolean java.lang.reflect.Executable.isSynthetic()
      isSyntheticSync(): boolean;
      // public boolean java.lang.reflect.Executable.isVarArgs()
      isVarArgsSync(): boolean;
      // public final native void java.lang.Object.notify()
      notifySync(): void;
      // public final native void java.lang.Object.notifyAll()
      notifyAllSync(): void;
      // public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException
      setAccessibleSync(arg0: boolean_t): void;
      // public abstract java.lang.String java.lang.reflect.Executable.toGenericString()
      toGenericStringSync(): string;
      // public java.lang.String java.lang.Object.toString()
      toStringSync(): string;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitSync(arg0: object_t, arg1: integer_t): void;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitSync(arg0: object_t): void;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitSync(): void;
    }
    export module Executable {
      export interface Static {
        // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
        setAccessibleSync(arg0: array_t<AccessibleObject>, arg1: boolean_t): void;
        PUBLIC: number;
        DECLARED: number;
      }
    }
  }

  export module java.lang {
    export interface Object  {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsSync(arg0: object_t): boolean;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassSync(): Class;
      // public native int java.lang.Object.hashCode()
      hashCodeSync(): number;
      // public final native void java.lang.Object.notify()
      notifySync(): void;
      // public final native void java.lang.Object.notifyAll()
      notifyAllSync(): void;
      // public java.lang.String java.lang.Object.toString()
      toStringSync(): string;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitSync(arg0: object_t, arg1: integer_t): void;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitSync(arg0: object_t): void;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitSync(): void;
    }
    export module Object {
      export interface Static {
        new (): java.lang.Object;
      }
    }
  }

  export module java.lang {
    export interface Boolean extends Java.java.lang.Object {
      // public boolean java.lang.Boolean.booleanValue()
      booleanValueSync(): boolean;
      // public int java.lang.Boolean.compareTo(java.lang.Boolean)
      compareToSync(arg0: boolean_t): number;
      // public int java.lang.Boolean.compareTo(java.lang.Object)
      compareToSync(arg0: object_t): number;
      // public boolean java.lang.Boolean.equals(java.lang.Object)
      equalsSync(arg0: object_t): boolean;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassSync(): Class;
      // public int java.lang.Boolean.hashCode()
      hashCodeSync(): number;
      // public final native void java.lang.Object.notify()
      notifySync(): void;
      // public final native void java.lang.Object.notifyAll()
      notifyAllSync(): void;
      // public java.lang.String java.lang.Boolean.toString()
      toStringSync(): string;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitSync(arg0: object_t, arg1: integer_t): void;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitSync(arg0: object_t): void;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitSync(): void;
    }
    export module Boolean {
      export interface Static {
        new (arg0: string_t): java.lang.Boolean;
        new (arg0: boolean_t): java.lang.Boolean;
        // public static int java.lang.Boolean.compare(boolean,boolean)
        compareSync(arg0: boolean_t, arg1: boolean_t): number;
        // public static boolean java.lang.Boolean.getBoolean(java.lang.String)
        getBooleanSync(arg0: string_t): boolean;
        // public static int java.lang.Boolean.hashCode(boolean)
        hashCodeSync(arg0: boolean_t): number;
        // public static boolean java.lang.Boolean.logicalAnd(boolean,boolean)
        logicalAndSync(arg0: boolean_t, arg1: boolean_t): boolean;
        // public static boolean java.lang.Boolean.logicalOr(boolean,boolean)
        logicalOrSync(arg0: boolean_t, arg1: boolean_t): boolean;
        // public static boolean java.lang.Boolean.logicalXor(boolean,boolean)
        logicalXorSync(arg0: boolean_t, arg1: boolean_t): boolean;
        // public static boolean java.lang.Boolean.parseBoolean(java.lang.String)
        parseBooleanSync(arg0: string_t): boolean;
        // public static java.lang.String java.lang.Boolean.toString(boolean)
        toStringSync(arg0: boolean_t): string;
        // public static java.lang.Boolean java.lang.Boolean.valueOf(java.lang.String)
        valueOfSync(arg0: string_t): boolean;
        // public static java.lang.Boolean java.lang.Boolean.valueOf(boolean)
        valueOfSync(arg0: boolean_t): boolean;
        TRUE: boolean;
        FALSE: boolean;
        TYPE: Class;
      }
    }
  }

  export module java.lang.reflect {
    export interface Constructor extends Java.java.lang.reflect.Executable {
      // public boolean java.lang.reflect.Constructor.equals(java.lang.Object)
      equalsSync(arg0: object_t): boolean;
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedExceptionTypes()
      getAnnotatedExceptionTypesSync(): object_t[];
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedParameterTypes()
      getAnnotatedParameterTypesSync(): object_t[];
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Constructor.getAnnotatedReceiverType()
      getAnnotatedReceiverTypeSync(): object_t;
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Constructor.getAnnotatedReturnType()
      getAnnotatedReturnTypeSync(): object_t;
      // public <T> T java.lang.reflect.Constructor.getAnnotation(java.lang.Class<T>)
      getAnnotationSync(arg0: Class): object_t;
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
      getAnnotationsSync(): object_t[];
      // public <T> T[] java.lang.reflect.Executable.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByTypeSync(arg0: Class): object_t[];
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassSync(): Class;
      // public <T> T java.lang.reflect.AccessibleObject.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotationSync(arg0: Class): object_t;
      // public java.lang.annotation.Annotation[] java.lang.reflect.Constructor.getDeclaredAnnotations()
      getDeclaredAnnotationsSync(): object_t[];
      // public <T> T[] java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByTypeSync(arg0: Class): object_t[];
      // public java.lang.Class<T> java.lang.reflect.Constructor.getDeclaringClass()
      getDeclaringClassSync(): Class;
      // public java.lang.Class<?>[] java.lang.reflect.Constructor.getExceptionTypes()
      getExceptionTypesSync(): Class[];
      // public java.lang.reflect.Type[] java.lang.reflect.Constructor.getGenericExceptionTypes()
      getGenericExceptionTypesSync(): Type[];
      // public java.lang.reflect.Type[] java.lang.reflect.Constructor.getGenericParameterTypes()
      getGenericParameterTypesSync(): Type[];
      // public int java.lang.reflect.Constructor.getModifiers()
      getModifiersSync(): number;
      // public java.lang.String java.lang.reflect.Constructor.getName()
      getNameSync(): string;
      // public java.lang.annotation.Annotation[][] java.lang.reflect.Constructor.getParameterAnnotations()
      getParameterAnnotationsSync(): object_t[][];
      // public int java.lang.reflect.Constructor.getParameterCount()
      getParameterCountSync(): number;
      // public java.lang.reflect.Parameter[] java.lang.reflect.Executable.getParameters()
      getParametersSync(): Parameter[];
      // public java.lang.Class<?>[] java.lang.reflect.Constructor.getParameterTypes()
      getParameterTypesSync(): Class[];
      // public java.lang.reflect.TypeVariable<java.lang.reflect.Constructor<T>>[] java.lang.reflect.Constructor.getTypeParameters()
      getTypeParametersSync(): object_t[];
      // public int java.lang.reflect.Constructor.hashCode()
      hashCodeSync(): number;
      // public boolean java.lang.reflect.AccessibleObject.isAccessible()
      isAccessibleSync(): boolean;
      // public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresentSync(arg0: Class): boolean;
      // public boolean java.lang.reflect.Constructor.isSynthetic()
      isSyntheticSync(): boolean;
      // public boolean java.lang.reflect.Constructor.isVarArgs()
      isVarArgsSync(): boolean;
      // public T java.lang.reflect.Constructor.newInstance(java.lang.Object...) throws java.lang.InstantiationException,java.lang.IllegalAccessException,java.lang.IllegalArgumentException,java.lang.reflect.InvocationTargetException
      newInstanceSync(...arg0: object_t[]): object_t;
      newInstanceSync(arg0: (array_t<java.lang.Object> | object_t[])): object_t;
      // public final native void java.lang.Object.notify()
      notifySync(): void;
      // public final native void java.lang.Object.notifyAll()
      notifyAllSync(): void;
      // public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException
      setAccessibleSync(arg0: boolean_t): void;
      // public java.lang.String java.lang.reflect.Constructor.toGenericString()
      toGenericStringSync(): string;
      // public java.lang.String java.lang.reflect.Constructor.toString()
      toStringSync(): string;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitSync(arg0: object_t, arg1: integer_t): void;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitSync(arg0: object_t): void;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitSync(): void;
    }
    export module Constructor {
      export interface Static {
        // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
        setAccessibleSync(arg0: array_t<AccessibleObject>, arg1: boolean_t): void;
        PUBLIC: number;
        DECLARED: number;
      }
    }
  }

  export module java.lang.reflect {
    export interface Field extends Java.java.lang.reflect.AccessibleObject {
      // public boolean java.lang.reflect.Field.equals(java.lang.Object)
      equalsSync(arg0: object_t): boolean;
      // public java.lang.Object java.lang.reflect.Field.get(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getSync(arg0: object_t): object_t;
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Field.getAnnotatedType()
      getAnnotatedTypeSync(): object_t;
      // public <T> T java.lang.reflect.Field.getAnnotation(java.lang.Class<T>)
      getAnnotationSync(arg0: Class): object_t;
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
      getAnnotationsSync(): object_t[];
      // public <T> T[] java.lang.reflect.Field.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByTypeSync(arg0: Class): object_t[];
      // public boolean java.lang.reflect.Field.getBoolean(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getBooleanSync(arg0: object_t): boolean;
      // public byte java.lang.reflect.Field.getByte(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getByteSync(arg0: object_t): object_t;
      // public char java.lang.reflect.Field.getChar(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getCharSync(arg0: object_t): object_t;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassSync(): Class;
      // public <T> T java.lang.reflect.AccessibleObject.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotationSync(arg0: Class): object_t;
      // public java.lang.annotation.Annotation[] java.lang.reflect.Field.getDeclaredAnnotations()
      getDeclaredAnnotationsSync(): object_t[];
      // public <T> T[] java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByTypeSync(arg0: Class): object_t[];
      // public java.lang.Class<?> java.lang.reflect.Field.getDeclaringClass()
      getDeclaringClassSync(): Class;
      // public double java.lang.reflect.Field.getDouble(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getDoubleSync(arg0: object_t): object_t;
      // public float java.lang.reflect.Field.getFloat(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getFloatSync(arg0: object_t): object_t;
      // public java.lang.reflect.Type java.lang.reflect.Field.getGenericType()
      getGenericTypeSync(): Type;
      // public int java.lang.reflect.Field.getInt(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getIntSync(arg0: object_t): number;
      // public long java.lang.reflect.Field.getLong(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getLongSync(arg0: object_t): object_t;
      // public int java.lang.reflect.Field.getModifiers()
      getModifiersSync(): number;
      // public java.lang.String java.lang.reflect.Field.getName()
      getNameSync(): string;
      // public short java.lang.reflect.Field.getShort(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getShortSync(arg0: object_t): object_t;
      // public java.lang.Class<?> java.lang.reflect.Field.getType()
      getTypeSync(): Class;
      // public int java.lang.reflect.Field.hashCode()
      hashCodeSync(): number;
      // public boolean java.lang.reflect.AccessibleObject.isAccessible()
      isAccessibleSync(): boolean;
      // public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresentSync(arg0: Class): boolean;
      // public boolean java.lang.reflect.Field.isEnumConstant()
      isEnumConstantSync(): boolean;
      // public boolean java.lang.reflect.Field.isSynthetic()
      isSyntheticSync(): boolean;
      // public final native void java.lang.Object.notify()
      notifySync(): void;
      // public final native void java.lang.Object.notifyAll()
      notifyAllSync(): void;
      // public void java.lang.reflect.Field.set(java.lang.Object,java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setSync(arg0: object_t, arg1: object_t): void;
      // public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException
      setAccessibleSync(arg0: boolean_t): void;
      // public void java.lang.reflect.Field.setBoolean(java.lang.Object,boolean) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setBooleanSync(arg0: object_t, arg1: boolean_t): void;
      // public void java.lang.reflect.Field.setByte(java.lang.Object,byte) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setByteSync(arg0: object_t, arg1: object_t): void;
      // public void java.lang.reflect.Field.setChar(java.lang.Object,char) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setCharSync(arg0: object_t, arg1: object_t): void;
      // public void java.lang.reflect.Field.setDouble(java.lang.Object,double) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setDoubleSync(arg0: object_t, arg1: object_t): void;
      // public void java.lang.reflect.Field.setFloat(java.lang.Object,float) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setFloatSync(arg0: object_t, arg1: object_t): void;
      // public void java.lang.reflect.Field.setInt(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setIntSync(arg0: object_t, arg1: integer_t): void;
      // public void java.lang.reflect.Field.setLong(java.lang.Object,long) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setLongSync(arg0: object_t, arg1: object_t): void;
      // public void java.lang.reflect.Field.setShort(java.lang.Object,short) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setShortSync(arg0: object_t, arg1: object_t): void;
      // public java.lang.String java.lang.reflect.Field.toGenericString()
      toGenericStringSync(): string;
      // public java.lang.String java.lang.reflect.Field.toString()
      toStringSync(): string;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitSync(arg0: object_t, arg1: integer_t): void;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitSync(arg0: object_t): void;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitSync(): void;
    }
    export module Field {
      export interface Static {
        // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
        setAccessibleSync(arg0: array_t<AccessibleObject>, arg1: boolean_t): void;
        PUBLIC: number;
        DECLARED: number;
      }
    }
  }

  export module java.lang {
    export interface ClassLoader extends Java.java.lang.Object {
      // public void java.lang.ClassLoader.clearAssertionStatus()
      clearAssertionStatusSync(): void;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsSync(arg0: object_t): boolean;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassSync(): Class;
      // public final java.lang.ClassLoader java.lang.ClassLoader.getParent()
      getParentSync(): ClassLoader;
      // public java.net.URL java.lang.ClassLoader.getResource(java.lang.String)
      getResourceSync(arg0: string_t): object_t;
      // public java.io.InputStream java.lang.ClassLoader.getResourceAsStream(java.lang.String)
      getResourceAsStreamSync(arg0: string_t): object_t;
      // public java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getResources(java.lang.String) throws java.io.IOException
      getResourcesSync(arg0: string_t): object_t;
      // public native int java.lang.Object.hashCode()
      hashCodeSync(): number;
      // public java.lang.Class<?> java.lang.ClassLoader.loadClass(java.lang.String) throws java.lang.ClassNotFoundException
      loadClassSync(arg0: string_t): Class;
      // public final native void java.lang.Object.notify()
      notifySync(): void;
      // public final native void java.lang.Object.notifyAll()
      notifyAllSync(): void;
      // public void java.lang.ClassLoader.setClassAssertionStatus(java.lang.String,boolean)
      setClassAssertionStatusSync(arg0: string_t, arg1: boolean_t): void;
      // public void java.lang.ClassLoader.setDefaultAssertionStatus(boolean)
      setDefaultAssertionStatusSync(arg0: boolean_t): void;
      // public void java.lang.ClassLoader.setPackageAssertionStatus(java.lang.String,boolean)
      setPackageAssertionStatusSync(arg0: string_t, arg1: boolean_t): void;
      // public java.lang.String java.lang.Object.toString()
      toStringSync(): string;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitSync(arg0: object_t, arg1: integer_t): void;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitSync(arg0: object_t): void;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitSync(): void;
    }
    export module ClassLoader {
      export interface Static {
        // public static java.lang.ClassLoader java.lang.ClassLoader.getSystemClassLoader()
        getSystemClassLoaderSync(): ClassLoader;
        // public static java.net.URL java.lang.ClassLoader.getSystemResource(java.lang.String)
        getSystemResourceSync(arg0: string_t): object_t;
        // public static java.io.InputStream java.lang.ClassLoader.getSystemResourceAsStream(java.lang.String)
        getSystemResourceAsStreamSync(arg0: string_t): object_t;
        // public static java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getSystemResources(java.lang.String) throws java.io.IOException
        getSystemResourcesSync(arg0: string_t): object_t;
      }
    }
  }

  export module java.lang.reflect {
    export interface AccessibleObject extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsSync(arg0: object_t): boolean;
      // public <T> T java.lang.reflect.AccessibleObject.getAnnotation(java.lang.Class<T>)
      getAnnotationSync(arg0: Class): object_t;
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
      getAnnotationsSync(): object_t[];
      // public <T> T[] java.lang.reflect.AccessibleObject.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByTypeSync(arg0: Class): object_t[];
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassSync(): Class;
      // public <T> T java.lang.reflect.AccessibleObject.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotationSync(arg0: Class): object_t;
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getDeclaredAnnotations()
      getDeclaredAnnotationsSync(): object_t[];
      // public <T> T[] java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByTypeSync(arg0: Class): object_t[];
      // public native int java.lang.Object.hashCode()
      hashCodeSync(): number;
      // public boolean java.lang.reflect.AccessibleObject.isAccessible()
      isAccessibleSync(): boolean;
      // public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresentSync(arg0: Class): boolean;
      // public final native void java.lang.Object.notify()
      notifySync(): void;
      // public final native void java.lang.Object.notifyAll()
      notifyAllSync(): void;
      // public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException
      setAccessibleSync(arg0: boolean_t): void;
      // public java.lang.String java.lang.Object.toString()
      toStringSync(): string;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitSync(arg0: object_t, arg1: integer_t): void;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitSync(arg0: object_t): void;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitSync(): void;
    }
    export module AccessibleObject {
      export interface Static {
        // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
        setAccessibleSync(arg0: array_t<AccessibleObject>, arg1: boolean_t): void;
      }
    }
  }

  export module java.lang.reflect {
    export interface Type extends Java.java.lang.Object {
      // public default java.lang.String java.lang.reflect.Type.getTypeName()
      getTypeNameSync(): string;
    }
    export module Type {
      export interface Static {
      }
    }
  }

}
