// java.d.ts
// This file was generated by ts-java.
/// <reference path='../typings/bluebird/bluebird.d.ts' />

declare module 'java' {
  var Java: Java.Singleton;
  export = Java;
}

declare module Java {
  // Node-java can automatically coerce a javascript string into a java.lang.String.
  // This special type alias allows to declare that possiblity to Typescript.
  export type string_t = string | java.lang.String;

  // Java methods that take java.lang.Object parameters implicitly will take a java.lang.String.
  // But string_t is not sufficient for this case, we need object_t.
  export type object_t = string | java.lang.Object;

  export interface Array<T> extends java.lang.Object {
    // This is an opaque type for a java array T[];
    // Use Java.newArray<T>(className, [...]) to create wherever a Java method expects a T[],
    // most notably for vararg parameteters.
    __dummy: T;
  }

  interface Callback<T> {
    (err: Error, result: T): void;
  }

  interface AsyncOptions {
    promiseSuffix: string;
    promisify: Function;
  }

  // *Singleton* declares methods & members exported by the node java module.
  interface Singleton {
    classpath: string[];
    asyncOptions: AsyncOptions;
    callMethod(instance: any, className: string, methodName: string, args: any[], callback: Callback<any>): void;
    callMethodSync(instance: any, className: string, methodName: string, ...args: any[]): any;
    callStaticMethodSync(className: string, methodName: string, ...args: any[]): any;
    getClassLoader(): ClassLoader;

    newArray<T>(className: string, arg: any[]): Array<T>;

    import(className: 'java.lang.reflect.Method'): java.lang.reflect.Method.Static;
    import(className: 'java.lang.Class'): java.lang.Class.Static;
    import(className: 'java.lang.reflect.Parameter'): java.lang.reflect.Parameter.Static;
    import(className: 'java.lang.String'): java.lang.String.Static;
    import(className: 'java.lang.Iterable'): java.lang.Iterable.Static;
    import(className: 'java.lang.reflect.GenericDeclaration'): java.lang.reflect.GenericDeclaration.Static;
    import(className: 'java.lang.reflect.AnnotatedElement'): java.lang.reflect.AnnotatedElement.Static;
    import(className: 'java.lang.reflect.AnnotatedType'): java.lang.reflect.AnnotatedType.Static;
    import(className: 'java.lang.Comparable'): java.lang.Comparable.Static;
    import(className: 'java.lang.reflect.Executable'): java.lang.reflect.Executable.Static;
    import(className: 'java.lang.Object'): java.lang.Object.Static;
    import(className: 'java.lang.reflect.Constructor'): java.lang.reflect.Constructor.Static;
    import(className: 'java.lang.reflect.Field'): java.lang.reflect.Field.Static;
    import(className: 'java.lang.ClassLoader'): java.lang.ClassLoader.Static;
    import(className: 'java.lang.reflect.AccessibleObject'): java.lang.reflect.AccessibleObject.Static;
    import(className: 'java.lang.reflect.TypeVariable'): java.lang.reflect.TypeVariable.Static;
    import(className: 'java.lang.reflect.Member'): java.lang.reflect.Member.Static;
    import(className: 'java.lang.reflect.Type'): java.lang.reflect.Type.Static;
    import(className: string): any;

    newInstance(className: 'java.lang.String', arg0: number[], arg1: number, arg2: number, arg3: string_t, cb: Callback<java.lang.String>): void;
    newInstance(className: 'java.lang.String', arg0: number[], arg1: number, arg2: number, arg3: number, cb: Callback<java.lang.String>): void;
    newInstance(className: 'java.lang.String', arg0: number[], arg1: number, arg2: number, arg3: any, cb: Callback<java.lang.String>): void;
    newInstance(className: 'java.lang.String', arg0: number[], arg1: number, arg2: number, cb: Callback<java.lang.String>): void;
    newInstance(className: 'java.lang.String', arg0: string[], arg1: number, arg2: number, cb: Callback<java.lang.String>): void;
    newInstance(className: 'java.lang.String', arg0: number[], arg1: number, arg2: number, cb: Callback<java.lang.String>): void;
    newInstance(className: 'java.lang.String', arg0: number[], arg1: string_t, cb: Callback<java.lang.String>): void;
    newInstance(className: 'java.lang.String', arg0: number[], arg1: number, cb: Callback<java.lang.String>): void;
    newInstance(className: 'java.lang.String', arg0: number[], arg1: any, cb: Callback<java.lang.String>): void;
    newInstance(className: 'java.lang.String', arg0: string_t, cb: Callback<java.lang.String>): void;
    newInstance(className: 'java.lang.String', arg0: string[], cb: Callback<java.lang.String>): void;
    newInstance(className: 'java.lang.String', arg0: number[], cb: Callback<java.lang.String>): void;
    newInstance(className: 'java.lang.String', arg0: any, cb: Callback<java.lang.String>): void;
    newInstance(className: 'java.lang.String', arg0: any, cb: Callback<java.lang.String>): void;
    newInstance(className: 'java.lang.String', cb: Callback<java.lang.String>): void;
    newInstance(className: 'java.lang.Object', cb: Callback<java.lang.Object>): void;
    newInstance(className: string, ...args: any[]): void;

    newInstanceSync(className: 'java.lang.String', arg0: number[], arg1: number, arg2: number, arg3: string_t): java.lang.String;
    newInstanceSync(className: 'java.lang.String', arg0: number[], arg1: number, arg2: number, arg3: number): java.lang.String;
    newInstanceSync(className: 'java.lang.String', arg0: number[], arg1: number, arg2: number, arg3: any): java.lang.String;
    newInstanceSync(className: 'java.lang.String', arg0: number[], arg1: number, arg2: number): java.lang.String;
    newInstanceSync(className: 'java.lang.String', arg0: string[], arg1: number, arg2: number): java.lang.String;
    newInstanceSync(className: 'java.lang.String', arg0: number[], arg1: number, arg2: number): java.lang.String;
    newInstanceSync(className: 'java.lang.String', arg0: number[], arg1: string_t): java.lang.String;
    newInstanceSync(className: 'java.lang.String', arg0: number[], arg1: number): java.lang.String;
    newInstanceSync(className: 'java.lang.String', arg0: number[], arg1: any): java.lang.String;
    newInstanceSync(className: 'java.lang.String', arg0: string_t): java.lang.String;
    newInstanceSync(className: 'java.lang.String', arg0: string[]): java.lang.String;
    newInstanceSync(className: 'java.lang.String', arg0: number[]): java.lang.String;
    newInstanceSync(className: 'java.lang.String', arg0: any): java.lang.String;
    newInstanceSync(className: 'java.lang.String', arg0: any): java.lang.String;
    newInstanceSync(className: 'java.lang.String'): java.lang.String;
    newInstanceSync(className: 'java.lang.Object'): java.lang.Object;
    newInstanceSync(className: string, ...args: any[]): any;

    newInstancePromise(className: 'java.lang.String', arg0: number[], arg1: number, arg2: number, arg3: string_t): Promise<java.lang.String>;
    newInstancePromise(className: 'java.lang.String', arg0: number[], arg1: number, arg2: number, arg3: number): Promise<java.lang.String>;
    newInstancePromise(className: 'java.lang.String', arg0: number[], arg1: number, arg2: number, arg3: any): Promise<java.lang.String>;
    newInstancePromise(className: 'java.lang.String', arg0: number[], arg1: number, arg2: number): Promise<java.lang.String>;
    newInstancePromise(className: 'java.lang.String', arg0: string[], arg1: number, arg2: number): Promise<java.lang.String>;
    newInstancePromise(className: 'java.lang.String', arg0: number[], arg1: number, arg2: number): Promise<java.lang.String>;
    newInstancePromise(className: 'java.lang.String', arg0: number[], arg1: string_t): Promise<java.lang.String>;
    newInstancePromise(className: 'java.lang.String', arg0: number[], arg1: number): Promise<java.lang.String>;
    newInstancePromise(className: 'java.lang.String', arg0: number[], arg1: any): Promise<java.lang.String>;
    newInstancePromise(className: 'java.lang.String', arg0: string_t): Promise<java.lang.String>;
    newInstancePromise(className: 'java.lang.String', arg0: string[]): Promise<java.lang.String>;
    newInstancePromise(className: 'java.lang.String', arg0: number[]): Promise<java.lang.String>;
    newInstancePromise(className: 'java.lang.String', arg0: any): Promise<java.lang.String>;
    newInstancePromise(className: 'java.lang.String', arg0: any): Promise<java.lang.String>;
    newInstancePromise(className: 'java.lang.String'): Promise<java.lang.String>;
    newInstancePromise(className: 'java.lang.Object'): Promise<java.lang.Object>;
    newInstancePromise(className: string, ...args: any[]): Promise<any>;
  }

  export import Method = java.lang.reflect.Method;
  export import Class = java.lang.Class;
  export import Parameter = java.lang.reflect.Parameter;
  export import String = java.lang.String;
  export import Iterable = java.lang.Iterable;
  export import GenericDeclaration = java.lang.reflect.GenericDeclaration;
  export import AnnotatedElement = java.lang.reflect.AnnotatedElement;
  export import AnnotatedType = java.lang.reflect.AnnotatedType;
  export import Comparable = java.lang.Comparable;
  export import Executable = java.lang.reflect.Executable;
  export import Object = java.lang.Object;
  export import Constructor = java.lang.reflect.Constructor;
  export import Field = java.lang.reflect.Field;
  export import ClassLoader = java.lang.ClassLoader;
  export import AccessibleObject = java.lang.reflect.AccessibleObject;
  export import TypeVariable = java.lang.reflect.TypeVariable;
  export import Member = java.lang.reflect.Member;
  export import Type = java.lang.reflect.Type;

  export module java.lang.reflect {
    export interface Method extends java.lang.reflect.Executable {
      // equals
      // public boolean java.lang.reflect.Method.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // getAnnotatedExceptionTypes
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedExceptionTypes()
      getAnnotatedExceptionTypes( cb: Callback<AnnotatedType[]>): void;
      getAnnotatedExceptionTypesSync(): AnnotatedType[];
      getAnnotatedExceptionTypesPromise(): Promise<AnnotatedType[]>;
      // getAnnotatedParameterTypes
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedParameterTypes()
      getAnnotatedParameterTypes( cb: Callback<AnnotatedType[]>): void;
      getAnnotatedParameterTypesSync(): AnnotatedType[];
      getAnnotatedParameterTypesPromise(): Promise<AnnotatedType[]>;
      // getAnnotatedReceiverType
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Executable.getAnnotatedReceiverType()
      getAnnotatedReceiverType( cb: Callback<AnnotatedType>): void;
      getAnnotatedReceiverTypeSync(): AnnotatedType;
      getAnnotatedReceiverTypePromise(): Promise<AnnotatedType>;
      // getAnnotatedReturnType
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Method.getAnnotatedReturnType()
      getAnnotatedReturnType( cb: Callback<AnnotatedType>): void;
      getAnnotatedReturnTypeSync(): AnnotatedType;
      getAnnotatedReturnTypePromise(): Promise<AnnotatedType>;
      // getAnnotation
      // public <T> T java.lang.reflect.Method.getAnnotation(java.lang.Class<T>)
      getAnnotation(arg0: Class, cb: Callback<any>): void;
      getAnnotationSync(arg0: Class): any;
      getAnnotationPromise(arg0: Class): Promise<any>;
      // getAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
      getAnnotations( cb: Callback<any[]>): void;
      getAnnotationsSync(): any[];
      getAnnotationsPromise(): Promise<any[]>;
      // getAnnotationsByType
      // public <T> T[] java.lang.reflect.Executable.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getAnnotationsByTypeSync(arg0: Class): any[];
      getAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // getDeclaredAnnotation
      // public <T> T java.lang.reflect.AccessibleObject.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<any>): void;
      getDeclaredAnnotationSync(arg0: Class): any;
      getDeclaredAnnotationPromise(arg0: Class): Promise<any>;
      // getDeclaredAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.Method.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<any[]>): void;
      getDeclaredAnnotationsSync(): any[];
      getDeclaredAnnotationsPromise(): Promise<any[]>;
      // getDeclaredAnnotationsByType
      // public <T> T[] java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): any[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getDeclaringClass
      // public java.lang.Class<?> java.lang.reflect.Method.getDeclaringClass()
      getDeclaringClass( cb: Callback<Class>): void;
      getDeclaringClassSync(): Class;
      getDeclaringClassPromise(): Promise<Class>;
      // getDefaultValue
      // public java.lang.Object java.lang.reflect.Method.getDefaultValue()
      getDefaultValue( cb: Callback<java.lang.Object>): void;
      getDefaultValueSync(): java.lang.Object;
      getDefaultValuePromise(): Promise<java.lang.Object>;
      // getExceptionTypes
      // public java.lang.Class<?>[] java.lang.reflect.Method.getExceptionTypes()
      getExceptionTypes( cb: Callback<Class[]>): void;
      getExceptionTypesSync(): Class[];
      getExceptionTypesPromise(): Promise<Class[]>;
      // getGenericExceptionTypes
      // public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericExceptionTypes()
      getGenericExceptionTypes( cb: Callback<Type[]>): void;
      getGenericExceptionTypesSync(): Type[];
      getGenericExceptionTypesPromise(): Promise<Type[]>;
      // getGenericParameterTypes
      // public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()
      getGenericParameterTypes( cb: Callback<Type[]>): void;
      getGenericParameterTypesSync(): Type[];
      getGenericParameterTypesPromise(): Promise<Type[]>;
      // getGenericReturnType
      // public java.lang.reflect.Type java.lang.reflect.Method.getGenericReturnType()
      getGenericReturnType( cb: Callback<Type>): void;
      getGenericReturnTypeSync(): Type;
      getGenericReturnTypePromise(): Promise<Type>;
      // getModifiers
      // public int java.lang.reflect.Method.getModifiers()
      getModifiers( cb: Callback<number>): void;
      getModifiersSync(): number;
      getModifiersPromise(): Promise<number>;
      // getName
      // public java.lang.String java.lang.reflect.Method.getName()
      getName( cb: Callback<string>): void;
      getNameSync(): string;
      getNamePromise(): Promise<string>;
      // getParameterAnnotations
      // public java.lang.annotation.Annotation[][] java.lang.reflect.Method.getParameterAnnotations()
      getParameterAnnotations( cb: Callback<any[][]>): void;
      getParameterAnnotationsSync(): any[][];
      getParameterAnnotationsPromise(): Promise<any[][]>;
      // getParameterCount
      // public int java.lang.reflect.Method.getParameterCount()
      getParameterCount( cb: Callback<number>): void;
      getParameterCountSync(): number;
      getParameterCountPromise(): Promise<number>;
      // getParameterTypes
      // public java.lang.Class<?>[] java.lang.reflect.Method.getParameterTypes()
      getParameterTypes( cb: Callback<Class[]>): void;
      getParameterTypesSync(): Class[];
      getParameterTypesPromise(): Promise<Class[]>;
      // getParameters
      // public java.lang.reflect.Parameter[] java.lang.reflect.Executable.getParameters()
      getParameters( cb: Callback<Parameter[]>): void;
      getParametersSync(): Parameter[];
      getParametersPromise(): Promise<Parameter[]>;
      // getReturnType
      // public java.lang.Class<?> java.lang.reflect.Method.getReturnType()
      getReturnType( cb: Callback<Class>): void;
      getReturnTypeSync(): Class;
      getReturnTypePromise(): Promise<Class>;
      // getTypeParameters
      // public java.lang.reflect.TypeVariable<java.lang.reflect.Method>[] java.lang.reflect.Method.getTypeParameters()
      getTypeParameters( cb: Callback<TypeVariable[]>): void;
      getTypeParametersSync(): TypeVariable[];
      getTypeParametersPromise(): Promise<TypeVariable[]>;
      // hashCode
      // public int java.lang.reflect.Method.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // invoke
      // public java.lang.Object java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) throws java.lang.IllegalAccessException,java.lang.IllegalArgumentException,java.lang.reflect.InvocationTargetException
      invoke(arg0: object_t, arg1: Array<object_t>, cb: Callback<java.lang.Object>): void;
      invokeSync(arg0: object_t, arg1: Array<object_t>): java.lang.Object;
      invokePromise(arg0: object_t, arg1: Array<object_t>): Promise<java.lang.Object>;
      // isAccessible
      // public boolean java.lang.reflect.AccessibleObject.isAccessible()
      isAccessible( cb: Callback<boolean>): void;
      isAccessibleSync(): boolean;
      isAccessiblePromise(): Promise<boolean>;
      // isAnnotationPresent
      // public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
      // isBridge
      // public boolean java.lang.reflect.Method.isBridge()
      isBridge( cb: Callback<boolean>): void;
      isBridgeSync(): boolean;
      isBridgePromise(): Promise<boolean>;
      // isDefault
      // public boolean java.lang.reflect.Method.isDefault()
      isDefault( cb: Callback<boolean>): void;
      isDefaultSync(): boolean;
      isDefaultPromise(): Promise<boolean>;
      // isSynthetic
      // public boolean java.lang.reflect.Method.isSynthetic()
      isSynthetic( cb: Callback<boolean>): void;
      isSyntheticSync(): boolean;
      isSyntheticPromise(): Promise<boolean>;
      // isVarArgs
      // public boolean java.lang.reflect.Method.isVarArgs()
      isVarArgs( cb: Callback<boolean>): void;
      isVarArgsSync(): boolean;
      isVarArgsPromise(): Promise<boolean>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // setAccessible
      // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
      // static method, see .Static
      // public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException
      setAccessible(arg0: boolean, cb: Callback<void>): void;
      setAccessibleSync(arg0: boolean): void;
      setAccessiblePromise(arg0: boolean): Promise<void>;
      // toGenericString
      // public java.lang.String java.lang.reflect.Method.toGenericString()
      toGenericString( cb: Callback<string>): void;
      toGenericStringSync(): string;
      toGenericStringPromise(): Promise<string>;
      // toString
      // public java.lang.String java.lang.reflect.Method.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: number, arg1: number, cb: Callback<void>): void;
      waitSync(arg0: number, arg1: number): void;
      waitPromise(arg0: number, arg1: number): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: number, cb: Callback<void>): void;
      waitSync(arg0: number): void;
      waitPromise(arg0: number): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module Method {
      export interface Static {
        // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
        setAccessible(arg0: AccessibleObject[], arg1: boolean, cb: Callback<void>): void;
        setAccessibleSync(arg0: AccessibleObject[], arg1: boolean): void;
        setAccessiblePromise(arg0: AccessibleObject[], arg1: boolean): Promise<void>;
      }
    }
  }

  export module java.lang {
    export interface Class extends java.lang.Object,java.lang.reflect.GenericDeclaration,java.lang.reflect.Type,java.lang.reflect.AnnotatedElement {
      // asSubclass
      // public <U> java.lang.Class<? extends U> java.lang.Class.asSubclass(java.lang.Class<U>)
      asSubclass(arg0: Class, cb: Callback<Class>): void;
      asSubclassSync(arg0: Class): Class;
      asSubclassPromise(arg0: Class): Promise<Class>;
      // cast
      // public T java.lang.Class.cast(java.lang.Object)
      cast(arg0: object_t, cb: Callback<java.lang.Object>): void;
      castSync(arg0: object_t): java.lang.Object;
      castPromise(arg0: object_t): Promise<java.lang.Object>;
      // desiredAssertionStatus
      // public boolean java.lang.Class.desiredAssertionStatus()
      desiredAssertionStatus( cb: Callback<boolean>): void;
      desiredAssertionStatusSync(): boolean;
      desiredAssertionStatusPromise(): Promise<boolean>;
      // equals
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // forName
      // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader) throws java.lang.ClassNotFoundException
      // static method, see .Static
      // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String) throws java.lang.ClassNotFoundException
      // static method, see .Static
      // getAnnotatedInterfaces
      // public java.lang.reflect.AnnotatedType[] java.lang.Class.getAnnotatedInterfaces()
      getAnnotatedInterfaces( cb: Callback<AnnotatedType[]>): void;
      getAnnotatedInterfacesSync(): AnnotatedType[];
      getAnnotatedInterfacesPromise(): Promise<AnnotatedType[]>;
      // getAnnotatedSuperclass
      // public java.lang.reflect.AnnotatedType java.lang.Class.getAnnotatedSuperclass()
      getAnnotatedSuperclass( cb: Callback<AnnotatedType>): void;
      getAnnotatedSuperclassSync(): AnnotatedType;
      getAnnotatedSuperclassPromise(): Promise<AnnotatedType>;
      // getAnnotation
      // public <A> A java.lang.Class.getAnnotation(java.lang.Class<A>)
      getAnnotation(arg0: Class, cb: Callback<any>): void;
      getAnnotationSync(arg0: Class): any;
      getAnnotationPromise(arg0: Class): Promise<any>;
      // getAnnotations
      // public java.lang.annotation.Annotation[] java.lang.Class.getAnnotations()
      getAnnotations( cb: Callback<any[]>): void;
      getAnnotationsSync(): any[];
      getAnnotationsPromise(): Promise<any[]>;
      // getAnnotationsByType
      // public <A> A[] java.lang.Class.getAnnotationsByType(java.lang.Class<A>)
      getAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getAnnotationsByTypeSync(arg0: Class): any[];
      getAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getCanonicalName
      // public java.lang.String java.lang.Class.getCanonicalName()
      getCanonicalName( cb: Callback<string>): void;
      getCanonicalNameSync(): string;
      getCanonicalNamePromise(): Promise<string>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // getClassLoader
      // public java.lang.ClassLoader java.lang.Class.getClassLoader()
      getClassLoader( cb: Callback<ClassLoader>): void;
      getClassLoaderSync(): ClassLoader;
      getClassLoaderPromise(): Promise<ClassLoader>;
      // getClasses
      // public java.lang.Class<?>[] java.lang.Class.getClasses()
      getClasses( cb: Callback<Class[]>): void;
      getClassesSync(): Class[];
      getClassesPromise(): Promise<Class[]>;
      // getComponentType
      // public native java.lang.Class<?> java.lang.Class.getComponentType()
      getComponentType( cb: Callback<Class>): void;
      getComponentTypeSync(): Class;
      getComponentTypePromise(): Promise<Class>;
      // getConstructor
      // public java.lang.reflect.Constructor<T> java.lang.Class.getConstructor(java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getConstructor(arg0: Array<Class>, cb: Callback<Constructor>): void;
      getConstructorSync(arg0: Array<Class>): Constructor;
      getConstructorPromise(arg0: Array<Class>): Promise<Constructor>;
      // getConstructors
      // public java.lang.reflect.Constructor<?>[] java.lang.Class.getConstructors() throws java.lang.SecurityException
      getConstructors( cb: Callback<Constructor[]>): void;
      getConstructorsSync(): Constructor[];
      getConstructorsPromise(): Promise<Constructor[]>;
      // getDeclaredAnnotation
      // public <A> A java.lang.Class.getDeclaredAnnotation(java.lang.Class<A>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<any>): void;
      getDeclaredAnnotationSync(arg0: Class): any;
      getDeclaredAnnotationPromise(arg0: Class): Promise<any>;
      // getDeclaredAnnotations
      // public java.lang.annotation.Annotation[] java.lang.Class.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<any[]>): void;
      getDeclaredAnnotationsSync(): any[];
      getDeclaredAnnotationsPromise(): Promise<any[]>;
      // getDeclaredAnnotationsByType
      // public <A> A[] java.lang.Class.getDeclaredAnnotationsByType(java.lang.Class<A>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): any[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getDeclaredClasses
      // public java.lang.Class<?>[] java.lang.Class.getDeclaredClasses() throws java.lang.SecurityException
      getDeclaredClasses( cb: Callback<Class[]>): void;
      getDeclaredClassesSync(): Class[];
      getDeclaredClassesPromise(): Promise<Class[]>;
      // getDeclaredConstructor
      // public java.lang.reflect.Constructor<T> java.lang.Class.getDeclaredConstructor(java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getDeclaredConstructor(arg0: Array<Class>, cb: Callback<Constructor>): void;
      getDeclaredConstructorSync(arg0: Array<Class>): Constructor;
      getDeclaredConstructorPromise(arg0: Array<Class>): Promise<Constructor>;
      // getDeclaredConstructors
      // public java.lang.reflect.Constructor<?>[] java.lang.Class.getDeclaredConstructors() throws java.lang.SecurityException
      getDeclaredConstructors( cb: Callback<Constructor[]>): void;
      getDeclaredConstructorsSync(): Constructor[];
      getDeclaredConstructorsPromise(): Promise<Constructor[]>;
      // getDeclaredField
      // public java.lang.reflect.Field java.lang.Class.getDeclaredField(java.lang.String) throws java.lang.NoSuchFieldException,java.lang.SecurityException
      getDeclaredField(arg0: string_t, cb: Callback<Field>): void;
      getDeclaredFieldSync(arg0: string_t): Field;
      getDeclaredFieldPromise(arg0: string_t): Promise<Field>;
      // getDeclaredFields
      // public java.lang.reflect.Field[] java.lang.Class.getDeclaredFields() throws java.lang.SecurityException
      getDeclaredFields( cb: Callback<Field[]>): void;
      getDeclaredFieldsSync(): Field[];
      getDeclaredFieldsPromise(): Promise<Field[]>;
      // getDeclaredMethod
      // public java.lang.reflect.Method java.lang.Class.getDeclaredMethod(java.lang.String,java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getDeclaredMethod(arg0: string_t, arg1: Array<Class>, cb: Callback<Method>): void;
      getDeclaredMethodSync(arg0: string_t, arg1: Array<Class>): Method;
      getDeclaredMethodPromise(arg0: string_t, arg1: Array<Class>): Promise<Method>;
      // getDeclaredMethods
      // public java.lang.reflect.Method[] java.lang.Class.getDeclaredMethods() throws java.lang.SecurityException
      getDeclaredMethods( cb: Callback<Method[]>): void;
      getDeclaredMethodsSync(): Method[];
      getDeclaredMethodsPromise(): Promise<Method[]>;
      // getDeclaringClass
      // public java.lang.Class<?> java.lang.Class.getDeclaringClass() throws java.lang.SecurityException
      getDeclaringClass( cb: Callback<Class>): void;
      getDeclaringClassSync(): Class;
      getDeclaringClassPromise(): Promise<Class>;
      // getEnclosingClass
      // public java.lang.Class<?> java.lang.Class.getEnclosingClass() throws java.lang.SecurityException
      getEnclosingClass( cb: Callback<Class>): void;
      getEnclosingClassSync(): Class;
      getEnclosingClassPromise(): Promise<Class>;
      // getEnclosingConstructor
      // public java.lang.reflect.Constructor<?> java.lang.Class.getEnclosingConstructor() throws java.lang.SecurityException
      getEnclosingConstructor( cb: Callback<Constructor>): void;
      getEnclosingConstructorSync(): Constructor;
      getEnclosingConstructorPromise(): Promise<Constructor>;
      // getEnclosingMethod
      // public java.lang.reflect.Method java.lang.Class.getEnclosingMethod() throws java.lang.SecurityException
      getEnclosingMethod( cb: Callback<Method>): void;
      getEnclosingMethodSync(): Method;
      getEnclosingMethodPromise(): Promise<Method>;
      // getEnumConstants
      // public T[] java.lang.Class.getEnumConstants()
      getEnumConstants( cb: Callback<java.lang.Object[]>): void;
      getEnumConstantsSync(): java.lang.Object[];
      getEnumConstantsPromise(): Promise<java.lang.Object[]>;
      // getField
      // public java.lang.reflect.Field java.lang.Class.getField(java.lang.String) throws java.lang.NoSuchFieldException,java.lang.SecurityException
      getField(arg0: string_t, cb: Callback<Field>): void;
      getFieldSync(arg0: string_t): Field;
      getFieldPromise(arg0: string_t): Promise<Field>;
      // getFields
      // public java.lang.reflect.Field[] java.lang.Class.getFields() throws java.lang.SecurityException
      getFields( cb: Callback<Field[]>): void;
      getFieldsSync(): Field[];
      getFieldsPromise(): Promise<Field[]>;
      // getGenericInterfaces
      // public java.lang.reflect.Type[] java.lang.Class.getGenericInterfaces()
      getGenericInterfaces( cb: Callback<Type[]>): void;
      getGenericInterfacesSync(): Type[];
      getGenericInterfacesPromise(): Promise<Type[]>;
      // getGenericSuperclass
      // public java.lang.reflect.Type java.lang.Class.getGenericSuperclass()
      getGenericSuperclass( cb: Callback<Type>): void;
      getGenericSuperclassSync(): Type;
      getGenericSuperclassPromise(): Promise<Type>;
      // getInterfaces
      // public java.lang.Class<?>[] java.lang.Class.getInterfaces()
      getInterfaces( cb: Callback<Class[]>): void;
      getInterfacesSync(): Class[];
      getInterfacesPromise(): Promise<Class[]>;
      // getMethod
      // public java.lang.reflect.Method java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getMethod(arg0: string_t, arg1: Array<Class>, cb: Callback<Method>): void;
      getMethodSync(arg0: string_t, arg1: Array<Class>): Method;
      getMethodPromise(arg0: string_t, arg1: Array<Class>): Promise<Method>;
      // getMethods
      // public java.lang.reflect.Method[] java.lang.Class.getMethods() throws java.lang.SecurityException
      getMethods( cb: Callback<Method[]>): void;
      getMethodsSync(): Method[];
      getMethodsPromise(): Promise<Method[]>;
      // getModifiers
      // public native int java.lang.Class.getModifiers()
      getModifiers( cb: Callback<number>): void;
      getModifiersSync(): number;
      getModifiersPromise(): Promise<number>;
      // getName
      // public java.lang.String java.lang.Class.getName()
      getName( cb: Callback<string>): void;
      getNameSync(): string;
      getNamePromise(): Promise<string>;
      // getPackage
      // public java.lang.Package java.lang.Class.getPackage()
      getPackage( cb: Callback<any>): void;
      getPackageSync(): any;
      getPackagePromise(): Promise<any>;
      // getProtectionDomain
      // public java.security.ProtectionDomain java.lang.Class.getProtectionDomain()
      getProtectionDomain( cb: Callback<any>): void;
      getProtectionDomainSync(): any;
      getProtectionDomainPromise(): Promise<any>;
      // getResource
      // public java.net.URL java.lang.Class.getResource(java.lang.String)
      getResource(arg0: string_t, cb: Callback<any>): void;
      getResourceSync(arg0: string_t): any;
      getResourcePromise(arg0: string_t): Promise<any>;
      // getResourceAsStream
      // public java.io.InputStream java.lang.Class.getResourceAsStream(java.lang.String)
      getResourceAsStream(arg0: string_t, cb: Callback<any>): void;
      getResourceAsStreamSync(arg0: string_t): any;
      getResourceAsStreamPromise(arg0: string_t): Promise<any>;
      // getSigners
      // public native java.lang.Object[] java.lang.Class.getSigners()
      getSigners( cb: Callback<java.lang.Object[]>): void;
      getSignersSync(): java.lang.Object[];
      getSignersPromise(): Promise<java.lang.Object[]>;
      // getSimpleName
      // public java.lang.String java.lang.Class.getSimpleName()
      getSimpleName( cb: Callback<string>): void;
      getSimpleNameSync(): string;
      getSimpleNamePromise(): Promise<string>;
      // getSuperclass
      // public native java.lang.Class<? super T> java.lang.Class.getSuperclass()
      getSuperclass( cb: Callback<Class>): void;
      getSuperclassSync(): Class;
      getSuperclassPromise(): Promise<Class>;
      // getTypeName
      // public java.lang.String java.lang.Class.getTypeName()
      getTypeName( cb: Callback<string>): void;
      getTypeNameSync(): string;
      getTypeNamePromise(): Promise<string>;
      // getTypeParameters
      // public java.lang.reflect.TypeVariable<java.lang.Class<T>>[] java.lang.Class.getTypeParameters()
      getTypeParameters( cb: Callback<TypeVariable[]>): void;
      getTypeParametersSync(): TypeVariable[];
      getTypeParametersPromise(): Promise<TypeVariable[]>;
      // hashCode
      // public native int java.lang.Object.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // isAnnotation
      // public boolean java.lang.Class.isAnnotation()
      isAnnotation( cb: Callback<boolean>): void;
      isAnnotationSync(): boolean;
      isAnnotationPromise(): Promise<boolean>;
      // isAnnotationPresent
      // public boolean java.lang.Class.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
      // isAnonymousClass
      // public boolean java.lang.Class.isAnonymousClass()
      isAnonymousClass( cb: Callback<boolean>): void;
      isAnonymousClassSync(): boolean;
      isAnonymousClassPromise(): Promise<boolean>;
      // isArray
      // public native boolean java.lang.Class.isArray()
      isArray( cb: Callback<boolean>): void;
      isArraySync(): boolean;
      isArrayPromise(): Promise<boolean>;
      // isAssignableFrom
      // public native boolean java.lang.Class.isAssignableFrom(java.lang.Class<?>)
      isAssignableFrom(arg0: Class, cb: Callback<boolean>): void;
      isAssignableFromSync(arg0: Class): boolean;
      isAssignableFromPromise(arg0: Class): Promise<boolean>;
      // isEnum
      // public boolean java.lang.Class.isEnum()
      isEnum( cb: Callback<boolean>): void;
      isEnumSync(): boolean;
      isEnumPromise(): Promise<boolean>;
      // isInstance
      // public native boolean java.lang.Class.isInstance(java.lang.Object)
      isInstance(arg0: object_t, cb: Callback<boolean>): void;
      isInstanceSync(arg0: object_t): boolean;
      isInstancePromise(arg0: object_t): Promise<boolean>;
      // isInterface
      // public native boolean java.lang.Class.isInterface()
      isInterface( cb: Callback<boolean>): void;
      isInterfaceSync(): boolean;
      isInterfacePromise(): Promise<boolean>;
      // isLocalClass
      // public boolean java.lang.Class.isLocalClass()
      isLocalClass( cb: Callback<boolean>): void;
      isLocalClassSync(): boolean;
      isLocalClassPromise(): Promise<boolean>;
      // isMemberClass
      // public boolean java.lang.Class.isMemberClass()
      isMemberClass( cb: Callback<boolean>): void;
      isMemberClassSync(): boolean;
      isMemberClassPromise(): Promise<boolean>;
      // isPrimitive
      // public native boolean java.lang.Class.isPrimitive()
      isPrimitive( cb: Callback<boolean>): void;
      isPrimitiveSync(): boolean;
      isPrimitivePromise(): Promise<boolean>;
      // isSynthetic
      // public boolean java.lang.Class.isSynthetic()
      isSynthetic( cb: Callback<boolean>): void;
      isSyntheticSync(): boolean;
      isSyntheticPromise(): Promise<boolean>;
      // newInstance
      // public T java.lang.Class.newInstance() throws java.lang.InstantiationException,java.lang.IllegalAccessException
      newInstance( cb: Callback<java.lang.Object>): void;
      newInstanceSync(): java.lang.Object;
      newInstancePromise(): Promise<java.lang.Object>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // toGenericString
      // public java.lang.String java.lang.Class.toGenericString()
      toGenericString( cb: Callback<string>): void;
      toGenericStringSync(): string;
      toGenericStringPromise(): Promise<string>;
      // toString
      // public java.lang.String java.lang.Class.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: number, arg1: number, cb: Callback<void>): void;
      waitSync(arg0: number, arg1: number): void;
      waitPromise(arg0: number, arg1: number): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: number, cb: Callback<void>): void;
      waitSync(arg0: number): void;
      waitPromise(arg0: number): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module Class {
      export interface Static {
        // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader) throws java.lang.ClassNotFoundException
        forName(arg0: string_t, arg1: boolean, arg2: ClassLoader, cb: Callback<Class>): void;
        forNameSync(arg0: string_t, arg1: boolean, arg2: ClassLoader): Class;
        forNamePromise(arg0: string_t, arg1: boolean, arg2: ClassLoader): Promise<Class>;
        // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String) throws java.lang.ClassNotFoundException
        forName(arg0: string_t, cb: Callback<Class>): void;
        forNameSync(arg0: string_t): Class;
        forNamePromise(arg0: string_t): Promise<Class>;
      }
    }
  }

  export module java.lang.reflect {
    export interface Parameter extends java.lang.Object,java.lang.reflect.AnnotatedElement {
      // equals
      // public boolean java.lang.reflect.Parameter.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // getAnnotatedType
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Parameter.getAnnotatedType()
      getAnnotatedType( cb: Callback<AnnotatedType>): void;
      getAnnotatedTypeSync(): AnnotatedType;
      getAnnotatedTypePromise(): Promise<AnnotatedType>;
      // getAnnotation
      // public <T> T java.lang.reflect.Parameter.getAnnotation(java.lang.Class<T>)
      getAnnotation(arg0: Class, cb: Callback<any>): void;
      getAnnotationSync(arg0: Class): any;
      getAnnotationPromise(arg0: Class): Promise<any>;
      // getAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.Parameter.getAnnotations()
      getAnnotations( cb: Callback<any[]>): void;
      getAnnotationsSync(): any[];
      getAnnotationsPromise(): Promise<any[]>;
      // getAnnotationsByType
      // public <T> T[] java.lang.reflect.Parameter.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getAnnotationsByTypeSync(arg0: Class): any[];
      getAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // getDeclaredAnnotation
      // public <T> T java.lang.reflect.Parameter.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<any>): void;
      getDeclaredAnnotationSync(arg0: Class): any;
      getDeclaredAnnotationPromise(arg0: Class): Promise<any>;
      // getDeclaredAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.Parameter.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<any[]>): void;
      getDeclaredAnnotationsSync(): any[];
      getDeclaredAnnotationsPromise(): Promise<any[]>;
      // getDeclaredAnnotationsByType
      // public <T> T[] java.lang.reflect.Parameter.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): any[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getDeclaringExecutable
      // public java.lang.reflect.Executable java.lang.reflect.Parameter.getDeclaringExecutable()
      getDeclaringExecutable( cb: Callback<Executable>): void;
      getDeclaringExecutableSync(): Executable;
      getDeclaringExecutablePromise(): Promise<Executable>;
      // getModifiers
      // public int java.lang.reflect.Parameter.getModifiers()
      getModifiers( cb: Callback<number>): void;
      getModifiersSync(): number;
      getModifiersPromise(): Promise<number>;
      // getName
      // public java.lang.String java.lang.reflect.Parameter.getName()
      getName( cb: Callback<string>): void;
      getNameSync(): string;
      getNamePromise(): Promise<string>;
      // getParameterizedType
      // public java.lang.reflect.Type java.lang.reflect.Parameter.getParameterizedType()
      getParameterizedType( cb: Callback<Type>): void;
      getParameterizedTypeSync(): Type;
      getParameterizedTypePromise(): Promise<Type>;
      // getType
      // public java.lang.Class<?> java.lang.reflect.Parameter.getType()
      getType( cb: Callback<Class>): void;
      getTypeSync(): Class;
      getTypePromise(): Promise<Class>;
      // hashCode
      // public int java.lang.reflect.Parameter.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // isAnnotationPresent
      // public default boolean java.lang.reflect.AnnotatedElement.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
      // isImplicit
      // public boolean java.lang.reflect.Parameter.isImplicit()
      isImplicit( cb: Callback<boolean>): void;
      isImplicitSync(): boolean;
      isImplicitPromise(): Promise<boolean>;
      // isNamePresent
      // public boolean java.lang.reflect.Parameter.isNamePresent()
      isNamePresent( cb: Callback<boolean>): void;
      isNamePresentSync(): boolean;
      isNamePresentPromise(): Promise<boolean>;
      // isSynthetic
      // public boolean java.lang.reflect.Parameter.isSynthetic()
      isSynthetic( cb: Callback<boolean>): void;
      isSyntheticSync(): boolean;
      isSyntheticPromise(): Promise<boolean>;
      // isVarArgs
      // public boolean java.lang.reflect.Parameter.isVarArgs()
      isVarArgs( cb: Callback<boolean>): void;
      isVarArgsSync(): boolean;
      isVarArgsPromise(): Promise<boolean>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // toString
      // public java.lang.String java.lang.reflect.Parameter.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: number, arg1: number, cb: Callback<void>): void;
      waitSync(arg0: number, arg1: number): void;
      waitPromise(arg0: number, arg1: number): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: number, cb: Callback<void>): void;
      waitSync(arg0: number): void;
      waitPromise(arg0: number): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module Parameter {
      export interface Static {
      }
    }
  }

  export module java.lang {
    export interface String extends java.lang.Object,java.lang.Comparable {
      // charAt
      // public char java.lang.String.charAt(int)
      charAt(arg0: number, cb: Callback<string>): void;
      charAtSync(arg0: number): string;
      charAtPromise(arg0: number): Promise<string>;
      // chars
      // public default java.util.stream.IntStream java.lang.CharSequence.chars()
      chars( cb: Callback<any>): void;
      charsSync(): any;
      charsPromise(): Promise<any>;
      // codePointAt
      // public int java.lang.String.codePointAt(int)
      codePointAt(arg0: number, cb: Callback<number>): void;
      codePointAtSync(arg0: number): number;
      codePointAtPromise(arg0: number): Promise<number>;
      // codePointBefore
      // public int java.lang.String.codePointBefore(int)
      codePointBefore(arg0: number, cb: Callback<number>): void;
      codePointBeforeSync(arg0: number): number;
      codePointBeforePromise(arg0: number): Promise<number>;
      // codePointCount
      // public int java.lang.String.codePointCount(int,int)
      codePointCount(arg0: number, arg1: number, cb: Callback<number>): void;
      codePointCountSync(arg0: number, arg1: number): number;
      codePointCountPromise(arg0: number, arg1: number): Promise<number>;
      // codePoints
      // public default java.util.stream.IntStream java.lang.CharSequence.codePoints()
      codePoints( cb: Callback<any>): void;
      codePointsSync(): any;
      codePointsPromise(): Promise<any>;
      // compareTo
      // public int java.lang.String.compareTo(java.lang.String)
      compareTo(arg0: string_t, cb: Callback<number>): void;
      compareToSync(arg0: string_t): number;
      compareToPromise(arg0: string_t): Promise<number>;
      // public int java.lang.String.compareTo(java.lang.Object)
      compareTo(arg0: object_t, cb: Callback<number>): void;
      compareToSync(arg0: object_t): number;
      compareToPromise(arg0: object_t): Promise<number>;
      // compareToIgnoreCase
      // public int java.lang.String.compareToIgnoreCase(java.lang.String)
      compareToIgnoreCase(arg0: string_t, cb: Callback<number>): void;
      compareToIgnoreCaseSync(arg0: string_t): number;
      compareToIgnoreCasePromise(arg0: string_t): Promise<number>;
      // concat
      // public java.lang.String java.lang.String.concat(java.lang.String)
      concat(arg0: string_t, cb: Callback<string>): void;
      concatSync(arg0: string_t): string;
      concatPromise(arg0: string_t): Promise<string>;
      // contains
      // public boolean java.lang.String.contains(java.lang.CharSequence)
      contains(arg0: any, cb: Callback<boolean>): void;
      containsSync(arg0: any): boolean;
      containsPromise(arg0: any): Promise<boolean>;
      // contentEquals
      // public boolean java.lang.String.contentEquals(java.lang.StringBuffer)
      contentEquals(arg0: any, cb: Callback<boolean>): void;
      contentEqualsSync(arg0: any): boolean;
      contentEqualsPromise(arg0: any): Promise<boolean>;
      // public boolean java.lang.String.contentEquals(java.lang.CharSequence)
      contentEquals(arg0: any, cb: Callback<boolean>): void;
      contentEqualsSync(arg0: any): boolean;
      contentEqualsPromise(arg0: any): Promise<boolean>;
      // copyValueOf
      // public static java.lang.String java.lang.String.copyValueOf(char[],int,int)
      // static method, see .Static
      // public static java.lang.String java.lang.String.copyValueOf(char[])
      // static method, see .Static
      // endsWith
      // public boolean java.lang.String.endsWith(java.lang.String)
      endsWith(arg0: string_t, cb: Callback<boolean>): void;
      endsWithSync(arg0: string_t): boolean;
      endsWithPromise(arg0: string_t): Promise<boolean>;
      // equals
      // public boolean java.lang.String.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // equalsIgnoreCase
      // public boolean java.lang.String.equalsIgnoreCase(java.lang.String)
      equalsIgnoreCase(arg0: string_t, cb: Callback<boolean>): void;
      equalsIgnoreCaseSync(arg0: string_t): boolean;
      equalsIgnoreCasePromise(arg0: string_t): Promise<boolean>;
      // format
      // public static java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object...)
      // static method, see .Static
      // public static java.lang.String java.lang.String.format(java.lang.String,java.lang.Object...)
      // static method, see .Static
      // getBytes
      // public void java.lang.String.getBytes(int,int,byte[],int)
      getBytes(arg0: number, arg1: number, arg2: number[], arg3: number, cb: Callback<void>): void;
      getBytesSync(arg0: number, arg1: number, arg2: number[], arg3: number): void;
      getBytesPromise(arg0: number, arg1: number, arg2: number[], arg3: number): Promise<void>;
      // public byte[] java.lang.String.getBytes(java.lang.String) throws java.io.UnsupportedEncodingException
      getBytes(arg0: string_t, cb: Callback<number[]>): void;
      getBytesSync(arg0: string_t): number[];
      getBytesPromise(arg0: string_t): Promise<number[]>;
      // public byte[] java.lang.String.getBytes(java.nio.charset.Charset)
      getBytes(arg0: any, cb: Callback<number[]>): void;
      getBytesSync(arg0: any): number[];
      getBytesPromise(arg0: any): Promise<number[]>;
      // public byte[] java.lang.String.getBytes()
      getBytes( cb: Callback<number[]>): void;
      getBytesSync(): number[];
      getBytesPromise(): Promise<number[]>;
      // getChars
      // public void java.lang.String.getChars(int,int,char[],int)
      getChars(arg0: number, arg1: number, arg2: string[], arg3: number, cb: Callback<void>): void;
      getCharsSync(arg0: number, arg1: number, arg2: string[], arg3: number): void;
      getCharsPromise(arg0: number, arg1: number, arg2: string[], arg3: number): Promise<void>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // hashCode
      // public int java.lang.String.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // indexOf
      // public int java.lang.String.indexOf(java.lang.String,int)
      indexOf(arg0: string_t, arg1: number, cb: Callback<number>): void;
      indexOfSync(arg0: string_t, arg1: number): number;
      indexOfPromise(arg0: string_t, arg1: number): Promise<number>;
      // public int java.lang.String.indexOf(int,int)
      indexOf(arg0: number, arg1: number, cb: Callback<number>): void;
      indexOfSync(arg0: number, arg1: number): number;
      indexOfPromise(arg0: number, arg1: number): Promise<number>;
      // public int java.lang.String.indexOf(java.lang.String)
      indexOf(arg0: string_t, cb: Callback<number>): void;
      indexOfSync(arg0: string_t): number;
      indexOfPromise(arg0: string_t): Promise<number>;
      // public int java.lang.String.indexOf(int)
      indexOf(arg0: number, cb: Callback<number>): void;
      indexOfSync(arg0: number): number;
      indexOfPromise(arg0: number): Promise<number>;
      // intern
      // public native java.lang.String java.lang.String.intern()
      intern( cb: Callback<string>): void;
      internSync(): string;
      internPromise(): Promise<string>;
      // isEmpty
      // public boolean java.lang.String.isEmpty()
      isEmpty( cb: Callback<boolean>): void;
      isEmptySync(): boolean;
      isEmptyPromise(): Promise<boolean>;
      // join
      // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence...)
      // static method, see .Static
      // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.Iterable<? extends java.lang.CharSequence>)
      // static method, see .Static
      // lastIndexOf
      // public int java.lang.String.lastIndexOf(java.lang.String,int)
      lastIndexOf(arg0: string_t, arg1: number, cb: Callback<number>): void;
      lastIndexOfSync(arg0: string_t, arg1: number): number;
      lastIndexOfPromise(arg0: string_t, arg1: number): Promise<number>;
      // public int java.lang.String.lastIndexOf(int,int)
      lastIndexOf(arg0: number, arg1: number, cb: Callback<number>): void;
      lastIndexOfSync(arg0: number, arg1: number): number;
      lastIndexOfPromise(arg0: number, arg1: number): Promise<number>;
      // public int java.lang.String.lastIndexOf(java.lang.String)
      lastIndexOf(arg0: string_t, cb: Callback<number>): void;
      lastIndexOfSync(arg0: string_t): number;
      lastIndexOfPromise(arg0: string_t): Promise<number>;
      // public int java.lang.String.lastIndexOf(int)
      lastIndexOf(arg0: number, cb: Callback<number>): void;
      lastIndexOfSync(arg0: number): number;
      lastIndexOfPromise(arg0: number): Promise<number>;
      // length
      // public int java.lang.String.length()
      length( cb: Callback<number>): void;
      lengthSync(): number;
      lengthPromise(): Promise<number>;
      // matches
      // public boolean java.lang.String.matches(java.lang.String)
      matches(arg0: string_t, cb: Callback<boolean>): void;
      matchesSync(arg0: string_t): boolean;
      matchesPromise(arg0: string_t): Promise<boolean>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // offsetByCodePoints
      // public int java.lang.String.offsetByCodePoints(int,int)
      offsetByCodePoints(arg0: number, arg1: number, cb: Callback<number>): void;
      offsetByCodePointsSync(arg0: number, arg1: number): number;
      offsetByCodePointsPromise(arg0: number, arg1: number): Promise<number>;
      // regionMatches
      // public boolean java.lang.String.regionMatches(boolean,int,java.lang.String,int,int)
      regionMatches(arg0: boolean, arg1: number, arg2: string_t, arg3: number, arg4: number, cb: Callback<boolean>): void;
      regionMatchesSync(arg0: boolean, arg1: number, arg2: string_t, arg3: number, arg4: number): boolean;
      regionMatchesPromise(arg0: boolean, arg1: number, arg2: string_t, arg3: number, arg4: number): Promise<boolean>;
      // public boolean java.lang.String.regionMatches(int,java.lang.String,int,int)
      regionMatches(arg0: number, arg1: string_t, arg2: number, arg3: number, cb: Callback<boolean>): void;
      regionMatchesSync(arg0: number, arg1: string_t, arg2: number, arg3: number): boolean;
      regionMatchesPromise(arg0: number, arg1: string_t, arg2: number, arg3: number): Promise<boolean>;
      // replace
      // public java.lang.String java.lang.String.replace(char,char)
      replace(arg0: string, arg1: string, cb: Callback<string>): void;
      replaceSync(arg0: string, arg1: string): string;
      replacePromise(arg0: string, arg1: string): Promise<string>;
      // public java.lang.String java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)
      replace(arg0: any, arg1: any, cb: Callback<string>): void;
      replaceSync(arg0: any, arg1: any): string;
      replacePromise(arg0: any, arg1: any): Promise<string>;
      // replaceAll
      // public java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String)
      replaceAll(arg0: string_t, arg1: string_t, cb: Callback<string>): void;
      replaceAllSync(arg0: string_t, arg1: string_t): string;
      replaceAllPromise(arg0: string_t, arg1: string_t): Promise<string>;
      // replaceFirst
      // public java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String)
      replaceFirst(arg0: string_t, arg1: string_t, cb: Callback<string>): void;
      replaceFirstSync(arg0: string_t, arg1: string_t): string;
      replaceFirstPromise(arg0: string_t, arg1: string_t): Promise<string>;
      // split
      // public java.lang.String[] java.lang.String.split(java.lang.String,int)
      split(arg0: string_t, arg1: number, cb: Callback<string[]>): void;
      splitSync(arg0: string_t, arg1: number): string[];
      splitPromise(arg0: string_t, arg1: number): Promise<string[]>;
      // public java.lang.String[] java.lang.String.split(java.lang.String)
      split(arg0: string_t, cb: Callback<string[]>): void;
      splitSync(arg0: string_t): string[];
      splitPromise(arg0: string_t): Promise<string[]>;
      // startsWith
      // public boolean java.lang.String.startsWith(java.lang.String,int)
      startsWith(arg0: string_t, arg1: number, cb: Callback<boolean>): void;
      startsWithSync(arg0: string_t, arg1: number): boolean;
      startsWithPromise(arg0: string_t, arg1: number): Promise<boolean>;
      // public boolean java.lang.String.startsWith(java.lang.String)
      startsWith(arg0: string_t, cb: Callback<boolean>): void;
      startsWithSync(arg0: string_t): boolean;
      startsWithPromise(arg0: string_t): Promise<boolean>;
      // subSequence
      // public java.lang.CharSequence java.lang.String.subSequence(int,int)
      subSequence(arg0: number, arg1: number, cb: Callback<any>): void;
      subSequenceSync(arg0: number, arg1: number): any;
      subSequencePromise(arg0: number, arg1: number): Promise<any>;
      // substring
      // public java.lang.String java.lang.String.substring(int,int)
      substring(arg0: number, arg1: number, cb: Callback<string>): void;
      substringSync(arg0: number, arg1: number): string;
      substringPromise(arg0: number, arg1: number): Promise<string>;
      // public java.lang.String java.lang.String.substring(int)
      substring(arg0: number, cb: Callback<string>): void;
      substringSync(arg0: number): string;
      substringPromise(arg0: number): Promise<string>;
      // toCharArray
      // public char[] java.lang.String.toCharArray()
      toCharArray( cb: Callback<string[]>): void;
      toCharArraySync(): string[];
      toCharArrayPromise(): Promise<string[]>;
      // toLowerCase
      // public java.lang.String java.lang.String.toLowerCase(java.util.Locale)
      toLowerCase(arg0: any, cb: Callback<string>): void;
      toLowerCaseSync(arg0: any): string;
      toLowerCasePromise(arg0: any): Promise<string>;
      // public java.lang.String java.lang.String.toLowerCase()
      toLowerCase( cb: Callback<string>): void;
      toLowerCaseSync(): string;
      toLowerCasePromise(): Promise<string>;
      // toString
      // public java.lang.String java.lang.String.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // toUpperCase
      // public java.lang.String java.lang.String.toUpperCase(java.util.Locale)
      toUpperCase(arg0: any, cb: Callback<string>): void;
      toUpperCaseSync(arg0: any): string;
      toUpperCasePromise(arg0: any): Promise<string>;
      // public java.lang.String java.lang.String.toUpperCase()
      toUpperCase( cb: Callback<string>): void;
      toUpperCaseSync(): string;
      toUpperCasePromise(): Promise<string>;
      // trim
      // public java.lang.String java.lang.String.trim()
      trim( cb: Callback<string>): void;
      trimSync(): string;
      trimPromise(): Promise<string>;
      // valueOf
      // public static java.lang.String java.lang.String.valueOf(char[],int,int)
      // static method, see .Static
      // public static java.lang.String java.lang.String.valueOf(java.lang.Object)
      // static method, see .Static
      // public static java.lang.String java.lang.String.valueOf(char[])
      // static method, see .Static
      // public static java.lang.String java.lang.String.valueOf(boolean)
      // static method, see .Static
      // public static java.lang.String java.lang.String.valueOf(long)
      // static method, see .Static
      // public static java.lang.String java.lang.String.valueOf(int)
      // static method, see .Static
      // public static java.lang.String java.lang.String.valueOf(float)
      // static method, see .Static
      // public static java.lang.String java.lang.String.valueOf(double)
      // static method, see .Static
      // public static java.lang.String java.lang.String.valueOf(char)
      // static method, see .Static
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: number, arg1: number, cb: Callback<void>): void;
      waitSync(arg0: number, arg1: number): void;
      waitPromise(arg0: number, arg1: number): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: number, cb: Callback<void>): void;
      waitSync(arg0: number): void;
      waitPromise(arg0: number): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module String {
      export interface Static {
        new (arg0: number[], arg1: number, arg2: number, arg3: string_t): java.lang.String;
        new (arg0: number[], arg1: number, arg2: number, arg3: number): java.lang.String;
        new (arg0: number[], arg1: number, arg2: number, arg3: any): java.lang.String;
        new (arg0: number[], arg1: number, arg2: number): java.lang.String;
        new (arg0: string[], arg1: number, arg2: number): java.lang.String;
        new (arg0: number[], arg1: number, arg2: number): java.lang.String;
        new (arg0: number[], arg1: string_t): java.lang.String;
        new (arg0: number[], arg1: number): java.lang.String;
        new (arg0: number[], arg1: any): java.lang.String;
        new (arg0: string_t): java.lang.String;
        new (arg0: string[]): java.lang.String;
        new (arg0: number[]): java.lang.String;
        new (arg0: any): java.lang.String;
        new (arg0: any): java.lang.String;
        new (): java.lang.String;
        // public static java.lang.String java.lang.String.copyValueOf(char[],int,int)
        copyValueOf(arg0: string[], arg1: number, arg2: number, cb: Callback<string>): void;
        copyValueOfSync(arg0: string[], arg1: number, arg2: number): string;
        copyValueOfPromise(arg0: string[], arg1: number, arg2: number): Promise<string>;
        // public static java.lang.String java.lang.String.copyValueOf(char[])
        copyValueOf(arg0: string[], cb: Callback<string>): void;
        copyValueOfSync(arg0: string[]): string;
        copyValueOfPromise(arg0: string[]): Promise<string>;
        // public static java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object...)
        format(arg0: any, arg1: string_t, arg2: Array<object_t>, cb: Callback<string>): void;
        formatSync(arg0: any, arg1: string_t, arg2: Array<object_t>): string;
        formatPromise(arg0: any, arg1: string_t, arg2: Array<object_t>): Promise<string>;
        // public static java.lang.String java.lang.String.format(java.lang.String,java.lang.Object...)
        format(arg0: string_t, arg1: Array<object_t>, cb: Callback<string>): void;
        formatSync(arg0: string_t, arg1: Array<object_t>): string;
        formatPromise(arg0: string_t, arg1: Array<object_t>): Promise<string>;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence...)
        join(arg0: any, arg1: Array<any>, cb: Callback<string>): void;
        joinSync(arg0: any, arg1: Array<any>): string;
        joinPromise(arg0: any, arg1: Array<any>): Promise<string>;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.Iterable<? extends java.lang.CharSequence>)
        join(arg0: any, arg1: Iterable, cb: Callback<string>): void;
        joinSync(arg0: any, arg1: Iterable): string;
        joinPromise(arg0: any, arg1: Iterable): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char[],int,int)
        valueOf(arg0: string[], arg1: number, arg2: number, cb: Callback<string>): void;
        valueOfSync(arg0: string[], arg1: number, arg2: number): string;
        valueOfPromise(arg0: string[], arg1: number, arg2: number): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(java.lang.Object)
        valueOf(arg0: object_t, cb: Callback<string>): void;
        valueOfSync(arg0: object_t): string;
        valueOfPromise(arg0: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char[])
        valueOf(arg0: string[], cb: Callback<string>): void;
        valueOfSync(arg0: string[]): string;
        valueOfPromise(arg0: string[]): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(boolean)
        valueOf(arg0: boolean, cb: Callback<string>): void;
        valueOfSync(arg0: boolean): string;
        valueOfPromise(arg0: boolean): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(long)
        valueOf(arg0: number, cb: Callback<string>): void;
        valueOfSync(arg0: number): string;
        valueOfPromise(arg0: number): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(int)
        valueOf(arg0: number, cb: Callback<string>): void;
        valueOfSync(arg0: number): string;
        valueOfPromise(arg0: number): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(float)
        valueOf(arg0: number, cb: Callback<string>): void;
        valueOfSync(arg0: number): string;
        valueOfPromise(arg0: number): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(double)
        valueOf(arg0: number, cb: Callback<string>): void;
        valueOfSync(arg0: number): string;
        valueOfPromise(arg0: number): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char)
        valueOf(arg0: string, cb: Callback<string>): void;
        valueOfSync(arg0: string): string;
        valueOfPromise(arg0: string): Promise<string>;
      }
    }
  }

  export module java.lang {
    export interface Iterable extends java.lang.Object {
      // forEach
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: any, cb: Callback<void>): void;
      forEachSync(arg0: any): void;
      forEachPromise(arg0: any): Promise<void>;
      // iterator
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator( cb: Callback<any>): void;
      iteratorSync(): any;
      iteratorPromise(): Promise<any>;
      // spliterator
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator( cb: Callback<any>): void;
      spliteratorSync(): any;
      spliteratorPromise(): Promise<any>;
    }
    export module Iterable {
      export interface Static {
      }
    }
  }

  export module java.lang.reflect {
    export interface GenericDeclaration extends java.lang.reflect.AnnotatedElement {
      // getAnnotation
      // public abstract <T> T java.lang.reflect.AnnotatedElement.getAnnotation(java.lang.Class<T>)
      getAnnotation(arg0: Class, cb: Callback<any>): void;
      getAnnotationSync(arg0: Class): any;
      getAnnotationPromise(arg0: Class): Promise<any>;
      // getAnnotations
      // public abstract java.lang.annotation.Annotation[] java.lang.reflect.AnnotatedElement.getAnnotations()
      getAnnotations( cb: Callback<any[]>): void;
      getAnnotationsSync(): any[];
      getAnnotationsPromise(): Promise<any[]>;
      // getAnnotationsByType
      // public default <T> T[] java.lang.reflect.AnnotatedElement.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getAnnotationsByTypeSync(arg0: Class): any[];
      getAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getDeclaredAnnotation
      // public default <T> T java.lang.reflect.AnnotatedElement.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<any>): void;
      getDeclaredAnnotationSync(arg0: Class): any;
      getDeclaredAnnotationPromise(arg0: Class): Promise<any>;
      // getDeclaredAnnotations
      // public abstract java.lang.annotation.Annotation[] java.lang.reflect.AnnotatedElement.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<any[]>): void;
      getDeclaredAnnotationsSync(): any[];
      getDeclaredAnnotationsPromise(): Promise<any[]>;
      // getDeclaredAnnotationsByType
      // public default <T> T[] java.lang.reflect.AnnotatedElement.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): any[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getTypeParameters
      // public abstract java.lang.reflect.TypeVariable<?>[] java.lang.reflect.GenericDeclaration.getTypeParameters()
      getTypeParameters( cb: Callback<TypeVariable[]>): void;
      getTypeParametersSync(): TypeVariable[];
      getTypeParametersPromise(): Promise<TypeVariable[]>;
      // isAnnotationPresent
      // public default boolean java.lang.reflect.AnnotatedElement.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
    }
    export module GenericDeclaration {
      export interface Static {
      }
    }
  }

  export module java.lang.reflect {
    export interface AnnotatedElement extends java.lang.Object {
      // getAnnotation
      // public abstract <T> T java.lang.reflect.AnnotatedElement.getAnnotation(java.lang.Class<T>)
      getAnnotation(arg0: Class, cb: Callback<any>): void;
      getAnnotationSync(arg0: Class): any;
      getAnnotationPromise(arg0: Class): Promise<any>;
      // getAnnotations
      // public abstract java.lang.annotation.Annotation[] java.lang.reflect.AnnotatedElement.getAnnotations()
      getAnnotations( cb: Callback<any[]>): void;
      getAnnotationsSync(): any[];
      getAnnotationsPromise(): Promise<any[]>;
      // getAnnotationsByType
      // public default <T> T[] java.lang.reflect.AnnotatedElement.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getAnnotationsByTypeSync(arg0: Class): any[];
      getAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getDeclaredAnnotation
      // public default <T> T java.lang.reflect.AnnotatedElement.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<any>): void;
      getDeclaredAnnotationSync(arg0: Class): any;
      getDeclaredAnnotationPromise(arg0: Class): Promise<any>;
      // getDeclaredAnnotations
      // public abstract java.lang.annotation.Annotation[] java.lang.reflect.AnnotatedElement.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<any[]>): void;
      getDeclaredAnnotationsSync(): any[];
      getDeclaredAnnotationsPromise(): Promise<any[]>;
      // getDeclaredAnnotationsByType
      // public default <T> T[] java.lang.reflect.AnnotatedElement.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): any[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // isAnnotationPresent
      // public default boolean java.lang.reflect.AnnotatedElement.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
    }
    export module AnnotatedElement {
      export interface Static {
      }
    }
  }

  export module java.lang.reflect {
    export interface AnnotatedType extends java.lang.reflect.AnnotatedElement {
      // getAnnotation
      // public abstract <T> T java.lang.reflect.AnnotatedElement.getAnnotation(java.lang.Class<T>)
      getAnnotation(arg0: Class, cb: Callback<any>): void;
      getAnnotationSync(arg0: Class): any;
      getAnnotationPromise(arg0: Class): Promise<any>;
      // getAnnotations
      // public abstract java.lang.annotation.Annotation[] java.lang.reflect.AnnotatedElement.getAnnotations()
      getAnnotations( cb: Callback<any[]>): void;
      getAnnotationsSync(): any[];
      getAnnotationsPromise(): Promise<any[]>;
      // getAnnotationsByType
      // public default <T> T[] java.lang.reflect.AnnotatedElement.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getAnnotationsByTypeSync(arg0: Class): any[];
      getAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getDeclaredAnnotation
      // public default <T> T java.lang.reflect.AnnotatedElement.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<any>): void;
      getDeclaredAnnotationSync(arg0: Class): any;
      getDeclaredAnnotationPromise(arg0: Class): Promise<any>;
      // getDeclaredAnnotations
      // public abstract java.lang.annotation.Annotation[] java.lang.reflect.AnnotatedElement.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<any[]>): void;
      getDeclaredAnnotationsSync(): any[];
      getDeclaredAnnotationsPromise(): Promise<any[]>;
      // getDeclaredAnnotationsByType
      // public default <T> T[] java.lang.reflect.AnnotatedElement.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): any[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getType
      // public abstract java.lang.reflect.Type java.lang.reflect.AnnotatedType.getType()
      getType( cb: Callback<Type>): void;
      getTypeSync(): Type;
      getTypePromise(): Promise<Type>;
      // isAnnotationPresent
      // public default boolean java.lang.reflect.AnnotatedElement.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
    }
    export module AnnotatedType {
      export interface Static {
      }
    }
  }

  export module java.lang {
    export interface Comparable extends java.lang.Object {
      // compareTo
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t, cb: Callback<number>): void;
      compareToSync(arg0: object_t): number;
      compareToPromise(arg0: object_t): Promise<number>;
    }
    export module Comparable {
      export interface Static {
      }
    }
  }

  export module java.lang.reflect {
    export interface Executable extends java.lang.reflect.AccessibleObject,java.lang.reflect.Member,java.lang.reflect.GenericDeclaration {
      // equals
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // getAnnotatedExceptionTypes
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedExceptionTypes()
      getAnnotatedExceptionTypes( cb: Callback<AnnotatedType[]>): void;
      getAnnotatedExceptionTypesSync(): AnnotatedType[];
      getAnnotatedExceptionTypesPromise(): Promise<AnnotatedType[]>;
      // getAnnotatedParameterTypes
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedParameterTypes()
      getAnnotatedParameterTypes( cb: Callback<AnnotatedType[]>): void;
      getAnnotatedParameterTypesSync(): AnnotatedType[];
      getAnnotatedParameterTypesPromise(): Promise<AnnotatedType[]>;
      // getAnnotatedReceiverType
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Executable.getAnnotatedReceiverType()
      getAnnotatedReceiverType( cb: Callback<AnnotatedType>): void;
      getAnnotatedReceiverTypeSync(): AnnotatedType;
      getAnnotatedReceiverTypePromise(): Promise<AnnotatedType>;
      // getAnnotatedReturnType
      // public abstract java.lang.reflect.AnnotatedType java.lang.reflect.Executable.getAnnotatedReturnType()
      getAnnotatedReturnType( cb: Callback<AnnotatedType>): void;
      getAnnotatedReturnTypeSync(): AnnotatedType;
      getAnnotatedReturnTypePromise(): Promise<AnnotatedType>;
      // getAnnotation
      // public <T> T java.lang.reflect.Executable.getAnnotation(java.lang.Class<T>)
      getAnnotation(arg0: Class, cb: Callback<any>): void;
      getAnnotationSync(arg0: Class): any;
      getAnnotationPromise(arg0: Class): Promise<any>;
      // getAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
      getAnnotations( cb: Callback<any[]>): void;
      getAnnotationsSync(): any[];
      getAnnotationsPromise(): Promise<any[]>;
      // getAnnotationsByType
      // public <T> T[] java.lang.reflect.Executable.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getAnnotationsByTypeSync(arg0: Class): any[];
      getAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // getDeclaredAnnotation
      // public <T> T java.lang.reflect.AccessibleObject.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<any>): void;
      getDeclaredAnnotationSync(arg0: Class): any;
      getDeclaredAnnotationPromise(arg0: Class): Promise<any>;
      // getDeclaredAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.Executable.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<any[]>): void;
      getDeclaredAnnotationsSync(): any[];
      getDeclaredAnnotationsPromise(): Promise<any[]>;
      // getDeclaredAnnotationsByType
      // public <T> T[] java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): any[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getDeclaringClass
      // public abstract java.lang.Class<?> java.lang.reflect.Executable.getDeclaringClass()
      getDeclaringClass( cb: Callback<Class>): void;
      getDeclaringClassSync(): Class;
      getDeclaringClassPromise(): Promise<Class>;
      // getExceptionTypes
      // public abstract java.lang.Class<?>[] java.lang.reflect.Executable.getExceptionTypes()
      getExceptionTypes( cb: Callback<Class[]>): void;
      getExceptionTypesSync(): Class[];
      getExceptionTypesPromise(): Promise<Class[]>;
      // getGenericExceptionTypes
      // public java.lang.reflect.Type[] java.lang.reflect.Executable.getGenericExceptionTypes()
      getGenericExceptionTypes( cb: Callback<Type[]>): void;
      getGenericExceptionTypesSync(): Type[];
      getGenericExceptionTypesPromise(): Promise<Type[]>;
      // getGenericParameterTypes
      // public java.lang.reflect.Type[] java.lang.reflect.Executable.getGenericParameterTypes()
      getGenericParameterTypes( cb: Callback<Type[]>): void;
      getGenericParameterTypesSync(): Type[];
      getGenericParameterTypesPromise(): Promise<Type[]>;
      // getModifiers
      // public abstract int java.lang.reflect.Executable.getModifiers()
      getModifiers( cb: Callback<number>): void;
      getModifiersSync(): number;
      getModifiersPromise(): Promise<number>;
      // getName
      // public abstract java.lang.String java.lang.reflect.Executable.getName()
      getName( cb: Callback<string>): void;
      getNameSync(): string;
      getNamePromise(): Promise<string>;
      // getParameterAnnotations
      // public abstract java.lang.annotation.Annotation[][] java.lang.reflect.Executable.getParameterAnnotations()
      getParameterAnnotations( cb: Callback<any[][]>): void;
      getParameterAnnotationsSync(): any[][];
      getParameterAnnotationsPromise(): Promise<any[][]>;
      // getParameterCount
      // public int java.lang.reflect.Executable.getParameterCount()
      getParameterCount( cb: Callback<number>): void;
      getParameterCountSync(): number;
      getParameterCountPromise(): Promise<number>;
      // getParameterTypes
      // public abstract java.lang.Class<?>[] java.lang.reflect.Executable.getParameterTypes()
      getParameterTypes( cb: Callback<Class[]>): void;
      getParameterTypesSync(): Class[];
      getParameterTypesPromise(): Promise<Class[]>;
      // getParameters
      // public java.lang.reflect.Parameter[] java.lang.reflect.Executable.getParameters()
      getParameters( cb: Callback<Parameter[]>): void;
      getParametersSync(): Parameter[];
      getParametersPromise(): Promise<Parameter[]>;
      // getTypeParameters
      // public abstract java.lang.reflect.TypeVariable<?>[] java.lang.reflect.Executable.getTypeParameters()
      getTypeParameters( cb: Callback<TypeVariable[]>): void;
      getTypeParametersSync(): TypeVariable[];
      getTypeParametersPromise(): Promise<TypeVariable[]>;
      // hashCode
      // public native int java.lang.Object.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // isAccessible
      // public boolean java.lang.reflect.AccessibleObject.isAccessible()
      isAccessible( cb: Callback<boolean>): void;
      isAccessibleSync(): boolean;
      isAccessiblePromise(): Promise<boolean>;
      // isAnnotationPresent
      // public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
      // isSynthetic
      // public boolean java.lang.reflect.Executable.isSynthetic()
      isSynthetic( cb: Callback<boolean>): void;
      isSyntheticSync(): boolean;
      isSyntheticPromise(): Promise<boolean>;
      // isVarArgs
      // public boolean java.lang.reflect.Executable.isVarArgs()
      isVarArgs( cb: Callback<boolean>): void;
      isVarArgsSync(): boolean;
      isVarArgsPromise(): Promise<boolean>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // setAccessible
      // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
      // static method, see .Static
      // public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException
      setAccessible(arg0: boolean, cb: Callback<void>): void;
      setAccessibleSync(arg0: boolean): void;
      setAccessiblePromise(arg0: boolean): Promise<void>;
      // toGenericString
      // public abstract java.lang.String java.lang.reflect.Executable.toGenericString()
      toGenericString( cb: Callback<string>): void;
      toGenericStringSync(): string;
      toGenericStringPromise(): Promise<string>;
      // toString
      // public java.lang.String java.lang.Object.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: number, arg1: number, cb: Callback<void>): void;
      waitSync(arg0: number, arg1: number): void;
      waitPromise(arg0: number, arg1: number): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: number, cb: Callback<void>): void;
      waitSync(arg0: number): void;
      waitPromise(arg0: number): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module Executable {
      export interface Static {
        // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
        setAccessible(arg0: AccessibleObject[], arg1: boolean, cb: Callback<void>): void;
        setAccessibleSync(arg0: AccessibleObject[], arg1: boolean): void;
        setAccessiblePromise(arg0: AccessibleObject[], arg1: boolean): Promise<void>;
      }
    }
  }

  export module java.lang {
    export interface Object  {
      // equals
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // hashCode
      // public native int java.lang.Object.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // toString
      // public java.lang.String java.lang.Object.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: number, arg1: number, cb: Callback<void>): void;
      waitSync(arg0: number, arg1: number): void;
      waitPromise(arg0: number, arg1: number): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: number, cb: Callback<void>): void;
      waitSync(arg0: number): void;
      waitPromise(arg0: number): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module Object {
      export interface Static {
        new (): java.lang.Object;
      }
    }
  }

  export module java.lang.reflect {
    export interface Constructor extends java.lang.reflect.Executable {
      // equals
      // public boolean java.lang.reflect.Constructor.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // getAnnotatedExceptionTypes
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedExceptionTypes()
      getAnnotatedExceptionTypes( cb: Callback<AnnotatedType[]>): void;
      getAnnotatedExceptionTypesSync(): AnnotatedType[];
      getAnnotatedExceptionTypesPromise(): Promise<AnnotatedType[]>;
      // getAnnotatedParameterTypes
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedParameterTypes()
      getAnnotatedParameterTypes( cb: Callback<AnnotatedType[]>): void;
      getAnnotatedParameterTypesSync(): AnnotatedType[];
      getAnnotatedParameterTypesPromise(): Promise<AnnotatedType[]>;
      // getAnnotatedReceiverType
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Constructor.getAnnotatedReceiverType()
      getAnnotatedReceiverType( cb: Callback<AnnotatedType>): void;
      getAnnotatedReceiverTypeSync(): AnnotatedType;
      getAnnotatedReceiverTypePromise(): Promise<AnnotatedType>;
      // getAnnotatedReturnType
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Constructor.getAnnotatedReturnType()
      getAnnotatedReturnType( cb: Callback<AnnotatedType>): void;
      getAnnotatedReturnTypeSync(): AnnotatedType;
      getAnnotatedReturnTypePromise(): Promise<AnnotatedType>;
      // getAnnotation
      // public <T> T java.lang.reflect.Constructor.getAnnotation(java.lang.Class<T>)
      getAnnotation(arg0: Class, cb: Callback<any>): void;
      getAnnotationSync(arg0: Class): any;
      getAnnotationPromise(arg0: Class): Promise<any>;
      // getAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
      getAnnotations( cb: Callback<any[]>): void;
      getAnnotationsSync(): any[];
      getAnnotationsPromise(): Promise<any[]>;
      // getAnnotationsByType
      // public <T> T[] java.lang.reflect.Executable.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getAnnotationsByTypeSync(arg0: Class): any[];
      getAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // getDeclaredAnnotation
      // public <T> T java.lang.reflect.AccessibleObject.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<any>): void;
      getDeclaredAnnotationSync(arg0: Class): any;
      getDeclaredAnnotationPromise(arg0: Class): Promise<any>;
      // getDeclaredAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.Constructor.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<any[]>): void;
      getDeclaredAnnotationsSync(): any[];
      getDeclaredAnnotationsPromise(): Promise<any[]>;
      // getDeclaredAnnotationsByType
      // public <T> T[] java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): any[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getDeclaringClass
      // public java.lang.Class<T> java.lang.reflect.Constructor.getDeclaringClass()
      getDeclaringClass( cb: Callback<Class>): void;
      getDeclaringClassSync(): Class;
      getDeclaringClassPromise(): Promise<Class>;
      // getExceptionTypes
      // public java.lang.Class<?>[] java.lang.reflect.Constructor.getExceptionTypes()
      getExceptionTypes( cb: Callback<Class[]>): void;
      getExceptionTypesSync(): Class[];
      getExceptionTypesPromise(): Promise<Class[]>;
      // getGenericExceptionTypes
      // public java.lang.reflect.Type[] java.lang.reflect.Constructor.getGenericExceptionTypes()
      getGenericExceptionTypes( cb: Callback<Type[]>): void;
      getGenericExceptionTypesSync(): Type[];
      getGenericExceptionTypesPromise(): Promise<Type[]>;
      // getGenericParameterTypes
      // public java.lang.reflect.Type[] java.lang.reflect.Constructor.getGenericParameterTypes()
      getGenericParameterTypes( cb: Callback<Type[]>): void;
      getGenericParameterTypesSync(): Type[];
      getGenericParameterTypesPromise(): Promise<Type[]>;
      // getModifiers
      // public int java.lang.reflect.Constructor.getModifiers()
      getModifiers( cb: Callback<number>): void;
      getModifiersSync(): number;
      getModifiersPromise(): Promise<number>;
      // getName
      // public java.lang.String java.lang.reflect.Constructor.getName()
      getName( cb: Callback<string>): void;
      getNameSync(): string;
      getNamePromise(): Promise<string>;
      // getParameterAnnotations
      // public java.lang.annotation.Annotation[][] java.lang.reflect.Constructor.getParameterAnnotations()
      getParameterAnnotations( cb: Callback<any[][]>): void;
      getParameterAnnotationsSync(): any[][];
      getParameterAnnotationsPromise(): Promise<any[][]>;
      // getParameterCount
      // public int java.lang.reflect.Constructor.getParameterCount()
      getParameterCount( cb: Callback<number>): void;
      getParameterCountSync(): number;
      getParameterCountPromise(): Promise<number>;
      // getParameterTypes
      // public java.lang.Class<?>[] java.lang.reflect.Constructor.getParameterTypes()
      getParameterTypes( cb: Callback<Class[]>): void;
      getParameterTypesSync(): Class[];
      getParameterTypesPromise(): Promise<Class[]>;
      // getParameters
      // public java.lang.reflect.Parameter[] java.lang.reflect.Executable.getParameters()
      getParameters( cb: Callback<Parameter[]>): void;
      getParametersSync(): Parameter[];
      getParametersPromise(): Promise<Parameter[]>;
      // getTypeParameters
      // public java.lang.reflect.TypeVariable<java.lang.reflect.Constructor<T>>[] java.lang.reflect.Constructor.getTypeParameters()
      getTypeParameters( cb: Callback<TypeVariable[]>): void;
      getTypeParametersSync(): TypeVariable[];
      getTypeParametersPromise(): Promise<TypeVariable[]>;
      // hashCode
      // public int java.lang.reflect.Constructor.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // isAccessible
      // public boolean java.lang.reflect.AccessibleObject.isAccessible()
      isAccessible( cb: Callback<boolean>): void;
      isAccessibleSync(): boolean;
      isAccessiblePromise(): Promise<boolean>;
      // isAnnotationPresent
      // public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
      // isSynthetic
      // public boolean java.lang.reflect.Constructor.isSynthetic()
      isSynthetic( cb: Callback<boolean>): void;
      isSyntheticSync(): boolean;
      isSyntheticPromise(): Promise<boolean>;
      // isVarArgs
      // public boolean java.lang.reflect.Constructor.isVarArgs()
      isVarArgs( cb: Callback<boolean>): void;
      isVarArgsSync(): boolean;
      isVarArgsPromise(): Promise<boolean>;
      // newInstance
      // public T java.lang.reflect.Constructor.newInstance(java.lang.Object...) throws java.lang.InstantiationException,java.lang.IllegalAccessException,java.lang.IllegalArgumentException,java.lang.reflect.InvocationTargetException
      newInstance(arg0: Array<object_t>, cb: Callback<java.lang.Object>): void;
      newInstanceSync(arg0: Array<object_t>): java.lang.Object;
      newInstancePromise(arg0: Array<object_t>): Promise<java.lang.Object>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // setAccessible
      // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
      // static method, see .Static
      // public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException
      setAccessible(arg0: boolean, cb: Callback<void>): void;
      setAccessibleSync(arg0: boolean): void;
      setAccessiblePromise(arg0: boolean): Promise<void>;
      // toGenericString
      // public java.lang.String java.lang.reflect.Constructor.toGenericString()
      toGenericString( cb: Callback<string>): void;
      toGenericStringSync(): string;
      toGenericStringPromise(): Promise<string>;
      // toString
      // public java.lang.String java.lang.reflect.Constructor.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: number, arg1: number, cb: Callback<void>): void;
      waitSync(arg0: number, arg1: number): void;
      waitPromise(arg0: number, arg1: number): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: number, cb: Callback<void>): void;
      waitSync(arg0: number): void;
      waitPromise(arg0: number): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module Constructor {
      export interface Static {
        // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
        setAccessible(arg0: AccessibleObject[], arg1: boolean, cb: Callback<void>): void;
        setAccessibleSync(arg0: AccessibleObject[], arg1: boolean): void;
        setAccessiblePromise(arg0: AccessibleObject[], arg1: boolean): Promise<void>;
      }
    }
  }

  export module java.lang.reflect {
    export interface Field extends java.lang.reflect.AccessibleObject,java.lang.reflect.Member {
      // equals
      // public boolean java.lang.reflect.Field.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // get
      // public java.lang.Object java.lang.reflect.Field.get(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      get(arg0: object_t, cb: Callback<java.lang.Object>): void;
      getSync(arg0: object_t): java.lang.Object;
      getPromise(arg0: object_t): Promise<java.lang.Object>;
      // getAnnotatedType
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Field.getAnnotatedType()
      getAnnotatedType( cb: Callback<AnnotatedType>): void;
      getAnnotatedTypeSync(): AnnotatedType;
      getAnnotatedTypePromise(): Promise<AnnotatedType>;
      // getAnnotation
      // public <T> T java.lang.reflect.Field.getAnnotation(java.lang.Class<T>)
      getAnnotation(arg0: Class, cb: Callback<any>): void;
      getAnnotationSync(arg0: Class): any;
      getAnnotationPromise(arg0: Class): Promise<any>;
      // getAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
      getAnnotations( cb: Callback<any[]>): void;
      getAnnotationsSync(): any[];
      getAnnotationsPromise(): Promise<any[]>;
      // getAnnotationsByType
      // public <T> T[] java.lang.reflect.Field.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getAnnotationsByTypeSync(arg0: Class): any[];
      getAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getBoolean
      // public boolean java.lang.reflect.Field.getBoolean(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getBoolean(arg0: object_t, cb: Callback<boolean>): void;
      getBooleanSync(arg0: object_t): boolean;
      getBooleanPromise(arg0: object_t): Promise<boolean>;
      // getByte
      // public byte java.lang.reflect.Field.getByte(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getByte(arg0: object_t, cb: Callback<number>): void;
      getByteSync(arg0: object_t): number;
      getBytePromise(arg0: object_t): Promise<number>;
      // getChar
      // public char java.lang.reflect.Field.getChar(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getChar(arg0: object_t, cb: Callback<string>): void;
      getCharSync(arg0: object_t): string;
      getCharPromise(arg0: object_t): Promise<string>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // getDeclaredAnnotation
      // public <T> T java.lang.reflect.AccessibleObject.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<any>): void;
      getDeclaredAnnotationSync(arg0: Class): any;
      getDeclaredAnnotationPromise(arg0: Class): Promise<any>;
      // getDeclaredAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.Field.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<any[]>): void;
      getDeclaredAnnotationsSync(): any[];
      getDeclaredAnnotationsPromise(): Promise<any[]>;
      // getDeclaredAnnotationsByType
      // public <T> T[] java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): any[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getDeclaringClass
      // public java.lang.Class<?> java.lang.reflect.Field.getDeclaringClass()
      getDeclaringClass( cb: Callback<Class>): void;
      getDeclaringClassSync(): Class;
      getDeclaringClassPromise(): Promise<Class>;
      // getDouble
      // public double java.lang.reflect.Field.getDouble(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getDouble(arg0: object_t, cb: Callback<number>): void;
      getDoubleSync(arg0: object_t): number;
      getDoublePromise(arg0: object_t): Promise<number>;
      // getFloat
      // public float java.lang.reflect.Field.getFloat(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getFloat(arg0: object_t, cb: Callback<number>): void;
      getFloatSync(arg0: object_t): number;
      getFloatPromise(arg0: object_t): Promise<number>;
      // getGenericType
      // public java.lang.reflect.Type java.lang.reflect.Field.getGenericType()
      getGenericType( cb: Callback<Type>): void;
      getGenericTypeSync(): Type;
      getGenericTypePromise(): Promise<Type>;
      // getInt
      // public int java.lang.reflect.Field.getInt(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getInt(arg0: object_t, cb: Callback<number>): void;
      getIntSync(arg0: object_t): number;
      getIntPromise(arg0: object_t): Promise<number>;
      // getLong
      // public long java.lang.reflect.Field.getLong(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getLong(arg0: object_t, cb: Callback<number>): void;
      getLongSync(arg0: object_t): number;
      getLongPromise(arg0: object_t): Promise<number>;
      // getModifiers
      // public int java.lang.reflect.Field.getModifiers()
      getModifiers( cb: Callback<number>): void;
      getModifiersSync(): number;
      getModifiersPromise(): Promise<number>;
      // getName
      // public java.lang.String java.lang.reflect.Field.getName()
      getName( cb: Callback<string>): void;
      getNameSync(): string;
      getNamePromise(): Promise<string>;
      // getShort
      // public short java.lang.reflect.Field.getShort(java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      getShort(arg0: object_t, cb: Callback<number>): void;
      getShortSync(arg0: object_t): number;
      getShortPromise(arg0: object_t): Promise<number>;
      // getType
      // public java.lang.Class<?> java.lang.reflect.Field.getType()
      getType( cb: Callback<Class>): void;
      getTypeSync(): Class;
      getTypePromise(): Promise<Class>;
      // hashCode
      // public int java.lang.reflect.Field.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // isAccessible
      // public boolean java.lang.reflect.AccessibleObject.isAccessible()
      isAccessible( cb: Callback<boolean>): void;
      isAccessibleSync(): boolean;
      isAccessiblePromise(): Promise<boolean>;
      // isAnnotationPresent
      // public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
      // isEnumConstant
      // public boolean java.lang.reflect.Field.isEnumConstant()
      isEnumConstant( cb: Callback<boolean>): void;
      isEnumConstantSync(): boolean;
      isEnumConstantPromise(): Promise<boolean>;
      // isSynthetic
      // public boolean java.lang.reflect.Field.isSynthetic()
      isSynthetic( cb: Callback<boolean>): void;
      isSyntheticSync(): boolean;
      isSyntheticPromise(): Promise<boolean>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // set
      // public void java.lang.reflect.Field.set(java.lang.Object,java.lang.Object) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      set(arg0: object_t, arg1: object_t, cb: Callback<void>): void;
      setSync(arg0: object_t, arg1: object_t): void;
      setPromise(arg0: object_t, arg1: object_t): Promise<void>;
      // setAccessible
      // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
      // static method, see .Static
      // public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException
      setAccessible(arg0: boolean, cb: Callback<void>): void;
      setAccessibleSync(arg0: boolean): void;
      setAccessiblePromise(arg0: boolean): Promise<void>;
      // setBoolean
      // public void java.lang.reflect.Field.setBoolean(java.lang.Object,boolean) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setBoolean(arg0: object_t, arg1: boolean, cb: Callback<void>): void;
      setBooleanSync(arg0: object_t, arg1: boolean): void;
      setBooleanPromise(arg0: object_t, arg1: boolean): Promise<void>;
      // setByte
      // public void java.lang.reflect.Field.setByte(java.lang.Object,byte) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setByte(arg0: object_t, arg1: number, cb: Callback<void>): void;
      setByteSync(arg0: object_t, arg1: number): void;
      setBytePromise(arg0: object_t, arg1: number): Promise<void>;
      // setChar
      // public void java.lang.reflect.Field.setChar(java.lang.Object,char) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setChar(arg0: object_t, arg1: string, cb: Callback<void>): void;
      setCharSync(arg0: object_t, arg1: string): void;
      setCharPromise(arg0: object_t, arg1: string): Promise<void>;
      // setDouble
      // public void java.lang.reflect.Field.setDouble(java.lang.Object,double) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setDouble(arg0: object_t, arg1: number, cb: Callback<void>): void;
      setDoubleSync(arg0: object_t, arg1: number): void;
      setDoublePromise(arg0: object_t, arg1: number): Promise<void>;
      // setFloat
      // public void java.lang.reflect.Field.setFloat(java.lang.Object,float) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setFloat(arg0: object_t, arg1: number, cb: Callback<void>): void;
      setFloatSync(arg0: object_t, arg1: number): void;
      setFloatPromise(arg0: object_t, arg1: number): Promise<void>;
      // setInt
      // public void java.lang.reflect.Field.setInt(java.lang.Object,int) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setInt(arg0: object_t, arg1: number, cb: Callback<void>): void;
      setIntSync(arg0: object_t, arg1: number): void;
      setIntPromise(arg0: object_t, arg1: number): Promise<void>;
      // setLong
      // public void java.lang.reflect.Field.setLong(java.lang.Object,long) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setLong(arg0: object_t, arg1: number, cb: Callback<void>): void;
      setLongSync(arg0: object_t, arg1: number): void;
      setLongPromise(arg0: object_t, arg1: number): Promise<void>;
      // setShort
      // public void java.lang.reflect.Field.setShort(java.lang.Object,short) throws java.lang.IllegalArgumentException,java.lang.IllegalAccessException
      setShort(arg0: object_t, arg1: number, cb: Callback<void>): void;
      setShortSync(arg0: object_t, arg1: number): void;
      setShortPromise(arg0: object_t, arg1: number): Promise<void>;
      // toGenericString
      // public java.lang.String java.lang.reflect.Field.toGenericString()
      toGenericString( cb: Callback<string>): void;
      toGenericStringSync(): string;
      toGenericStringPromise(): Promise<string>;
      // toString
      // public java.lang.String java.lang.reflect.Field.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: number, arg1: number, cb: Callback<void>): void;
      waitSync(arg0: number, arg1: number): void;
      waitPromise(arg0: number, arg1: number): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: number, cb: Callback<void>): void;
      waitSync(arg0: number): void;
      waitPromise(arg0: number): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module Field {
      export interface Static {
        // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
        setAccessible(arg0: AccessibleObject[], arg1: boolean, cb: Callback<void>): void;
        setAccessibleSync(arg0: AccessibleObject[], arg1: boolean): void;
        setAccessiblePromise(arg0: AccessibleObject[], arg1: boolean): Promise<void>;
      }
    }
  }

  export module java.lang {
    export interface ClassLoader extends java.lang.Object {
      // clearAssertionStatus
      // public void java.lang.ClassLoader.clearAssertionStatus()
      clearAssertionStatus( cb: Callback<void>): void;
      clearAssertionStatusSync(): void;
      clearAssertionStatusPromise(): Promise<void>;
      // equals
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // getParent
      // public final java.lang.ClassLoader java.lang.ClassLoader.getParent()
      getParent( cb: Callback<ClassLoader>): void;
      getParentSync(): ClassLoader;
      getParentPromise(): Promise<ClassLoader>;
      // getResource
      // public java.net.URL java.lang.ClassLoader.getResource(java.lang.String)
      getResource(arg0: string_t, cb: Callback<any>): void;
      getResourceSync(arg0: string_t): any;
      getResourcePromise(arg0: string_t): Promise<any>;
      // getResourceAsStream
      // public java.io.InputStream java.lang.ClassLoader.getResourceAsStream(java.lang.String)
      getResourceAsStream(arg0: string_t, cb: Callback<any>): void;
      getResourceAsStreamSync(arg0: string_t): any;
      getResourceAsStreamPromise(arg0: string_t): Promise<any>;
      // getResources
      // public java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getResources(java.lang.String) throws java.io.IOException
      getResources(arg0: string_t, cb: Callback<any>): void;
      getResourcesSync(arg0: string_t): any;
      getResourcesPromise(arg0: string_t): Promise<any>;
      // getSystemClassLoader
      // public static java.lang.ClassLoader java.lang.ClassLoader.getSystemClassLoader()
      // static method, see .Static
      // getSystemResource
      // public static java.net.URL java.lang.ClassLoader.getSystemResource(java.lang.String)
      // static method, see .Static
      // getSystemResourceAsStream
      // public static java.io.InputStream java.lang.ClassLoader.getSystemResourceAsStream(java.lang.String)
      // static method, see .Static
      // getSystemResources
      // public static java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getSystemResources(java.lang.String) throws java.io.IOException
      // static method, see .Static
      // hashCode
      // public native int java.lang.Object.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // loadClass
      // public java.lang.Class<?> java.lang.ClassLoader.loadClass(java.lang.String) throws java.lang.ClassNotFoundException
      loadClass(arg0: string_t, cb: Callback<Class>): void;
      loadClassSync(arg0: string_t): Class;
      loadClassPromise(arg0: string_t): Promise<Class>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // setClassAssertionStatus
      // public void java.lang.ClassLoader.setClassAssertionStatus(java.lang.String,boolean)
      setClassAssertionStatus(arg0: string_t, arg1: boolean, cb: Callback<void>): void;
      setClassAssertionStatusSync(arg0: string_t, arg1: boolean): void;
      setClassAssertionStatusPromise(arg0: string_t, arg1: boolean): Promise<void>;
      // setDefaultAssertionStatus
      // public void java.lang.ClassLoader.setDefaultAssertionStatus(boolean)
      setDefaultAssertionStatus(arg0: boolean, cb: Callback<void>): void;
      setDefaultAssertionStatusSync(arg0: boolean): void;
      setDefaultAssertionStatusPromise(arg0: boolean): Promise<void>;
      // setPackageAssertionStatus
      // public void java.lang.ClassLoader.setPackageAssertionStatus(java.lang.String,boolean)
      setPackageAssertionStatus(arg0: string_t, arg1: boolean, cb: Callback<void>): void;
      setPackageAssertionStatusSync(arg0: string_t, arg1: boolean): void;
      setPackageAssertionStatusPromise(arg0: string_t, arg1: boolean): Promise<void>;
      // toString
      // public java.lang.String java.lang.Object.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: number, arg1: number, cb: Callback<void>): void;
      waitSync(arg0: number, arg1: number): void;
      waitPromise(arg0: number, arg1: number): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: number, cb: Callback<void>): void;
      waitSync(arg0: number): void;
      waitPromise(arg0: number): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module ClassLoader {
      export interface Static {
        // public static java.lang.ClassLoader java.lang.ClassLoader.getSystemClassLoader()
        getSystemClassLoader( cb: Callback<ClassLoader>): void;
        getSystemClassLoaderSync(): ClassLoader;
        getSystemClassLoaderPromise(): Promise<ClassLoader>;
        // public static java.net.URL java.lang.ClassLoader.getSystemResource(java.lang.String)
        getSystemResource(arg0: string_t, cb: Callback<any>): void;
        getSystemResourceSync(arg0: string_t): any;
        getSystemResourcePromise(arg0: string_t): Promise<any>;
        // public static java.io.InputStream java.lang.ClassLoader.getSystemResourceAsStream(java.lang.String)
        getSystemResourceAsStream(arg0: string_t, cb: Callback<any>): void;
        getSystemResourceAsStreamSync(arg0: string_t): any;
        getSystemResourceAsStreamPromise(arg0: string_t): Promise<any>;
        // public static java.util.Enumeration<java.net.URL> java.lang.ClassLoader.getSystemResources(java.lang.String) throws java.io.IOException
        getSystemResources(arg0: string_t, cb: Callback<any>): void;
        getSystemResourcesSync(arg0: string_t): any;
        getSystemResourcesPromise(arg0: string_t): Promise<any>;
      }
    }
  }

  export module java.lang.reflect {
    export interface AccessibleObject extends java.lang.Object,java.lang.reflect.AnnotatedElement {
      // equals
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t, cb: Callback<boolean>): void;
      equalsSync(arg0: object_t): boolean;
      equalsPromise(arg0: object_t): Promise<boolean>;
      // getAnnotation
      // public <T> T java.lang.reflect.AccessibleObject.getAnnotation(java.lang.Class<T>)
      getAnnotation(arg0: Class, cb: Callback<any>): void;
      getAnnotationSync(arg0: Class): any;
      getAnnotationPromise(arg0: Class): Promise<any>;
      // getAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
      getAnnotations( cb: Callback<any[]>): void;
      getAnnotationsSync(): any[];
      getAnnotationsPromise(): Promise<any[]>;
      // getAnnotationsByType
      // public <T> T[] java.lang.reflect.AccessibleObject.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getAnnotationsByTypeSync(arg0: Class): any[];
      getAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getClass
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass( cb: Callback<Class>): void;
      getClassSync(): Class;
      getClassPromise(): Promise<Class>;
      // getDeclaredAnnotation
      // public <T> T java.lang.reflect.AccessibleObject.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<any>): void;
      getDeclaredAnnotationSync(arg0: Class): any;
      getDeclaredAnnotationPromise(arg0: Class): Promise<any>;
      // getDeclaredAnnotations
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<any[]>): void;
      getDeclaredAnnotationsSync(): any[];
      getDeclaredAnnotationsPromise(): Promise<any[]>;
      // getDeclaredAnnotationsByType
      // public <T> T[] java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): any[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // hashCode
      // public native int java.lang.Object.hashCode()
      hashCode( cb: Callback<number>): void;
      hashCodeSync(): number;
      hashCodePromise(): Promise<number>;
      // isAccessible
      // public boolean java.lang.reflect.AccessibleObject.isAccessible()
      isAccessible( cb: Callback<boolean>): void;
      isAccessibleSync(): boolean;
      isAccessiblePromise(): Promise<boolean>;
      // isAnnotationPresent
      // public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
      // notify
      // public final native void java.lang.Object.notify()
      notify( cb: Callback<void>): void;
      notifySync(): void;
      notifyPromise(): Promise<void>;
      // notifyAll
      // public final native void java.lang.Object.notifyAll()
      notifyAll( cb: Callback<void>): void;
      notifyAllSync(): void;
      notifyAllPromise(): Promise<void>;
      // setAccessible
      // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
      // static method, see .Static
      // public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException
      setAccessible(arg0: boolean, cb: Callback<void>): void;
      setAccessibleSync(arg0: boolean): void;
      setAccessiblePromise(arg0: boolean): Promise<void>;
      // toString
      // public java.lang.String java.lang.Object.toString()
      toString( cb: Callback<string>): void;
      toStringSync(): string;
      toStringPromise(): Promise<string>;
      // wait
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: number, arg1: number, cb: Callback<void>): void;
      waitSync(arg0: number, arg1: number): void;
      waitPromise(arg0: number, arg1: number): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: number, cb: Callback<void>): void;
      waitSync(arg0: number): void;
      waitPromise(arg0: number): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait( cb: Callback<void>): void;
      waitSync(): void;
      waitPromise(): Promise<void>;
    }
    export module AccessibleObject {
      export interface Static {
        // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
        setAccessible(arg0: AccessibleObject[], arg1: boolean, cb: Callback<void>): void;
        setAccessibleSync(arg0: AccessibleObject[], arg1: boolean): void;
        setAccessiblePromise(arg0: AccessibleObject[], arg1: boolean): Promise<void>;
      }
    }
  }

  export module java.lang.reflect {
    export interface TypeVariable extends java.lang.reflect.Type,java.lang.reflect.AnnotatedElement {
      // getAnnotatedBounds
      // public abstract java.lang.reflect.AnnotatedType[] java.lang.reflect.TypeVariable.getAnnotatedBounds()
      getAnnotatedBounds( cb: Callback<AnnotatedType[]>): void;
      getAnnotatedBoundsSync(): AnnotatedType[];
      getAnnotatedBoundsPromise(): Promise<AnnotatedType[]>;
      // getAnnotation
      // public abstract <T> T java.lang.reflect.AnnotatedElement.getAnnotation(java.lang.Class<T>)
      getAnnotation(arg0: Class, cb: Callback<any>): void;
      getAnnotationSync(arg0: Class): any;
      getAnnotationPromise(arg0: Class): Promise<any>;
      // getAnnotations
      // public abstract java.lang.annotation.Annotation[] java.lang.reflect.AnnotatedElement.getAnnotations()
      getAnnotations( cb: Callback<any[]>): void;
      getAnnotationsSync(): any[];
      getAnnotationsPromise(): Promise<any[]>;
      // getAnnotationsByType
      // public default <T> T[] java.lang.reflect.AnnotatedElement.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getAnnotationsByTypeSync(arg0: Class): any[];
      getAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getBounds
      // public abstract java.lang.reflect.Type[] java.lang.reflect.TypeVariable.getBounds()
      getBounds( cb: Callback<Type[]>): void;
      getBoundsSync(): Type[];
      getBoundsPromise(): Promise<Type[]>;
      // getDeclaredAnnotation
      // public default <T> T java.lang.reflect.AnnotatedElement.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotation(arg0: Class, cb: Callback<any>): void;
      getDeclaredAnnotationSync(arg0: Class): any;
      getDeclaredAnnotationPromise(arg0: Class): Promise<any>;
      // getDeclaredAnnotations
      // public abstract java.lang.annotation.Annotation[] java.lang.reflect.AnnotatedElement.getDeclaredAnnotations()
      getDeclaredAnnotations( cb: Callback<any[]>): void;
      getDeclaredAnnotationsSync(): any[];
      getDeclaredAnnotationsPromise(): Promise<any[]>;
      // getDeclaredAnnotationsByType
      // public default <T> T[] java.lang.reflect.AnnotatedElement.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByType(arg0: Class, cb: Callback<any[]>): void;
      getDeclaredAnnotationsByTypeSync(arg0: Class): any[];
      getDeclaredAnnotationsByTypePromise(arg0: Class): Promise<any[]>;
      // getGenericDeclaration
      // public abstract D java.lang.reflect.TypeVariable.getGenericDeclaration()
      getGenericDeclaration( cb: Callback<GenericDeclaration>): void;
      getGenericDeclarationSync(): GenericDeclaration;
      getGenericDeclarationPromise(): Promise<GenericDeclaration>;
      // getName
      // public abstract java.lang.String java.lang.reflect.TypeVariable.getName()
      getName( cb: Callback<string>): void;
      getNameSync(): string;
      getNamePromise(): Promise<string>;
      // getTypeName
      // public default java.lang.String java.lang.reflect.Type.getTypeName()
      getTypeName( cb: Callback<string>): void;
      getTypeNameSync(): string;
      getTypeNamePromise(): Promise<string>;
      // isAnnotationPresent
      // public default boolean java.lang.reflect.AnnotatedElement.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresent(arg0: Class, cb: Callback<boolean>): void;
      isAnnotationPresentSync(arg0: Class): boolean;
      isAnnotationPresentPromise(arg0: Class): Promise<boolean>;
    }
    export module TypeVariable {
      export interface Static {
      }
    }
  }

  export module java.lang.reflect {
    export interface Member extends java.lang.Object {
      // getDeclaringClass
      // public abstract java.lang.Class<?> java.lang.reflect.Member.getDeclaringClass()
      getDeclaringClass( cb: Callback<Class>): void;
      getDeclaringClassSync(): Class;
      getDeclaringClassPromise(): Promise<Class>;
      // getModifiers
      // public abstract int java.lang.reflect.Member.getModifiers()
      getModifiers( cb: Callback<number>): void;
      getModifiersSync(): number;
      getModifiersPromise(): Promise<number>;
      // getName
      // public abstract java.lang.String java.lang.reflect.Member.getName()
      getName( cb: Callback<string>): void;
      getNameSync(): string;
      getNamePromise(): Promise<string>;
      // isSynthetic
      // public abstract boolean java.lang.reflect.Member.isSynthetic()
      isSynthetic( cb: Callback<boolean>): void;
      isSyntheticSync(): boolean;
      isSyntheticPromise(): Promise<boolean>;
    }
    export module Member {
      export interface Static {
      }
    }
  }

  export module java.lang.reflect {
    export interface Type extends java.lang.Object {
      // getTypeName
      // public default java.lang.String java.lang.reflect.Type.getTypeName()
      getTypeName( cb: Callback<string>): void;
      getTypeNameSync(): string;
      getTypeNamePromise(): Promise<string>;
    }
    export module Type {
      export interface Static {
      }
    }
  }

}
