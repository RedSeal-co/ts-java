// java.d.ts
// This file was generated by ts-java.

declare module Java {

export type string_t = string | java.lang.String;

export interface Array<T> extends java.lang.Object {
  // This is an opaque type for a java array T[];
  // Use Singleton.newArray<T>(className, [...]) to create wherever a Java method expects a T[],
  // most notably for vararg parameteters.
}

// *Singleton* declares methods & members exported by the node java module.
export interface Singleton {
  classpath: string[];
  callMethodSync(instance: any, className: string, methodName: string, ...args: any[]): any;
  callStaticMethodSync(className: string, methodName: string, ...args: any[]): any;
  
  newArray<T>(className: string, arg: any[]): Array<T>;

  {{#each this}}
  import(className: '{{packageName}}.{{shortName}}'): {{packageName}}.{{shortName}}.Static;
  {{/each}}
  import(className: string): any;

  {{#each this}}
  newInstanceSync(className: '{{packageName}}.{{shortName}}', ...args: any[]): {{packageName}}.{{shortName}};
  {{/each}}
  newInstanceSync(className: string, ...args: any[]): any;
}

{{#each this}}
export import {{shortName}} = {{packageName}}.{{shortName}};
{{/each}}

{{#each this}}
export module {{packageName}} {
  export interface {{shortName}} {{#if tsInterfaces}}extends {{tsInterfaces}}{{/if}} {
    {{#each variants}}
    // {{@key}}
    {{#each this}}
    // {{{generic_proto}}}
    {{#if isStatic}}
    // static method, see {{shortName}}.Static
    {{else}}
    {{name}}Sync({{{margs this}}}): {{tsReturns}};
    {{/if}}
    {{/each}}

    {{/each}}
  }
  export module {{shortName}} {
    export interface Static {
      // TODO: add `new` signature for classes with public constructors
      // new (arg0: Type0, ...);
      {{#each variants}}
      {{#each this}}
      {{#if isStatic}}
      // {{{generic_proto}}}
      {{name}}Sync({{{margs this}}}): {{tsReturns}};
      {{/if}}
      {{/each}}

      {{/each}}
    }
  }
}

{{/each}}
}

declare module 'java' {
  var singleton: Java.Singleton;
  export = singleton;
}
