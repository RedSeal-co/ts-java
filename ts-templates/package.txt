// java.d.ts
// This file was generated by ts-java.

declare module Java {

// *Singleton* declares methods & members exported by the node java module.
export interface Singleton {
  classpath: Array<string>;
  callMethodSync(instance: any, className: string, methodName: string, ...args: any[]): any;
  callStaticMethodSync(className: string, methodName: string, ...args: any[]): any;
  
  newArray(className: string, ...args: any[]): any;

  {{#each this}}
  import(className: '{{packageName}}.{{shortName}}'): {{packageName}}.{{shortName}}.Static;
  {{/each}}
  import(className: string): any;

  {{#each this}}
  newInstanceSync(className: '{{packageName}}.{{shortName}}', ...args: any[]): {{packageName}}.{{shortName}};
  {{/each}}
  newInstanceSync(className: string, ...args: any[]): any;
}

type string_t = string | java.lang.String;

{{#each this}}
export import {{shortName}} = {{packageName}}.{{shortName}};
{{/each}}

{{#each this}}
export module {{packageName}} {
  // TODO: use 'class' keyword for classes, 'interface' keyword for interfaces.
  // TODO: use 'extends' and 'implements' depending on relationship to inherited type
  // In Typescript, like Java, a class can extend only one class, but can implement many interfaces
  // Interfaces can only extend interfaces or classes, but never implement another interface.
  export interface {{shortName}} {{#if tsInterfaces}}extends {{tsInterfaces}}{{/if}} {
    // TODO: add constructor signature for classes with public constuctors
    // constructor (arg0: Type0, ...);
    {{#each variants}}
    // {{@key}}
    {{#each this}}
    // {{{generic_proto}}}
    {{#if isStatic}}
    // static method, see {{shortName}}.Static
    {{else}}
    {{name}}Sync({{margs this}}): {{tsReturns}};
    {{/if}}
    {{/each}}

    {{/each}}
  }
  export module {{shortName}} {
    export interface Static {
      // TODO: add constructor signature for classes with public constructors
      // new (arg0: Type0, ...);
      {{#each variants}}
      {{#each this}}
      {{#if isStatic}}
      // {{{generic_proto}}}
      {{name}}Sync({{margs this}}): {{tsReturns}};
      {{/if}}
      {{/each}}

      {{/each}}
    }
  }
}

{{/each}}
}

declare module 'java' {
  var singleton: Java.Singleton;
  export = singleton;
}
