// module.ts
// This file was generated by ts-java.
/// <reference path="../typings/java/java.d.ts" />


import _java = require('java');
import BluePromise = require('bluebird');
import path = require('path');

_java.asyncOptions = {
    syncSuffix: "",
    asyncSuffix: "A",
    promiseSuffix: "P",
    promisify: BluePromise.promisify
};

// JVM initialization callback which adds tsjava.classpath to the JVM classpath.
function beforeJvm(): BluePromise<void> {
  var moduleJars: string[] = ['target/dependency/commons-configuration-1.10.jar', 'target/dependency/commons-lang-2.6.jar', 'target/dependency/commons-lang3-3.3.1.jar', 'target/dependency/gremlin-algorithm-3.0.0.M7.jar', 'target/dependency/gremlin-core-3.0.0.M7.jar', 'target/dependency/gremlin-groovy-3.0.0.M7.jar', 'target/dependency/groovy-all-2.3.9-indy.jar', 'target/dependency/groovy-sandbox-1.6.jar', 'target/dependency/hamcrest-core-1.3.jar', 'target/dependency/hppc-0.6.0.jar', 'target/dependency/ivy-2.3.0.jar', 'target/dependency/jackson-annotations-2.3.0.jar', 'target/dependency/jackson-core-2.3.0.jar', 'target/dependency/jackson-databind-2.3.0.jar', 'target/dependency/javatuples-1.2.jar', 'target/dependency/jcabi-log-0.14.jar', 'target/dependency/jcabi-manifests-1.0.jar', 'target/dependency/jcl-over-slf4j-1.7.7.jar', 'target/dependency/jline-2.11.jar', 'target/dependency/junit-4.11.jar', 'target/dependency/kryo-2.24.0.jar', 'target/dependency/log4j-1.2.17.jar', 'target/dependency/minlog-1.2.jar', 'target/dependency/objenesis-2.1.jar', 'target/dependency/slf4j-api-1.7.7.jar', 'target/dependency/slf4j-log4j12-1.7.7.jar', 'target/dependency/snakeyaml-1.13.jar', 'target/dependency/tinkergraph-gremlin-3.0.0.M7.jar'];
  moduleJars.forEach((jarPath: string) => {
    _java.classpath.push(path.join(__dirname, '', jarPath));
  });
  return BluePromise.resolve();
}

_java.registerClientP(beforeJvm);

interface Dictionary {
  [index: string]: string;
}

export = Module;
module Module {
  'use strict';

  export function ensureJvm(): Promise<void> {
    return _java.ensureJvm();
  }


  var shortToLongMap: Dictionary = {
    'AnonymousGraphTraversal': 'com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal',
    'AnonymousGraphTraversal$Tokens': 'com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal$Tokens',
    'EdgeTraversal': 'com.tinkerpop.gremlin.process.graph.EdgeTraversal',
    'ElementTraversal': 'com.tinkerpop.gremlin.process.graph.ElementTraversal',
    'GraphTraversal': 'com.tinkerpop.gremlin.process.graph.GraphTraversal',
    'GraphTraversal$Admin': 'com.tinkerpop.gremlin.process.graph.GraphTraversal$Admin',
    'VertexPropertyTraversal': 'com.tinkerpop.gremlin.process.graph.VertexPropertyTraversal',
    'VertexTraversal': 'com.tinkerpop.gremlin.process.graph.VertexTraversal',
    'Path': 'com.tinkerpop.gremlin.process.Path',
    'Path$Exceptions': 'com.tinkerpop.gremlin.process.Path$Exceptions',
    'Step': 'com.tinkerpop.gremlin.process.Step',
    'T': 'com.tinkerpop.gremlin.process.T',
    'Traversal': 'com.tinkerpop.gremlin.process.Traversal',
    'Traversal$Admin': 'com.tinkerpop.gremlin.process.Traversal$Admin',
    'Traversal$Exceptions': 'com.tinkerpop.gremlin.process.Traversal$Exceptions',
    'TraversalEngine': 'com.tinkerpop.gremlin.process.TraversalEngine',
    'TraversalSideEffects': 'com.tinkerpop.gremlin.process.TraversalSideEffects',
    'TraversalSideEffects$Exceptions': 'com.tinkerpop.gremlin.process.TraversalSideEffects$Exceptions',
    'TraversalStrategies': 'com.tinkerpop.gremlin.process.TraversalStrategies',
    'TraversalStrategies$GlobalCache': 'com.tinkerpop.gremlin.process.TraversalStrategies$GlobalCache',
    'TraversalStrategy': 'com.tinkerpop.gremlin.process.TraversalStrategy',
    'Traverser': 'com.tinkerpop.gremlin.process.Traverser',
    'Traverser$Admin': 'com.tinkerpop.gremlin.process.Traverser$Admin',
    'TraverserGenerator': 'com.tinkerpop.gremlin.process.TraverserGenerator',
    'AbstractStep': 'com.tinkerpop.gremlin.process.util.AbstractStep',
    'BulkSet': 'com.tinkerpop.gremlin.process.util.BulkSet',
    'DefaultTraversal': 'com.tinkerpop.gremlin.process.util.DefaultTraversal',
    'DefaultTraversalSideEffects': 'com.tinkerpop.gremlin.process.util.DefaultTraversalSideEffects',
    'DefaultTraversalStrategies': 'com.tinkerpop.gremlin.process.util.DefaultTraversalStrategies',
    'ElementFunctionComparator': 'com.tinkerpop.gremlin.process.util.ElementFunctionComparator',
    'ElementValueComparator': 'com.tinkerpop.gremlin.process.util.ElementValueComparator',
    'ElementValueFunction': 'com.tinkerpop.gremlin.process.util.ElementValueFunction',
    'EmptyPath': 'com.tinkerpop.gremlin.process.util.EmptyPath',
    'EmptyStep': 'com.tinkerpop.gremlin.process.util.EmptyStep',
    'EmptyTraversal': 'com.tinkerpop.gremlin.process.util.EmptyTraversal',
    'EmptyTraversalSideEffects': 'com.tinkerpop.gremlin.process.util.EmptyTraversalSideEffects',
    'EmptyTraversalStrategies': 'com.tinkerpop.gremlin.process.util.EmptyTraversalStrategies',
    'EmptyTraverser': 'com.tinkerpop.gremlin.process.util.EmptyTraverser',
    'ExpandableStepIterator': 'com.tinkerpop.gremlin.process.util.ExpandableStepIterator',
    'FastNoSuchElementException': 'com.tinkerpop.gremlin.process.util.FastNoSuchElementException',
    'FunctionRing': 'com.tinkerpop.gremlin.process.util.FunctionRing',
    'GraphTraversalSourceGenerator': 'com.tinkerpop.gremlin.process.util.GraphTraversalSourceGenerator',
    'ImmutablePath': 'com.tinkerpop.gremlin.process.util.ImmutablePath',
    'MapHelper': 'com.tinkerpop.gremlin.process.util.MapHelper',
    'MultiIterator': 'com.tinkerpop.gremlin.process.util.MultiIterator',
    'MutablePath': 'com.tinkerpop.gremlin.process.util.MutablePath',
    'SideEffectHelper': 'com.tinkerpop.gremlin.process.util.SideEffectHelper',
    'SparsePath': 'com.tinkerpop.gremlin.process.util.SparsePath',
    'StepMetrics': 'com.tinkerpop.gremlin.process.util.StepMetrics',
    'StepPosition': 'com.tinkerpop.gremlin.process.util.StepPosition',
    'StepTimer': 'com.tinkerpop.gremlin.process.util.StepTimer',
    'TraversalHelper': 'com.tinkerpop.gremlin.process.util.TraversalHelper',
    'TraversalMatrix': 'com.tinkerpop.gremlin.process.util.TraversalMatrix',
    'TraversalMetrics': 'com.tinkerpop.gremlin.process.util.TraversalMetrics',
    'TraversalRing': 'com.tinkerpop.gremlin.process.util.TraversalRing',
    'TraverserSet': 'com.tinkerpop.gremlin.process.util.TraverserSet',
    'Compare': 'com.tinkerpop.gremlin.structure.Compare',
    'Contains': 'com.tinkerpop.gremlin.structure.Contains',
    'Direction': 'com.tinkerpop.gremlin.structure.Direction',
    'Edge': 'com.tinkerpop.gremlin.structure.Edge',
    'Edge$Exceptions': 'com.tinkerpop.gremlin.structure.Edge$Exceptions',
    'Edge$Iterators': 'com.tinkerpop.gremlin.structure.Edge$Iterators',
    'Element': 'com.tinkerpop.gremlin.structure.Element',
    'Element$Exceptions': 'com.tinkerpop.gremlin.structure.Element$Exceptions',
    'Element$Iterators': 'com.tinkerpop.gremlin.structure.Element$Iterators',
    'Graph': 'com.tinkerpop.gremlin.structure.Graph',
    'Graph$Exceptions': 'com.tinkerpop.gremlin.structure.Graph$Exceptions',
    'Graph$Features': 'com.tinkerpop.gremlin.structure.Graph$Features',
    'Graph$Features$DataTypeFeatures': 'com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures',
    'Graph$Features$EdgeFeatures': 'com.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures',
    'Graph$Features$EdgePropertyFeatures': 'com.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures',
    'Graph$Features$ElementFeatures': 'com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures',
    'Graph$Features$FeatureSet': 'com.tinkerpop.gremlin.structure.Graph$Features$FeatureSet',
    'Graph$Features$GraphFeatures': 'com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures',
    'Graph$Features$PropertyFeatures': 'com.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures',
    'Graph$Features$VariableFeatures': 'com.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures',
    'Graph$Features$VertexFeatures': 'com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures',
    'Graph$Features$VertexPropertyFeatures': 'com.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures',
    'Graph$Helper': 'com.tinkerpop.gremlin.structure.Graph$Helper',
    'Graph$Hidden': 'com.tinkerpop.gremlin.structure.Graph$Hidden',
    'Graph$Io': 'com.tinkerpop.gremlin.structure.Graph$Io',
    'Graph$Iterators': 'com.tinkerpop.gremlin.structure.Graph$Iterators',
    'Graph$OptIn': 'com.tinkerpop.gremlin.structure.Graph$OptIn',
    'Graph$OptIns': 'com.tinkerpop.gremlin.structure.Graph$OptIns',
    'Graph$OptOut': 'com.tinkerpop.gremlin.structure.Graph$OptOut',
    'Graph$OptOuts': 'com.tinkerpop.gremlin.structure.Graph$OptOuts',
    'Graph$Variables': 'com.tinkerpop.gremlin.structure.Graph$Variables',
    'Graph$Variables$Exceptions': 'com.tinkerpop.gremlin.structure.Graph$Variables$Exceptions',
    'Operator': 'com.tinkerpop.gremlin.structure.Operator',
    'Order': 'com.tinkerpop.gremlin.structure.Order',
    'Property': 'com.tinkerpop.gremlin.structure.Property',
    'Property$Exceptions': 'com.tinkerpop.gremlin.structure.Property$Exceptions',
    'PropertyType': 'com.tinkerpop.gremlin.structure.PropertyType',
    'Transaction': 'com.tinkerpop.gremlin.structure.Transaction',
    'Transaction$CLOSE_BEHAVIOR': 'com.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR',
    'Transaction$Exceptions': 'com.tinkerpop.gremlin.structure.Transaction$Exceptions',
    'Transaction$READ_WRITE_BEHAVIOR': 'com.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR',
    'Transaction$Workload': 'com.tinkerpop.gremlin.structure.Transaction$Workload',
    'Vertex': 'com.tinkerpop.gremlin.structure.Vertex',
    'Vertex$Exceptions': 'com.tinkerpop.gremlin.structure.Vertex$Exceptions',
    'Vertex$Iterators': 'com.tinkerpop.gremlin.structure.Vertex$Iterators',
    'VertexProperty': 'com.tinkerpop.gremlin.structure.VertexProperty',
    'VertexProperty$Exceptions': 'com.tinkerpop.gremlin.structure.VertexProperty$Exceptions',
    'VertexProperty$Iterators': 'com.tinkerpop.gremlin.structure.VertexProperty$Iterators',
    'TinkerEdge': 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge',
    'TinkerElement': 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerElement',
    'TinkerFactory': 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory',
    'TinkerFactory$SocialTraversal': 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal',
    'TinkerFactory$SocialTraversal$DefaultSocialTraversal': 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal$DefaultSocialTraversal',
    'TinkerGraph': 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph',
    'TinkerGraph$TinkerGraphEdgeFeatures': 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures',
    'TinkerGraph$TinkerGraphFeatures': 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures',
    'TinkerGraph$TinkerGraphGraphFeatures': 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures',
    'TinkerGraph$TinkerGraphVertexFeatures': 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures',
    'TinkerGraphVariables': 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables',
    'TinkerHelper': 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper',
    'TinkerProperty': 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty',
    'TinkerVertex': 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex',
    'TinkerVertexProperty': 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty',
    'Boolean': 'java.lang.Boolean',
    'Cloneable': 'java.lang.Cloneable',
    'Comparable': 'java.lang.Comparable',
    'Double': 'java.lang.Double',
    'Enum': 'java.lang.Enum',
    'Exception': 'java.lang.Exception',
    'Float': 'java.lang.Float',
    'Integer': 'java.lang.Integer',
    'Iterable': 'java.lang.Iterable',
    'Long': 'java.lang.Long',
    'Object': 'java.lang.Object',
    'Short': 'java.lang.Short',
    'String': 'java.lang.String',
    'Throwable': 'java.lang.Throwable',
    'AbstractCollection': 'java.util.AbstractCollection',
    'AbstractList': 'java.util.AbstractList',
    'AbstractSet': 'java.util.AbstractSet',
    'ArrayList': 'java.util.ArrayList',
    'Arrays': 'java.util.Arrays',
    'Collection': 'java.util.Collection',
    'BiFunction': 'java.util.function.BiFunction',
    'BinaryOperator': 'java.util.function.BinaryOperator',
    'BiPredicate': 'java.util.function.BiPredicate',
    'Consumer': 'java.util.function.Consumer',
    'Function': 'java.util.function.Function',
    'HashSet': 'java.util.HashSet',
    'Iterator': 'java.util.Iterator',
    'List': 'java.util.List',
    'Map': 'java.util.Map',
    'NoSuchElementException': 'java.util.NoSuchElementException',
    'Set': 'java.util.Set'
  };
  
  export function importClass(className: 'AnonymousGraphTraversal'): Java.com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.Static;
  export function importClass(className: 'AnonymousGraphTraversal$Tokens'): Java.com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal$Tokens.Static;
  export function importClass(className: 'EdgeTraversal'): Java.com.tinkerpop.gremlin.process.graph.EdgeTraversal.Static;
  export function importClass(className: 'ElementTraversal'): Java.com.tinkerpop.gremlin.process.graph.ElementTraversal.Static;
  export function importClass(className: 'GraphTraversal'): Java.com.tinkerpop.gremlin.process.graph.GraphTraversal.Static;
  export function importClass(className: 'GraphTraversal$Admin'): Java.com.tinkerpop.gremlin.process.graph.GraphTraversal$Admin.Static;
  export function importClass(className: 'VertexPropertyTraversal'): Java.com.tinkerpop.gremlin.process.graph.VertexPropertyTraversal.Static;
  export function importClass(className: 'VertexTraversal'): Java.com.tinkerpop.gremlin.process.graph.VertexTraversal.Static;
  export function importClass(className: 'Path'): Java.com.tinkerpop.gremlin.process.Path.Static;
  export function importClass(className: 'Path$Exceptions'): Java.com.tinkerpop.gremlin.process.Path$Exceptions.Static;
  export function importClass(className: 'Step'): Java.com.tinkerpop.gremlin.process.Step.Static;
  export function importClass(className: 'T'): Java.com.tinkerpop.gremlin.process.T.Static;
  export function importClass(className: 'Traversal'): Java.com.tinkerpop.gremlin.process.Traversal.Static;
  export function importClass(className: 'Traversal$Admin'): Java.com.tinkerpop.gremlin.process.Traversal$Admin.Static;
  export function importClass(className: 'Traversal$Exceptions'): Java.com.tinkerpop.gremlin.process.Traversal$Exceptions.Static;
  export function importClass(className: 'TraversalEngine'): Java.com.tinkerpop.gremlin.process.TraversalEngine.Static;
  export function importClass(className: 'TraversalSideEffects'): Java.com.tinkerpop.gremlin.process.TraversalSideEffects.Static;
  export function importClass(className: 'TraversalSideEffects$Exceptions'): Java.com.tinkerpop.gremlin.process.TraversalSideEffects$Exceptions.Static;
  export function importClass(className: 'TraversalStrategies'): Java.com.tinkerpop.gremlin.process.TraversalStrategies.Static;
  export function importClass(className: 'TraversalStrategies$GlobalCache'): Java.com.tinkerpop.gremlin.process.TraversalStrategies$GlobalCache.Static;
  export function importClass(className: 'TraversalStrategy'): Java.com.tinkerpop.gremlin.process.TraversalStrategy.Static;
  export function importClass(className: 'Traverser'): Java.com.tinkerpop.gremlin.process.Traverser.Static;
  export function importClass(className: 'Traverser$Admin'): Java.com.tinkerpop.gremlin.process.Traverser$Admin.Static;
  export function importClass(className: 'TraverserGenerator'): Java.com.tinkerpop.gremlin.process.TraverserGenerator.Static;
  export function importClass(className: 'AbstractStep'): Java.com.tinkerpop.gremlin.process.util.AbstractStep.Static;
  export function importClass(className: 'BulkSet'): Java.com.tinkerpop.gremlin.process.util.BulkSet.Static;
  export function importClass(className: 'DefaultTraversal'): Java.com.tinkerpop.gremlin.process.util.DefaultTraversal.Static;
  export function importClass(className: 'DefaultTraversalSideEffects'): Java.com.tinkerpop.gremlin.process.util.DefaultTraversalSideEffects.Static;
  export function importClass(className: 'DefaultTraversalStrategies'): Java.com.tinkerpop.gremlin.process.util.DefaultTraversalStrategies.Static;
  export function importClass(className: 'ElementFunctionComparator'): Java.com.tinkerpop.gremlin.process.util.ElementFunctionComparator.Static;
  export function importClass(className: 'ElementValueComparator'): Java.com.tinkerpop.gremlin.process.util.ElementValueComparator.Static;
  export function importClass(className: 'ElementValueFunction'): Java.com.tinkerpop.gremlin.process.util.ElementValueFunction.Static;
  export function importClass(className: 'EmptyPath'): Java.com.tinkerpop.gremlin.process.util.EmptyPath.Static;
  export function importClass(className: 'EmptyStep'): Java.com.tinkerpop.gremlin.process.util.EmptyStep.Static;
  export function importClass(className: 'EmptyTraversal'): Java.com.tinkerpop.gremlin.process.util.EmptyTraversal.Static;
  export function importClass(className: 'EmptyTraversalSideEffects'): Java.com.tinkerpop.gremlin.process.util.EmptyTraversalSideEffects.Static;
  export function importClass(className: 'EmptyTraversalStrategies'): Java.com.tinkerpop.gremlin.process.util.EmptyTraversalStrategies.Static;
  export function importClass(className: 'EmptyTraverser'): Java.com.tinkerpop.gremlin.process.util.EmptyTraverser.Static;
  export function importClass(className: 'ExpandableStepIterator'): Java.com.tinkerpop.gremlin.process.util.ExpandableStepIterator.Static;
  export function importClass(className: 'FastNoSuchElementException'): Java.com.tinkerpop.gremlin.process.util.FastNoSuchElementException.Static;
  export function importClass(className: 'FunctionRing'): Java.com.tinkerpop.gremlin.process.util.FunctionRing.Static;
  export function importClass(className: 'GraphTraversalSourceGenerator'): Java.com.tinkerpop.gremlin.process.util.GraphTraversalSourceGenerator.Static;
  export function importClass(className: 'ImmutablePath'): Java.com.tinkerpop.gremlin.process.util.ImmutablePath.Static;
  export function importClass(className: 'MapHelper'): Java.com.tinkerpop.gremlin.process.util.MapHelper.Static;
  export function importClass(className: 'MultiIterator'): Java.com.tinkerpop.gremlin.process.util.MultiIterator.Static;
  export function importClass(className: 'MutablePath'): Java.com.tinkerpop.gremlin.process.util.MutablePath.Static;
  export function importClass(className: 'SideEffectHelper'): Java.com.tinkerpop.gremlin.process.util.SideEffectHelper.Static;
  export function importClass(className: 'SparsePath'): Java.com.tinkerpop.gremlin.process.util.SparsePath.Static;
  export function importClass(className: 'StepMetrics'): Java.com.tinkerpop.gremlin.process.util.StepMetrics.Static;
  export function importClass(className: 'StepPosition'): Java.com.tinkerpop.gremlin.process.util.StepPosition.Static;
  export function importClass(className: 'StepTimer'): Java.com.tinkerpop.gremlin.process.util.StepTimer.Static;
  export function importClass(className: 'TraversalHelper'): Java.com.tinkerpop.gremlin.process.util.TraversalHelper.Static;
  export function importClass(className: 'TraversalMatrix'): Java.com.tinkerpop.gremlin.process.util.TraversalMatrix.Static;
  export function importClass(className: 'TraversalMetrics'): Java.com.tinkerpop.gremlin.process.util.TraversalMetrics.Static;
  export function importClass(className: 'TraversalRing'): Java.com.tinkerpop.gremlin.process.util.TraversalRing.Static;
  export function importClass(className: 'TraverserSet'): Java.com.tinkerpop.gremlin.process.util.TraverserSet.Static;
  export function importClass(className: 'Compare'): Java.com.tinkerpop.gremlin.structure.Compare.Static;
  export function importClass(className: 'Contains'): Java.com.tinkerpop.gremlin.structure.Contains.Static;
  export function importClass(className: 'Direction'): Java.com.tinkerpop.gremlin.structure.Direction.Static;
  export function importClass(className: 'Edge'): Java.com.tinkerpop.gremlin.structure.Edge.Static;
  export function importClass(className: 'Edge$Exceptions'): Java.com.tinkerpop.gremlin.structure.Edge$Exceptions.Static;
  export function importClass(className: 'Edge$Iterators'): Java.com.tinkerpop.gremlin.structure.Edge$Iterators.Static;
  export function importClass(className: 'Element'): Java.com.tinkerpop.gremlin.structure.Element.Static;
  export function importClass(className: 'Element$Exceptions'): Java.com.tinkerpop.gremlin.structure.Element$Exceptions.Static;
  export function importClass(className: 'Element$Iterators'): Java.com.tinkerpop.gremlin.structure.Element$Iterators.Static;
  export function importClass(className: 'Graph'): Java.com.tinkerpop.gremlin.structure.Graph.Static;
  export function importClass(className: 'Graph$Exceptions'): Java.com.tinkerpop.gremlin.structure.Graph$Exceptions.Static;
  export function importClass(className: 'Graph$Features'): Java.com.tinkerpop.gremlin.structure.Graph$Features.Static;
  export function importClass(className: 'Graph$Features$DataTypeFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.Static;
  export function importClass(className: 'Graph$Features$EdgeFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.Static;
  export function importClass(className: 'Graph$Features$EdgePropertyFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures.Static;
  export function importClass(className: 'Graph$Features$ElementFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.Static;
  export function importClass(className: 'Graph$Features$FeatureSet'): Java.com.tinkerpop.gremlin.structure.Graph$Features$FeatureSet.Static;
  export function importClass(className: 'Graph$Features$GraphFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.Static;
  export function importClass(className: 'Graph$Features$PropertyFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures.Static;
  export function importClass(className: 'Graph$Features$VariableFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures.Static;
  export function importClass(className: 'Graph$Features$VertexFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.Static;
  export function importClass(className: 'Graph$Features$VertexPropertyFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.Static;
  export function importClass(className: 'Graph$Helper'): Java.com.tinkerpop.gremlin.structure.Graph$Helper.Static;
  export function importClass(className: 'Graph$Hidden'): Java.com.tinkerpop.gremlin.structure.Graph$Hidden.Static;
  export function importClass(className: 'Graph$Io'): Java.com.tinkerpop.gremlin.structure.Graph$Io.Static;
  export function importClass(className: 'Graph$Iterators'): Java.com.tinkerpop.gremlin.structure.Graph$Iterators.Static;
  export function importClass(className: 'Graph$OptIn'): Java.com.tinkerpop.gremlin.structure.Graph$OptIn.Static;
  export function importClass(className: 'Graph$OptIns'): Java.com.tinkerpop.gremlin.structure.Graph$OptIns.Static;
  export function importClass(className: 'Graph$OptOut'): Java.com.tinkerpop.gremlin.structure.Graph$OptOut.Static;
  export function importClass(className: 'Graph$OptOuts'): Java.com.tinkerpop.gremlin.structure.Graph$OptOuts.Static;
  export function importClass(className: 'Graph$Variables'): Java.com.tinkerpop.gremlin.structure.Graph$Variables.Static;
  export function importClass(className: 'Graph$Variables$Exceptions'): Java.com.tinkerpop.gremlin.structure.Graph$Variables$Exceptions.Static;
  export function importClass(className: 'Operator'): Java.com.tinkerpop.gremlin.structure.Operator.Static;
  export function importClass(className: 'Order'): Java.com.tinkerpop.gremlin.structure.Order.Static;
  export function importClass(className: 'Property'): Java.com.tinkerpop.gremlin.structure.Property.Static;
  export function importClass(className: 'Property$Exceptions'): Java.com.tinkerpop.gremlin.structure.Property$Exceptions.Static;
  export function importClass(className: 'PropertyType'): Java.com.tinkerpop.gremlin.structure.PropertyType.Static;
  export function importClass(className: 'Transaction'): Java.com.tinkerpop.gremlin.structure.Transaction.Static;
  export function importClass(className: 'Transaction$CLOSE_BEHAVIOR'): Java.com.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR.Static;
  export function importClass(className: 'Transaction$Exceptions'): Java.com.tinkerpop.gremlin.structure.Transaction$Exceptions.Static;
  export function importClass(className: 'Transaction$READ_WRITE_BEHAVIOR'): Java.com.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR.Static;
  export function importClass(className: 'Transaction$Workload'): Java.com.tinkerpop.gremlin.structure.Transaction$Workload.Static;
  export function importClass(className: 'Vertex'): Java.com.tinkerpop.gremlin.structure.Vertex.Static;
  export function importClass(className: 'Vertex$Exceptions'): Java.com.tinkerpop.gremlin.structure.Vertex$Exceptions.Static;
  export function importClass(className: 'Vertex$Iterators'): Java.com.tinkerpop.gremlin.structure.Vertex$Iterators.Static;
  export function importClass(className: 'VertexProperty'): Java.com.tinkerpop.gremlin.structure.VertexProperty.Static;
  export function importClass(className: 'VertexProperty$Exceptions'): Java.com.tinkerpop.gremlin.structure.VertexProperty$Exceptions.Static;
  export function importClass(className: 'VertexProperty$Iterators'): Java.com.tinkerpop.gremlin.structure.VertexProperty$Iterators.Static;
  export function importClass(className: 'TinkerEdge'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge.Static;
  export function importClass(className: 'TinkerElement'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerElement.Static;
  export function importClass(className: 'TinkerFactory'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.Static;
  export function importClass(className: 'TinkerFactory$SocialTraversal'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal.Static;
  export function importClass(className: 'TinkerFactory$SocialTraversal$DefaultSocialTraversal'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal$DefaultSocialTraversal.Static;
  export function importClass(className: 'TinkerGraph'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.Static;
  export function importClass(className: 'TinkerGraph$TinkerGraphEdgeFeatures'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures.Static;
  export function importClass(className: 'TinkerGraph$TinkerGraphFeatures'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures.Static;
  export function importClass(className: 'TinkerGraph$TinkerGraphGraphFeatures'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures.Static;
  export function importClass(className: 'TinkerGraph$TinkerGraphVertexFeatures'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures.Static;
  export function importClass(className: 'TinkerGraphVariables'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables.Static;
  export function importClass(className: 'TinkerHelper'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.Static;
  export function importClass(className: 'TinkerProperty'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty.Static;
  export function importClass(className: 'TinkerVertex'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex.Static;
  export function importClass(className: 'TinkerVertexProperty'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty.Static;
  export function importClass(className: 'Boolean'): Java.java.lang.Boolean.Static;
  export function importClass(className: 'Cloneable'): Java.java.lang.Cloneable.Static;
  export function importClass(className: 'Comparable'): Java.java.lang.Comparable.Static;
  export function importClass(className: 'Double'): Java.java.lang.Double.Static;
  export function importClass(className: 'Enum'): Java.java.lang.Enum.Static;
  export function importClass(className: 'Exception'): Java.java.lang.Exception.Static;
  export function importClass(className: 'Float'): Java.java.lang.Float.Static;
  export function importClass(className: 'Integer'): Java.java.lang.Integer.Static;
  export function importClass(className: 'Iterable'): Java.java.lang.Iterable.Static;
  export function importClass(className: 'Long'): Java.java.lang.Long.Static;
  export function importClass(className: 'Object'): Java.java.lang.Object.Static;
  export function importClass(className: 'Short'): Java.java.lang.Short.Static;
  export function importClass(className: 'String'): Java.java.lang.String.Static;
  export function importClass(className: 'Throwable'): Java.java.lang.Throwable.Static;
  export function importClass(className: 'AbstractCollection'): Java.java.util.AbstractCollection.Static;
  export function importClass(className: 'AbstractList'): Java.java.util.AbstractList.Static;
  export function importClass(className: 'AbstractSet'): Java.java.util.AbstractSet.Static;
  export function importClass(className: 'ArrayList'): Java.java.util.ArrayList.Static;
  export function importClass(className: 'Arrays'): Java.java.util.Arrays.Static;
  export function importClass(className: 'Collection'): Java.java.util.Collection.Static;
  export function importClass(className: 'BiFunction'): Java.java.util.function_.BiFunction.Static;
  export function importClass(className: 'BinaryOperator'): Java.java.util.function_.BinaryOperator.Static;
  export function importClass(className: 'BiPredicate'): Java.java.util.function_.BiPredicate.Static;
  export function importClass(className: 'Consumer'): Java.java.util.function_.Consumer.Static;
  export function importClass(className: 'Function'): Java.java.util.function_.Function.Static;
  export function importClass(className: 'HashSet'): Java.java.util.HashSet.Static;
  export function importClass(className: 'Iterator'): Java.java.util.Iterator.Static;
  export function importClass(className: 'List'): Java.java.util.List.Static;
  export function importClass(className: 'Map'): Java.java.util.Map.Static;
  export function importClass(className: 'NoSuchElementException'): Java.java.util.NoSuchElementException.Static;
  export function importClass(className: 'Set'): Java.java.util.Set.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal'): Java.com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal$Tokens'): Java.com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal$Tokens.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.graph.EdgeTraversal'): Java.com.tinkerpop.gremlin.process.graph.EdgeTraversal.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.graph.ElementTraversal'): Java.com.tinkerpop.gremlin.process.graph.ElementTraversal.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.graph.GraphTraversal'): Java.com.tinkerpop.gremlin.process.graph.GraphTraversal.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.graph.GraphTraversal$Admin'): Java.com.tinkerpop.gremlin.process.graph.GraphTraversal$Admin.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.graph.VertexPropertyTraversal'): Java.com.tinkerpop.gremlin.process.graph.VertexPropertyTraversal.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.graph.VertexTraversal'): Java.com.tinkerpop.gremlin.process.graph.VertexTraversal.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.Path'): Java.com.tinkerpop.gremlin.process.Path.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.Path$Exceptions'): Java.com.tinkerpop.gremlin.process.Path$Exceptions.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.Step'): Java.com.tinkerpop.gremlin.process.Step.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.T'): Java.com.tinkerpop.gremlin.process.T.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.Traversal'): Java.com.tinkerpop.gremlin.process.Traversal.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.Traversal$Admin'): Java.com.tinkerpop.gremlin.process.Traversal$Admin.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.Traversal$Exceptions'): Java.com.tinkerpop.gremlin.process.Traversal$Exceptions.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.TraversalEngine'): Java.com.tinkerpop.gremlin.process.TraversalEngine.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.TraversalSideEffects'): Java.com.tinkerpop.gremlin.process.TraversalSideEffects.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.TraversalSideEffects$Exceptions'): Java.com.tinkerpop.gremlin.process.TraversalSideEffects$Exceptions.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.TraversalStrategies'): Java.com.tinkerpop.gremlin.process.TraversalStrategies.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.TraversalStrategies$GlobalCache'): Java.com.tinkerpop.gremlin.process.TraversalStrategies$GlobalCache.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.TraversalStrategy'): Java.com.tinkerpop.gremlin.process.TraversalStrategy.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.Traverser'): Java.com.tinkerpop.gremlin.process.Traverser.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.Traverser$Admin'): Java.com.tinkerpop.gremlin.process.Traverser$Admin.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.TraverserGenerator'): Java.com.tinkerpop.gremlin.process.TraverserGenerator.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.AbstractStep'): Java.com.tinkerpop.gremlin.process.util.AbstractStep.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.BulkSet'): Java.com.tinkerpop.gremlin.process.util.BulkSet.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.DefaultTraversal'): Java.com.tinkerpop.gremlin.process.util.DefaultTraversal.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.DefaultTraversalSideEffects'): Java.com.tinkerpop.gremlin.process.util.DefaultTraversalSideEffects.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.DefaultTraversalStrategies'): Java.com.tinkerpop.gremlin.process.util.DefaultTraversalStrategies.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.ElementFunctionComparator'): Java.com.tinkerpop.gremlin.process.util.ElementFunctionComparator.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.ElementValueComparator'): Java.com.tinkerpop.gremlin.process.util.ElementValueComparator.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.ElementValueFunction'): Java.com.tinkerpop.gremlin.process.util.ElementValueFunction.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.EmptyPath'): Java.com.tinkerpop.gremlin.process.util.EmptyPath.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.EmptyStep'): Java.com.tinkerpop.gremlin.process.util.EmptyStep.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.EmptyTraversal'): Java.com.tinkerpop.gremlin.process.util.EmptyTraversal.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.EmptyTraversalSideEffects'): Java.com.tinkerpop.gremlin.process.util.EmptyTraversalSideEffects.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.EmptyTraversalStrategies'): Java.com.tinkerpop.gremlin.process.util.EmptyTraversalStrategies.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.EmptyTraverser'): Java.com.tinkerpop.gremlin.process.util.EmptyTraverser.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.ExpandableStepIterator'): Java.com.tinkerpop.gremlin.process.util.ExpandableStepIterator.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.FastNoSuchElementException'): Java.com.tinkerpop.gremlin.process.util.FastNoSuchElementException.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.FunctionRing'): Java.com.tinkerpop.gremlin.process.util.FunctionRing.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.GraphTraversalSourceGenerator'): Java.com.tinkerpop.gremlin.process.util.GraphTraversalSourceGenerator.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.ImmutablePath'): Java.com.tinkerpop.gremlin.process.util.ImmutablePath.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.MapHelper'): Java.com.tinkerpop.gremlin.process.util.MapHelper.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.MultiIterator'): Java.com.tinkerpop.gremlin.process.util.MultiIterator.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.MutablePath'): Java.com.tinkerpop.gremlin.process.util.MutablePath.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.SideEffectHelper'): Java.com.tinkerpop.gremlin.process.util.SideEffectHelper.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.SparsePath'): Java.com.tinkerpop.gremlin.process.util.SparsePath.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.StepMetrics'): Java.com.tinkerpop.gremlin.process.util.StepMetrics.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.StepPosition'): Java.com.tinkerpop.gremlin.process.util.StepPosition.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.StepTimer'): Java.com.tinkerpop.gremlin.process.util.StepTimer.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.TraversalHelper'): Java.com.tinkerpop.gremlin.process.util.TraversalHelper.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.TraversalMatrix'): Java.com.tinkerpop.gremlin.process.util.TraversalMatrix.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.TraversalMetrics'): Java.com.tinkerpop.gremlin.process.util.TraversalMetrics.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.TraversalRing'): Java.com.tinkerpop.gremlin.process.util.TraversalRing.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.process.util.TraverserSet'): Java.com.tinkerpop.gremlin.process.util.TraverserSet.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Compare'): Java.com.tinkerpop.gremlin.structure.Compare.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Contains'): Java.com.tinkerpop.gremlin.structure.Contains.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Direction'): Java.com.tinkerpop.gremlin.structure.Direction.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Edge'): Java.com.tinkerpop.gremlin.structure.Edge.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Edge$Exceptions'): Java.com.tinkerpop.gremlin.structure.Edge$Exceptions.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Edge$Iterators'): Java.com.tinkerpop.gremlin.structure.Edge$Iterators.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Element'): Java.com.tinkerpop.gremlin.structure.Element.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Element$Exceptions'): Java.com.tinkerpop.gremlin.structure.Element$Exceptions.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Element$Iterators'): Java.com.tinkerpop.gremlin.structure.Element$Iterators.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph'): Java.com.tinkerpop.gremlin.structure.Graph.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Exceptions'): Java.com.tinkerpop.gremlin.structure.Graph$Exceptions.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Features'): Java.com.tinkerpop.gremlin.structure.Graph$Features.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Features$FeatureSet'): Java.com.tinkerpop.gremlin.structure.Graph$Features$FeatureSet.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures'): Java.com.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Helper'): Java.com.tinkerpop.gremlin.structure.Graph$Helper.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Hidden'): Java.com.tinkerpop.gremlin.structure.Graph$Hidden.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Io'): Java.com.tinkerpop.gremlin.structure.Graph$Io.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Iterators'): Java.com.tinkerpop.gremlin.structure.Graph$Iterators.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$OptIn'): Java.com.tinkerpop.gremlin.structure.Graph$OptIn.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$OptIns'): Java.com.tinkerpop.gremlin.structure.Graph$OptIns.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$OptOut'): Java.com.tinkerpop.gremlin.structure.Graph$OptOut.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$OptOuts'): Java.com.tinkerpop.gremlin.structure.Graph$OptOuts.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Variables'): Java.com.tinkerpop.gremlin.structure.Graph$Variables.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Graph$Variables$Exceptions'): Java.com.tinkerpop.gremlin.structure.Graph$Variables$Exceptions.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Operator'): Java.com.tinkerpop.gremlin.structure.Operator.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Order'): Java.com.tinkerpop.gremlin.structure.Order.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Property'): Java.com.tinkerpop.gremlin.structure.Property.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Property$Exceptions'): Java.com.tinkerpop.gremlin.structure.Property$Exceptions.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.PropertyType'): Java.com.tinkerpop.gremlin.structure.PropertyType.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Transaction'): Java.com.tinkerpop.gremlin.structure.Transaction.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR'): Java.com.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Transaction$Exceptions'): Java.com.tinkerpop.gremlin.structure.Transaction$Exceptions.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR'): Java.com.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Transaction$Workload'): Java.com.tinkerpop.gremlin.structure.Transaction$Workload.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Vertex'): Java.com.tinkerpop.gremlin.structure.Vertex.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Vertex$Exceptions'): Java.com.tinkerpop.gremlin.structure.Vertex$Exceptions.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.Vertex$Iterators'): Java.com.tinkerpop.gremlin.structure.Vertex$Iterators.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.VertexProperty'): Java.com.tinkerpop.gremlin.structure.VertexProperty.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.VertexProperty$Exceptions'): Java.com.tinkerpop.gremlin.structure.VertexProperty$Exceptions.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.structure.VertexProperty$Iterators'): Java.com.tinkerpop.gremlin.structure.VertexProperty$Iterators.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerElement'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerElement.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal$DefaultSocialTraversal'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal$DefaultSocialTraversal.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex.Static;
  export function importClass(className: 'com.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty'): Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty.Static;
  export function importClass(className: 'java.lang.Boolean'): Java.java.lang.Boolean.Static;
  export function importClass(className: 'java.lang.Cloneable'): Java.java.lang.Cloneable.Static;
  export function importClass(className: 'java.lang.Comparable'): Java.java.lang.Comparable.Static;
  export function importClass(className: 'java.lang.Double'): Java.java.lang.Double.Static;
  export function importClass(className: 'java.lang.Enum'): Java.java.lang.Enum.Static;
  export function importClass(className: 'java.lang.Exception'): Java.java.lang.Exception.Static;
  export function importClass(className: 'java.lang.Float'): Java.java.lang.Float.Static;
  export function importClass(className: 'java.lang.Integer'): Java.java.lang.Integer.Static;
  export function importClass(className: 'java.lang.Iterable'): Java.java.lang.Iterable.Static;
  export function importClass(className: 'java.lang.Long'): Java.java.lang.Long.Static;
  export function importClass(className: 'java.lang.Number'): Java.java.lang.Number.Static;
  export function importClass(className: 'java.lang.Object'): Java.java.lang.Object.Static;
  export function importClass(className: 'java.lang.Short'): Java.java.lang.Short.Static;
  export function importClass(className: 'java.lang.String'): Java.java.lang.String.Static;
  export function importClass(className: 'java.lang.Throwable'): Java.java.lang.Throwable.Static;
  export function importClass(className: 'java.util.AbstractCollection'): Java.java.util.AbstractCollection.Static;
  export function importClass(className: 'java.util.AbstractList'): Java.java.util.AbstractList.Static;
  export function importClass(className: 'java.util.AbstractSet'): Java.java.util.AbstractSet.Static;
  export function importClass(className: 'java.util.ArrayList'): Java.java.util.ArrayList.Static;
  export function importClass(className: 'java.util.Arrays'): Java.java.util.Arrays.Static;
  export function importClass(className: 'java.util.Collection'): Java.java.util.Collection.Static;
  export function importClass(className: 'java.util.function.BiFunction'): Java.java.util.function_.BiFunction.Static;
  export function importClass(className: 'java.util.function.BinaryOperator'): Java.java.util.function_.BinaryOperator.Static;
  export function importClass(className: 'java.util.function.BiPredicate'): Java.java.util.function_.BiPredicate.Static;
  export function importClass(className: 'java.util.function.Consumer'): Java.java.util.function_.Consumer.Static;
  export function importClass(className: 'java.util.function.Function'): Java.java.util.function_.Function.Static;
  export function importClass(className: 'java.util.HashSet'): Java.java.util.HashSet.Static;
  export function importClass(className: 'java.util.Iterator'): Java.java.util.Iterator.Static;
  export function importClass(className: 'java.util.List'): Java.java.util.List.Static;
  export function importClass(className: 'java.util.Map'): Java.java.util.Map.Static;
  export function importClass(className: 'java.util.NoSuchElementException'): Java.java.util.NoSuchElementException.Static;
  export function importClass(className: 'java.util.Set'): Java.java.util.Set.Static;
  export function importClass(className: string): any;
  export function importClass(className: string): any {
    if (className in shortToLongMap) {
      className = shortToLongMap[className];
    }
    return _java.import(className);
  }

  // TODO: All overloads of newInstanceSync
  export function newInstanceSync(className: string, ...args: any[]): any {
    args.unshift(className);
    return _java.newInstanceSync.apply(_java, args);
  }

  export module Java {

  // Node-java has special handling for methods that return long or java.lang.Long,
  // returning a Javascript Number but with an additional property longValue.
  export interface longValue_t extends Number {
    longValue: string;
  }

  // Node-java can automatically coerce a javascript string into a java.lang.String.
  // This special type alias allows to declare that possiblity to Typescript.
  export type string_t = string | java.lang.String;

  // Java methods that take java.lang.Object parameters implicitly will take a java.lang.String.
  // But string_t is not sufficient for this case, we need object_t.
  export type object_t = java.lang.Object | string | boolean | number | longValue_t;

  // Java methods that take long or java.lang.Long parameters may take javascript numbers,
  // longValue_t (see above) or java.lang.Long.
  // This special type alias allows to declare that possiblity to Typescript.
  export type long_t = number | longValue_t | java.lang.Long;

  // Handling of other primitive numeric types is simpler, as there is no loss of precision.
  export type boolean_t = boolean | java.lang.Boolean;
  export type short_t = number | java.lang.Short;
  export type integer_t = number | java.lang.Integer;
  export type double_t = number | java.lang.Double;
  export type float_t = number | java.lang.Float;
  export type number_t = number | java.lang.Number;

  export interface array_t<T> extends java.lang.Object {
    // This is an opaque type for a java array_t T[];
    // Use Java.newArray<T>(className, [...]) to create wherever a Java method expects a T[],
    // most notably for vararg parameteters.
    __dummy: T;
  }

  export type object_array_t = array_t<java.lang.Object> | object_t[];

  export interface Callback<T> {
    (err?: Error, result?: T): void;
  }

  export import AnonymousGraphTraversal = com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal;
  export import AnonymousGraphTraversal$Tokens = com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal$Tokens;
  export import EdgeTraversal = com.tinkerpop.gremlin.process.graph.EdgeTraversal;
  export import ElementTraversal = com.tinkerpop.gremlin.process.graph.ElementTraversal;
  export import GraphTraversal = com.tinkerpop.gremlin.process.graph.GraphTraversal;
  export import GraphTraversal$Admin = com.tinkerpop.gremlin.process.graph.GraphTraversal$Admin;
  export import VertexPropertyTraversal = com.tinkerpop.gremlin.process.graph.VertexPropertyTraversal;
  export import VertexTraversal = com.tinkerpop.gremlin.process.graph.VertexTraversal;
  export import Path = com.tinkerpop.gremlin.process.Path;
  export import Path$Exceptions = com.tinkerpop.gremlin.process.Path$Exceptions;
  export import Step = com.tinkerpop.gremlin.process.Step;
  export import T = com.tinkerpop.gremlin.process.T;
  export import Traversal = com.tinkerpop.gremlin.process.Traversal;
  export import Traversal$Admin = com.tinkerpop.gremlin.process.Traversal$Admin;
  export import Traversal$Exceptions = com.tinkerpop.gremlin.process.Traversal$Exceptions;
  export import TraversalEngine = com.tinkerpop.gremlin.process.TraversalEngine;
  export import TraversalSideEffects = com.tinkerpop.gremlin.process.TraversalSideEffects;
  export import TraversalSideEffects$Exceptions = com.tinkerpop.gremlin.process.TraversalSideEffects$Exceptions;
  export import TraversalStrategies = com.tinkerpop.gremlin.process.TraversalStrategies;
  export import TraversalStrategies$GlobalCache = com.tinkerpop.gremlin.process.TraversalStrategies$GlobalCache;
  export import TraversalStrategy = com.tinkerpop.gremlin.process.TraversalStrategy;
  export import Traverser = com.tinkerpop.gremlin.process.Traverser;
  export import Traverser$Admin = com.tinkerpop.gremlin.process.Traverser$Admin;
  export import TraverserGenerator = com.tinkerpop.gremlin.process.TraverserGenerator;
  export import AbstractStep = com.tinkerpop.gremlin.process.util.AbstractStep;
  export import BulkSet = com.tinkerpop.gremlin.process.util.BulkSet;
  export import DefaultTraversal = com.tinkerpop.gremlin.process.util.DefaultTraversal;
  export import DefaultTraversalSideEffects = com.tinkerpop.gremlin.process.util.DefaultTraversalSideEffects;
  export import DefaultTraversalStrategies = com.tinkerpop.gremlin.process.util.DefaultTraversalStrategies;
  export import ElementFunctionComparator = com.tinkerpop.gremlin.process.util.ElementFunctionComparator;
  export import ElementValueComparator = com.tinkerpop.gremlin.process.util.ElementValueComparator;
  export import ElementValueFunction = com.tinkerpop.gremlin.process.util.ElementValueFunction;
  export import EmptyPath = com.tinkerpop.gremlin.process.util.EmptyPath;
  export import EmptyStep = com.tinkerpop.gremlin.process.util.EmptyStep;
  export import EmptyTraversal = com.tinkerpop.gremlin.process.util.EmptyTraversal;
  export import EmptyTraversalSideEffects = com.tinkerpop.gremlin.process.util.EmptyTraversalSideEffects;
  export import EmptyTraversalStrategies = com.tinkerpop.gremlin.process.util.EmptyTraversalStrategies;
  export import EmptyTraverser = com.tinkerpop.gremlin.process.util.EmptyTraverser;
  export import ExpandableStepIterator = com.tinkerpop.gremlin.process.util.ExpandableStepIterator;
  export import FastNoSuchElementException = com.tinkerpop.gremlin.process.util.FastNoSuchElementException;
  export import FunctionRing = com.tinkerpop.gremlin.process.util.FunctionRing;
  export import GraphTraversalSourceGenerator = com.tinkerpop.gremlin.process.util.GraphTraversalSourceGenerator;
  export import ImmutablePath = com.tinkerpop.gremlin.process.util.ImmutablePath;
  export import MapHelper = com.tinkerpop.gremlin.process.util.MapHelper;
  export import MultiIterator = com.tinkerpop.gremlin.process.util.MultiIterator;
  export import MutablePath = com.tinkerpop.gremlin.process.util.MutablePath;
  export import SideEffectHelper = com.tinkerpop.gremlin.process.util.SideEffectHelper;
  export import SparsePath = com.tinkerpop.gremlin.process.util.SparsePath;
  export import StepMetrics = com.tinkerpop.gremlin.process.util.StepMetrics;
  export import StepPosition = com.tinkerpop.gremlin.process.util.StepPosition;
  export import StepTimer = com.tinkerpop.gremlin.process.util.StepTimer;
  export import TraversalHelper = com.tinkerpop.gremlin.process.util.TraversalHelper;
  export import TraversalMatrix = com.tinkerpop.gremlin.process.util.TraversalMatrix;
  export import TraversalMetrics = com.tinkerpop.gremlin.process.util.TraversalMetrics;
  export import TraversalRing = com.tinkerpop.gremlin.process.util.TraversalRing;
  export import TraverserSet = com.tinkerpop.gremlin.process.util.TraverserSet;
  export import Compare = com.tinkerpop.gremlin.structure.Compare;
  export import Contains = com.tinkerpop.gremlin.structure.Contains;
  export import Direction = com.tinkerpop.gremlin.structure.Direction;
  export import Edge = com.tinkerpop.gremlin.structure.Edge;
  export import Edge$Exceptions = com.tinkerpop.gremlin.structure.Edge$Exceptions;
  export import Edge$Iterators = com.tinkerpop.gremlin.structure.Edge$Iterators;
  export import Element = com.tinkerpop.gremlin.structure.Element;
  export import Element$Exceptions = com.tinkerpop.gremlin.structure.Element$Exceptions;
  export import Element$Iterators = com.tinkerpop.gremlin.structure.Element$Iterators;
  export import Graph = com.tinkerpop.gremlin.structure.Graph;
  export import Graph$Exceptions = com.tinkerpop.gremlin.structure.Graph$Exceptions;
  export import Graph$Features = com.tinkerpop.gremlin.structure.Graph$Features;
  export import Graph$Features$DataTypeFeatures = com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures;
  export import Graph$Features$EdgeFeatures = com.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures;
  export import Graph$Features$EdgePropertyFeatures = com.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures;
  export import Graph$Features$ElementFeatures = com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures;
  export import Graph$Features$FeatureSet = com.tinkerpop.gremlin.structure.Graph$Features$FeatureSet;
  export import Graph$Features$GraphFeatures = com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures;
  export import Graph$Features$PropertyFeatures = com.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures;
  export import Graph$Features$VariableFeatures = com.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures;
  export import Graph$Features$VertexFeatures = com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures;
  export import Graph$Features$VertexPropertyFeatures = com.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures;
  export import Graph$Helper = com.tinkerpop.gremlin.structure.Graph$Helper;
  export import Graph$Hidden = com.tinkerpop.gremlin.structure.Graph$Hidden;
  export import Graph$Io = com.tinkerpop.gremlin.structure.Graph$Io;
  export import Graph$Iterators = com.tinkerpop.gremlin.structure.Graph$Iterators;
  export import Graph$OptIn = com.tinkerpop.gremlin.structure.Graph$OptIn;
  export import Graph$OptIns = com.tinkerpop.gremlin.structure.Graph$OptIns;
  export import Graph$OptOut = com.tinkerpop.gremlin.structure.Graph$OptOut;
  export import Graph$OptOuts = com.tinkerpop.gremlin.structure.Graph$OptOuts;
  export import Graph$Variables = com.tinkerpop.gremlin.structure.Graph$Variables;
  export import Graph$Variables$Exceptions = com.tinkerpop.gremlin.structure.Graph$Variables$Exceptions;
  export import Operator = com.tinkerpop.gremlin.structure.Operator;
  export import Order = com.tinkerpop.gremlin.structure.Order;
  export import Property = com.tinkerpop.gremlin.structure.Property;
  export import Property$Exceptions = com.tinkerpop.gremlin.structure.Property$Exceptions;
  export import PropertyType = com.tinkerpop.gremlin.structure.PropertyType;
  export import Transaction = com.tinkerpop.gremlin.structure.Transaction;
  export import Transaction$CLOSE_BEHAVIOR = com.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR;
  export import Transaction$Exceptions = com.tinkerpop.gremlin.structure.Transaction$Exceptions;
  export import Transaction$READ_WRITE_BEHAVIOR = com.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR;
  export import Transaction$Workload = com.tinkerpop.gremlin.structure.Transaction$Workload;
  export import Vertex = com.tinkerpop.gremlin.structure.Vertex;
  export import Vertex$Exceptions = com.tinkerpop.gremlin.structure.Vertex$Exceptions;
  export import Vertex$Iterators = com.tinkerpop.gremlin.structure.Vertex$Iterators;
  export import VertexProperty = com.tinkerpop.gremlin.structure.VertexProperty;
  export import VertexProperty$Exceptions = com.tinkerpop.gremlin.structure.VertexProperty$Exceptions;
  export import VertexProperty$Iterators = com.tinkerpop.gremlin.structure.VertexProperty$Iterators;
  export import TinkerEdge = com.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge;
  export import TinkerElement = com.tinkerpop.gremlin.tinkergraph.structure.TinkerElement;
  export import TinkerFactory = com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory;
  export import TinkerFactory$SocialTraversal = com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal;
  export import TinkerFactory$SocialTraversal$DefaultSocialTraversal = com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal$DefaultSocialTraversal;
  export import TinkerGraph = com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph;
  export import TinkerGraph$TinkerGraphEdgeFeatures = com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures;
  export import TinkerGraph$TinkerGraphFeatures = com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures;
  export import TinkerGraph$TinkerGraphGraphFeatures = com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures;
  export import TinkerGraph$TinkerGraphVertexFeatures = com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures;
  export import TinkerGraphVariables = com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables;
  export import TinkerHelper = com.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper;
  export import TinkerProperty = com.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty;
  export import TinkerVertex = com.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex;
  export import TinkerVertexProperty = com.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty;
  export import Boolean = java.lang.Boolean;
  export import Cloneable = java.lang.Cloneable;
  export import Comparable = java.lang.Comparable;
  export import Double = java.lang.Double;
  export import Enum = java.lang.Enum;
  export import Exception = java.lang.Exception;
  export import Float = java.lang.Float;
  export import Integer = java.lang.Integer;
  export import Iterable = java.lang.Iterable;
  export import Long = java.lang.Long;
  export import Object = java.lang.Object;
  export import Short = java.lang.Short;
  export import String = java.lang.String;
  export import Throwable = java.lang.Throwable;
  export import AbstractCollection = java.util.AbstractCollection;
  export import AbstractList = java.util.AbstractList;
  export import AbstractSet = java.util.AbstractSet;
  export import ArrayList = java.util.ArrayList;
  export import Arrays = java.util.Arrays;
  export import Collection = java.util.Collection;
  export import BiFunction = java.util.function_.BiFunction;
  export import BinaryOperator = java.util.function_.BinaryOperator;
  export import BiPredicate = java.util.function_.BiPredicate;
  export import Consumer = java.util.function_.Consumer;
  export import Function = java.util.function_.Function;
  export import HashSet = java.util.HashSet;
  export import Iterator = java.util.Iterator;
  export import List = java.util.List;
  export import Map = java.util.Map;
  export import NoSuchElementException = java.util.NoSuchElementException;
  export import Set = java.util.Set;

  export module com.tinkerpop.gremlin.process.graph {
    export interface AnonymousGraphTraversal extends Java.java.lang.Object {
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
      addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.aggregate()
      aggregate(): GraphTraversal;
      aggregateP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.as(java.lang.String)
      as(arg0: string_t): GraphTraversal;
      asP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.back(java.lang.String)
      back(arg0: string_t): GraphTraversal;
      backP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.between(java.lang.String,java.lang.Comparable,java.lang.Comparable)
      between(arg0: string_t, arg1: Comparable, arg2: Comparable): GraphTraversal;
      betweenP(arg0: string_t, arg1: Comparable, arg2: Comparable): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Collection<java.lang.String>>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.cap(java.lang.String)
      cap(arg0: string_t): GraphTraversal;
      capP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.cap()
      cap(): GraphTraversal;
      capP(): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.choose(java.util.function.Predicate<A>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: object_t, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: object_t, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <A,E2,M> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.choose(java.util.function.Function<A, M>,java.util.Map<M, com.tinkerpop.gremlin.process.Traversal<?, E2>>)
      choose(arg0: Function, arg1: Map): GraphTraversal;
      chooseP(arg0: Function, arg1: Map): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Long> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      emit(arg0: object_t): GraphTraversal;
      emitP(arg0: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.except(java.util.Collection<A>)
      except(arg0: Collection): GraphTraversal;
      exceptP(arg0: Collection): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.except(java.lang.String)
      except(arg0: string_t): GraphTraversal;
      exceptP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.except(java.lang.Object)
      except(arg0: object_t): GraphTraversal;
      exceptP(arg0: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      filter(arg0: object_t): GraphTraversal;
      filterP(arg0: object_t): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.fold(E2,java.util.function.BiFunction<E2, A, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.List<A>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.inject(java.lang.Object...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, ? extends com.tinkerpop.gremlin.structure.Property<E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.repeat(com.tinkerpop.gremlin.process.Traversal<?, A>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.retain(java.util.Collection<A>)
      retain(arg0: Collection): GraphTraversal;
      retainP(arg0: Collection): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.retain(java.lang.String)
      retain(arg0: string_t): GraphTraversal;
      retainP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.retain(java.lang.Object)
      retain(arg0: object_t): GraphTraversal;
      retainP(arg0: object_t): Promise<GraphTraversal>;
      // public default <A,V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <A,V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.sack(java.util.function.BiFunction<V, A, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.shuffle()
      shuffle(): GraphTraversal;
      shuffleP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<A>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public abstract <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.start()
      start(): GraphTraversal;
      startP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.store()
      store(): GraphTraversal;
      storeP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.subgraph(java.lang.String,java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.subgraph(java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: Set, arg1: Map, arg2: object_t): GraphTraversal;
      subgraphP(arg0: Set, arg1: Map, arg2: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.subgraph(java.lang.String,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.subgraph(java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: object_t): GraphTraversal;
      subgraphP(arg0: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): GraphTraversal;
      submitP(arg0: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.toV(com.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      until(arg0: object_t): GraphTraversal;
      untilP(arg0: object_t): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.value()
      value(): GraphTraversal;
      valueP(): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
      where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
      whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
      where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
      whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.where(com.tinkerpop.gremlin.process.Traversal)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.withPath()
      withPath(): GraphTraversal;
      withPathP(): Promise<GraphTraversal>;
      // public default <A,B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.withSack(java.util.function.Supplier<B>,java.util.function.UnaryOperator<B>)
      withSack(arg0: object_t, arg1: object_t): GraphTraversal;
      withSackP(arg0: object_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <A,B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.withSack(java.util.function.Supplier<B>)
      withSack(arg0: object_t): GraphTraversal;
      withSackP(arg0: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: object_t): GraphTraversal;
      withSideEffectP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
    }
    export module AnonymousGraphTraversal {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.process.graph {
    export interface AnonymousGraphTraversal$Tokens extends Java.java.lang.Enum,Java.com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal {
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
      addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.aggregate()
      aggregate(): GraphTraversal;
      aggregateP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.as(java.lang.String)
      as(arg0: string_t): GraphTraversal;
      asP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.back(java.lang.String)
      back(arg0: string_t): GraphTraversal;
      backP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.between(java.lang.String,java.lang.Comparable,java.lang.Comparable)
      between(arg0: string_t, arg1: Comparable, arg2: Comparable): GraphTraversal;
      betweenP(arg0: string_t, arg1: Comparable, arg2: Comparable): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Collection<java.lang.String>>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.cap(java.lang.String)
      cap(arg0: string_t): GraphTraversal;
      capP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.cap()
      cap(): GraphTraversal;
      capP(): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.choose(java.util.function.Predicate<A>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: object_t, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: object_t, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <A,E2,M> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.choose(java.util.function.Function<A, M>,java.util.Map<M, com.tinkerpop.gremlin.process.Traversal<?, E2>>)
      choose(arg0: Function, arg1: Map): GraphTraversal;
      chooseP(arg0: Function, arg1: Map): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Long> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      emit(arg0: object_t): GraphTraversal;
      emitP(arg0: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.except(java.util.Collection<A>)
      except(arg0: Collection): GraphTraversal;
      exceptP(arg0: Collection): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.except(java.lang.String)
      except(arg0: string_t): GraphTraversal;
      exceptP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.except(java.lang.Object)
      except(arg0: object_t): GraphTraversal;
      exceptP(arg0: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      filter(arg0: object_t): GraphTraversal;
      filterP(arg0: object_t): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.fold(E2,java.util.function.BiFunction<E2, A, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.List<A>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): object_t;
      getDeclaringClassP(): Promise<object_t>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.inject(java.lang.Object...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, ? extends com.tinkerpop.gremlin.structure.Property<E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.repeat(com.tinkerpop.gremlin.process.Traversal<?, A>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.retain(java.util.Collection<A>)
      retain(arg0: Collection): GraphTraversal;
      retainP(arg0: Collection): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.retain(java.lang.String)
      retain(arg0: string_t): GraphTraversal;
      retainP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.retain(java.lang.Object)
      retain(arg0: object_t): GraphTraversal;
      retainP(arg0: object_t): Promise<GraphTraversal>;
      // public default <A,V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <A,V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.sack(java.util.function.BiFunction<V, A, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.shuffle()
      shuffle(): GraphTraversal;
      shuffleP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<A>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public abstract <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.start()
      start(): GraphTraversal;
      startP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.store()
      store(): GraphTraversal;
      storeP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.subgraph(java.lang.String,java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.subgraph(java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: Set, arg1: Map, arg2: object_t): GraphTraversal;
      subgraphP(arg0: Set, arg1: Map, arg2: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.subgraph(java.lang.String,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.subgraph(java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: object_t): GraphTraversal;
      subgraphP(arg0: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): GraphTraversal;
      submitP(arg0: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.toV(com.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      until(arg0: object_t): GraphTraversal;
      untilP(arg0: object_t): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.value()
      value(): GraphTraversal;
      valueP(): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
      where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
      whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
      where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
      whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
      // public default <A,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.where(com.tinkerpop.gremlin.process.Traversal)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.withPath()
      withPath(): GraphTraversal;
      withPathP(): Promise<GraphTraversal>;
      // public default <A,B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.withSack(java.util.function.Supplier<B>,java.util.function.UnaryOperator<B>)
      withSack(arg0: object_t, arg1: object_t): GraphTraversal;
      withSackP(arg0: object_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <A,B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.withSack(java.util.function.Supplier<B>)
      withSack(arg0: object_t): GraphTraversal;
      withSackP(arg0: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: object_t): GraphTraversal;
      withSideEffectP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
    }
    export module AnonymousGraphTraversal$Tokens {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: object_t, arg1: string_t): Enum;
        valueOfP(arg0: object_t, arg1: string_t): Promise<Enum>;
        // public static com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal$Tokens com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal$Tokens.valueOf(java.lang.String)
        valueOf(arg0: string_t): AnonymousGraphTraversal$Tokens;
        valueOfP(arg0: string_t): Promise<AnonymousGraphTraversal$Tokens>;
        // public static com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal$Tokens[] com.tinkerpop.gremlin.process.graph.AnonymousGraphTraversal$Tokens.values()
        values(): AnonymousGraphTraversal$Tokens[];
        valuesP(): Promise<AnonymousGraphTraversal$Tokens[]>;
        __: AnonymousGraphTraversal$Tokens;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.graph {
    export interface EdgeTraversal extends Java.com.tinkerpop.gremlin.process.graph.ElementTraversal {
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
      addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate()
      aggregate(): GraphTraversal;
      aggregateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.as(java.lang.String)
      as(arg0: string_t): GraphTraversal;
      asP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.back(java.lang.String)
      back(arg0: string_t): GraphTraversal;
      backP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.between(java.lang.String,java.lang.Comparable,java.lang.Comparable)
      between(arg0: string_t, arg1: Comparable, arg2: Comparable): GraphTraversal;
      betweenP(arg0: string_t, arg1: Comparable, arg2: Comparable): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Collection<java.lang.String>>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap(java.lang.String)
      cap(arg0: string_t): GraphTraversal;
      capP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap()
      cap(): GraphTraversal;
      capP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Predicate<A>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: object_t, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: object_t, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2,M> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Function<A, M>,java.util.Map<M, com.tinkerpop.gremlin.process.Traversal<?, E2>>)
      choose(arg0: Function, arg1: Map): GraphTraversal;
      chooseP(arg0: Function, arg1: Map): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Long> com.tinkerpop.gremlin.process.graph.ElementTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      emit(arg0: object_t): GraphTraversal;
      emitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.util.Collection<A>)
      except(arg0: Collection): GraphTraversal;
      exceptP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.String)
      except(arg0: string_t): GraphTraversal;
      exceptP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.Object)
      except(arg0: object_t): GraphTraversal;
      exceptP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      filter(arg0: object_t): GraphTraversal;
      filterP(arg0: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold(E2,java.util.function.BiFunction<E2, A, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.List<A>> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.inject(java.lang.Object...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.ElementTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, ? extends com.tinkerpop.gremlin.structure.Property<E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, java.util.Map<java.lang.String, com.tinkerpop.gremlin.structure.Property<E2>>> com.tinkerpop.gremlin.process.graph.EdgeTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.repeat(com.tinkerpop.gremlin.process.Traversal<?, A>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.util.Collection<A>)
      retain(arg0: Collection): GraphTraversal;
      retainP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.String)
      retain(arg0: string_t): GraphTraversal;
      retainP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.Object)
      retain(arg0: object_t): GraphTraversal;
      retainP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BiFunction<V, A, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.shuffle()
      shuffle(): GraphTraversal;
      shuffleP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<A>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.start()
      start(): GraphTraversal;
      startP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store()
      store(): GraphTraversal;
      storeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: Set, arg1: Map, arg2: object_t): GraphTraversal;
      subgraphP(arg0: Set, arg1: Map, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: object_t): GraphTraversal;
      subgraphP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): GraphTraversal;
      submitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.ElementTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.toV(com.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      until(arg0: object_t): GraphTraversal;
      untilP(arg0: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, E2> com.tinkerpop.gremlin.process.graph.EdgeTraversal.value()
      value(): GraphTraversal;
      valueP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.EdgeTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.EdgeTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
      where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
      whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
      where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
      whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(com.tinkerpop.gremlin.process.Traversal)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withPath()
      withPath(): GraphTraversal;
      withPathP(): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>,java.util.function.UnaryOperator<B>)
      withSack(arg0: object_t, arg1: object_t): GraphTraversal;
      withSackP(arg0: object_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>)
      withSack(arg0: object_t): GraphTraversal;
      withSackP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: object_t): GraphTraversal;
      withSideEffectP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
    }
    export module EdgeTraversal {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.process.graph {
    export interface ElementTraversal extends Java.java.lang.Object {
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
      addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate()
      aggregate(): GraphTraversal;
      aggregateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.as(java.lang.String)
      as(arg0: string_t): GraphTraversal;
      asP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.back(java.lang.String)
      back(arg0: string_t): GraphTraversal;
      backP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.between(java.lang.String,java.lang.Comparable,java.lang.Comparable)
      between(arg0: string_t, arg1: Comparable, arg2: Comparable): GraphTraversal;
      betweenP(arg0: string_t, arg1: Comparable, arg2: Comparable): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Collection<java.lang.String>>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap(java.lang.String)
      cap(arg0: string_t): GraphTraversal;
      capP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap()
      cap(): GraphTraversal;
      capP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Predicate<A>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: object_t, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: object_t, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2,M> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Function<A, M>,java.util.Map<M, com.tinkerpop.gremlin.process.Traversal<?, E2>>)
      choose(arg0: Function, arg1: Map): GraphTraversal;
      chooseP(arg0: Function, arg1: Map): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Long> com.tinkerpop.gremlin.process.graph.ElementTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      emit(arg0: object_t): GraphTraversal;
      emitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.util.Collection<A>)
      except(arg0: Collection): GraphTraversal;
      exceptP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.String)
      except(arg0: string_t): GraphTraversal;
      exceptP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.Object)
      except(arg0: object_t): GraphTraversal;
      exceptP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      filter(arg0: object_t): GraphTraversal;
      filterP(arg0: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold(E2,java.util.function.BiFunction<E2, A, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.List<A>> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.inject(java.lang.Object...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.ElementTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, ? extends com.tinkerpop.gremlin.structure.Property<E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.repeat(com.tinkerpop.gremlin.process.Traversal<?, A>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.util.Collection<A>)
      retain(arg0: Collection): GraphTraversal;
      retainP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.String)
      retain(arg0: string_t): GraphTraversal;
      retainP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.Object)
      retain(arg0: object_t): GraphTraversal;
      retainP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BiFunction<V, A, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.shuffle()
      shuffle(): GraphTraversal;
      shuffleP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<A>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.start()
      start(): GraphTraversal;
      startP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store()
      store(): GraphTraversal;
      storeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: Set, arg1: Map, arg2: object_t): GraphTraversal;
      subgraphP(arg0: Set, arg1: Map, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: object_t): GraphTraversal;
      subgraphP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): GraphTraversal;
      submitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.ElementTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.toV(com.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      until(arg0: object_t): GraphTraversal;
      untilP(arg0: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
      where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
      whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
      where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
      whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(com.tinkerpop.gremlin.process.Traversal)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withPath()
      withPath(): GraphTraversal;
      withPathP(): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>,java.util.function.UnaryOperator<B>)
      withSack(arg0: object_t, arg1: object_t): GraphTraversal;
      withSackP(arg0: object_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>)
      withSack(arg0: object_t): GraphTraversal;
      withSackP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: object_t): GraphTraversal;
      withSideEffectP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
    }
    export module ElementTraversal {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.process.graph {
    export interface GraphTraversal extends Java.com.tinkerpop.gremlin.process.Traversal {
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.GraphTraversal.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
      addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.GraphTraversal.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.GraphTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.GraphTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.aggregate()
      aggregate(): GraphTraversal;
      aggregateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.as(java.lang.String)
      as(arg0: string_t): GraphTraversal;
      asP(arg0: string_t): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.process.graph.GraphTraversal.com.tinkerpop.gremlin.process.graph.GraphTraversal$Admin<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.asAdmin()
      asAdmin(): GraphTraversal$Admin;
      asAdminP(): Promise<GraphTraversal$Admin>;
      // public abstract com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<S, E> com.tinkerpop.gremlin.process.Traversal.asAdmin()
      asAdmin(): Traversal$Admin;
      asAdminP(): Promise<Traversal$Admin>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.back(java.lang.String)
      back(arg0: string_t): GraphTraversal;
      backP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.between(java.lang.String,java.lang.Comparable,java.lang.Comparable)
      between(arg0: string_t, arg1: Comparable, arg2: Comparable): GraphTraversal;
      betweenP(arg0: string_t, arg1: Comparable, arg2: Comparable): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.GraphTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.GraphTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.GraphTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<E>, java.util.Collection<java.lang.String>>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.by(com.tinkerpop.gremlin.process.T,java.util.Comparator<V>)
      by(arg0: T, arg1: object_t): GraphTraversal;
      byP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.by(java.util.function.Function<com.tinkerpop.gremlin.structure.Element, V>,java.util.Comparator<V>)
      by(arg0: Function, arg1: object_t): GraphTraversal;
      byP(arg0: Function, arg1: object_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.by(java.lang.String,java.util.Comparator<V>)
      by(arg0: string_t, arg1: object_t): GraphTraversal;
      byP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.by(com.tinkerpop.gremlin.process.T)
      by(arg0: T): GraphTraversal;
      byP(arg0: T): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.by(java.util.function.Function<V, java.lang.Object>)
      by(arg0: Function): GraphTraversal;
      byP(arg0: Function): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.by(java.util.Comparator<E>)
      by(arg0: object_t): GraphTraversal;
      byP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.by(java.lang.String)
      by(arg0: string_t): GraphTraversal;
      byP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.by()
      by(): GraphTraversal;
      byP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.cap(java.lang.String)
      cap(arg0: string_t): GraphTraversal;
      capP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.cap()
      cap(): GraphTraversal;
      capP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.choose(java.util.function.Predicate<E>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: object_t, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: object_t, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <M,E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.choose(java.util.function.Function<E, M>,java.util.Map<M, com.tinkerpop.gremlin.process.Traversal<?, E2>>)
      choose(arg0: Function, arg1: Map): GraphTraversal;
      chooseP(arg0: Function, arg1: Map): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal.clone() throws java.lang.CloneNotSupportedException
      clone(): Traversal;
      cloneP(): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, java.lang.Long> com.tinkerpop.gremlin.process.graph.GraphTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.emit(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<E>>)
      emit(arg0: object_t): GraphTraversal;
      emitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.except(java.util.Collection<E>)
      except(arg0: Collection): GraphTraversal;
      exceptP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.except(java.lang.String)
      except(arg0: string_t): GraphTraversal;
      exceptP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.except(E)
      except(arg0: object_t): GraphTraversal;
      exceptP(arg0: object_t): Promise<GraphTraversal>;
      // public default <C> C com.tinkerpop.gremlin.process.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<E>>)
      filter(arg0: object_t): GraphTraversal;
      filterP(arg0: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<E>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.fold(E2,java.util.function.BiFunction<E2, E, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, java.util.List<E>> com.tinkerpop.gremlin.process.graph.GraphTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public default <E2> void com.tinkerpop.gremlin.process.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: object_t, arg1: Consumer): void;
      forEachRemainingP(arg0: object_t, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, java.lang.Object> com.tinkerpop.gremlin.process.graph.GraphTraversal.id()
      id(): GraphTraversal;
      idP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.GraphTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.GraphTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.inject(E...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.GraphTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public default <A,B> com.tinkerpop.gremlin.process.Traversal<A, B> com.tinkerpop.gremlin.process.Traversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, java.lang.String> com.tinkerpop.gremlin.process.graph.GraphTraversal.key()
      key(): GraphTraversal;
      keyP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, java.lang.String> com.tinkerpop.gremlin.process.graph.GraphTraversal.label()
      label(): GraphTraversal;
      labelP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<E>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.GraphTraversal.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.GraphTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.GraphTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.GraphTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.GraphTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.GraphTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, ? extends com.tinkerpop.gremlin.structure.Property<E2>> com.tinkerpop.gremlin.process.graph.GraphTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.GraphTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.repeat(com.tinkerpop.gremlin.process.Traversal<?, E>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.retain(java.util.Collection<E>)
      retain(arg0: Collection): GraphTraversal;
      retainP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.retain(java.lang.String)
      retain(arg0: string_t): GraphTraversal;
      retainP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.retain(E)
      retain(arg0: object_t): GraphTraversal;
      retainP(arg0: object_t): Promise<GraphTraversal>;
      // public default <E2,V> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.sack(java.util.function.BiFunction<V, E, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.GraphTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.shuffle()
      shuffle(): GraphTraversal;
      shuffleP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<E>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.store()
      store(): GraphTraversal;
      storeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.subgraph(java.lang.String,java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.subgraph(java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: Set, arg1: Map, arg2: object_t): GraphTraversal;
      subgraphP(arg0: Set, arg1: Map, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.subgraph(java.lang.String,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.subgraph(java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: object_t): GraphTraversal;
      subgraphP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): GraphTraversal;
      submitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): Traversal;
      submitP(arg0: object_t): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, java.lang.Double> com.tinkerpop.gremlin.process.graph.GraphTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.GraphTraversal.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.util.BulkSet<E> com.tinkerpop.gremlin.process.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.GraphTraversal.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> com.tinkerpop.gremlin.process.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.GraphTraversal.toV(com.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default java.util.Optional<E> com.tinkerpop.gremlin.process.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.until(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<E>>)
      until(arg0: object_t): GraphTraversal;
      untilP(arg0: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.value()
      value(): GraphTraversal;
      valueP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.GraphTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.GraphTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.GraphTraversal.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
      where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
      whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.GraphTraversal.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
      where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
      whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.GraphTraversal.where(com.tinkerpop.gremlin.process.Traversal)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.withPath()
      withPath(): GraphTraversal;
      withPathP(): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.withSack(java.util.function.Supplier<A>,java.util.function.UnaryOperator<A>)
      withSack(arg0: object_t, arg1: object_t): GraphTraversal;
      withSackP(arg0: object_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <A> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.withSack(java.util.function.Supplier<A>)
      withSack(arg0: object_t): GraphTraversal;
      withSackP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E> com.tinkerpop.gremlin.process.graph.GraphTraversal.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: object_t): GraphTraversal;
      withSideEffectP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
    }
    export module GraphTraversal {
      export interface Static {
        OF: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.graph {
    export interface GraphTraversal$Admin extends Java.com.tinkerpop.gremlin.process.Traversal$Admin {
      // public default void com.tinkerpop.gremlin.process.Traversal$Admin.addStart(com.tinkerpop.gremlin.process.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.addStarts(java.util.Iterator<com.tinkerpop.gremlin.process.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public abstract <S2,E2> com.tinkerpop.gremlin.process.Traversal<S2, E2> com.tinkerpop.gremlin.process.Traversal$Admin.addStep(int,com.tinkerpop.gremlin.process.Step<?, ?>) throws java.lang.IllegalStateException
      addStep(arg0: integer_t, arg1: Step): Traversal;
      addStepP(arg0: integer_t, arg1: Step): Promise<Traversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<S, E2> com.tinkerpop.gremlin.process.graph.GraphTraversal$Admin.addStep(com.tinkerpop.gremlin.process.Step<?, E2>)
      addStep(arg0: Step): GraphTraversal;
      addStepP(arg0: Step): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.Traversal<S, E2> com.tinkerpop.gremlin.process.Traversal$Admin.addStep(com.tinkerpop.gremlin.process.Step<?, E2>) throws java.lang.IllegalStateException
      addStep(arg0: Step): Traversal;
      addStepP(arg0: Step): Promise<Traversal>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.applyStrategies(com.tinkerpop.gremlin.process.TraversalEngine)
      applyStrategies(arg0: TraversalEngine): void;
      applyStrategiesP(arg0: TraversalEngine): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<S, E> com.tinkerpop.gremlin.process.Traversal.asAdmin()
      asAdmin(): Traversal$Admin;
      asAdminP(): Promise<Traversal$Admin>;
      // public abstract com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal.clone() throws java.lang.CloneNotSupportedException
      clone(): Traversal;
      cloneP(): Promise<Traversal>;
      // public default <C> C com.tinkerpop.gremlin.process.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default <E2> void com.tinkerpop.gremlin.process.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: object_t, arg1: Consumer): void;
      forEachRemainingP(arg0: object_t, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.TraversalSideEffects com.tinkerpop.gremlin.process.Traversal$Admin.getSideEffects()
      getSideEffects(): TraversalSideEffects;
      getSideEffectsP(): Promise<TraversalSideEffects>;
      // public abstract java.util.List<com.tinkerpop.gremlin.process.Step> com.tinkerpop.gremlin.process.Traversal$Admin.getSteps()
      getSteps(): List;
      getStepsP(): Promise<List>;
      // public abstract com.tinkerpop.gremlin.process.TraversalStrategies com.tinkerpop.gremlin.process.Traversal$Admin.getStrategies()
      getStrategies(): TraversalStrategies;
      getStrategiesP(): Promise<TraversalStrategies>;
      // public abstract java.util.Optional<com.tinkerpop.gremlin.process.TraversalEngine> com.tinkerpop.gremlin.process.Traversal$Admin.getTraversalEngine()
      getTraversalEngine(): object_t;
      getTraversalEngineP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.graph.marker.TraversalHolder<?, ?> com.tinkerpop.gremlin.process.Traversal$Admin.getTraversalHolder()
      getTraversalHolder(): object_t;
      getTraversalHolderP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.TraverserGenerator com.tinkerpop.gremlin.process.Traversal$Admin.getTraverserGenerator()
      getTraverserGenerator(): TraverserGenerator;
      getTraverserGeneratorP(): Promise<TraverserGenerator>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public default <A,B> com.tinkerpop.gremlin.process.Traversal<A, B> com.tinkerpop.gremlin.process.Traversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default <S2,E2> com.tinkerpop.gremlin.process.Traversal<S2, E2> com.tinkerpop.gremlin.process.Traversal$Admin.removeStep(com.tinkerpop.gremlin.process.Step<?, ?>) throws java.lang.IllegalStateException
      removeStep(arg0: Step): Traversal;
      removeStepP(arg0: Step): Promise<Traversal>;
      // public abstract <S2,E2> com.tinkerpop.gremlin.process.Traversal<S2, E2> com.tinkerpop.gremlin.process.Traversal$Admin.removeStep(int) throws java.lang.IllegalStateException
      removeStep(arg0: integer_t): Traversal;
      removeStepP(arg0: integer_t): Promise<Traversal>;
      // public default void com.tinkerpop.gremlin.process.Traversal$Admin.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal$Admin.reverse() throws java.lang.IllegalStateException
      reverse(): Traversal;
      reverseP(): Promise<Traversal>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.setSideEffects(com.tinkerpop.gremlin.process.TraversalSideEffects)
      setSideEffects(arg0: TraversalSideEffects): void;
      setSideEffectsP(arg0: TraversalSideEffects): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.setStrategies(com.tinkerpop.gremlin.process.TraversalStrategies)
      setStrategies(arg0: TraversalStrategies): void;
      setStrategiesP(arg0: TraversalStrategies): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.setTraversalHolder(com.tinkerpop.gremlin.process.graph.marker.TraversalHolder<?, ?>)
      setTraversalHolder(arg0: object_t): void;
      setTraversalHolderP(arg0: object_t): Promise<void>;
      // public default com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): Traversal;
      submitP(arg0: object_t): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.process.util.BulkSet<E> com.tinkerpop.gremlin.process.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> com.tinkerpop.gremlin.process.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public default java.util.Optional<E> com.tinkerpop.gremlin.process.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
    }
    export module GraphTraversal$Admin {
      export interface Static {
        OF: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.graph {
    export interface VertexPropertyTraversal extends Java.com.tinkerpop.gremlin.process.graph.ElementTraversal {
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
      addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate()
      aggregate(): GraphTraversal;
      aggregateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.as(java.lang.String)
      as(arg0: string_t): GraphTraversal;
      asP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.back(java.lang.String)
      back(arg0: string_t): GraphTraversal;
      backP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.between(java.lang.String,java.lang.Comparable,java.lang.Comparable)
      between(arg0: string_t, arg1: Comparable, arg2: Comparable): GraphTraversal;
      betweenP(arg0: string_t, arg1: Comparable, arg2: Comparable): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Collection<java.lang.String>>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap(java.lang.String)
      cap(arg0: string_t): GraphTraversal;
      capP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap()
      cap(): GraphTraversal;
      capP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Predicate<A>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: object_t, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: object_t, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2,M> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Function<A, M>,java.util.Map<M, com.tinkerpop.gremlin.process.Traversal<?, E2>>)
      choose(arg0: Function, arg1: Map): GraphTraversal;
      chooseP(arg0: Function, arg1: Map): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Long> com.tinkerpop.gremlin.process.graph.ElementTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      emit(arg0: object_t): GraphTraversal;
      emitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.util.Collection<A>)
      except(arg0: Collection): GraphTraversal;
      exceptP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.String)
      except(arg0: string_t): GraphTraversal;
      exceptP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.Object)
      except(arg0: object_t): GraphTraversal;
      exceptP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      filter(arg0: object_t): GraphTraversal;
      filterP(arg0: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold(E2,java.util.function.BiFunction<E2, A, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.List<A>> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.inject(java.lang.Object...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.ElementTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, ? extends com.tinkerpop.gremlin.structure.Property<E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.VertexProperty, java.util.Map<java.lang.String, com.tinkerpop.gremlin.structure.Property<E2>>> com.tinkerpop.gremlin.process.graph.VertexPropertyTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.repeat(com.tinkerpop.gremlin.process.Traversal<?, A>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.util.Collection<A>)
      retain(arg0: Collection): GraphTraversal;
      retainP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.String)
      retain(arg0: string_t): GraphTraversal;
      retainP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.Object)
      retain(arg0: object_t): GraphTraversal;
      retainP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BiFunction<V, A, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.shuffle()
      shuffle(): GraphTraversal;
      shuffleP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<A>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.start()
      start(): GraphTraversal;
      startP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store()
      store(): GraphTraversal;
      storeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: Set, arg1: Map, arg2: object_t): GraphTraversal;
      subgraphP(arg0: Set, arg1: Map, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: object_t): GraphTraversal;
      subgraphP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): GraphTraversal;
      submitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.ElementTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.toV(com.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      until(arg0: object_t): GraphTraversal;
      untilP(arg0: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.VertexProperty, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.VertexPropertyTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.VertexProperty, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.VertexPropertyTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
      where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
      whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
      where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
      whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(com.tinkerpop.gremlin.process.Traversal)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withPath()
      withPath(): GraphTraversal;
      withPathP(): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>,java.util.function.UnaryOperator<B>)
      withSack(arg0: object_t, arg1: object_t): GraphTraversal;
      withSackP(arg0: object_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>)
      withSack(arg0: object_t): GraphTraversal;
      withSackP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: object_t): GraphTraversal;
      withSideEffectP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
    }
    export module VertexPropertyTraversal {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.process.graph {
    export interface VertexTraversal extends Java.com.tinkerpop.gremlin.process.graph.ElementTraversal {
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
      addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate()
      aggregate(): GraphTraversal;
      aggregateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.as(java.lang.String)
      as(arg0: string_t): GraphTraversal;
      asP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.back(java.lang.String)
      back(arg0: string_t): GraphTraversal;
      backP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.between(java.lang.String,java.lang.Comparable,java.lang.Comparable)
      between(arg0: string_t, arg1: Comparable, arg2: Comparable): GraphTraversal;
      betweenP(arg0: string_t, arg1: Comparable, arg2: Comparable): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Collection<java.lang.String>>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap(java.lang.String)
      cap(arg0: string_t): GraphTraversal;
      capP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap()
      cap(): GraphTraversal;
      capP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Predicate<A>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: object_t, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: object_t, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2,M> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Function<A, M>,java.util.Map<M, com.tinkerpop.gremlin.process.Traversal<?, E2>>)
      choose(arg0: Function, arg1: Map): GraphTraversal;
      chooseP(arg0: Function, arg1: Map): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Long> com.tinkerpop.gremlin.process.graph.ElementTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      emit(arg0: object_t): GraphTraversal;
      emitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.util.Collection<A>)
      except(arg0: Collection): GraphTraversal;
      exceptP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.String)
      except(arg0: string_t): GraphTraversal;
      exceptP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.Object)
      except(arg0: object_t): GraphTraversal;
      exceptP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      filter(arg0: object_t): GraphTraversal;
      filterP(arg0: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold(E2,java.util.function.BiFunction<E2, A, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.List<A>> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.inject(java.lang.Object...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.ElementTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, ? extends com.tinkerpop.gremlin.structure.Property<E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, java.util.Map<java.lang.String, java.util.List<com.tinkerpop.gremlin.structure.VertexProperty<E2>>>> com.tinkerpop.gremlin.process.graph.VertexTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.repeat(com.tinkerpop.gremlin.process.Traversal<?, A>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.util.Collection<A>)
      retain(arg0: Collection): GraphTraversal;
      retainP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.String)
      retain(arg0: string_t): GraphTraversal;
      retainP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.Object)
      retain(arg0: object_t): GraphTraversal;
      retainP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BiFunction<V, A, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.shuffle()
      shuffle(): GraphTraversal;
      shuffleP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<A>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.start()
      start(): GraphTraversal;
      startP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store()
      store(): GraphTraversal;
      storeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: Set, arg1: Map, arg2: object_t): GraphTraversal;
      subgraphP(arg0: Set, arg1: Map, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: object_t): GraphTraversal;
      subgraphP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): GraphTraversal;
      submitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.ElementTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.toV(com.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      until(arg0: object_t): GraphTraversal;
      untilP(arg0: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, E2> com.tinkerpop.gremlin.process.graph.VertexTraversal.value()
      value(): GraphTraversal;
      valueP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, java.util.Map<java.lang.String, java.util.List<E2>>> com.tinkerpop.gremlin.process.graph.VertexTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, java.util.Map<java.lang.String, java.util.List<E2>>> com.tinkerpop.gremlin.process.graph.VertexTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
      where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
      whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
      where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
      whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(com.tinkerpop.gremlin.process.Traversal)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withPath()
      withPath(): GraphTraversal;
      withPathP(): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>,java.util.function.UnaryOperator<B>)
      withSack(arg0: object_t, arg1: object_t): GraphTraversal;
      withSackP(arg0: object_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>)
      withSack(arg0: object_t): GraphTraversal;
      withSackP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: object_t): GraphTraversal;
      withSideEffectP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
    }
    export module VertexTraversal {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface Path extends Java.java.lang.Cloneable {
      // public abstract void com.tinkerpop.gremlin.process.Path.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.Path com.tinkerpop.gremlin.process.Path.clone() throws java.lang.CloneNotSupportedException
      clone(): Path;
      cloneP(): Promise<Path>;
      // public abstract com.tinkerpop.gremlin.process.Path com.tinkerpop.gremlin.process.Path.extend(java.lang.Object,java.lang.String...)
      extend(arg0: object_t, ...arg1: string_t[]): Path;
      extend(arg0: object_t, arg1: array_t<string_t>): Path;
      extendP(arg0: object_t, ...arg1: string_t[]): Promise<Path>;
      extendP(arg0: object_t, arg1: array_t<string_t>): Promise<Path>;
      // public default void com.tinkerpop.gremlin.process.Path.forEach(java.util.function.BiConsumer<java.lang.Object, java.util.Set<java.lang.String>>)
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public default void com.tinkerpop.gremlin.process.Path.forEach(java.util.function.Consumer<java.lang.Object>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public default <A> A com.tinkerpop.gremlin.process.Path.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public default <A> A com.tinkerpop.gremlin.process.Path.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public default boolean com.tinkerpop.gremlin.process.Path.hasLabel(java.lang.String)
      hasLabel(arg0: string_t): boolean;
      hasLabelP(arg0: string_t): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.process.Path.isSimple()
      isSimple(): boolean;
      isSimpleP(): Promise<boolean>;
      // public abstract java.util.List<java.util.Set<java.lang.String>> com.tinkerpop.gremlin.process.Path.labels()
      labels(): List;
      labelsP(): Promise<List>;
      // public abstract java.util.List<java.lang.Object> com.tinkerpop.gremlin.process.Path.objects()
      objects(): List;
      objectsP(): Promise<List>;
      // public default int com.tinkerpop.gremlin.process.Path.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.stream.Stream<org.javatuples.Pair<java.lang.Object, java.util.Set<java.lang.String>>> com.tinkerpop.gremlin.process.Path.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
    }
    export module Path {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface Path$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Path$Exceptions {
      export interface Static {
        new (): com.tinkerpop.gremlin.process.Path$Exceptions;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.process.Path$Exceptions.stepWithProvidedLabelDoesNotExist(java.lang.String)
        stepWithProvidedLabelDoesNotExist(arg0: string_t): object_t;
        stepWithProvidedLabelDoesNotExistP(arg0: string_t): Promise<object_t>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface Step extends Java.java.lang.Cloneable,Java.java.util.Iterator {
      // public abstract void com.tinkerpop.gremlin.process.Step.addStart(com.tinkerpop.gremlin.process.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.addStarts(java.util.Iterator<com.tinkerpop.gremlin.process.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.Step<S, E> com.tinkerpop.gremlin.process.Step.clone() throws java.lang.CloneNotSupportedException
      clone(): Step;
      cloneP(): Promise<Step>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public abstract java.lang.String com.tinkerpop.gremlin.process.Step.getId()
      getId(): string;
      getIdP(): Promise<string>;
      // public abstract java.util.Optional<java.lang.String> com.tinkerpop.gremlin.process.Step.getLabel()
      getLabel(): object_t;
      getLabelP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.Step<E, ?> com.tinkerpop.gremlin.process.Step.getNextStep()
      getNextStep(): Step;
      getNextStepP(): Promise<Step>;
      // public abstract com.tinkerpop.gremlin.process.Step<?, S> com.tinkerpop.gremlin.process.Step.getPreviousStep()
      getPreviousStep(): Step;
      getPreviousStepP(): Promise<Step>;
      // public default java.util.Set<com.tinkerpop.gremlin.process.traverser.TraverserRequirement> com.tinkerpop.gremlin.process.Step.getRequirements()
      getRequirements(): Set;
      getRequirementsP(): Promise<Set>;
      // public abstract <A,B> com.tinkerpop.gremlin.process.Traversal<A, B> com.tinkerpop.gremlin.process.Step.getTraversal()
      getTraversal(): Traversal;
      getTraversalP(): Promise<Traversal>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.setId(java.lang.String)
      setId(arg0: string_t): void;
      setIdP(arg0: string_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.setLabel(java.lang.String)
      setLabel(arg0: string_t): void;
      setLabelP(arg0: string_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.setNextStep(com.tinkerpop.gremlin.process.Step<E, ?>)
      setNextStep(arg0: Step): void;
      setNextStepP(arg0: Step): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.setPreviousStep(com.tinkerpop.gremlin.process.Step<?, S>)
      setPreviousStep(arg0: Step): void;
      setPreviousStepP(arg0: Step): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.setTraversal(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      setTraversal(arg0: Traversal): void;
      setTraversalP(arg0: Traversal): Promise<void>;
    }
    export module Step {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface T extends Java.java.lang.Enum,Java.java.util.function_.Function {
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public abstract java.lang.Object com.tinkerpop.gremlin.process.T.apply(com.tinkerpop.gremlin.structure.Element)
      apply(arg0: Element): object_t;
      applyP(arg0: Element): Promise<object_t>;
      // public abstract R java.util.function.Function.apply(T)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract java.lang.String com.tinkerpop.gremlin.process.T.getAccessor()
      getAccessor(): string;
      getAccessorP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): object_t;
      getDeclaringClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module T {
      export interface Static {
        // public static com.tinkerpop.gremlin.process.T com.tinkerpop.gremlin.process.T.fromString(java.lang.String)
        fromString(arg0: string_t): T;
        fromStringP(arg0: string_t): Promise<T>;
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: object_t, arg1: string_t): Enum;
        valueOfP(arg0: object_t, arg1: string_t): Promise<Enum>;
        // public static com.tinkerpop.gremlin.process.T com.tinkerpop.gremlin.process.T.valueOf(java.lang.String)
        valueOf(arg0: string_t): T;
        valueOfP(arg0: string_t): Promise<T>;
        // public static com.tinkerpop.gremlin.process.T[] com.tinkerpop.gremlin.process.T.values()
        values(): T[];
        valuesP(): Promise<T[]>;
        label: T;
        id: T;
        key: T;
        value: T;
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface Traversal extends Java.java.lang.Cloneable,Java.java.util.Iterator {
      // public abstract com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<S, E> com.tinkerpop.gremlin.process.Traversal.asAdmin()
      asAdmin(): Traversal$Admin;
      asAdminP(): Promise<Traversal$Admin>;
      // public abstract com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal.clone() throws java.lang.CloneNotSupportedException
      clone(): Traversal;
      cloneP(): Promise<Traversal>;
      // public default <C> C com.tinkerpop.gremlin.process.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default <E2> void com.tinkerpop.gremlin.process.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: object_t, arg1: Consumer): void;
      forEachRemainingP(arg0: object_t, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public default <A,B> com.tinkerpop.gremlin.process.Traversal<A, B> com.tinkerpop.gremlin.process.Traversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): Traversal;
      submitP(arg0: object_t): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.process.util.BulkSet<E> com.tinkerpop.gremlin.process.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> com.tinkerpop.gremlin.process.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public default java.util.Optional<E> com.tinkerpop.gremlin.process.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
    }
    export module Traversal {
      export interface Static {
        OF: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface Traversal$Admin extends Java.com.tinkerpop.gremlin.process.Traversal {
      // public default void com.tinkerpop.gremlin.process.Traversal$Admin.addStart(com.tinkerpop.gremlin.process.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.addStarts(java.util.Iterator<com.tinkerpop.gremlin.process.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public abstract <S2,E2> com.tinkerpop.gremlin.process.Traversal<S2, E2> com.tinkerpop.gremlin.process.Traversal$Admin.addStep(int,com.tinkerpop.gremlin.process.Step<?, ?>) throws java.lang.IllegalStateException
      addStep(arg0: integer_t, arg1: Step): Traversal;
      addStepP(arg0: integer_t, arg1: Step): Promise<Traversal>;
      // public default <E2> com.tinkerpop.gremlin.process.Traversal<S, E2> com.tinkerpop.gremlin.process.Traversal$Admin.addStep(com.tinkerpop.gremlin.process.Step<?, E2>) throws java.lang.IllegalStateException
      addStep(arg0: Step): Traversal;
      addStepP(arg0: Step): Promise<Traversal>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.applyStrategies(com.tinkerpop.gremlin.process.TraversalEngine)
      applyStrategies(arg0: TraversalEngine): void;
      applyStrategiesP(arg0: TraversalEngine): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<S, E> com.tinkerpop.gremlin.process.Traversal.asAdmin()
      asAdmin(): Traversal$Admin;
      asAdminP(): Promise<Traversal$Admin>;
      // public abstract com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal.clone() throws java.lang.CloneNotSupportedException
      clone(): Traversal;
      cloneP(): Promise<Traversal>;
      // public default <C> C com.tinkerpop.gremlin.process.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default <E2> void com.tinkerpop.gremlin.process.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: object_t, arg1: Consumer): void;
      forEachRemainingP(arg0: object_t, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.TraversalSideEffects com.tinkerpop.gremlin.process.Traversal$Admin.getSideEffects()
      getSideEffects(): TraversalSideEffects;
      getSideEffectsP(): Promise<TraversalSideEffects>;
      // public abstract java.util.List<com.tinkerpop.gremlin.process.Step> com.tinkerpop.gremlin.process.Traversal$Admin.getSteps()
      getSteps(): List;
      getStepsP(): Promise<List>;
      // public abstract com.tinkerpop.gremlin.process.TraversalStrategies com.tinkerpop.gremlin.process.Traversal$Admin.getStrategies()
      getStrategies(): TraversalStrategies;
      getStrategiesP(): Promise<TraversalStrategies>;
      // public abstract java.util.Optional<com.tinkerpop.gremlin.process.TraversalEngine> com.tinkerpop.gremlin.process.Traversal$Admin.getTraversalEngine()
      getTraversalEngine(): object_t;
      getTraversalEngineP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.graph.marker.TraversalHolder<?, ?> com.tinkerpop.gremlin.process.Traversal$Admin.getTraversalHolder()
      getTraversalHolder(): object_t;
      getTraversalHolderP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.TraverserGenerator com.tinkerpop.gremlin.process.Traversal$Admin.getTraverserGenerator()
      getTraverserGenerator(): TraverserGenerator;
      getTraverserGeneratorP(): Promise<TraverserGenerator>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public default <A,B> com.tinkerpop.gremlin.process.Traversal<A, B> com.tinkerpop.gremlin.process.Traversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default <S2,E2> com.tinkerpop.gremlin.process.Traversal<S2, E2> com.tinkerpop.gremlin.process.Traversal$Admin.removeStep(com.tinkerpop.gremlin.process.Step<?, ?>) throws java.lang.IllegalStateException
      removeStep(arg0: Step): Traversal;
      removeStepP(arg0: Step): Promise<Traversal>;
      // public abstract <S2,E2> com.tinkerpop.gremlin.process.Traversal<S2, E2> com.tinkerpop.gremlin.process.Traversal$Admin.removeStep(int) throws java.lang.IllegalStateException
      removeStep(arg0: integer_t): Traversal;
      removeStepP(arg0: integer_t): Promise<Traversal>;
      // public default void com.tinkerpop.gremlin.process.Traversal$Admin.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal$Admin.reverse() throws java.lang.IllegalStateException
      reverse(): Traversal;
      reverseP(): Promise<Traversal>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.setSideEffects(com.tinkerpop.gremlin.process.TraversalSideEffects)
      setSideEffects(arg0: TraversalSideEffects): void;
      setSideEffectsP(arg0: TraversalSideEffects): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.setStrategies(com.tinkerpop.gremlin.process.TraversalStrategies)
      setStrategies(arg0: TraversalStrategies): void;
      setStrategiesP(arg0: TraversalStrategies): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.setTraversalHolder(com.tinkerpop.gremlin.process.graph.marker.TraversalHolder<?, ?>)
      setTraversalHolder(arg0: object_t): void;
      setTraversalHolderP(arg0: object_t): Promise<void>;
      // public default com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): Traversal;
      submitP(arg0: object_t): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.process.util.BulkSet<E> com.tinkerpop.gremlin.process.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> com.tinkerpop.gremlin.process.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public default java.util.Optional<E> com.tinkerpop.gremlin.process.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
    }
    export module Traversal$Admin {
      export interface Static {
        OF: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface Traversal$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Traversal$Exceptions {
      export interface Static {
        new (): com.tinkerpop.gremlin.process.Traversal$Exceptions;
        // public static java.lang.IllegalStateException com.tinkerpop.gremlin.process.Traversal$Exceptions.traversalIsLocked()
        traversalIsLocked(): object_t;
        traversalIsLockedP(): Promise<object_t>;
        // public static java.lang.IllegalStateException com.tinkerpop.gremlin.process.Traversal$Exceptions.traversalIsNotReversible()
        traversalIsNotReversible(): object_t;
        traversalIsNotReversibleP(): Promise<object_t>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface TraversalEngine extends Java.java.lang.Enum {
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): object_t;
      getDeclaringClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalEngine {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: object_t, arg1: string_t): Enum;
        valueOfP(arg0: object_t, arg1: string_t): Promise<Enum>;
        // public static com.tinkerpop.gremlin.process.TraversalEngine com.tinkerpop.gremlin.process.TraversalEngine.valueOf(java.lang.String)
        valueOf(arg0: string_t): TraversalEngine;
        valueOfP(arg0: string_t): Promise<TraversalEngine>;
        // public static com.tinkerpop.gremlin.process.TraversalEngine[] com.tinkerpop.gremlin.process.TraversalEngine.values()
        values(): TraversalEngine[];
        valuesP(): Promise<TraversalEngine[]>;
        STANDARD: TraversalEngine;
        COMPUTER: TraversalEngine;
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface TraversalSideEffects extends Java.java.lang.Cloneable {
      // public abstract com.tinkerpop.gremlin.process.TraversalSideEffects com.tinkerpop.gremlin.process.TraversalSideEffects.clone() throws java.lang.CloneNotSupportedException
      clone(): TraversalSideEffects;
      cloneP(): Promise<TraversalSideEffects>;
      // public default boolean com.tinkerpop.gremlin.process.TraversalSideEffects.exists(java.lang.String)
      exists(arg0: string_t): boolean;
      existsP(arg0: string_t): Promise<boolean>;
      // public default <V> void com.tinkerpop.gremlin.process.TraversalSideEffects.forEach(java.util.function.BiConsumer<java.lang.String, V>)
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract <V> V com.tinkerpop.gremlin.process.TraversalSideEffects.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public default <V> V com.tinkerpop.gremlin.process.TraversalSideEffects.getOrCreate(java.lang.String,java.util.function.Supplier<V>)
      getOrCreate(arg0: string_t, arg1: object_t): object_t;
      getOrCreateP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public abstract <V> java.util.Optional<java.util.function.Supplier<V>> com.tinkerpop.gremlin.process.TraversalSideEffects.getRegisteredSupplier(java.lang.String)
      getRegisteredSupplier(arg0: string_t): object_t;
      getRegisteredSupplierP(arg0: string_t): Promise<object_t>;
      // public abstract <S> java.util.Optional<java.util.function.Supplier<S>> com.tinkerpop.gremlin.process.TraversalSideEffects.getSackInitialValue()
      getSackInitialValue(): object_t;
      getSackInitialValueP(): Promise<object_t>;
      // public abstract <S> java.util.Optional<java.util.function.UnaryOperator<S>> com.tinkerpop.gremlin.process.TraversalSideEffects.getSackSplitOperator()
      getSackSplitOperator(): object_t;
      getSackSplitOperatorP(): Promise<object_t>;
      // public default <V> void com.tinkerpop.gremlin.process.TraversalSideEffects.ifPresent(java.lang.String,java.util.function.Consumer<V>)
      ifPresent(arg0: string_t, arg1: Consumer): void;
      ifPresentP(arg0: string_t, arg1: Consumer): Promise<void>;
      // public abstract java.util.Set<java.lang.String> com.tinkerpop.gremlin.process.TraversalSideEffects.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalSideEffects.mergeInto(com.tinkerpop.gremlin.process.TraversalSideEffects)
      mergeInto(arg0: TraversalSideEffects): void;
      mergeIntoP(arg0: TraversalSideEffects): Promise<void>;
      // public default <V> V com.tinkerpop.gremlin.process.TraversalSideEffects.orElse(java.lang.String,V)
      orElse(arg0: string_t, arg1: object_t): object_t;
      orElseP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalSideEffects.registerSupplier(java.lang.String,java.util.function.Supplier)
      registerSupplier(arg0: string_t, arg1: object_t): void;
      registerSupplierP(arg0: string_t, arg1: object_t): Promise<void>;
      // public default void com.tinkerpop.gremlin.process.TraversalSideEffects.registerSupplierIfAbsent(java.lang.String,java.util.function.Supplier)
      registerSupplierIfAbsent(arg0: string_t, arg1: object_t): void;
      registerSupplierIfAbsentP(arg0: string_t, arg1: object_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalSideEffects.remove(java.lang.String)
      remove(arg0: string_t): void;
      removeP(arg0: string_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalSideEffects.set(java.lang.String,java.lang.Object)
      set(arg0: string_t, arg1: object_t): void;
      setP(arg0: string_t, arg1: object_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalSideEffects.setLocalVertex(com.tinkerpop.gremlin.structure.Vertex)
      setLocalVertex(arg0: Vertex): void;
      setLocalVertexP(arg0: Vertex): Promise<void>;
      // public abstract <S> void com.tinkerpop.gremlin.process.TraversalSideEffects.setSack(java.util.function.Supplier<S>,java.util.Optional<java.util.function.UnaryOperator<S>>)
      setSack(arg0: object_t, arg1: object_t): void;
      setSackP(arg0: object_t, arg1: object_t): Promise<void>;
    }
    export module TraversalSideEffects {
      export interface Static {
        SIDE_EFFECTS: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface TraversalSideEffects$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalSideEffects$Exceptions {
      export interface Static {
        new (): com.tinkerpop.gremlin.process.TraversalSideEffects$Exceptions;
        // public static java.lang.UnsupportedOperationException com.tinkerpop.gremlin.process.TraversalSideEffects$Exceptions.dataTypeOfSideEffectValueNotSupported(java.lang.Object)
        dataTypeOfSideEffectValueNotSupported(arg0: object_t): object_t;
        dataTypeOfSideEffectValueNotSupportedP(arg0: object_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.process.TraversalSideEffects$Exceptions.sideEffectDoesNotExist(java.lang.String)
        sideEffectDoesNotExist(arg0: string_t): object_t;
        sideEffectDoesNotExistP(arg0: string_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.process.TraversalSideEffects$Exceptions.sideEffectKeyCanNotBeEmpty()
        sideEffectKeyCanNotBeEmpty(): object_t;
        sideEffectKeyCanNotBeEmptyP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.process.TraversalSideEffects$Exceptions.sideEffectKeyCanNotBeNull()
        sideEffectKeyCanNotBeNull(): object_t;
        sideEffectKeyCanNotBeNullP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.process.TraversalSideEffects$Exceptions.sideEffectValueCanNotBeNull()
        sideEffectValueCanNotBeNull(): object_t;
        sideEffectValueCanNotBeNullP(): Promise<object_t>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface TraversalStrategies extends Java.java.lang.Cloneable {
      // public abstract com.tinkerpop.gremlin.process.TraversalStrategies com.tinkerpop.gremlin.process.TraversalStrategies.addStrategies(com.tinkerpop.gremlin.process.TraversalStrategy...)
      addStrategies(...arg0: TraversalStrategy[]): TraversalStrategies;
      addStrategies(arg0: array_t<TraversalStrategy>): TraversalStrategies;
      addStrategiesP(...arg0: TraversalStrategy[]): Promise<TraversalStrategies>;
      addStrategiesP(arg0: array_t<TraversalStrategy>): Promise<TraversalStrategies>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalStrategies.applyStrategies(com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>,com.tinkerpop.gremlin.process.TraversalEngine)
      applyStrategies(arg0: Traversal$Admin, arg1: TraversalEngine): void;
      applyStrategiesP(arg0: Traversal$Admin, arg1: TraversalEngine): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.TraversalStrategies com.tinkerpop.gremlin.process.TraversalStrategies.clone() throws java.lang.CloneNotSupportedException
      clone(): TraversalStrategies;
      cloneP(): Promise<TraversalStrategies>;
      // public abstract com.tinkerpop.gremlin.process.TraverserGenerator com.tinkerpop.gremlin.process.TraversalStrategies.getTraverserGenerator(com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
      getTraverserGenerator(arg0: Traversal$Admin): TraverserGenerator;
      getTraverserGeneratorP(arg0: Traversal$Admin): Promise<TraverserGenerator>;
      // public abstract com.tinkerpop.gremlin.process.TraversalStrategies com.tinkerpop.gremlin.process.TraversalStrategies.removeStrategies(java.lang.Class<? extends com.tinkerpop.gremlin.process.TraversalStrategy>...)
      removeStrategies(...arg0: object_t[]): TraversalStrategies;
      removeStrategies(arg0: object_array_t): TraversalStrategies;
      removeStrategiesP(...arg0: object_t[]): Promise<TraversalStrategies>;
      removeStrategiesP(arg0: object_array_t): Promise<TraversalStrategies>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalStrategies.setTraverserGeneratorFactory(com.tinkerpop.gremlin.process.traverser.TraverserGeneratorFactory)
      setTraverserGeneratorFactory(arg0: object_t): void;
      setTraverserGeneratorFactoryP(arg0: object_t): Promise<void>;
      // public abstract java.util.List<com.tinkerpop.gremlin.process.TraversalStrategy> com.tinkerpop.gremlin.process.TraversalStrategies.toList()
      toList(): List;
      toListP(): Promise<List>;
    }
    export module TraversalStrategies {
      export interface Static {
        // public static void com.tinkerpop.gremlin.process.TraversalStrategies.sortStrategies(java.util.List<? extends com.tinkerpop.gremlin.process.TraversalStrategy>)
        sortStrategies(arg0: List): void;
        sortStrategiesP(arg0: List): Promise<void>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface TraversalStrategies$GlobalCache extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalStrategies$GlobalCache {
      export interface Static {
        new (): com.tinkerpop.gremlin.process.TraversalStrategies$GlobalCache;
        // public static com.tinkerpop.gremlin.process.TraversalStrategies com.tinkerpop.gremlin.process.TraversalStrategies$GlobalCache.getStrategies(java.lang.Class)
        getStrategies(arg0: object_t): TraversalStrategies;
        getStrategiesP(arg0: object_t): Promise<TraversalStrategies>;
        // public static void com.tinkerpop.gremlin.process.TraversalStrategies$GlobalCache.registerStrategies(java.lang.Class,com.tinkerpop.gremlin.process.TraversalStrategies)
        registerStrategies(arg0: object_t, arg1: TraversalStrategies): void;
        registerStrategiesP(arg0: object_t, arg1: TraversalStrategies): Promise<void>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface TraversalStrategy extends Java.java.lang.Object {
      // public abstract void com.tinkerpop.gremlin.process.TraversalStrategy.apply(com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>,com.tinkerpop.gremlin.process.TraversalEngine)
      apply(arg0: Traversal$Admin, arg1: TraversalEngine): void;
      applyP(arg0: Traversal$Admin, arg1: TraversalEngine): Promise<void>;
      // public default java.util.Set<java.lang.Class<? extends com.tinkerpop.gremlin.process.TraversalStrategy>> com.tinkerpop.gremlin.process.TraversalStrategy.applyPost()
      applyPost(): Set;
      applyPostP(): Promise<Set>;
      // public default java.util.Set<java.lang.Class<? extends com.tinkerpop.gremlin.process.TraversalStrategy>> com.tinkerpop.gremlin.process.TraversalStrategy.applyPrior()
      applyPrior(): Set;
      applyPriorP(): Promise<Set>;
    }
    export module TraversalStrategy {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface Traverser extends Java.java.lang.Cloneable,Java.java.lang.Comparable {
      // public default com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<T> com.tinkerpop.gremlin.process.Traverser.asAdmin()
      asAdmin(): Traverser$Admin;
      asAdminP(): Promise<Traverser$Admin>;
      // public abstract long com.tinkerpop.gremlin.process.Traverser.bulk()
      bulk(): longValue_t;
      bulkP(): Promise<longValue_t>;
      // public abstract com.tinkerpop.gremlin.process.Traverser<T> com.tinkerpop.gremlin.process.Traverser.clone() throws java.lang.CloneNotSupportedException
      clone(): Traverser;
      cloneP(): Promise<Traverser>;
      // public default int com.tinkerpop.gremlin.process.Traverser.compareTo(com.tinkerpop.gremlin.process.Traverser<T>) throws java.lang.ClassCastException
      compareTo(arg0: Traverser): number;
      compareToP(arg0: Traverser): Promise<number>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public abstract T com.tinkerpop.gremlin.process.Traverser.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public abstract int com.tinkerpop.gremlin.process.Traverser.loops()
      loops(): number;
      loopsP(): Promise<number>;
      // public default <A> A com.tinkerpop.gremlin.process.Traverser.path(java.lang.String)
      path(arg0: string_t): object_t;
      pathP(arg0: string_t): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.Path com.tinkerpop.gremlin.process.Traverser.path()
      path(): Path;
      pathP(): Promise<Path>;
      // public abstract <S> void com.tinkerpop.gremlin.process.Traverser.sack(S)
      sack(arg0: object_t): void;
      sackP(arg0: object_t): Promise<void>;
      // public abstract <S> S com.tinkerpop.gremlin.process.Traverser.sack()
      sack(): object_t;
      sackP(): Promise<object_t>;
      // public default void com.tinkerpop.gremlin.process.Traverser.sideEffects(java.lang.String,java.lang.Object)
      sideEffects(arg0: string_t, arg1: object_t): void;
      sideEffectsP(arg0: string_t, arg1: object_t): Promise<void>;
      // public default <A> A com.tinkerpop.gremlin.process.Traverser.sideEffects(java.lang.String)
      sideEffects(arg0: string_t): object_t;
      sideEffectsP(arg0: string_t): Promise<object_t>;
    }
    export module Traverser {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface Traverser$Admin extends Java.com.tinkerpop.gremlin.process.Traverser {
      // public default com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<T> com.tinkerpop.gremlin.process.Traverser.asAdmin()
      asAdmin(): Traverser$Admin;
      asAdminP(): Promise<Traverser$Admin>;
      // public abstract com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<T> com.tinkerpop.gremlin.process.Traverser$Admin.attach(com.tinkerpop.gremlin.structure.Vertex)
      attach(arg0: Vertex): Traverser$Admin;
      attachP(arg0: Vertex): Promise<Traverser$Admin>;
      // public default com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<T> com.tinkerpop.gremlin.process.Traverser$Admin.attach(com.tinkerpop.gremlin.structure.Graph) throws java.lang.UnsupportedOperationException
      attach(arg0: Graph): Traverser$Admin;
      attachP(arg0: Graph): Promise<Traverser$Admin>;
      // public default java.lang.Object com.tinkerpop.gremlin.process.Traverser$Admin.attach(com.tinkerpop.gremlin.structure.Vertex) throws java.lang.IllegalStateException
      attach(arg0: Vertex): object_t;
      attachP(arg0: Vertex): Promise<object_t>;
      // public default java.lang.Object com.tinkerpop.gremlin.process.Traverser$Admin.attach(com.tinkerpop.gremlin.structure.Graph) throws java.lang.IllegalStateException
      attach(arg0: Graph): object_t;
      attachP(arg0: Graph): Promise<object_t>;
      // public abstract long com.tinkerpop.gremlin.process.Traverser.bulk()
      bulk(): longValue_t;
      bulkP(): Promise<longValue_t>;
      // public abstract com.tinkerpop.gremlin.process.Traverser<T> com.tinkerpop.gremlin.process.Traverser.clone() throws java.lang.CloneNotSupportedException
      clone(): Traverser;
      cloneP(): Promise<Traverser>;
      // public default int com.tinkerpop.gremlin.process.Traverser.compareTo(com.tinkerpop.gremlin.process.Traverser<T>) throws java.lang.ClassCastException
      compareTo(arg0: Traverser): number;
      compareToP(arg0: Traverser): Promise<number>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public abstract com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<T> com.tinkerpop.gremlin.process.Traverser$Admin.detach()
      detach(): Traverser$Admin;
      detachP(): Promise<Traverser$Admin>;
      // public abstract T com.tinkerpop.gremlin.process.Traverser.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.TraversalSideEffects com.tinkerpop.gremlin.process.Traverser$Admin.getSideEffects()
      getSideEffects(): TraversalSideEffects;
      getSideEffectsP(): Promise<TraversalSideEffects>;
      // public abstract java.lang.String com.tinkerpop.gremlin.process.Traverser$Admin.getStepId()
      getStepId(): string;
      getStepIdP(): Promise<string>;
      // public abstract void com.tinkerpop.gremlin.process.Traverser$Admin.incrLoops(java.lang.String)
      incrLoops(arg0: string_t): void;
      incrLoopsP(arg0: string_t): Promise<void>;
      // public default boolean com.tinkerpop.gremlin.process.Traverser$Admin.isHalted()
      isHalted(): boolean;
      isHaltedP(): Promise<boolean>;
      // public abstract int com.tinkerpop.gremlin.process.Traverser.loops()
      loops(): number;
      loopsP(): Promise<number>;
      // public abstract void com.tinkerpop.gremlin.process.Traverser$Admin.merge(com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<?>)
      merge(arg0: Traverser$Admin): void;
      mergeP(arg0: Traverser$Admin): Promise<void>;
      // public default <A> A com.tinkerpop.gremlin.process.Traverser.path(java.lang.String)
      path(arg0: string_t): object_t;
      pathP(arg0: string_t): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.Path com.tinkerpop.gremlin.process.Traverser.path()
      path(): Path;
      pathP(): Promise<Path>;
      // public abstract void com.tinkerpop.gremlin.process.Traverser$Admin.resetLoops()
      resetLoops(): void;
      resetLoopsP(): Promise<void>;
      // public abstract <S> void com.tinkerpop.gremlin.process.Traverser.sack(S)
      sack(arg0: object_t): void;
      sackP(arg0: object_t): Promise<void>;
      // public abstract <S> S com.tinkerpop.gremlin.process.Traverser.sack()
      sack(): object_t;
      sackP(): Promise<object_t>;
      // public abstract void com.tinkerpop.gremlin.process.Traverser$Admin.set(T)
      set(arg0: object_t): void;
      setP(arg0: object_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traverser$Admin.setBulk(long)
      setBulk(arg0: long_t): void;
      setBulkP(arg0: long_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traverser$Admin.setSideEffects(com.tinkerpop.gremlin.process.TraversalSideEffects)
      setSideEffects(arg0: TraversalSideEffects): void;
      setSideEffectsP(arg0: TraversalSideEffects): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traverser$Admin.setStepId(java.lang.String)
      setStepId(arg0: string_t): void;
      setStepIdP(arg0: string_t): Promise<void>;
      // public default void com.tinkerpop.gremlin.process.Traverser.sideEffects(java.lang.String,java.lang.Object)
      sideEffects(arg0: string_t, arg1: object_t): void;
      sideEffectsP(arg0: string_t, arg1: object_t): Promise<void>;
      // public default <A> A com.tinkerpop.gremlin.process.Traverser.sideEffects(java.lang.String)
      sideEffects(arg0: string_t): object_t;
      sideEffectsP(arg0: string_t): Promise<object_t>;
      // public abstract <R> com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<R> com.tinkerpop.gremlin.process.Traverser$Admin.split(R,com.tinkerpop.gremlin.process.Step<T, R>)
      split(arg0: object_t, arg1: Step): Traverser$Admin;
      splitP(arg0: object_t, arg1: Step): Promise<Traverser$Admin>;
      // public abstract com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<T> com.tinkerpop.gremlin.process.Traverser$Admin.split()
      split(): Traverser$Admin;
      splitP(): Promise<Traverser$Admin>;
    }
    export module Traverser$Admin {
      export interface Static {
        HALT: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.process {
    export interface TraverserGenerator extends Java.java.lang.Object {
      // public abstract <S> com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<S> com.tinkerpop.gremlin.process.TraverserGenerator.generate(S,com.tinkerpop.gremlin.process.Step<S, ?>,long)
      generate(arg0: object_t, arg1: Step, arg2: long_t): Traverser$Admin;
      generateP(arg0: object_t, arg1: Step, arg2: long_t): Promise<Traverser$Admin>;
      // public default <S> java.util.Iterator<com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<S>> com.tinkerpop.gremlin.process.TraverserGenerator.generateIterator(java.util.Iterator<S>,com.tinkerpop.gremlin.process.Step<S, ?>,long)
      generateIterator(arg0: Iterator, arg1: Step, arg2: long_t): Iterator;
      generateIteratorP(arg0: Iterator, arg1: Step, arg2: long_t): Promise<Iterator>;
      // public abstract java.util.Set<com.tinkerpop.gremlin.process.traverser.TraverserRequirement> com.tinkerpop.gremlin.process.TraverserGenerator.requirements()
      requirements(): Set;
      requirementsP(): Promise<Set>;
    }
    export module TraverserGenerator {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface AbstractStep extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.process.Step {
      // public abstract void com.tinkerpop.gremlin.process.Step.addStart(com.tinkerpop.gremlin.process.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.addStarts(java.util.Iterator<com.tinkerpop.gremlin.process.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public com.tinkerpop.gremlin.process.util.AbstractStep<S, E> com.tinkerpop.gremlin.process.util.AbstractStep.clone() throws java.lang.CloneNotSupportedException
      clone(): AbstractStep;
      cloneP(): Promise<AbstractStep>;
      // public abstract com.tinkerpop.gremlin.process.Step<S, E> com.tinkerpop.gremlin.process.Step.clone() throws java.lang.CloneNotSupportedException
      clone(): Step;
      cloneP(): Promise<Step>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.AbstractStep.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public abstract java.lang.String com.tinkerpop.gremlin.process.Step.getId()
      getId(): string;
      getIdP(): Promise<string>;
      // public abstract java.util.Optional<java.lang.String> com.tinkerpop.gremlin.process.Step.getLabel()
      getLabel(): object_t;
      getLabelP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.Step<E, ?> com.tinkerpop.gremlin.process.Step.getNextStep()
      getNextStep(): Step;
      getNextStepP(): Promise<Step>;
      // public abstract com.tinkerpop.gremlin.process.Step<?, S> com.tinkerpop.gremlin.process.Step.getPreviousStep()
      getPreviousStep(): Step;
      getPreviousStepP(): Promise<Step>;
      // public default java.util.Set<com.tinkerpop.gremlin.process.traverser.TraverserRequirement> com.tinkerpop.gremlin.process.Step.getRequirements()
      getRequirements(): Set;
      getRequirementsP(): Promise<Set>;
      // public abstract <A,B> com.tinkerpop.gremlin.process.Traversal<A, B> com.tinkerpop.gremlin.process.Step.getTraversal()
      getTraversal(): Traversal;
      getTraversalP(): Promise<Traversal>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public com.tinkerpop.gremlin.process.Traverser<E> com.tinkerpop.gremlin.process.util.AbstractStep.next()
      next(): Traverser;
      nextP(): Promise<Traverser>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.setId(java.lang.String)
      setId(arg0: string_t): void;
      setIdP(arg0: string_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.setLabel(java.lang.String)
      setLabel(arg0: string_t): void;
      setLabelP(arg0: string_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.setNextStep(com.tinkerpop.gremlin.process.Step<E, ?>)
      setNextStep(arg0: Step): void;
      setNextStepP(arg0: Step): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.setPreviousStep(com.tinkerpop.gremlin.process.Step<?, S>)
      setPreviousStep(arg0: Step): void;
      setPreviousStepP(arg0: Step): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.setTraversal(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      setTraversal(arg0: Traversal): void;
      setTraversalP(arg0: Traversal): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractStep {
      export interface Static {
        new (arg0: Traversal): com.tinkerpop.gremlin.process.util.AbstractStep;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface BulkSet extends Java.java.util.AbstractSet,Java.java.util.Set {
      // public boolean com.tinkerpop.gremlin.process.util.BulkSet.add(S,long)
      add(arg0: object_t, arg1: long_t): boolean;
      addP(arg0: object_t, arg1: long_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void com.tinkerpop.gremlin.process.util.BulkSet.forEach(java.util.function.BiConsumer<S, java.lang.Long>)
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public long com.tinkerpop.gremlin.process.util.BulkSet.get(S)
      get(arg0: object_t): longValue_t;
      getP(arg0: object_t): Promise<longValue_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public long com.tinkerpop.gremlin.process.util.BulkSet.longSize()
      longSize(): longValue_t;
      longSizeP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public int com.tinkerpop.gremlin.process.util.BulkSet.uniqueSize()
      uniqueSize(): number;
      uniqueSizeP(): Promise<number>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module BulkSet {
      export interface Static {
        new (): com.tinkerpop.gremlin.process.util.BulkSet;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface DefaultTraversal extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.process.Traversal,Java.com.tinkerpop.gremlin.process.Traversal$Admin {
      // public default void com.tinkerpop.gremlin.process.Traversal$Admin.addStart(com.tinkerpop.gremlin.process.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.addStarts(java.util.Iterator<com.tinkerpop.gremlin.process.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public abstract <S2,E2> com.tinkerpop.gremlin.process.Traversal<S2, E2> com.tinkerpop.gremlin.process.Traversal$Admin.addStep(int,com.tinkerpop.gremlin.process.Step<?, ?>) throws java.lang.IllegalStateException
      addStep(arg0: integer_t, arg1: Step): Traversal;
      addStepP(arg0: integer_t, arg1: Step): Promise<Traversal>;
      // public default <E2> com.tinkerpop.gremlin.process.Traversal<S, E2> com.tinkerpop.gremlin.process.Traversal$Admin.addStep(com.tinkerpop.gremlin.process.Step<?, E2>) throws java.lang.IllegalStateException
      addStep(arg0: Step): Traversal;
      addStepP(arg0: Step): Promise<Traversal>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.applyStrategies(com.tinkerpop.gremlin.process.TraversalEngine)
      applyStrategies(arg0: TraversalEngine): void;
      applyStrategiesP(arg0: TraversalEngine): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<S, E> com.tinkerpop.gremlin.process.Traversal.asAdmin()
      asAdmin(): Traversal$Admin;
      asAdminP(): Promise<Traversal$Admin>;
      // public com.tinkerpop.gremlin.process.util.DefaultTraversal<S, E> com.tinkerpop.gremlin.process.util.DefaultTraversal.clone() throws java.lang.CloneNotSupportedException
      clone(): DefaultTraversal;
      cloneP(): Promise<DefaultTraversal>;
      // public abstract com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal.clone() throws java.lang.CloneNotSupportedException
      clone(): Traversal;
      cloneP(): Promise<Traversal>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.DefaultTraversal.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default <C> C com.tinkerpop.gremlin.process.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default <E2> void com.tinkerpop.gremlin.process.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: object_t, arg1: Consumer): void;
      forEachRemainingP(arg0: object_t, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.TraversalSideEffects com.tinkerpop.gremlin.process.Traversal$Admin.getSideEffects()
      getSideEffects(): TraversalSideEffects;
      getSideEffectsP(): Promise<TraversalSideEffects>;
      // public abstract java.util.List<com.tinkerpop.gremlin.process.Step> com.tinkerpop.gremlin.process.Traversal$Admin.getSteps()
      getSteps(): List;
      getStepsP(): Promise<List>;
      // public abstract com.tinkerpop.gremlin.process.TraversalStrategies com.tinkerpop.gremlin.process.Traversal$Admin.getStrategies()
      getStrategies(): TraversalStrategies;
      getStrategiesP(): Promise<TraversalStrategies>;
      // public abstract java.util.Optional<com.tinkerpop.gremlin.process.TraversalEngine> com.tinkerpop.gremlin.process.Traversal$Admin.getTraversalEngine()
      getTraversalEngine(): object_t;
      getTraversalEngineP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.graph.marker.TraversalHolder<?, ?> com.tinkerpop.gremlin.process.Traversal$Admin.getTraversalHolder()
      getTraversalHolder(): object_t;
      getTraversalHolderP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.TraverserGenerator com.tinkerpop.gremlin.process.Traversal$Admin.getTraverserGenerator()
      getTraverserGenerator(): TraverserGenerator;
      getTraverserGeneratorP(): Promise<TraverserGenerator>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public default <A,B> com.tinkerpop.gremlin.process.Traversal<A, B> com.tinkerpop.gremlin.process.Traversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default <S2,E2> com.tinkerpop.gremlin.process.Traversal<S2, E2> com.tinkerpop.gremlin.process.Traversal$Admin.removeStep(com.tinkerpop.gremlin.process.Step<?, ?>) throws java.lang.IllegalStateException
      removeStep(arg0: Step): Traversal;
      removeStepP(arg0: Step): Promise<Traversal>;
      // public abstract <S2,E2> com.tinkerpop.gremlin.process.Traversal<S2, E2> com.tinkerpop.gremlin.process.Traversal$Admin.removeStep(int) throws java.lang.IllegalStateException
      removeStep(arg0: integer_t): Traversal;
      removeStepP(arg0: integer_t): Promise<Traversal>;
      // public default void com.tinkerpop.gremlin.process.Traversal$Admin.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal$Admin.reverse() throws java.lang.IllegalStateException
      reverse(): Traversal;
      reverseP(): Promise<Traversal>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.setSideEffects(com.tinkerpop.gremlin.process.TraversalSideEffects)
      setSideEffects(arg0: TraversalSideEffects): void;
      setSideEffectsP(arg0: TraversalSideEffects): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.setStrategies(com.tinkerpop.gremlin.process.TraversalStrategies)
      setStrategies(arg0: TraversalStrategies): void;
      setStrategiesP(arg0: TraversalStrategies): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.setTraversalHolder(com.tinkerpop.gremlin.process.graph.marker.TraversalHolder<?, ?>)
      setTraversalHolder(arg0: object_t): void;
      setTraversalHolderP(arg0: object_t): Promise<void>;
      // public default com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): Traversal;
      submitP(arg0: object_t): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.process.util.BulkSet<E> com.tinkerpop.gremlin.process.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> com.tinkerpop.gremlin.process.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default java.util.Optional<E> com.tinkerpop.gremlin.process.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DefaultTraversal {
      export interface Static {
        new (arg0: object_t): com.tinkerpop.gremlin.process.util.DefaultTraversal;
        OF: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface DefaultTraversalSideEffects extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.process.TraversalSideEffects {
      // public com.tinkerpop.gremlin.process.util.DefaultTraversalSideEffects com.tinkerpop.gremlin.process.util.DefaultTraversalSideEffects.clone() throws java.lang.CloneNotSupportedException
      clone(): DefaultTraversalSideEffects;
      cloneP(): Promise<DefaultTraversalSideEffects>;
      // public abstract com.tinkerpop.gremlin.process.TraversalSideEffects com.tinkerpop.gremlin.process.TraversalSideEffects.clone() throws java.lang.CloneNotSupportedException
      clone(): TraversalSideEffects;
      cloneP(): Promise<TraversalSideEffects>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.DefaultTraversalSideEffects.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.process.TraversalSideEffects.exists(java.lang.String)
      exists(arg0: string_t): boolean;
      existsP(arg0: string_t): Promise<boolean>;
      // public default <V> void com.tinkerpop.gremlin.process.TraversalSideEffects.forEach(java.util.function.BiConsumer<java.lang.String, V>)
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract <V> V com.tinkerpop.gremlin.process.TraversalSideEffects.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public default <V> V com.tinkerpop.gremlin.process.TraversalSideEffects.getOrCreate(java.lang.String,java.util.function.Supplier<V>)
      getOrCreate(arg0: string_t, arg1: object_t): object_t;
      getOrCreateP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public abstract <V> java.util.Optional<java.util.function.Supplier<V>> com.tinkerpop.gremlin.process.TraversalSideEffects.getRegisteredSupplier(java.lang.String)
      getRegisteredSupplier(arg0: string_t): object_t;
      getRegisteredSupplierP(arg0: string_t): Promise<object_t>;
      // public abstract <S> java.util.Optional<java.util.function.Supplier<S>> com.tinkerpop.gremlin.process.TraversalSideEffects.getSackInitialValue()
      getSackInitialValue(): object_t;
      getSackInitialValueP(): Promise<object_t>;
      // public abstract <S> java.util.Optional<java.util.function.UnaryOperator<S>> com.tinkerpop.gremlin.process.TraversalSideEffects.getSackSplitOperator()
      getSackSplitOperator(): object_t;
      getSackSplitOperatorP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default <V> void com.tinkerpop.gremlin.process.TraversalSideEffects.ifPresent(java.lang.String,java.util.function.Consumer<V>)
      ifPresent(arg0: string_t, arg1: Consumer): void;
      ifPresentP(arg0: string_t, arg1: Consumer): Promise<void>;
      // public abstract java.util.Set<java.lang.String> com.tinkerpop.gremlin.process.TraversalSideEffects.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalSideEffects.mergeInto(com.tinkerpop.gremlin.process.TraversalSideEffects)
      mergeInto(arg0: TraversalSideEffects): void;
      mergeIntoP(arg0: TraversalSideEffects): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default <V> V com.tinkerpop.gremlin.process.TraversalSideEffects.orElse(java.lang.String,V)
      orElse(arg0: string_t, arg1: object_t): object_t;
      orElseP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalSideEffects.registerSupplier(java.lang.String,java.util.function.Supplier)
      registerSupplier(arg0: string_t, arg1: object_t): void;
      registerSupplierP(arg0: string_t, arg1: object_t): Promise<void>;
      // public default void com.tinkerpop.gremlin.process.TraversalSideEffects.registerSupplierIfAbsent(java.lang.String,java.util.function.Supplier)
      registerSupplierIfAbsent(arg0: string_t, arg1: object_t): void;
      registerSupplierIfAbsentP(arg0: string_t, arg1: object_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalSideEffects.remove(java.lang.String)
      remove(arg0: string_t): void;
      removeP(arg0: string_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalSideEffects.set(java.lang.String,java.lang.Object)
      set(arg0: string_t, arg1: object_t): void;
      setP(arg0: string_t, arg1: object_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalSideEffects.setLocalVertex(com.tinkerpop.gremlin.structure.Vertex)
      setLocalVertex(arg0: Vertex): void;
      setLocalVertexP(arg0: Vertex): Promise<void>;
      // public abstract <S> void com.tinkerpop.gremlin.process.TraversalSideEffects.setSack(java.util.function.Supplier<S>,java.util.Optional<java.util.function.UnaryOperator<S>>)
      setSack(arg0: object_t, arg1: object_t): void;
      setSackP(arg0: object_t, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DefaultTraversalSideEffects {
      export interface Static {
        new (): com.tinkerpop.gremlin.process.util.DefaultTraversalSideEffects;
        SIDE_EFFECTS: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface DefaultTraversalStrategies extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.process.TraversalStrategies {
      // public abstract com.tinkerpop.gremlin.process.TraversalStrategies com.tinkerpop.gremlin.process.TraversalStrategies.addStrategies(com.tinkerpop.gremlin.process.TraversalStrategy...)
      addStrategies(...arg0: TraversalStrategy[]): TraversalStrategies;
      addStrategies(arg0: array_t<TraversalStrategy>): TraversalStrategies;
      addStrategiesP(...arg0: TraversalStrategy[]): Promise<TraversalStrategies>;
      addStrategiesP(arg0: array_t<TraversalStrategy>): Promise<TraversalStrategies>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalStrategies.applyStrategies(com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>,com.tinkerpop.gremlin.process.TraversalEngine)
      applyStrategies(arg0: Traversal$Admin, arg1: TraversalEngine): void;
      applyStrategiesP(arg0: Traversal$Admin, arg1: TraversalEngine): Promise<void>;
      // public com.tinkerpop.gremlin.process.util.DefaultTraversalStrategies com.tinkerpop.gremlin.process.util.DefaultTraversalStrategies.clone() throws java.lang.CloneNotSupportedException
      clone(): DefaultTraversalStrategies;
      cloneP(): Promise<DefaultTraversalStrategies>;
      // public abstract com.tinkerpop.gremlin.process.TraversalStrategies com.tinkerpop.gremlin.process.TraversalStrategies.clone() throws java.lang.CloneNotSupportedException
      clone(): TraversalStrategies;
      cloneP(): Promise<TraversalStrategies>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.DefaultTraversalStrategies.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.TraverserGenerator com.tinkerpop.gremlin.process.TraversalStrategies.getTraverserGenerator(com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
      getTraverserGenerator(arg0: Traversal$Admin): TraverserGenerator;
      getTraverserGeneratorP(arg0: Traversal$Admin): Promise<TraverserGenerator>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.TraversalStrategies com.tinkerpop.gremlin.process.TraversalStrategies.removeStrategies(java.lang.Class<? extends com.tinkerpop.gremlin.process.TraversalStrategy>...)
      removeStrategies(...arg0: object_t[]): TraversalStrategies;
      removeStrategies(arg0: object_array_t): TraversalStrategies;
      removeStrategiesP(...arg0: object_t[]): Promise<TraversalStrategies>;
      removeStrategiesP(arg0: object_array_t): Promise<TraversalStrategies>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalStrategies.setTraverserGeneratorFactory(com.tinkerpop.gremlin.process.traverser.TraverserGeneratorFactory)
      setTraverserGeneratorFactory(arg0: object_t): void;
      setTraverserGeneratorFactoryP(arg0: object_t): Promise<void>;
      // public abstract java.util.List<com.tinkerpop.gremlin.process.TraversalStrategy> com.tinkerpop.gremlin.process.TraversalStrategies.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DefaultTraversalStrategies {
      export interface Static {
        new (): com.tinkerpop.gremlin.process.util.DefaultTraversalStrategies;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface ElementFunctionComparator extends Java.java.lang.Object {
      // public int com.tinkerpop.gremlin.process.util.ElementFunctionComparator.compare(com.tinkerpop.gremlin.structure.Element,com.tinkerpop.gremlin.structure.Element)
      compare(arg0: Element, arg1: Element): number;
      compareP(arg0: Element, arg1: Element): Promise<number>;
      // public int com.tinkerpop.gremlin.process.util.ElementFunctionComparator.compare(java.lang.Object,java.lang.Object)
      compare(arg0: object_t, arg1: object_t): number;
      compareP(arg0: object_t, arg1: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.util.function.Function<com.tinkerpop.gremlin.structure.Element, V> com.tinkerpop.gremlin.process.util.ElementFunctionComparator.getElementFunction()
      getElementFunction(): Function;
      getElementFunctionP(): Promise<Function>;
      // public java.util.Comparator<V> com.tinkerpop.gremlin.process.util.ElementFunctionComparator.getValueComparator()
      getValueComparator(): object_t;
      getValueComparatorP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.Comparator<T> java.util.Comparator.reversed()
      reversed(): object_t;
      reversedP(): Promise<object_t>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>,java.util.Comparator<? super U>)
      thenComparing(arg0: Function, arg1: object_t): object_t;
      thenComparingP(arg0: Function, arg1: object_t): Promise<object_t>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>)
      thenComparing(arg0: Function): object_t;
      thenComparingP(arg0: Function): Promise<object_t>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.Comparator<? super T>)
      thenComparing(arg0: object_t): object_t;
      thenComparingP(arg0: object_t): Promise<object_t>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction<? super T>)
      thenComparingDouble(arg0: object_t): object_t;
      thenComparingDoubleP(arg0: object_t): Promise<object_t>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction<? super T>)
      thenComparingInt(arg0: object_t): object_t;
      thenComparingIntP(arg0: object_t): Promise<object_t>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction<? super T>)
      thenComparingLong(arg0: object_t): object_t;
      thenComparingLongP(arg0: object_t): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ElementFunctionComparator {
      export interface Static {
        new (arg0: Function, arg1: object_t): com.tinkerpop.gremlin.process.util.ElementFunctionComparator;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface ElementValueComparator extends Java.java.lang.Object {
      // public int com.tinkerpop.gremlin.process.util.ElementValueComparator.compare(com.tinkerpop.gremlin.structure.Element,com.tinkerpop.gremlin.structure.Element)
      compare(arg0: Element, arg1: Element): number;
      compareP(arg0: Element, arg1: Element): Promise<number>;
      // public int com.tinkerpop.gremlin.process.util.ElementValueComparator.compare(java.lang.Object,java.lang.Object)
      compare(arg0: object_t, arg1: object_t): number;
      compareP(arg0: object_t, arg1: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.lang.String com.tinkerpop.gremlin.process.util.ElementValueComparator.getPropertyKey()
      getPropertyKey(): string;
      getPropertyKeyP(): Promise<string>;
      // public java.util.Comparator<V> com.tinkerpop.gremlin.process.util.ElementValueComparator.getValueComparator()
      getValueComparator(): object_t;
      getValueComparatorP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.Comparator<T> java.util.Comparator.reversed()
      reversed(): object_t;
      reversedP(): Promise<object_t>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>,java.util.Comparator<? super U>)
      thenComparing(arg0: Function, arg1: object_t): object_t;
      thenComparingP(arg0: Function, arg1: object_t): Promise<object_t>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>)
      thenComparing(arg0: Function): object_t;
      thenComparingP(arg0: Function): Promise<object_t>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.Comparator<? super T>)
      thenComparing(arg0: object_t): object_t;
      thenComparingP(arg0: object_t): Promise<object_t>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction<? super T>)
      thenComparingDouble(arg0: object_t): object_t;
      thenComparingDoubleP(arg0: object_t): Promise<object_t>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction<? super T>)
      thenComparingInt(arg0: object_t): object_t;
      thenComparingIntP(arg0: object_t): Promise<object_t>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction<? super T>)
      thenComparingLong(arg0: object_t): object_t;
      thenComparingLongP(arg0: object_t): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ElementValueComparator {
      export interface Static {
        new (arg0: string_t, arg1: object_t): com.tinkerpop.gremlin.process.util.ElementValueComparator;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface ElementValueFunction extends Java.java.lang.Object,Java.java.util.function_.Function {
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public V com.tinkerpop.gremlin.process.util.ElementValueFunction.apply(com.tinkerpop.gremlin.structure.Element)
      apply(arg0: Element): object_t;
      applyP(arg0: Element): Promise<object_t>;
      // public abstract R java.util.function.Function.apply(T)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.lang.String com.tinkerpop.gremlin.process.util.ElementValueFunction.getPropertyKey()
      getPropertyKey(): string;
      getPropertyKeyP(): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ElementValueFunction {
      export interface Static {
        new (arg0: string_t): com.tinkerpop.gremlin.process.util.ElementValueFunction;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface EmptyPath extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.process.Path {
      // public abstract void com.tinkerpop.gremlin.process.Path.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public com.tinkerpop.gremlin.process.util.EmptyPath com.tinkerpop.gremlin.process.util.EmptyPath.clone()
      clone(): EmptyPath;
      cloneP(): Promise<EmptyPath>;
      // public abstract com.tinkerpop.gremlin.process.Path com.tinkerpop.gremlin.process.Path.clone() throws java.lang.CloneNotSupportedException
      clone(): Path;
      cloneP(): Promise<Path>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.EmptyPath.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract com.tinkerpop.gremlin.process.Path com.tinkerpop.gremlin.process.Path.extend(java.lang.Object,java.lang.String...)
      extend(arg0: object_t, ...arg1: string_t[]): Path;
      extend(arg0: object_t, arg1: array_t<string_t>): Path;
      extendP(arg0: object_t, ...arg1: string_t[]): Promise<Path>;
      extendP(arg0: object_t, arg1: array_t<string_t>): Promise<Path>;
      // public default void com.tinkerpop.gremlin.process.Path.forEach(java.util.function.BiConsumer<java.lang.Object, java.util.Set<java.lang.String>>)
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public default void com.tinkerpop.gremlin.process.Path.forEach(java.util.function.Consumer<java.lang.Object>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public default <A> A com.tinkerpop.gremlin.process.Path.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public default <A> A com.tinkerpop.gremlin.process.Path.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default boolean com.tinkerpop.gremlin.process.Path.hasLabel(java.lang.String)
      hasLabel(arg0: string_t): boolean;
      hasLabelP(arg0: string_t): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.process.Path.isSimple()
      isSimple(): boolean;
      isSimpleP(): Promise<boolean>;
      // public abstract java.util.List<java.util.Set<java.lang.String>> com.tinkerpop.gremlin.process.Path.labels()
      labels(): List;
      labelsP(): Promise<List>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract java.util.List<java.lang.Object> com.tinkerpop.gremlin.process.Path.objects()
      objects(): List;
      objectsP(): Promise<List>;
      // public default int com.tinkerpop.gremlin.process.Path.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.stream.Stream<org.javatuples.Pair<java.lang.Object, java.util.Set<java.lang.String>>> com.tinkerpop.gremlin.process.Path.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EmptyPath {
      export interface Static {
        // public static com.tinkerpop.gremlin.process.Path com.tinkerpop.gremlin.process.util.EmptyPath.instance()
        instance(): Path;
        instanceP(): Promise<Path>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface EmptyStep extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.process.Step {
      // public abstract void com.tinkerpop.gremlin.process.Step.addStart(com.tinkerpop.gremlin.process.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.addStarts(java.util.Iterator<com.tinkerpop.gremlin.process.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public default com.tinkerpop.gremlin.process.Step<?, ?> com.tinkerpop.gremlin.process.graph.marker.TraversalHolder.asStep()
      asStep(): Step;
      asStepP(): Promise<Step>;
      // public com.tinkerpop.gremlin.process.util.EmptyStep<S, E> com.tinkerpop.gremlin.process.util.EmptyStep.clone() throws java.lang.CloneNotSupportedException
      clone(): EmptyStep;
      cloneP(): Promise<EmptyStep>;
      // public abstract com.tinkerpop.gremlin.process.Step<S, E> com.tinkerpop.gremlin.process.Step.clone() throws java.lang.CloneNotSupportedException
      clone(): Step;
      cloneP(): Promise<Step>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.EmptyStep.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void com.tinkerpop.gremlin.process.graph.marker.TraversalHolder.executeTraversalOperations(com.tinkerpop.gremlin.process.graph.marker.TraversalHolder$Child...)
      executeTraversalOperations(...arg0: object_t[]): void;
      executeTraversalOperations(arg0: object_array_t): void;
      executeTraversalOperationsP(...arg0: object_t[]): Promise<void>;
      executeTraversalOperationsP(arg0: object_array_t): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public default com.tinkerpop.gremlin.process.TraversalStrategies com.tinkerpop.gremlin.process.graph.marker.TraversalHolder.getChildStrategies()
      getChildStrategies(): TraversalStrategies;
      getChildStrategiesP(): Promise<TraversalStrategies>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public abstract java.lang.String com.tinkerpop.gremlin.process.Step.getId()
      getId(): string;
      getIdP(): Promise<string>;
      // public abstract java.util.Optional<java.lang.String> com.tinkerpop.gremlin.process.Step.getLabel()
      getLabel(): object_t;
      getLabelP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.Step<E, ?> com.tinkerpop.gremlin.process.Step.getNextStep()
      getNextStep(): Step;
      getNextStepP(): Promise<Step>;
      // public abstract com.tinkerpop.gremlin.process.Step<?, S> com.tinkerpop.gremlin.process.Step.getPreviousStep()
      getPreviousStep(): Step;
      getPreviousStepP(): Promise<Step>;
      // public default java.util.Set<com.tinkerpop.gremlin.process.traverser.TraverserRequirement> com.tinkerpop.gremlin.process.Step.getRequirements()
      getRequirements(): Set;
      getRequirementsP(): Promise<Set>;
      // public abstract <A,B> com.tinkerpop.gremlin.process.Traversal<A, B> com.tinkerpop.gremlin.process.Step.getTraversal()
      getTraversal(): Traversal;
      getTraversalP(): Promise<Traversal>;
      // public default java.util.Set<com.tinkerpop.gremlin.process.traverser.TraverserRequirement> com.tinkerpop.gremlin.process.graph.marker.TraversalHolder.getTraversalRequirements(com.tinkerpop.gremlin.process.traverser.TraverserRequirement...)
      getTraversalRequirements(...arg0: object_t[]): Set;
      getTraversalRequirements(arg0: object_array_t): Set;
      getTraversalRequirementsP(...arg0: object_t[]): Promise<Set>;
      getTraversalRequirementsP(arg0: object_array_t): Promise<Set>;
      // public java.util.List<com.tinkerpop.gremlin.process.Traversal<S, E>> com.tinkerpop.gremlin.process.util.EmptyStep.getTraversals()
      getTraversals(): List;
      getTraversalsP(): Promise<List>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public com.tinkerpop.gremlin.process.Traverser<E> com.tinkerpop.gremlin.process.util.EmptyStep.next()
      next(): Traverser;
      nextP(): Promise<Traverser>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public default void com.tinkerpop.gremlin.process.graph.marker.TraversalHolder.resetTraversals()
      resetTraversals(): void;
      resetTraversalsP(): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.setId(java.lang.String)
      setId(arg0: string_t): void;
      setIdP(arg0: string_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.setLabel(java.lang.String)
      setLabel(arg0: string_t): void;
      setLabelP(arg0: string_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.setNextStep(com.tinkerpop.gremlin.process.Step<E, ?>)
      setNextStep(arg0: Step): void;
      setNextStepP(arg0: Step): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.setPreviousStep(com.tinkerpop.gremlin.process.Step<?, S>)
      setPreviousStep(arg0: Step): void;
      setPreviousStepP(arg0: Step): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Step.setTraversal(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      setTraversal(arg0: Traversal): void;
      setTraversalP(arg0: Traversal): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EmptyStep {
      export interface Static {
        // public static <S,E> com.tinkerpop.gremlin.process.Step<S, E> com.tinkerpop.gremlin.process.util.EmptyStep.instance()
        instance(): Step;
        instanceP(): Promise<Step>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface EmptyTraversal extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.process.Traversal$Admin {
      // public default void com.tinkerpop.gremlin.process.Traversal$Admin.addStart(com.tinkerpop.gremlin.process.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.addStarts(java.util.Iterator<com.tinkerpop.gremlin.process.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public abstract <S2,E2> com.tinkerpop.gremlin.process.Traversal<S2, E2> com.tinkerpop.gremlin.process.Traversal$Admin.addStep(int,com.tinkerpop.gremlin.process.Step<?, ?>) throws java.lang.IllegalStateException
      addStep(arg0: integer_t, arg1: Step): Traversal;
      addStepP(arg0: integer_t, arg1: Step): Promise<Traversal>;
      // public default <E2> com.tinkerpop.gremlin.process.Traversal<S, E2> com.tinkerpop.gremlin.process.Traversal$Admin.addStep(com.tinkerpop.gremlin.process.Step<?, E2>) throws java.lang.IllegalStateException
      addStep(arg0: Step): Traversal;
      addStepP(arg0: Step): Promise<Traversal>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.applyStrategies(com.tinkerpop.gremlin.process.TraversalEngine)
      applyStrategies(arg0: TraversalEngine): void;
      applyStrategiesP(arg0: TraversalEngine): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<S, E> com.tinkerpop.gremlin.process.Traversal.asAdmin()
      asAdmin(): Traversal$Admin;
      asAdminP(): Promise<Traversal$Admin>;
      // public com.tinkerpop.gremlin.process.util.EmptyTraversal<S, E> com.tinkerpop.gremlin.process.util.EmptyTraversal.clone() throws java.lang.CloneNotSupportedException
      clone(): EmptyTraversal;
      cloneP(): Promise<EmptyTraversal>;
      // public abstract com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal.clone() throws java.lang.CloneNotSupportedException
      clone(): Traversal;
      cloneP(): Promise<Traversal>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.EmptyTraversal.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default <C> C com.tinkerpop.gremlin.process.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default <E2> void com.tinkerpop.gremlin.process.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: object_t, arg1: Consumer): void;
      forEachRemainingP(arg0: object_t, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.TraversalSideEffects com.tinkerpop.gremlin.process.Traversal$Admin.getSideEffects()
      getSideEffects(): TraversalSideEffects;
      getSideEffectsP(): Promise<TraversalSideEffects>;
      // public abstract java.util.List<com.tinkerpop.gremlin.process.Step> com.tinkerpop.gremlin.process.Traversal$Admin.getSteps()
      getSteps(): List;
      getStepsP(): Promise<List>;
      // public abstract com.tinkerpop.gremlin.process.TraversalStrategies com.tinkerpop.gremlin.process.Traversal$Admin.getStrategies()
      getStrategies(): TraversalStrategies;
      getStrategiesP(): Promise<TraversalStrategies>;
      // public abstract java.util.Optional<com.tinkerpop.gremlin.process.TraversalEngine> com.tinkerpop.gremlin.process.Traversal$Admin.getTraversalEngine()
      getTraversalEngine(): object_t;
      getTraversalEngineP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.graph.marker.TraversalHolder<?, ?> com.tinkerpop.gremlin.process.Traversal$Admin.getTraversalHolder()
      getTraversalHolder(): object_t;
      getTraversalHolderP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.TraverserGenerator com.tinkerpop.gremlin.process.Traversal$Admin.getTraverserGenerator()
      getTraverserGenerator(): TraverserGenerator;
      getTraverserGeneratorP(): Promise<TraverserGenerator>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public default <A,B> com.tinkerpop.gremlin.process.Traversal<A, B> com.tinkerpop.gremlin.process.Traversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default <S2,E2> com.tinkerpop.gremlin.process.Traversal<S2, E2> com.tinkerpop.gremlin.process.Traversal$Admin.removeStep(com.tinkerpop.gremlin.process.Step<?, ?>) throws java.lang.IllegalStateException
      removeStep(arg0: Step): Traversal;
      removeStepP(arg0: Step): Promise<Traversal>;
      // public abstract <S2,E2> com.tinkerpop.gremlin.process.Traversal<S2, E2> com.tinkerpop.gremlin.process.Traversal$Admin.removeStep(int) throws java.lang.IllegalStateException
      removeStep(arg0: integer_t): Traversal;
      removeStepP(arg0: integer_t): Promise<Traversal>;
      // public default void com.tinkerpop.gremlin.process.Traversal$Admin.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal$Admin.reverse() throws java.lang.IllegalStateException
      reverse(): Traversal;
      reverseP(): Promise<Traversal>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.setSideEffects(com.tinkerpop.gremlin.process.TraversalSideEffects)
      setSideEffects(arg0: TraversalSideEffects): void;
      setSideEffectsP(arg0: TraversalSideEffects): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.setStrategies(com.tinkerpop.gremlin.process.TraversalStrategies)
      setStrategies(arg0: TraversalStrategies): void;
      setStrategiesP(arg0: TraversalStrategies): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.setTraversalHolder(com.tinkerpop.gremlin.process.graph.marker.TraversalHolder<?, ?>)
      setTraversalHolder(arg0: object_t): void;
      setTraversalHolderP(arg0: object_t): Promise<void>;
      // public default com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): Traversal;
      submitP(arg0: object_t): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.process.util.BulkSet<E> com.tinkerpop.gremlin.process.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> com.tinkerpop.gremlin.process.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default java.util.Optional<E> com.tinkerpop.gremlin.process.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EmptyTraversal {
      export interface Static {
        // public static <A,B> com.tinkerpop.gremlin.process.util.EmptyTraversal<A, B> com.tinkerpop.gremlin.process.util.EmptyTraversal.instance()
        instance(): EmptyTraversal;
        instanceP(): Promise<EmptyTraversal>;
        OF: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface EmptyTraversalSideEffects extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.process.TraversalSideEffects {
      // public abstract com.tinkerpop.gremlin.process.TraversalSideEffects com.tinkerpop.gremlin.process.TraversalSideEffects.clone() throws java.lang.CloneNotSupportedException
      clone(): TraversalSideEffects;
      cloneP(): Promise<TraversalSideEffects>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.EmptyTraversalSideEffects.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.process.TraversalSideEffects.exists(java.lang.String)
      exists(arg0: string_t): boolean;
      existsP(arg0: string_t): Promise<boolean>;
      // public default <V> void com.tinkerpop.gremlin.process.TraversalSideEffects.forEach(java.util.function.BiConsumer<java.lang.String, V>)
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract <V> V com.tinkerpop.gremlin.process.TraversalSideEffects.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public default <V> V com.tinkerpop.gremlin.process.TraversalSideEffects.getOrCreate(java.lang.String,java.util.function.Supplier<V>)
      getOrCreate(arg0: string_t, arg1: object_t): object_t;
      getOrCreateP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public abstract <V> java.util.Optional<java.util.function.Supplier<V>> com.tinkerpop.gremlin.process.TraversalSideEffects.getRegisteredSupplier(java.lang.String)
      getRegisteredSupplier(arg0: string_t): object_t;
      getRegisteredSupplierP(arg0: string_t): Promise<object_t>;
      // public abstract <S> java.util.Optional<java.util.function.Supplier<S>> com.tinkerpop.gremlin.process.TraversalSideEffects.getSackInitialValue()
      getSackInitialValue(): object_t;
      getSackInitialValueP(): Promise<object_t>;
      // public abstract <S> java.util.Optional<java.util.function.UnaryOperator<S>> com.tinkerpop.gremlin.process.TraversalSideEffects.getSackSplitOperator()
      getSackSplitOperator(): object_t;
      getSackSplitOperatorP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default <V> void com.tinkerpop.gremlin.process.TraversalSideEffects.ifPresent(java.lang.String,java.util.function.Consumer<V>)
      ifPresent(arg0: string_t, arg1: Consumer): void;
      ifPresentP(arg0: string_t, arg1: Consumer): Promise<void>;
      // public abstract java.util.Set<java.lang.String> com.tinkerpop.gremlin.process.TraversalSideEffects.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalSideEffects.mergeInto(com.tinkerpop.gremlin.process.TraversalSideEffects)
      mergeInto(arg0: TraversalSideEffects): void;
      mergeIntoP(arg0: TraversalSideEffects): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default <V> V com.tinkerpop.gremlin.process.TraversalSideEffects.orElse(java.lang.String,V)
      orElse(arg0: string_t, arg1: object_t): object_t;
      orElseP(arg0: string_t, arg1: object_t): Promise<object_t>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalSideEffects.registerSupplier(java.lang.String,java.util.function.Supplier)
      registerSupplier(arg0: string_t, arg1: object_t): void;
      registerSupplierP(arg0: string_t, arg1: object_t): Promise<void>;
      // public default void com.tinkerpop.gremlin.process.TraversalSideEffects.registerSupplierIfAbsent(java.lang.String,java.util.function.Supplier)
      registerSupplierIfAbsent(arg0: string_t, arg1: object_t): void;
      registerSupplierIfAbsentP(arg0: string_t, arg1: object_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalSideEffects.remove(java.lang.String)
      remove(arg0: string_t): void;
      removeP(arg0: string_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalSideEffects.set(java.lang.String,java.lang.Object)
      set(arg0: string_t, arg1: object_t): void;
      setP(arg0: string_t, arg1: object_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalSideEffects.setLocalVertex(com.tinkerpop.gremlin.structure.Vertex)
      setLocalVertex(arg0: Vertex): void;
      setLocalVertexP(arg0: Vertex): Promise<void>;
      // public abstract <S> void com.tinkerpop.gremlin.process.TraversalSideEffects.setSack(java.util.function.Supplier<S>,java.util.Optional<java.util.function.UnaryOperator<S>>)
      setSack(arg0: object_t, arg1: object_t): void;
      setSackP(arg0: object_t, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EmptyTraversalSideEffects {
      export interface Static {
        // public static com.tinkerpop.gremlin.process.util.EmptyTraversalSideEffects com.tinkerpop.gremlin.process.util.EmptyTraversalSideEffects.instance()
        instance(): EmptyTraversalSideEffects;
        instanceP(): Promise<EmptyTraversalSideEffects>;
        SIDE_EFFECTS: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface EmptyTraversalStrategies extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.process.TraversalStrategies {
      // public abstract com.tinkerpop.gremlin.process.TraversalStrategies com.tinkerpop.gremlin.process.TraversalStrategies.addStrategies(com.tinkerpop.gremlin.process.TraversalStrategy...)
      addStrategies(...arg0: TraversalStrategy[]): TraversalStrategies;
      addStrategies(arg0: array_t<TraversalStrategy>): TraversalStrategies;
      addStrategiesP(...arg0: TraversalStrategy[]): Promise<TraversalStrategies>;
      addStrategiesP(arg0: array_t<TraversalStrategy>): Promise<TraversalStrategies>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalStrategies.applyStrategies(com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>,com.tinkerpop.gremlin.process.TraversalEngine)
      applyStrategies(arg0: Traversal$Admin, arg1: TraversalEngine): void;
      applyStrategiesP(arg0: Traversal$Admin, arg1: TraversalEngine): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.TraversalStrategies com.tinkerpop.gremlin.process.TraversalStrategies.clone() throws java.lang.CloneNotSupportedException
      clone(): TraversalStrategies;
      cloneP(): Promise<TraversalStrategies>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.EmptyTraversalStrategies.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.TraverserGenerator com.tinkerpop.gremlin.process.TraversalStrategies.getTraverserGenerator(com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
      getTraverserGenerator(arg0: Traversal$Admin): TraverserGenerator;
      getTraverserGeneratorP(arg0: Traversal$Admin): Promise<TraverserGenerator>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.TraversalStrategies com.tinkerpop.gremlin.process.TraversalStrategies.removeStrategies(java.lang.Class<? extends com.tinkerpop.gremlin.process.TraversalStrategy>...)
      removeStrategies(...arg0: object_t[]): TraversalStrategies;
      removeStrategies(arg0: object_array_t): TraversalStrategies;
      removeStrategiesP(...arg0: object_t[]): Promise<TraversalStrategies>;
      removeStrategiesP(arg0: object_array_t): Promise<TraversalStrategies>;
      // public abstract void com.tinkerpop.gremlin.process.TraversalStrategies.setTraverserGeneratorFactory(com.tinkerpop.gremlin.process.traverser.TraverserGeneratorFactory)
      setTraverserGeneratorFactory(arg0: object_t): void;
      setTraverserGeneratorFactoryP(arg0: object_t): Promise<void>;
      // public abstract java.util.List<com.tinkerpop.gremlin.process.TraversalStrategy> com.tinkerpop.gremlin.process.TraversalStrategies.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EmptyTraversalStrategies {
      export interface Static {
        // public static com.tinkerpop.gremlin.process.util.EmptyTraversalStrategies com.tinkerpop.gremlin.process.util.EmptyTraversalStrategies.instance()
        instance(): EmptyTraversalStrategies;
        instanceP(): Promise<EmptyTraversalStrategies>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface EmptyTraverser extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.process.Traverser,Java.com.tinkerpop.gremlin.process.Traverser$Admin {
      // public default com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<T> com.tinkerpop.gremlin.process.Traverser.asAdmin()
      asAdmin(): Traverser$Admin;
      asAdminP(): Promise<Traverser$Admin>;
      // public abstract com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<T> com.tinkerpop.gremlin.process.Traverser$Admin.attach(com.tinkerpop.gremlin.structure.Vertex)
      attach(arg0: Vertex): Traverser$Admin;
      attachP(arg0: Vertex): Promise<Traverser$Admin>;
      // public default com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<T> com.tinkerpop.gremlin.process.Traverser$Admin.attach(com.tinkerpop.gremlin.structure.Graph) throws java.lang.UnsupportedOperationException
      attach(arg0: Graph): Traverser$Admin;
      attachP(arg0: Graph): Promise<Traverser$Admin>;
      // public default java.lang.Object com.tinkerpop.gremlin.process.Traverser$Admin.attach(com.tinkerpop.gremlin.structure.Vertex) throws java.lang.IllegalStateException
      attach(arg0: Vertex): object_t;
      attachP(arg0: Vertex): Promise<object_t>;
      // public default java.lang.Object com.tinkerpop.gremlin.process.Traverser$Admin.attach(com.tinkerpop.gremlin.structure.Graph) throws java.lang.IllegalStateException
      attach(arg0: Graph): object_t;
      attachP(arg0: Graph): Promise<object_t>;
      // public abstract long com.tinkerpop.gremlin.process.Traverser.bulk()
      bulk(): longValue_t;
      bulkP(): Promise<longValue_t>;
      // public com.tinkerpop.gremlin.process.util.EmptyTraverser<T> com.tinkerpop.gremlin.process.util.EmptyTraverser.clone() throws java.lang.CloneNotSupportedException
      clone(): EmptyTraverser;
      cloneP(): Promise<EmptyTraverser>;
      // public abstract com.tinkerpop.gremlin.process.Traverser<T> com.tinkerpop.gremlin.process.Traverser.clone() throws java.lang.CloneNotSupportedException
      clone(): Traverser;
      cloneP(): Promise<Traverser>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.EmptyTraverser.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default int com.tinkerpop.gremlin.process.Traverser.compareTo(com.tinkerpop.gremlin.process.Traverser<T>) throws java.lang.ClassCastException
      compareTo(arg0: Traverser): number;
      compareToP(arg0: Traverser): Promise<number>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public abstract com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<T> com.tinkerpop.gremlin.process.Traverser$Admin.detach()
      detach(): Traverser$Admin;
      detachP(): Promise<Traverser$Admin>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract T com.tinkerpop.gremlin.process.Traverser.get()
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.TraversalSideEffects com.tinkerpop.gremlin.process.Traverser$Admin.getSideEffects()
      getSideEffects(): TraversalSideEffects;
      getSideEffectsP(): Promise<TraversalSideEffects>;
      // public abstract java.lang.String com.tinkerpop.gremlin.process.Traverser$Admin.getStepId()
      getStepId(): string;
      getStepIdP(): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract void com.tinkerpop.gremlin.process.Traverser$Admin.incrLoops(java.lang.String)
      incrLoops(arg0: string_t): void;
      incrLoopsP(arg0: string_t): Promise<void>;
      // public default boolean com.tinkerpop.gremlin.process.Traverser$Admin.isHalted()
      isHalted(): boolean;
      isHaltedP(): Promise<boolean>;
      // public abstract int com.tinkerpop.gremlin.process.Traverser.loops()
      loops(): number;
      loopsP(): Promise<number>;
      // public abstract void com.tinkerpop.gremlin.process.Traverser$Admin.merge(com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<?>)
      merge(arg0: Traverser$Admin): void;
      mergeP(arg0: Traverser$Admin): Promise<void>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default <A> A com.tinkerpop.gremlin.process.Traverser.path(java.lang.String)
      path(arg0: string_t): object_t;
      pathP(arg0: string_t): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.Path com.tinkerpop.gremlin.process.Traverser.path()
      path(): Path;
      pathP(): Promise<Path>;
      // public abstract void com.tinkerpop.gremlin.process.Traverser$Admin.resetLoops()
      resetLoops(): void;
      resetLoopsP(): Promise<void>;
      // public abstract <S> void com.tinkerpop.gremlin.process.Traverser.sack(S)
      sack(arg0: object_t): void;
      sackP(arg0: object_t): Promise<void>;
      // public abstract <S> S com.tinkerpop.gremlin.process.Traverser.sack()
      sack(): object_t;
      sackP(): Promise<object_t>;
      // public abstract void com.tinkerpop.gremlin.process.Traverser$Admin.set(T)
      set(arg0: object_t): void;
      setP(arg0: object_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traverser$Admin.setBulk(long)
      setBulk(arg0: long_t): void;
      setBulkP(arg0: long_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traverser$Admin.setSideEffects(com.tinkerpop.gremlin.process.TraversalSideEffects)
      setSideEffects(arg0: TraversalSideEffects): void;
      setSideEffectsP(arg0: TraversalSideEffects): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traverser$Admin.setStepId(java.lang.String)
      setStepId(arg0: string_t): void;
      setStepIdP(arg0: string_t): Promise<void>;
      // public default void com.tinkerpop.gremlin.process.Traverser.sideEffects(java.lang.String,java.lang.Object)
      sideEffects(arg0: string_t, arg1: object_t): void;
      sideEffectsP(arg0: string_t, arg1: object_t): Promise<void>;
      // public default <A> A com.tinkerpop.gremlin.process.Traverser.sideEffects(java.lang.String)
      sideEffects(arg0: string_t): object_t;
      sideEffectsP(arg0: string_t): Promise<object_t>;
      // public abstract <R> com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<R> com.tinkerpop.gremlin.process.Traverser$Admin.split(R,com.tinkerpop.gremlin.process.Step<T, R>)
      split(arg0: object_t, arg1: Step): Traverser$Admin;
      splitP(arg0: object_t, arg1: Step): Promise<Traverser$Admin>;
      // public abstract com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<T> com.tinkerpop.gremlin.process.Traverser$Admin.split()
      split(): Traverser$Admin;
      splitP(): Promise<Traverser$Admin>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EmptyTraverser {
      export interface Static {
        // public static <R> com.tinkerpop.gremlin.process.util.EmptyTraverser<R> com.tinkerpop.gremlin.process.util.EmptyTraverser.instance()
        instance(): EmptyTraverser;
        instanceP(): Promise<EmptyTraverser>;
        HALT: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface ExpandableStepIterator extends Java.java.lang.Object,Java.java.util.Iterator {
      // public void com.tinkerpop.gremlin.process.util.ExpandableStepIterator.add(com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<E>)
      add(arg0: Traverser$Admin): void;
      addP(arg0: Traverser$Admin): Promise<void>;
      // public void com.tinkerpop.gremlin.process.util.ExpandableStepIterator.add(java.util.Iterator<com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<E>>)
      add(arg0: Iterator): void;
      addP(arg0: Iterator): Promise<void>;
      // public void com.tinkerpop.gremlin.process.util.ExpandableStepIterator.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<E> com.tinkerpop.gremlin.process.util.ExpandableStepIterator.next()
      next(): Traverser$Admin;
      nextP(): Promise<Traverser$Admin>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ExpandableStepIterator {
      export interface Static {
        new (arg0: Step): com.tinkerpop.gremlin.process.util.ExpandableStepIterator;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface FastNoSuchElementException extends Java.java.util.NoSuchElementException {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressed(arg0: Throwable): void;
      addSuppressedP(arg0: Throwable): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTrace(): Throwable;
      fillInStackTraceP(): Promise<Throwable>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCause(): Throwable;
      getCauseP(): Promise<Throwable>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressed(): Throwable[];
      getSuppressedP(): Promise<Throwable[]>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCause(arg0: Throwable): Throwable;
      initCauseP(arg0: Throwable): Promise<Throwable>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module FastNoSuchElementException {
      export interface Static {
        // public static java.util.NoSuchElementException com.tinkerpop.gremlin.process.util.FastNoSuchElementException.instance()
        instance(): NoSuchElementException;
        instanceP(): Promise<NoSuchElementException>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface FunctionRing extends Java.java.lang.Object,Java.java.lang.Cloneable {
      // public void com.tinkerpop.gremlin.process.util.FunctionRing.addFunction(java.util.function.Function<A, B>)
      addFunction(arg0: Function): void;
      addFunctionP(arg0: Function): Promise<void>;
      // public com.tinkerpop.gremlin.process.util.FunctionRing<A, B> com.tinkerpop.gremlin.process.util.FunctionRing.clone() throws java.lang.CloneNotSupportedException
      clone(): FunctionRing;
      cloneP(): Promise<FunctionRing>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.FunctionRing.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.util.List<java.util.function.Function<A, B>> com.tinkerpop.gremlin.process.util.FunctionRing.getFunctions()
      getFunctions(): List;
      getFunctionsP(): Promise<List>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean com.tinkerpop.gremlin.process.util.FunctionRing.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public java.util.function.Function<A, B> com.tinkerpop.gremlin.process.util.FunctionRing.next()
      next(): Function;
      nextP(): Promise<Function>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void com.tinkerpop.gremlin.process.util.FunctionRing.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public int com.tinkerpop.gremlin.process.util.FunctionRing.size()
      size(): number;
      sizeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module FunctionRing {
      export interface Static {
        new (...arg0: Function[]): com.tinkerpop.gremlin.process.util.FunctionRing;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface GraphTraversalSourceGenerator extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GraphTraversalSourceGenerator {
      export interface Static {
        new (): com.tinkerpop.gremlin.process.util.GraphTraversalSourceGenerator;
        // public static void com.tinkerpop.gremlin.process.util.GraphTraversalSourceGenerator.generateSource(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws java.lang.Exception
        generateSource(arg0: string_t, arg1: string_t, arg2: string_t, arg3: string_t, arg4: string_t): void;
        generateSourceP(arg0: string_t, arg1: string_t, arg2: string_t, arg3: string_t, arg4: string_t): Promise<void>;
        // public static void com.tinkerpop.gremlin.process.util.GraphTraversalSourceGenerator.main(java.lang.String[]) throws java.lang.Exception
        main(arg0: array_t<string_t>): void;
        mainP(arg0: array_t<string_t>): Promise<void>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface ImmutablePath extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.process.Path,Java.java.lang.Cloneable {
      // public abstract void com.tinkerpop.gremlin.process.Path.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public com.tinkerpop.gremlin.process.util.ImmutablePath com.tinkerpop.gremlin.process.util.ImmutablePath.clone() throws java.lang.CloneNotSupportedException
      clone(): ImmutablePath;
      cloneP(): Promise<ImmutablePath>;
      // public abstract com.tinkerpop.gremlin.process.Path com.tinkerpop.gremlin.process.Path.clone() throws java.lang.CloneNotSupportedException
      clone(): Path;
      cloneP(): Promise<Path>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.ImmutablePath.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract com.tinkerpop.gremlin.process.Path com.tinkerpop.gremlin.process.Path.extend(java.lang.Object,java.lang.String...)
      extend(arg0: object_t, ...arg1: string_t[]): Path;
      extend(arg0: object_t, arg1: array_t<string_t>): Path;
      extendP(arg0: object_t, ...arg1: string_t[]): Promise<Path>;
      extendP(arg0: object_t, arg1: array_t<string_t>): Promise<Path>;
      // public default void com.tinkerpop.gremlin.process.Path.forEach(java.util.function.BiConsumer<java.lang.Object, java.util.Set<java.lang.String>>)
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public default void com.tinkerpop.gremlin.process.Path.forEach(java.util.function.Consumer<java.lang.Object>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public default <A> A com.tinkerpop.gremlin.process.Path.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public default <A> A com.tinkerpop.gremlin.process.Path.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default boolean com.tinkerpop.gremlin.process.Path.hasLabel(java.lang.String)
      hasLabel(arg0: string_t): boolean;
      hasLabelP(arg0: string_t): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.process.Path.isSimple()
      isSimple(): boolean;
      isSimpleP(): Promise<boolean>;
      // public abstract java.util.List<java.util.Set<java.lang.String>> com.tinkerpop.gremlin.process.Path.labels()
      labels(): List;
      labelsP(): Promise<List>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract java.util.List<java.lang.Object> com.tinkerpop.gremlin.process.Path.objects()
      objects(): List;
      objectsP(): Promise<List>;
      // public default int com.tinkerpop.gremlin.process.Path.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.stream.Stream<org.javatuples.Pair<java.lang.Object, java.util.Set<java.lang.String>>> com.tinkerpop.gremlin.process.Path.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ImmutablePath {
      export interface Static {
        // public static com.tinkerpop.gremlin.process.Path com.tinkerpop.gremlin.process.util.ImmutablePath.make()
        make(): Path;
        makeP(): Promise<Path>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface MapHelper extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MapHelper {
      export interface Static {
        new (): com.tinkerpop.gremlin.process.util.MapHelper;
        // public static <T,U> void com.tinkerpop.gremlin.process.util.MapHelper.incr(java.util.Map<T, java.util.List<U>>,T,U)
        incr(arg0: Map, arg1: object_t, arg2: object_t): void;
        incrP(arg0: Map, arg1: object_t, arg2: object_t): Promise<void>;
        // public static <T> void com.tinkerpop.gremlin.process.util.MapHelper.incr(java.util.Map<T, java.lang.Double>,T,java.lang.Double)
        incr(arg0: Map, arg1: object_t, arg2: double_t): void;
        incrP(arg0: Map, arg1: object_t, arg2: double_t): Promise<void>;
        // public static <T> void com.tinkerpop.gremlin.process.util.MapHelper.incr(java.util.Map<T, java.lang.Long>,T,java.lang.Long)
        incr(arg0: Map, arg1: object_t, arg2: long_t): void;
        incrP(arg0: Map, arg1: object_t, arg2: long_t): Promise<void>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface MultiIterator extends Java.java.lang.Object,Java.java.util.Iterator {
      // public void com.tinkerpop.gremlin.process.util.MultiIterator.addIterator(java.util.Iterator<T>)
      addIterator(arg0: Iterator): void;
      addIteratorP(arg0: Iterator): Promise<void>;
      // public void com.tinkerpop.gremlin.process.util.MultiIterator.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MultiIterator {
      export interface Static {
        new (): com.tinkerpop.gremlin.process.util.MultiIterator;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface MutablePath extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.process.Path {
      // public abstract void com.tinkerpop.gremlin.process.Path.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public com.tinkerpop.gremlin.process.util.MutablePath com.tinkerpop.gremlin.process.util.MutablePath.clone() throws java.lang.CloneNotSupportedException
      clone(): MutablePath;
      cloneP(): Promise<MutablePath>;
      // public abstract com.tinkerpop.gremlin.process.Path com.tinkerpop.gremlin.process.Path.clone() throws java.lang.CloneNotSupportedException
      clone(): Path;
      cloneP(): Promise<Path>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.MutablePath.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract com.tinkerpop.gremlin.process.Path com.tinkerpop.gremlin.process.Path.extend(java.lang.Object,java.lang.String...)
      extend(arg0: object_t, ...arg1: string_t[]): Path;
      extend(arg0: object_t, arg1: array_t<string_t>): Path;
      extendP(arg0: object_t, ...arg1: string_t[]): Promise<Path>;
      extendP(arg0: object_t, arg1: array_t<string_t>): Promise<Path>;
      // public default void com.tinkerpop.gremlin.process.Path.forEach(java.util.function.BiConsumer<java.lang.Object, java.util.Set<java.lang.String>>)
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public default void com.tinkerpop.gremlin.process.Path.forEach(java.util.function.Consumer<java.lang.Object>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public default <A> A com.tinkerpop.gremlin.process.Path.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public default <A> A com.tinkerpop.gremlin.process.Path.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default boolean com.tinkerpop.gremlin.process.Path.hasLabel(java.lang.String)
      hasLabel(arg0: string_t): boolean;
      hasLabelP(arg0: string_t): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.process.Path.isSimple()
      isSimple(): boolean;
      isSimpleP(): Promise<boolean>;
      // public abstract java.util.List<java.util.Set<java.lang.String>> com.tinkerpop.gremlin.process.Path.labels()
      labels(): List;
      labelsP(): Promise<List>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract java.util.List<java.lang.Object> com.tinkerpop.gremlin.process.Path.objects()
      objects(): List;
      objectsP(): Promise<List>;
      // public default int com.tinkerpop.gremlin.process.Path.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.stream.Stream<org.javatuples.Pair<java.lang.Object, java.util.Set<java.lang.String>>> com.tinkerpop.gremlin.process.Path.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MutablePath {
      export interface Static {
        // public static com.tinkerpop.gremlin.process.Path com.tinkerpop.gremlin.process.util.MutablePath.make()
        make(): Path;
        makeP(): Promise<Path>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface SideEffectHelper extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module SideEffectHelper {
      export interface Static {
        new (): com.tinkerpop.gremlin.process.util.SideEffectHelper;
        // public static void com.tinkerpop.gremlin.process.util.SideEffectHelper.validateSideEffect(java.lang.String,java.lang.Object) throws java.lang.IllegalArgumentException
        validateSideEffect(arg0: string_t, arg1: object_t): void;
        validateSideEffectP(arg0: string_t, arg1: object_t): Promise<void>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface SparsePath extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.process.Path {
      // public abstract void com.tinkerpop.gremlin.process.Path.addLabel(java.lang.String)
      addLabel(arg0: string_t): void;
      addLabelP(arg0: string_t): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.Path com.tinkerpop.gremlin.process.Path.clone() throws java.lang.CloneNotSupportedException
      clone(): Path;
      cloneP(): Promise<Path>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.SparsePath.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract com.tinkerpop.gremlin.process.Path com.tinkerpop.gremlin.process.Path.extend(java.lang.Object,java.lang.String...)
      extend(arg0: object_t, ...arg1: string_t[]): Path;
      extend(arg0: object_t, arg1: array_t<string_t>): Path;
      extendP(arg0: object_t, ...arg1: string_t[]): Promise<Path>;
      extendP(arg0: object_t, arg1: array_t<string_t>): Promise<Path>;
      // public default void com.tinkerpop.gremlin.process.Path.forEach(java.util.function.BiConsumer<java.lang.Object, java.util.Set<java.lang.String>>)
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public default void com.tinkerpop.gremlin.process.Path.forEach(java.util.function.Consumer<java.lang.Object>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public default <A> A com.tinkerpop.gremlin.process.Path.get(java.lang.String) throws java.lang.IllegalArgumentException
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public default <A> A com.tinkerpop.gremlin.process.Path.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default boolean com.tinkerpop.gremlin.process.Path.hasLabel(java.lang.String)
      hasLabel(arg0: string_t): boolean;
      hasLabelP(arg0: string_t): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.process.Path.isSimple()
      isSimple(): boolean;
      isSimpleP(): Promise<boolean>;
      // public abstract java.util.List<java.util.Set<java.lang.String>> com.tinkerpop.gremlin.process.Path.labels()
      labels(): List;
      labelsP(): Promise<List>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract java.util.List<java.lang.Object> com.tinkerpop.gremlin.process.Path.objects()
      objects(): List;
      objectsP(): Promise<List>;
      // public default int com.tinkerpop.gremlin.process.Path.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.stream.Stream<org.javatuples.Pair<java.lang.Object, java.util.Set<java.lang.String>>> com.tinkerpop.gremlin.process.Path.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module SparsePath {
      export interface Static {
        // public static com.tinkerpop.gremlin.process.util.SparsePath com.tinkerpop.gremlin.process.util.SparsePath.make()
        make(): SparsePath;
        makeP(): Promise<SparsePath>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface StepMetrics extends Java.java.lang.Object {
      // public abstract long com.tinkerpop.gremlin.process.util.StepMetrics.getCount()
      getCount(): longValue_t;
      getCountP(): Promise<longValue_t>;
      // public abstract java.lang.String com.tinkerpop.gremlin.process.util.StepMetrics.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public abstract java.lang.Double com.tinkerpop.gremlin.process.util.StepMetrics.getPercentageDuration()
      getPercentageDuration(): number;
      getPercentageDurationP(): Promise<number>;
      // public abstract double com.tinkerpop.gremlin.process.util.StepMetrics.getTimeMs()
      getTimeMs(): number;
      getTimeMsP(): Promise<number>;
      // public abstract long com.tinkerpop.gremlin.process.util.StepMetrics.getTimeNs()
      getTimeNs(): longValue_t;
      getTimeNsP(): Promise<longValue_t>;
      // public abstract long com.tinkerpop.gremlin.process.util.StepMetrics.getTraversers()
      getTraversers(): longValue_t;
      getTraversersP(): Promise<longValue_t>;
    }
    export module StepMetrics {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface StepPosition extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.String com.tinkerpop.gremlin.process.util.StepPosition.nextXId()
      nextXId(): string;
      nextXIdP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      x: number;
      y: number;
      z: number;
      parentId: string;
    }
    export module StepPosition {
      export interface Static {
        new (): com.tinkerpop.gremlin.process.util.StepPosition;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface StepTimer extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.process.util.StepMetrics {
      // public void com.tinkerpop.gremlin.process.util.StepTimer.aggregate(com.tinkerpop.gremlin.process.util.StepTimer)
      aggregate(arg0: StepTimer): void;
      aggregateP(arg0: StepTimer): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void com.tinkerpop.gremlin.process.util.StepTimer.finish(com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<?>)
      finish(arg0: Traverser$Admin): void;
      finishP(arg0: Traverser$Admin): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public abstract long com.tinkerpop.gremlin.process.util.StepMetrics.getCount()
      getCount(): longValue_t;
      getCountP(): Promise<longValue_t>;
      // public java.lang.String com.tinkerpop.gremlin.process.util.StepTimer.getLabel()
      getLabel(): string;
      getLabelP(): Promise<string>;
      // public abstract java.lang.String com.tinkerpop.gremlin.process.util.StepMetrics.getName()
      getName(): string;
      getNameP(): Promise<string>;
      // public abstract java.lang.Double com.tinkerpop.gremlin.process.util.StepMetrics.getPercentageDuration()
      getPercentageDuration(): number;
      getPercentageDurationP(): Promise<number>;
      // public java.lang.String com.tinkerpop.gremlin.process.util.StepTimer.getShortName(int)
      getShortName(arg0: integer_t): string;
      getShortNameP(arg0: integer_t): Promise<string>;
      // public abstract double com.tinkerpop.gremlin.process.util.StepMetrics.getTimeMs()
      getTimeMs(): number;
      getTimeMsP(): Promise<number>;
      // public abstract long com.tinkerpop.gremlin.process.util.StepMetrics.getTimeNs()
      getTimeNs(): longValue_t;
      getTimeNsP(): Promise<longValue_t>;
      // public abstract long com.tinkerpop.gremlin.process.util.StepMetrics.getTraversers()
      getTraversers(): longValue_t;
      getTraversersP(): Promise<longValue_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void com.tinkerpop.gremlin.process.util.StepTimer.setPercentageDuration(double)
      setPercentageDuration(arg0: double_t): void;
      setPercentageDurationP(arg0: double_t): Promise<void>;
      // public final void com.tinkerpop.gremlin.process.util.StepTimer.start()
      start(): void;
      startP(): Promise<void>;
      // public final void com.tinkerpop.gremlin.process.util.StepTimer.stop()
      stop(): void;
      stopP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module StepTimer {
      export interface Static {
        new (arg0: string_t, arg1: string_t): com.tinkerpop.gremlin.process.util.StepTimer;
        new (arg0: Step): com.tinkerpop.gremlin.process.util.StepTimer;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface TraversalHelper extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalHelper {
      export interface Static {
        new (): com.tinkerpop.gremlin.process.util.TraversalHelper;
        // public static <S> void com.tinkerpop.gremlin.process.util.TraversalHelper.addToCollection(java.util.Collection<S>,S,long)
        addToCollection(arg0: Collection, arg1: object_t, arg2: long_t): void;
        addToCollectionP(arg0: Collection, arg1: object_t, arg2: long_t): Promise<void>;
        // public static <S> void com.tinkerpop.gremlin.process.util.TraversalHelper.addToCollectionUnrollIterator(java.util.Collection<S>,S,long)
        addToCollectionUnrollIterator(arg0: Collection, arg1: object_t, arg2: long_t): void;
        addToCollectionUnrollIteratorP(arg0: Collection, arg1: object_t, arg2: long_t): Promise<void>;
        // public static boolean com.tinkerpop.gremlin.process.util.TraversalHelper.areEqual(java.util.Iterator,java.util.Iterator)
        areEqual(arg0: Iterator, arg1: Iterator): boolean;
        areEqualP(arg0: Iterator, arg1: Iterator): Promise<boolean>;
        // public static <S,E> com.tinkerpop.gremlin.process.Step<?, E> com.tinkerpop.gremlin.process.util.TraversalHelper.getEnd(com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<S, E>)
        getEnd(arg0: Traversal$Admin): Step;
        getEndP(arg0: Traversal$Admin): Promise<Step>;
        // public static java.util.List<java.lang.String> com.tinkerpop.gremlin.process.util.TraversalHelper.getLabelsUpTo(com.tinkerpop.gremlin.process.Step<?, ?>,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        getLabelsUpTo(arg0: Step, arg1: Traversal$Admin): List;
        getLabelsUpToP(arg0: Step, arg1: Traversal$Admin): Promise<List>;
        // public static <S> java.util.Optional<S> com.tinkerpop.gremlin.process.util.TraversalHelper.getLastStepOfAssignableClass(java.lang.Class<S>,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        getLastStepOfAssignableClass(arg0: object_t, arg1: Traversal$Admin): object_t;
        getLastStepOfAssignableClassP(arg0: object_t, arg1: Traversal$Admin): Promise<object_t>;
        // public static java.util.Set<com.tinkerpop.gremlin.process.traverser.TraverserRequirement> com.tinkerpop.gremlin.process.util.TraversalHelper.getRequirements(com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        getRequirements(arg0: Traversal$Admin): Set;
        getRequirementsP(arg0: Traversal$Admin): Promise<Set>;
        // public static com.tinkerpop.gremlin.process.Traversal<?, ?> com.tinkerpop.gremlin.process.util.TraversalHelper.getRootTraversal(com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        getRootTraversal(arg0: Traversal$Admin): Traversal;
        getRootTraversalP(arg0: Traversal$Admin): Promise<Traversal>;
        // public static java.lang.String com.tinkerpop.gremlin.process.util.TraversalHelper.getShortName(com.tinkerpop.gremlin.process.Step,int)
        getShortName(arg0: Step, arg1: integer_t): string;
        getShortNameP(arg0: Step, arg1: integer_t): Promise<string>;
        // public static <S,E> com.tinkerpop.gremlin.process.Step<S, ?> com.tinkerpop.gremlin.process.util.TraversalHelper.getStart(com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<S, E>)
        getStart(arg0: Traversal$Admin): Step;
        getStartP(arg0: Traversal$Admin): Promise<Step>;
        // public static <S,E> com.tinkerpop.gremlin.process.Step<S, E> com.tinkerpop.gremlin.process.util.TraversalHelper.getStepById(java.lang.String,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        getStepById(arg0: string_t, arg1: Traversal$Admin): Step;
        getStepByIdP(arg0: string_t, arg1: Traversal$Admin): Promise<Step>;
        // public static <S,E> com.tinkerpop.gremlin.process.Step<S, E> com.tinkerpop.gremlin.process.util.TraversalHelper.getStepByLabel(java.lang.String,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        getStepByLabel(arg0: string_t, arg1: Traversal$Admin): Step;
        getStepByLabelP(arg0: string_t, arg1: Traversal$Admin): Promise<Step>;
        // public static <S> java.util.List<S> com.tinkerpop.gremlin.process.util.TraversalHelper.getStepsOfAssignableClass(java.lang.Class<S>,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        getStepsOfAssignableClass(arg0: object_t, arg1: Traversal$Admin): List;
        getStepsOfAssignableClassP(arg0: object_t, arg1: Traversal$Admin): Promise<List>;
        // public static <S> java.util.List<S> com.tinkerpop.gremlin.process.util.TraversalHelper.getStepsOfAssignableClassRecurssively(java.lang.Class<S>,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        getStepsOfAssignableClassRecurssively(arg0: object_t, arg1: Traversal$Admin): List;
        getStepsOfAssignableClassRecurssivelyP(arg0: object_t, arg1: Traversal$Admin): Promise<List>;
        // public static <S> java.util.List<S> com.tinkerpop.gremlin.process.util.TraversalHelper.getStepsOfClass(java.lang.Class<S>,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        getStepsOfClass(arg0: object_t, arg1: Traversal$Admin): List;
        getStepsOfClassP(arg0: object_t, arg1: Traversal$Admin): Promise<List>;
        // public static java.util.List<com.tinkerpop.gremlin.process.Step<?, ?>> com.tinkerpop.gremlin.process.util.TraversalHelper.getStepsUpTo(com.tinkerpop.gremlin.process.Step<?, ?>,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        getStepsUpTo(arg0: Step, arg1: Traversal$Admin): List;
        getStepsUpToP(arg0: Step, arg1: Traversal$Admin): Promise<List>;
        // public static boolean com.tinkerpop.gremlin.process.util.TraversalHelper.hasLabel(java.lang.String,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        hasLabel(arg0: string_t, arg1: Traversal$Admin): boolean;
        hasLabelP(arg0: string_t, arg1: Traversal$Admin): Promise<boolean>;
        // public static boolean com.tinkerpop.gremlin.process.util.TraversalHelper.hasStepOfAssignableClass(java.lang.Class,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        hasStepOfAssignableClass(arg0: object_t, arg1: Traversal$Admin): boolean;
        hasStepOfAssignableClassP(arg0: object_t, arg1: Traversal$Admin): Promise<boolean>;
        // public static boolean com.tinkerpop.gremlin.process.util.TraversalHelper.hasStepOfClass(java.lang.Class,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        hasStepOfClass(arg0: object_t, arg1: Traversal$Admin): boolean;
        hasStepOfClassP(arg0: object_t, arg1: Traversal$Admin): Promise<boolean>;
        // public static <S,E> void com.tinkerpop.gremlin.process.util.TraversalHelper.insertAfterStep(com.tinkerpop.gremlin.process.Step<S, E>,com.tinkerpop.gremlin.process.Step<?, S>,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        insertAfterStep(arg0: Step, arg1: Step, arg2: Traversal$Admin): void;
        insertAfterStepP(arg0: Step, arg1: Step, arg2: Traversal$Admin): Promise<void>;
        // public static <S,E> void com.tinkerpop.gremlin.process.util.TraversalHelper.insertBeforeStep(com.tinkerpop.gremlin.process.Step<S, E>,com.tinkerpop.gremlin.process.Step<E, ?>,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        insertBeforeStep(arg0: Step, arg1: Step, arg2: Traversal$Admin): void;
        insertBeforeStepP(arg0: Step, arg1: Step, arg2: Traversal$Admin): Promise<void>;
        // public static <S,E> com.tinkerpop.gremlin.process.Step<?, E> com.tinkerpop.gremlin.process.util.TraversalHelper.insertTraversal(com.tinkerpop.gremlin.process.Step<?, S>,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<S, E>,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        insertTraversal(arg0: Step, arg1: Traversal$Admin, arg2: Traversal$Admin): Step;
        insertTraversalP(arg0: Step, arg1: Traversal$Admin, arg2: Traversal$Admin): Promise<Step>;
        // public static <S,E> com.tinkerpop.gremlin.process.Step<?, E> com.tinkerpop.gremlin.process.util.TraversalHelper.insertTraversal(int,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<S, E>,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        insertTraversal(arg0: integer_t, arg1: Traversal$Admin, arg2: Traversal$Admin): Step;
        insertTraversalP(arg0: integer_t, arg1: Traversal$Admin, arg2: Traversal$Admin): Promise<Step>;
        // public static boolean com.tinkerpop.gremlin.process.util.TraversalHelper.isReversible(com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        isReversible(arg0: Traversal$Admin): boolean;
        isReversibleP(arg0: Traversal$Admin): Promise<boolean>;
        // public static java.lang.String com.tinkerpop.gremlin.process.util.TraversalHelper.makeStepString(com.tinkerpop.gremlin.process.Step<?, ?>,java.lang.Object...)
        makeStepString(arg0: Step, ...arg1: object_t[]): string;
        makeStepString(arg0: Step, arg1: object_array_t): string;
        makeStepStringP(arg0: Step, ...arg1: object_t[]): Promise<string>;
        makeStepStringP(arg0: Step, arg1: object_array_t): Promise<string>;
        // public static java.lang.String com.tinkerpop.gremlin.process.util.TraversalHelper.makeTraversalString(com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        makeTraversalString(arg0: Traversal$Admin): string;
        makeTraversalStringP(arg0: Traversal$Admin): Promise<string>;
        // public static void com.tinkerpop.gremlin.process.util.TraversalHelper.reIdSteps(com.tinkerpop.gremlin.process.util.StepPosition,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        reIdSteps(arg0: StepPosition, arg1: Traversal$Admin): void;
        reIdStepsP(arg0: StepPosition, arg1: Traversal$Admin): Promise<void>;
        // public static void com.tinkerpop.gremlin.process.util.TraversalHelper.reLinkSteps(com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        reLinkSteps(arg0: Traversal$Admin): void;
        reLinkStepsP(arg0: Traversal$Admin): Promise<void>;
        // public static <S,E> void com.tinkerpop.gremlin.process.util.TraversalHelper.replaceStep(com.tinkerpop.gremlin.process.Step<S, E>,com.tinkerpop.gremlin.process.Step<S, E>,com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<?, ?>)
        replaceStep(arg0: Step, arg1: Step, arg2: Traversal$Admin): void;
        replaceStepP(arg0: Step, arg1: Step, arg2: Traversal$Admin): Promise<void>;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface TraversalMatrix extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public <A,B> com.tinkerpop.gremlin.process.Step<A, B> com.tinkerpop.gremlin.process.util.TraversalMatrix.getStepById(java.lang.String)
      getStepById(arg0: string_t): Step;
      getStepByIdP(arg0: string_t): Promise<Step>;
      // public com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.util.TraversalMatrix.getTraversal()
      getTraversal(): Traversal;
      getTraversalP(): Promise<Traversal>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalMatrix {
      export interface Static {
        new (arg0: Traversal): com.tinkerpop.gremlin.process.util.TraversalMatrix;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface TraversalMetrics extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.util.Set<java.lang.String> com.tinkerpop.gremlin.process.util.TraversalMetrics.getStepLabels()
      getStepLabels(): Set;
      getStepLabelsP(): Promise<Set>;
      // public com.tinkerpop.gremlin.process.util.StepMetrics com.tinkerpop.gremlin.process.util.TraversalMetrics.getStepMetrics(java.lang.String)
      getStepMetrics(arg0: string_t): StepMetrics;
      getStepMetricsP(arg0: string_t): Promise<StepMetrics>;
      // public double com.tinkerpop.gremlin.process.util.TraversalMetrics.getTotalStepDurationMs()
      getTotalStepDurationMs(): number;
      getTotalStepDurationMsP(): Promise<number>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalMetrics {
      export interface Static {
        // public static final void com.tinkerpop.gremlin.process.util.TraversalMetrics.finish(com.tinkerpop.gremlin.process.Step<?, ?>,com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<?>)
        finish(arg0: Step, arg1: Traverser$Admin): void;
        finishP(arg0: Step, arg1: Traverser$Admin): Promise<void>;
        // public static com.tinkerpop.gremlin.process.util.TraversalMetrics com.tinkerpop.gremlin.process.util.TraversalMetrics.merge(java.util.Iterator<com.tinkerpop.gremlin.process.util.TraversalMetrics>)
        merge(arg0: Iterator): TraversalMetrics;
        mergeP(arg0: Iterator): Promise<TraversalMetrics>;
        // public static final void com.tinkerpop.gremlin.process.util.TraversalMetrics.start(com.tinkerpop.gremlin.process.Step<?, ?>)
        start(arg0: Step): void;
        startP(arg0: Step): Promise<void>;
        // public static final void com.tinkerpop.gremlin.process.util.TraversalMetrics.stop(com.tinkerpop.gremlin.process.Step<?, ?>)
        stop(arg0: Step): void;
        stopP(arg0: Step): Promise<void>;
        PROFILING_ENABLED: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface TraversalRing extends Java.java.lang.Object,Java.java.lang.Cloneable {
      // public com.tinkerpop.gremlin.process.util.TraversalRing<S, E> com.tinkerpop.gremlin.process.util.TraversalRing.clone() throws java.lang.CloneNotSupportedException
      clone(): TraversalRing;
      cloneP(): Promise<TraversalRing>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.TraversalRing.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void com.tinkerpop.gremlin.process.util.TraversalRing.forEach(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traversal<S, E>>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.util.List<com.tinkerpop.gremlin.process.Traversal<S, E>> com.tinkerpop.gremlin.process.util.TraversalRing.getTraversals()
      getTraversals(): List;
      getTraversalsP(): Promise<List>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.util.TraversalRing.next()
      next(): Traversal;
      nextP(): Promise<Traversal>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void com.tinkerpop.gremlin.process.util.TraversalRing.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public int com.tinkerpop.gremlin.process.util.TraversalRing.size()
      size(): number;
      sizeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraversalRing {
      export interface Static {
        new (...arg0: Traversal[]): com.tinkerpop.gremlin.process.util.TraversalRing;
      }
    }
  }

  export module com.tinkerpop.gremlin.process.util {
    export interface TraverserSet extends Java.java.util.AbstractSet,Java.java.util.Collection,Java.java.util.Set {
      // public boolean com.tinkerpop.gremlin.process.util.TraverserSet.add(com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<S>)
      add(arg0: Traverser$Admin): boolean;
      addP(arg0: Traverser$Admin): Promise<boolean>;
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public long com.tinkerpop.gremlin.process.util.TraverserSet.bulkSize()
      bulkSize(): longValue_t;
      bulkSizeP(): Promise<longValue_t>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<S> com.tinkerpop.gremlin.process.util.TraverserSet.element()
      element(): Traverser$Admin;
      elementP(): Promise<Traverser$Admin>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.TraverserSet.element()
      element(): object_t;
      elementP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<S> com.tinkerpop.gremlin.process.util.TraverserSet.get(com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<S>)
      get(arg0: Traverser$Admin): Traverser$Admin;
      getP(arg0: Traverser$Admin): Promise<Traverser$Admin>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public boolean com.tinkerpop.gremlin.process.util.TraverserSet.offer(com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<S>)
      offer(arg0: Traverser$Admin): boolean;
      offerP(arg0: Traverser$Admin): Promise<boolean>;
      // public boolean com.tinkerpop.gremlin.process.util.TraverserSet.offer(java.lang.Object)
      offer(arg0: object_t): boolean;
      offerP(arg0: object_t): Promise<boolean>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<S> com.tinkerpop.gremlin.process.util.TraverserSet.peek()
      peek(): Traverser$Admin;
      peekP(): Promise<Traverser$Admin>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.TraverserSet.peek()
      peek(): object_t;
      peekP(): Promise<object_t>;
      // public com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<S> com.tinkerpop.gremlin.process.util.TraverserSet.poll()
      poll(): Traverser$Admin;
      pollP(): Promise<Traverser$Admin>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.TraverserSet.poll()
      poll(): object_t;
      pollP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public com.tinkerpop.gremlin.process.Traverser.com.tinkerpop.gremlin.process.Traverser$Admin<S> com.tinkerpop.gremlin.process.util.TraverserSet.remove()
      remove(): Traverser$Admin;
      removeP(): Promise<Traverser$Admin>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.TraverserSet.remove()
      remove(): object_t;
      removeP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public void com.tinkerpop.gremlin.process.util.TraverserSet.sort(java.util.Comparator<com.tinkerpop.gremlin.process.Traverser<S>>)
      sort(arg0: object_t): void;
      sortP(arg0: object_t): Promise<void>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TraverserSet {
      export interface Static {
        new (arg0: Traverser$Admin): com.tinkerpop.gremlin.process.util.TraverserSet;
        new (): com.tinkerpop.gremlin.process.util.TraverserSet;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Compare extends Java.java.lang.Enum,Java.java.util.function_.BiPredicate {
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super T, ? super U>)
      and(arg0: BiPredicate): BiPredicate;
      andP(arg0: BiPredicate): Promise<BiPredicate>;
      // public java.lang.String com.tinkerpop.gremlin.structure.Compare.asString()
      asString(): string;
      asStringP(): Promise<string>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): object_t;
      getDeclaringClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.negate()
      negate(): BiPredicate;
      negateP(): Promise<BiPredicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public com.tinkerpop.gremlin.structure.Compare com.tinkerpop.gremlin.structure.Compare.opposite()
      opposite(): Compare;
      oppositeP(): Promise<Compare>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super T, ? super U>)
      or(arg0: BiPredicate): BiPredicate;
      orP(arg0: BiPredicate): Promise<BiPredicate>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public abstract boolean java.util.function.BiPredicate.test(T,U)
      test(arg0: object_t, arg1: object_t): boolean;
      testP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Compare {
      export interface Static {
        // public static com.tinkerpop.gremlin.structure.Compare com.tinkerpop.gremlin.structure.Compare.fromString(java.lang.String)
        fromString(arg0: string_t): Compare;
        fromStringP(arg0: string_t): Promise<Compare>;
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: object_t, arg1: string_t): Enum;
        valueOfP(arg0: object_t, arg1: string_t): Promise<Enum>;
        // public static com.tinkerpop.gremlin.structure.Compare com.tinkerpop.gremlin.structure.Compare.valueOf(java.lang.String)
        valueOf(arg0: string_t): Compare;
        valueOfP(arg0: string_t): Promise<Compare>;
        // public static com.tinkerpop.gremlin.structure.Compare[] com.tinkerpop.gremlin.structure.Compare.values()
        values(): Compare[];
        valuesP(): Promise<Compare[]>;
        eq: Compare;
        neq: Compare;
        gt: Compare;
        gte: Compare;
        lt: Compare;
        lte: Compare;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Contains extends Java.java.lang.Enum,Java.java.util.function_.BiPredicate {
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super T, ? super U>)
      and(arg0: BiPredicate): BiPredicate;
      andP(arg0: BiPredicate): Promise<BiPredicate>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): object_t;
      getDeclaringClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.negate()
      negate(): BiPredicate;
      negateP(): Promise<BiPredicate>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public com.tinkerpop.gremlin.structure.Contains com.tinkerpop.gremlin.structure.Contains.opposite()
      opposite(): Contains;
      oppositeP(): Promise<Contains>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super T, ? super U>)
      or(arg0: BiPredicate): BiPredicate;
      orP(arg0: BiPredicate): Promise<BiPredicate>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public abstract boolean com.tinkerpop.gremlin.structure.Contains.test(java.lang.Object,java.util.Collection)
      test(arg0: object_t, arg1: Collection): boolean;
      testP(arg0: object_t, arg1: Collection): Promise<boolean>;
      // public abstract boolean java.util.function.BiPredicate.test(T,U)
      test(arg0: object_t, arg1: object_t): boolean;
      testP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Contains {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: object_t, arg1: string_t): Enum;
        valueOfP(arg0: object_t, arg1: string_t): Promise<Enum>;
        // public static com.tinkerpop.gremlin.structure.Contains com.tinkerpop.gremlin.structure.Contains.valueOf(java.lang.String)
        valueOf(arg0: string_t): Contains;
        valueOfP(arg0: string_t): Promise<Contains>;
        // public static com.tinkerpop.gremlin.structure.Contains[] com.tinkerpop.gremlin.structure.Contains.values()
        values(): Contains[];
        valuesP(): Promise<Contains[]>;
        within: Contains;
        without: Contains;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Direction extends Java.java.lang.Enum {
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): object_t;
      getDeclaringClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public com.tinkerpop.gremlin.structure.Direction com.tinkerpop.gremlin.structure.Direction.opposite()
      opposite(): Direction;
      oppositeP(): Promise<Direction>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Direction {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: object_t, arg1: string_t): Enum;
        valueOfP(arg0: object_t, arg1: string_t): Promise<Enum>;
        // public static com.tinkerpop.gremlin.structure.Direction com.tinkerpop.gremlin.structure.Direction.valueOf(java.lang.String)
        valueOf(arg0: string_t): Direction;
        valueOfP(arg0: string_t): Promise<Direction>;
        // public static com.tinkerpop.gremlin.structure.Direction[] com.tinkerpop.gremlin.structure.Direction.values()
        values(): Direction[];
        valuesP(): Promise<Direction[]>;
        OUT: Direction;
        IN: Direction;
        BOTH: Direction;
        proper: Direction[];
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Edge extends Java.com.tinkerpop.gremlin.process.graph.EdgeTraversal,Java.com.tinkerpop.gremlin.structure.Element {
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
      addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate()
      aggregate(): GraphTraversal;
      aggregateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.as(java.lang.String)
      as(arg0: string_t): GraphTraversal;
      asP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.back(java.lang.String)
      back(arg0: string_t): GraphTraversal;
      backP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.between(java.lang.String,java.lang.Comparable,java.lang.Comparable)
      between(arg0: string_t, arg1: Comparable, arg2: Comparable): GraphTraversal;
      betweenP(arg0: string_t, arg1: Comparable, arg2: Comparable): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Collection<java.lang.String>>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap(java.lang.String)
      cap(arg0: string_t): GraphTraversal;
      capP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap()
      cap(): GraphTraversal;
      capP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Predicate<A>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: object_t, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: object_t, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2,M> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Function<A, M>,java.util.Map<M, com.tinkerpop.gremlin.process.Traversal<?, E2>>)
      choose(arg0: Function, arg1: Map): GraphTraversal;
      chooseP(arg0: Function, arg1: Map): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Long> com.tinkerpop.gremlin.process.graph.ElementTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      emit(arg0: object_t): GraphTraversal;
      emitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.util.Collection<A>)
      except(arg0: Collection): GraphTraversal;
      exceptP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.String)
      except(arg0: string_t): GraphTraversal;
      exceptP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.Object)
      except(arg0: object_t): GraphTraversal;
      exceptP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      filter(arg0: object_t): GraphTraversal;
      filterP(arg0: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold(E2,java.util.function.BiFunction<E2, A, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.List<A>> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.structure.Graph com.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public abstract java.lang.Object com.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.inject(java.lang.Object...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.structure.Element$Iterators com.tinkerpop.gremlin.structure.Element.iterators()
      iterators(): Element$Iterators;
      iteratorsP(): Promise<Element$Iterators>;
      // public abstract com.tinkerpop.gremlin.structure.Edge$Iterators com.tinkerpop.gremlin.structure.Edge.iterators()
      iterators(): Edge$Iterators;
      iteratorsP(): Promise<Edge$Iterators>;
      // public default java.util.Set<java.lang.String> com.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.ElementTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, ? extends com.tinkerpop.gremlin.structure.Property<E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public abstract <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, java.util.Map<java.lang.String, com.tinkerpop.gremlin.structure.Property<E2>>> com.tinkerpop.gremlin.process.graph.EdgeTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public abstract void com.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.repeat(com.tinkerpop.gremlin.process.Traversal<?, A>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.util.Collection<A>)
      retain(arg0: Collection): GraphTraversal;
      retainP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.String)
      retain(arg0: string_t): GraphTraversal;
      retainP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.Object)
      retain(arg0: object_t): GraphTraversal;
      retainP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BiFunction<V, A, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.shuffle()
      shuffle(): GraphTraversal;
      shuffleP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<A>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.start()
      start(): GraphTraversal;
      startP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store()
      store(): GraphTraversal;
      storeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: Set, arg1: Map, arg2: object_t): GraphTraversal;
      subgraphP(arg0: Set, arg1: Map, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: object_t): GraphTraversal;
      subgraphP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): GraphTraversal;
      submitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.ElementTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.toV(com.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      until(arg0: object_t): GraphTraversal;
      untilP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> V com.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, E2> com.tinkerpop.gremlin.process.graph.EdgeTraversal.value()
      value(): GraphTraversal;
      valueP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.EdgeTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.EdgeTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
      where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
      whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
      where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
      whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(com.tinkerpop.gremlin.process.Traversal)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withPath()
      withPath(): GraphTraversal;
      withPathP(): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>,java.util.function.UnaryOperator<B>)
      withSack(arg0: object_t, arg1: object_t): GraphTraversal;
      withSackP(arg0: object_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>)
      withSack(arg0: object_t): GraphTraversal;
      withSackP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: object_t): GraphTraversal;
      withSideEffectP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
    }
    export module Edge {
      export interface Static {
        DEFAULT_LABEL: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Edge$Exceptions extends Java.com.tinkerpop.gremlin.structure.Element$Exceptions {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Edge$Exceptions {
      export interface Static {
        new (): com.tinkerpop.gremlin.structure.Edge$Exceptions;
        // public static java.lang.IllegalStateException com.tinkerpop.gremlin.structure.Edge$Exceptions.edgeRemovalNotSupported()
        edgeRemovalNotSupported(): object_t;
        edgeRemovalNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalStateException com.tinkerpop.gremlin.structure.Element$Exceptions.elementAlreadyRemoved(java.lang.Class<? extends com.tinkerpop.gremlin.structure.Element>,java.lang.Object)
        elementAlreadyRemoved(arg0: object_t, arg1: object_t): object_t;
        elementAlreadyRemovedP(arg0: object_t, arg1: object_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Element$Exceptions.labelCanNotBeAHiddenKey(java.lang.String)
        labelCanNotBeAHiddenKey(arg0: string_t): object_t;
        labelCanNotBeAHiddenKeyP(arg0: string_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Element$Exceptions.labelCanNotBeEmpty()
        labelCanNotBeEmpty(): object_t;
        labelCanNotBeEmptyP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Element$Exceptions.labelCanNotBeNull()
        labelCanNotBeNull(): object_t;
        labelCanNotBeNullP(): Promise<object_t>;
        // public static java.lang.IllegalStateException com.tinkerpop.gremlin.structure.Element$Exceptions.propertyAdditionNotSupported()
        propertyAdditionNotSupported(): object_t;
        propertyAdditionNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalStateException com.tinkerpop.gremlin.structure.Element$Exceptions.propertyRemovalNotSupported()
        propertyRemovalNotSupported(): object_t;
        propertyRemovalNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Element$Exceptions.providedKeyValuesMustBeAMultipleOfTwo()
        providedKeyValuesMustBeAMultipleOfTwo(): object_t;
        providedKeyValuesMustBeAMultipleOfTwoP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Element$Exceptions.providedKeyValuesMustHaveALegalKeyOnEvenIndices()
        providedKeyValuesMustHaveALegalKeyOnEvenIndices(): object_t;
        providedKeyValuesMustHaveALegalKeyOnEvenIndicesP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException com.tinkerpop.gremlin.structure.Edge$Exceptions.userSuppliedIdsNotSupported()
        userSuppliedIdsNotSupported(): object_t;
        userSuppliedIdsNotSupportedP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException com.tinkerpop.gremlin.structure.Edge$Exceptions.userSuppliedIdsOfThisTypeNotSupported()
        userSuppliedIdsOfThisTypeNotSupported(): object_t;
        userSuppliedIdsOfThisTypeNotSupportedP(): Promise<object_t>;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Edge$Iterators extends Java.com.tinkerpop.gremlin.structure.Element$Iterators {
      // public abstract <V> java.util.Iterator<? extends com.tinkerpop.gremlin.structure.Property<V>> com.tinkerpop.gremlin.structure.Element$Iterators.propertyIterator(java.lang.String...)
      propertyIterator(...arg0: string_t[]): Iterator;
      propertyIterator(arg0: array_t<string_t>): Iterator;
      propertyIteratorP(...arg0: string_t[]): Promise<Iterator>;
      propertyIteratorP(arg0: array_t<string_t>): Promise<Iterator>;
      // public default <V> java.util.Iterator<V> com.tinkerpop.gremlin.structure.Element$Iterators.valueIterator(java.lang.String...)
      valueIterator(...arg0: string_t[]): Iterator;
      valueIterator(arg0: array_t<string_t>): Iterator;
      valueIteratorP(...arg0: string_t[]): Promise<Iterator>;
      valueIteratorP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract java.util.Iterator<com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.structure.Edge$Iterators.vertexIterator(com.tinkerpop.gremlin.structure.Direction)
      vertexIterator(arg0: Direction): Iterator;
      vertexIteratorP(arg0: Direction): Promise<Iterator>;
    }
    export module Edge$Iterators {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Element extends Java.java.lang.Object {
      // public abstract com.tinkerpop.gremlin.structure.Graph com.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public abstract java.lang.Object com.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.structure.Element$Iterators com.tinkerpop.gremlin.structure.Element.iterators()
      iterators(): Element$Iterators;
      iteratorsP(): Promise<Element$Iterators>;
      // public default java.util.Set<java.lang.String> com.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public abstract <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract void com.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default <V> V com.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
    }
    export module Element {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Element$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Element$Exceptions {
      export interface Static {
        new (): com.tinkerpop.gremlin.structure.Element$Exceptions;
        // public static java.lang.IllegalStateException com.tinkerpop.gremlin.structure.Element$Exceptions.elementAlreadyRemoved(java.lang.Class<? extends com.tinkerpop.gremlin.structure.Element>,java.lang.Object)
        elementAlreadyRemoved(arg0: object_t, arg1: object_t): object_t;
        elementAlreadyRemovedP(arg0: object_t, arg1: object_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Element$Exceptions.labelCanNotBeAHiddenKey(java.lang.String)
        labelCanNotBeAHiddenKey(arg0: string_t): object_t;
        labelCanNotBeAHiddenKeyP(arg0: string_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Element$Exceptions.labelCanNotBeEmpty()
        labelCanNotBeEmpty(): object_t;
        labelCanNotBeEmptyP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Element$Exceptions.labelCanNotBeNull()
        labelCanNotBeNull(): object_t;
        labelCanNotBeNullP(): Promise<object_t>;
        // public static java.lang.IllegalStateException com.tinkerpop.gremlin.structure.Element$Exceptions.propertyAdditionNotSupported()
        propertyAdditionNotSupported(): object_t;
        propertyAdditionNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalStateException com.tinkerpop.gremlin.structure.Element$Exceptions.propertyRemovalNotSupported()
        propertyRemovalNotSupported(): object_t;
        propertyRemovalNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Element$Exceptions.providedKeyValuesMustBeAMultipleOfTwo()
        providedKeyValuesMustBeAMultipleOfTwo(): object_t;
        providedKeyValuesMustBeAMultipleOfTwoP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Element$Exceptions.providedKeyValuesMustHaveALegalKeyOnEvenIndices()
        providedKeyValuesMustHaveALegalKeyOnEvenIndices(): object_t;
        providedKeyValuesMustHaveALegalKeyOnEvenIndicesP(): Promise<object_t>;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Element$Iterators extends Java.java.lang.Object {
      // public abstract <V> java.util.Iterator<? extends com.tinkerpop.gremlin.structure.Property<V>> com.tinkerpop.gremlin.structure.Element$Iterators.propertyIterator(java.lang.String...)
      propertyIterator(...arg0: string_t[]): Iterator;
      propertyIterator(arg0: array_t<string_t>): Iterator;
      propertyIteratorP(...arg0: string_t[]): Promise<Iterator>;
      propertyIteratorP(arg0: array_t<string_t>): Promise<Iterator>;
      // public default <V> java.util.Iterator<V> com.tinkerpop.gremlin.structure.Element$Iterators.valueIterator(java.lang.String...)
      valueIterator(...arg0: string_t[]): Iterator;
      valueIterator(arg0: array_t<string_t>): Iterator;
      valueIteratorP(...arg0: string_t[]): Promise<Iterator>;
      valueIteratorP(arg0: array_t<string_t>): Promise<Iterator>;
    }
    export module Element$Iterators {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph extends Java.java.lang.Object {
      // public abstract com.tinkerpop.gremlin.structure.Vertex com.tinkerpop.gremlin.structure.Graph.addVertex(java.lang.Object...)
      addVertex(...arg0: object_t[]): Vertex;
      addVertex(arg0: object_array_t): Vertex;
      addVertexP(...arg0: object_t[]): Promise<Vertex>;
      addVertexP(arg0: object_array_t): Promise<Vertex>;
      // public default com.tinkerpop.gremlin.structure.Vertex com.tinkerpop.gremlin.structure.Graph.addVertex(java.lang.String)
      addVertex(arg0: string_t): Vertex;
      addVertexP(arg0: string_t): Promise<Vertex>;
      // public abstract void java.lang.AutoCloseable.close() throws java.lang.Exception
      close(): void;
      closeP(): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.computer.GraphComputer com.tinkerpop.gremlin.structure.Graph.compute(java.lang.Class...)
      compute(...arg0: object_t[]): object_t;
      compute(arg0: object_array_t): object_t;
      computeP(...arg0: object_t[]): Promise<object_t>;
      computeP(arg0: object_array_t): Promise<object_t>;
      // public abstract org.apache.commons.configuration.Configuration com.tinkerpop.gremlin.structure.Graph.configuration()
      configuration(): object_t;
      configurationP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.structure.Graph.E(java.lang.Object...)
      E(...arg0: object_t[]): GraphTraversal;
      E(arg0: object_array_t): GraphTraversal;
      EP(...arg0: object_t[]): Promise<GraphTraversal>;
      EP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.structure.Graph$Features com.tinkerpop.gremlin.structure.Graph.features()
      features(): Graph$Features;
      featuresP(): Promise<Graph$Features>;
      // public default com.tinkerpop.gremlin.structure.Graph$Io com.tinkerpop.gremlin.structure.Graph.io()
      io(): Graph$Io;
      ioP(): Promise<Graph$Io>;
      // public abstract com.tinkerpop.gremlin.structure.Graph$Iterators com.tinkerpop.gremlin.structure.Graph.iterators()
      iterators(): Graph$Iterators;
      iteratorsP(): Promise<Graph$Iterators>;
      // public default <T,S> T com.tinkerpop.gremlin.structure.Graph.of(java.lang.Class<T>)
      of(arg0: object_t): Traversal;
      ofP(arg0: object_t): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.structure.strategy.StrategyGraph com.tinkerpop.gremlin.structure.Graph.strategy(com.tinkerpop.gremlin.structure.strategy.GraphStrategy...)
      strategy(...arg0: object_t[]): object_t;
      strategy(arg0: object_array_t): object_t;
      strategyP(...arg0: object_t[]): Promise<object_t>;
      strategyP(arg0: object_array_t): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.structure.Transaction com.tinkerpop.gremlin.structure.Graph.tx()
      tx(): Transaction;
      txP(): Promise<Transaction>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.structure.Graph.V(java.lang.Object...)
      V(...arg0: object_t[]): GraphTraversal;
      V(arg0: object_array_t): GraphTraversal;
      VP(...arg0: object_t[]): Promise<GraphTraversal>;
      VP(arg0: object_array_t): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.structure.Graph$Variables com.tinkerpop.gremlin.structure.Graph.variables()
      variables(): Graph$Variables;
      variablesP(): Promise<Graph$Variables>;
    }
    export module Graph {
      export interface Static {
        GRAPH: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Graph$Exceptions {
      export interface Static {
        new (): com.tinkerpop.gremlin.structure.Graph$Exceptions;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Graph$Exceptions.argumentCanNotBeNull(java.lang.String)
        argumentCanNotBeNull(arg0: string_t): object_t;
        argumentCanNotBeNullP(arg0: string_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Graph$Exceptions.edgeWithIdAlreadyExists(java.lang.Object)
        edgeWithIdAlreadyExists(arg0: object_t): object_t;
        edgeWithIdAlreadyExistsP(arg0: object_t): Promise<object_t>;
        // public static java.util.NoSuchElementException com.tinkerpop.gremlin.structure.Graph$Exceptions.elementNotFound(java.lang.Class<? extends com.tinkerpop.gremlin.structure.Element>,java.lang.Object)
        elementNotFound(arg0: object_t, arg1: object_t): NoSuchElementException;
        elementNotFoundP(arg0: object_t, arg1: object_t): Promise<NoSuchElementException>;
        // public static java.lang.UnsupportedOperationException com.tinkerpop.gremlin.structure.Graph$Exceptions.graphComputerNotSupported()
        graphComputerNotSupported(): object_t;
        graphComputerNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Graph$Exceptions.graphDoesNotSupportProvidedGraphComputer(java.lang.Class)
        graphDoesNotSupportProvidedGraphComputer(arg0: object_t): object_t;
        graphDoesNotSupportProvidedGraphComputerP(arg0: object_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Graph$Exceptions.onlyOneOrNoGraphComputerClass()
        onlyOneOrNoGraphComputerClass(): object_t;
        onlyOneOrNoGraphComputerClassP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException com.tinkerpop.gremlin.structure.Graph$Exceptions.transactionsNotSupported()
        transactionsNotSupported(): object_t;
        transactionsNotSupportedP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException com.tinkerpop.gremlin.structure.Graph$Exceptions.variablesNotSupported()
        variablesNotSupported(): object_t;
        variablesNotSupportedP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException com.tinkerpop.gremlin.structure.Graph$Exceptions.vertexAdditionsNotSupported()
        vertexAdditionsNotSupported(): object_t;
        vertexAdditionsNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Graph$Exceptions.vertexWithIdAlreadyExists(java.lang.Object)
        vertexWithIdAlreadyExists(arg0: object_t): object_t;
        vertexWithIdAlreadyExistsP(arg0: object_t): Promise<object_t>;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Features extends Java.java.lang.Object {
      // public default com.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures com.tinkerpop.gremlin.structure.Graph$Features.edge()
      edge(): Graph$Features$EdgeFeatures;
      edgeP(): Promise<Graph$Features$EdgeFeatures>;
      // public default com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures com.tinkerpop.gremlin.structure.Graph$Features.graph()
      graph(): Graph$Features$GraphFeatures;
      graphP(): Promise<Graph$Features$GraphFeatures>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features.supports(java.lang.Class<? extends com.tinkerpop.gremlin.structure.Graph$Features$FeatureSet>,java.lang.String) throws java.lang.NoSuchMethodException,java.lang.IllegalAccessException,java.lang.reflect.InvocationTargetException
      supports(arg0: object_t, arg1: string_t): boolean;
      supportsP(arg0: object_t, arg1: string_t): Promise<boolean>;
      // public default com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures com.tinkerpop.gremlin.structure.Graph$Features.vertex()
      vertex(): Graph$Features$VertexFeatures;
      vertexP(): Promise<Graph$Features$VertexFeatures>;
    }
    export module Graph$Features {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Features$DataTypeFeatures extends Java.com.tinkerpop.gremlin.structure.Graph$Features$FeatureSet {
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanArrayValues()
      supportsBooleanArrayValues(): boolean;
      supportsBooleanArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanValues()
      supportsBooleanValues(): boolean;
      supportsBooleanValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteArrayValues()
      supportsByteArrayValues(): boolean;
      supportsByteArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteValues()
      supportsByteValues(): boolean;
      supportsByteValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleArrayValues()
      supportsDoubleArrayValues(): boolean;
      supportsDoubleArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleValues()
      supportsDoubleValues(): boolean;
      supportsDoubleValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatArrayValues()
      supportsFloatArrayValues(): boolean;
      supportsFloatArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatValues()
      supportsFloatValues(): boolean;
      supportsFloatValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerArrayValues()
      supportsIntegerArrayValues(): boolean;
      supportsIntegerArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerValues()
      supportsIntegerValues(): boolean;
      supportsIntegerValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongArrayValues()
      supportsLongArrayValues(): boolean;
      supportsLongArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongValues()
      supportsLongValues(): boolean;
      supportsLongValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMapValues()
      supportsMapValues(): boolean;
      supportsMapValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMixedListValues()
      supportsMixedListValues(): boolean;
      supportsMixedListValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsSerializableValues()
      supportsSerializableValues(): boolean;
      supportsSerializableValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringArrayValues()
      supportsStringArrayValues(): boolean;
      supportsStringArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringValues()
      supportsStringValues(): boolean;
      supportsStringValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsUniformListValues()
      supportsUniformListValues(): boolean;
      supportsUniformListValuesP(): Promise<boolean>;
    }
    export module Graph$Features$DataTypeFeatures {
      export interface Static {
        FEATURE_BOOLEAN_VALUES: string;
        FEATURE_BYTE_VALUES: string;
        FEATURE_DOUBLE_VALUES: string;
        FEATURE_FLOAT_VALUES: string;
        FEATURE_INTEGER_VALUES: string;
        FEATURE_LONG_VALUES: string;
        FEATURE_MAP_VALUES: string;
        FEATURE_MIXED_LIST_VALUES: string;
        FEATURE_BOOLEAN_ARRAY_VALUES: string;
        FEATURE_BYTE_ARRAY_VALUES: string;
        FEATURE_DOUBLE_ARRAY_VALUES: string;
        FEATURE_FLOAT_ARRAY_VALUES: string;
        FEATURE_INTEGER_ARRAY_VALUES: string;
        FEATURE_LONG_ARRAY_VALUES: string;
        FEATURE_SERIALIZABLE_VALUES: string;
        FEATURE_STRING_ARRAY_VALUES: string;
        FEATURE_STRING_VALUES: string;
        FEATURE_UNIFORM_LIST_VALUES: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Features$EdgeFeatures extends Java.com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures {
      // public default com.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures com.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.properties()
      properties(): Graph$Features$EdgePropertyFeatures;
      propertiesP(): Promise<Graph$Features$EdgePropertyFeatures>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.supportsAddEdges()
      supportsAddEdges(): boolean;
      supportsAddEdgesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAddProperty()
      supportsAddProperty(): boolean;
      supportsAddPropertyP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAnyIds()
      supportsAnyIds(): boolean;
      supportsAnyIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsCustomIds()
      supportsCustomIds(): boolean;
      supportsCustomIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsNumericIds()
      supportsNumericIds(): boolean;
      supportsNumericIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.supportsRemoveEdges()
      supportsRemoveEdges(): boolean;
      supportsRemoveEdgesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsRemoveProperty()
      supportsRemoveProperty(): boolean;
      supportsRemovePropertyP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsStringIds()
      supportsStringIds(): boolean;
      supportsStringIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUserSuppliedIds()
      supportsUserSuppliedIds(): boolean;
      supportsUserSuppliedIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUuidIds()
      supportsUuidIds(): boolean;
      supportsUuidIdsP(): Promise<boolean>;
    }
    export module Graph$Features$EdgeFeatures {
      export interface Static {
        FEATURE_ADD_EDGES: string;
        FEATURE_REMOVE_EDGES: string;
        FEATURE_USER_SUPPLIED_IDS: string;
        FEATURE_NUMERIC_IDS: string;
        FEATURE_STRING_IDS: string;
        FEATURE_UUID_IDS: string;
        FEATURE_CUSTOM_IDS: string;
        FEATURE_ANY_IDS: string;
        FEATURE_ADD_PROPERTY: string;
        FEATURE_REMOVE_PROPERTY: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Features$EdgePropertyFeatures extends Java.com.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures {
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanArrayValues()
      supportsBooleanArrayValues(): boolean;
      supportsBooleanArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanValues()
      supportsBooleanValues(): boolean;
      supportsBooleanValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteArrayValues()
      supportsByteArrayValues(): boolean;
      supportsByteArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteValues()
      supportsByteValues(): boolean;
      supportsByteValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleArrayValues()
      supportsDoubleArrayValues(): boolean;
      supportsDoubleArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleValues()
      supportsDoubleValues(): boolean;
      supportsDoubleValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatArrayValues()
      supportsFloatArrayValues(): boolean;
      supportsFloatArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatValues()
      supportsFloatValues(): boolean;
      supportsFloatValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerArrayValues()
      supportsIntegerArrayValues(): boolean;
      supportsIntegerArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerValues()
      supportsIntegerValues(): boolean;
      supportsIntegerValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongArrayValues()
      supportsLongArrayValues(): boolean;
      supportsLongArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongValues()
      supportsLongValues(): boolean;
      supportsLongValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMapValues()
      supportsMapValues(): boolean;
      supportsMapValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMixedListValues()
      supportsMixedListValues(): boolean;
      supportsMixedListValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures.supportsProperties()
      supportsProperties(): boolean;
      supportsPropertiesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsSerializableValues()
      supportsSerializableValues(): boolean;
      supportsSerializableValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringArrayValues()
      supportsStringArrayValues(): boolean;
      supportsStringArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringValues()
      supportsStringValues(): boolean;
      supportsStringValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsUniformListValues()
      supportsUniformListValues(): boolean;
      supportsUniformListValuesP(): Promise<boolean>;
    }
    export module Graph$Features$EdgePropertyFeatures {
      export interface Static {
        FEATURE_PROPERTIES: string;
        FEATURE_BOOLEAN_VALUES: string;
        FEATURE_BYTE_VALUES: string;
        FEATURE_DOUBLE_VALUES: string;
        FEATURE_FLOAT_VALUES: string;
        FEATURE_INTEGER_VALUES: string;
        FEATURE_LONG_VALUES: string;
        FEATURE_MAP_VALUES: string;
        FEATURE_MIXED_LIST_VALUES: string;
        FEATURE_BOOLEAN_ARRAY_VALUES: string;
        FEATURE_BYTE_ARRAY_VALUES: string;
        FEATURE_DOUBLE_ARRAY_VALUES: string;
        FEATURE_FLOAT_ARRAY_VALUES: string;
        FEATURE_INTEGER_ARRAY_VALUES: string;
        FEATURE_LONG_ARRAY_VALUES: string;
        FEATURE_SERIALIZABLE_VALUES: string;
        FEATURE_STRING_ARRAY_VALUES: string;
        FEATURE_STRING_VALUES: string;
        FEATURE_UNIFORM_LIST_VALUES: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Features$ElementFeatures extends Java.com.tinkerpop.gremlin.structure.Graph$Features$FeatureSet {
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAddProperty()
      supportsAddProperty(): boolean;
      supportsAddPropertyP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAnyIds()
      supportsAnyIds(): boolean;
      supportsAnyIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsCustomIds()
      supportsCustomIds(): boolean;
      supportsCustomIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsNumericIds()
      supportsNumericIds(): boolean;
      supportsNumericIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsRemoveProperty()
      supportsRemoveProperty(): boolean;
      supportsRemovePropertyP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsStringIds()
      supportsStringIds(): boolean;
      supportsStringIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUserSuppliedIds()
      supportsUserSuppliedIds(): boolean;
      supportsUserSuppliedIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUuidIds()
      supportsUuidIds(): boolean;
      supportsUuidIdsP(): Promise<boolean>;
    }
    export module Graph$Features$ElementFeatures {
      export interface Static {
        FEATURE_USER_SUPPLIED_IDS: string;
        FEATURE_NUMERIC_IDS: string;
        FEATURE_STRING_IDS: string;
        FEATURE_UUID_IDS: string;
        FEATURE_CUSTOM_IDS: string;
        FEATURE_ANY_IDS: string;
        FEATURE_ADD_PROPERTY: string;
        FEATURE_REMOVE_PROPERTY: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Features$FeatureSet extends Java.java.lang.Object {
    }
    export module Graph$Features$FeatureSet {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Features$GraphFeatures extends Java.com.tinkerpop.gremlin.structure.Graph$Features$FeatureSet {
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.supportsComputer()
      supportsComputer(): boolean;
      supportsComputerP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.supportsPersistence()
      supportsPersistence(): boolean;
      supportsPersistenceP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.supportsThreadedTransactions()
      supportsThreadedTransactions(): boolean;
      supportsThreadedTransactionsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.supportsTransactions()
      supportsTransactions(): boolean;
      supportsTransactionsP(): Promise<boolean>;
      // public default com.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.variables()
      variables(): Graph$Features$VariableFeatures;
      variablesP(): Promise<Graph$Features$VariableFeatures>;
    }
    export module Graph$Features$GraphFeatures {
      export interface Static {
        FEATURE_COMPUTER: string;
        FEATURE_TRANSACTIONS: string;
        FEATURE_PERSISTENCE: string;
        FEATURE_THREADED_TRANSACTIONS: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Features$PropertyFeatures extends Java.com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures {
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanArrayValues()
      supportsBooleanArrayValues(): boolean;
      supportsBooleanArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanValues()
      supportsBooleanValues(): boolean;
      supportsBooleanValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteArrayValues()
      supportsByteArrayValues(): boolean;
      supportsByteArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteValues()
      supportsByteValues(): boolean;
      supportsByteValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleArrayValues()
      supportsDoubleArrayValues(): boolean;
      supportsDoubleArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleValues()
      supportsDoubleValues(): boolean;
      supportsDoubleValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatArrayValues()
      supportsFloatArrayValues(): boolean;
      supportsFloatArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatValues()
      supportsFloatValues(): boolean;
      supportsFloatValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerArrayValues()
      supportsIntegerArrayValues(): boolean;
      supportsIntegerArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerValues()
      supportsIntegerValues(): boolean;
      supportsIntegerValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongArrayValues()
      supportsLongArrayValues(): boolean;
      supportsLongArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongValues()
      supportsLongValues(): boolean;
      supportsLongValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMapValues()
      supportsMapValues(): boolean;
      supportsMapValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMixedListValues()
      supportsMixedListValues(): boolean;
      supportsMixedListValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures.supportsProperties()
      supportsProperties(): boolean;
      supportsPropertiesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsSerializableValues()
      supportsSerializableValues(): boolean;
      supportsSerializableValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringArrayValues()
      supportsStringArrayValues(): boolean;
      supportsStringArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringValues()
      supportsStringValues(): boolean;
      supportsStringValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsUniformListValues()
      supportsUniformListValues(): boolean;
      supportsUniformListValuesP(): Promise<boolean>;
    }
    export module Graph$Features$PropertyFeatures {
      export interface Static {
        FEATURE_PROPERTIES: string;
        FEATURE_BOOLEAN_VALUES: string;
        FEATURE_BYTE_VALUES: string;
        FEATURE_DOUBLE_VALUES: string;
        FEATURE_FLOAT_VALUES: string;
        FEATURE_INTEGER_VALUES: string;
        FEATURE_LONG_VALUES: string;
        FEATURE_MAP_VALUES: string;
        FEATURE_MIXED_LIST_VALUES: string;
        FEATURE_BOOLEAN_ARRAY_VALUES: string;
        FEATURE_BYTE_ARRAY_VALUES: string;
        FEATURE_DOUBLE_ARRAY_VALUES: string;
        FEATURE_FLOAT_ARRAY_VALUES: string;
        FEATURE_INTEGER_ARRAY_VALUES: string;
        FEATURE_LONG_ARRAY_VALUES: string;
        FEATURE_SERIALIZABLE_VALUES: string;
        FEATURE_STRING_ARRAY_VALUES: string;
        FEATURE_STRING_VALUES: string;
        FEATURE_UNIFORM_LIST_VALUES: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Features$VariableFeatures extends Java.com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures {
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanArrayValues()
      supportsBooleanArrayValues(): boolean;
      supportsBooleanArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanValues()
      supportsBooleanValues(): boolean;
      supportsBooleanValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteArrayValues()
      supportsByteArrayValues(): boolean;
      supportsByteArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteValues()
      supportsByteValues(): boolean;
      supportsByteValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleArrayValues()
      supportsDoubleArrayValues(): boolean;
      supportsDoubleArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleValues()
      supportsDoubleValues(): boolean;
      supportsDoubleValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatArrayValues()
      supportsFloatArrayValues(): boolean;
      supportsFloatArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatValues()
      supportsFloatValues(): boolean;
      supportsFloatValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerArrayValues()
      supportsIntegerArrayValues(): boolean;
      supportsIntegerArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerValues()
      supportsIntegerValues(): boolean;
      supportsIntegerValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongArrayValues()
      supportsLongArrayValues(): boolean;
      supportsLongArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongValues()
      supportsLongValues(): boolean;
      supportsLongValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMapValues()
      supportsMapValues(): boolean;
      supportsMapValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMixedListValues()
      supportsMixedListValues(): boolean;
      supportsMixedListValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsSerializableValues()
      supportsSerializableValues(): boolean;
      supportsSerializableValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringArrayValues()
      supportsStringArrayValues(): boolean;
      supportsStringArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringValues()
      supportsStringValues(): boolean;
      supportsStringValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsUniformListValues()
      supportsUniformListValues(): boolean;
      supportsUniformListValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures.supportsVariables()
      supportsVariables(): boolean;
      supportsVariablesP(): Promise<boolean>;
    }
    export module Graph$Features$VariableFeatures {
      export interface Static {
        FEATURE_VARIABLES: string;
        FEATURE_BOOLEAN_VALUES: string;
        FEATURE_BYTE_VALUES: string;
        FEATURE_DOUBLE_VALUES: string;
        FEATURE_FLOAT_VALUES: string;
        FEATURE_INTEGER_VALUES: string;
        FEATURE_LONG_VALUES: string;
        FEATURE_MAP_VALUES: string;
        FEATURE_MIXED_LIST_VALUES: string;
        FEATURE_BOOLEAN_ARRAY_VALUES: string;
        FEATURE_BYTE_ARRAY_VALUES: string;
        FEATURE_DOUBLE_ARRAY_VALUES: string;
        FEATURE_FLOAT_ARRAY_VALUES: string;
        FEATURE_INTEGER_ARRAY_VALUES: string;
        FEATURE_LONG_ARRAY_VALUES: string;
        FEATURE_SERIALIZABLE_VALUES: string;
        FEATURE_STRING_ARRAY_VALUES: string;
        FEATURE_STRING_VALUES: string;
        FEATURE_UNIFORM_LIST_VALUES: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Features$VertexFeatures extends Java.com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures {
      // public default com.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.properties()
      properties(): Graph$Features$VertexPropertyFeatures;
      propertiesP(): Promise<Graph$Features$VertexPropertyFeatures>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAddProperty()
      supportsAddProperty(): boolean;
      supportsAddPropertyP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.supportsAddVertices()
      supportsAddVertices(): boolean;
      supportsAddVerticesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAnyIds()
      supportsAnyIds(): boolean;
      supportsAnyIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsCustomIds()
      supportsCustomIds(): boolean;
      supportsCustomIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.supportsMetaProperties()
      supportsMetaProperties(): boolean;
      supportsMetaPropertiesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.supportsMultiProperties()
      supportsMultiProperties(): boolean;
      supportsMultiPropertiesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsNumericIds()
      supportsNumericIds(): boolean;
      supportsNumericIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsRemoveProperty()
      supportsRemoveProperty(): boolean;
      supportsRemovePropertyP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.supportsRemoveVertices()
      supportsRemoveVertices(): boolean;
      supportsRemoveVerticesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsStringIds()
      supportsStringIds(): boolean;
      supportsStringIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUserSuppliedIds()
      supportsUserSuppliedIds(): boolean;
      supportsUserSuppliedIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUuidIds()
      supportsUuidIds(): boolean;
      supportsUuidIdsP(): Promise<boolean>;
    }
    export module Graph$Features$VertexFeatures {
      export interface Static {
        FEATURE_ADD_VERTICES: string;
        FEATURE_MULTI_PROPERTIES: string;
        FEATURE_META_PROPERTIES: string;
        FEATURE_REMOVE_VERTICES: string;
        FEATURE_USER_SUPPLIED_IDS: string;
        FEATURE_NUMERIC_IDS: string;
        FEATURE_STRING_IDS: string;
        FEATURE_UUID_IDS: string;
        FEATURE_CUSTOM_IDS: string;
        FEATURE_ANY_IDS: string;
        FEATURE_ADD_PROPERTY: string;
        FEATURE_REMOVE_PROPERTY: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Features$VertexPropertyFeatures extends Java.com.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures {
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.supportsAddProperty()
      supportsAddProperty(): boolean;
      supportsAddPropertyP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.supportsAnyIds()
      supportsAnyIds(): boolean;
      supportsAnyIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanArrayValues()
      supportsBooleanArrayValues(): boolean;
      supportsBooleanArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsBooleanValues()
      supportsBooleanValues(): boolean;
      supportsBooleanValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteArrayValues()
      supportsByteArrayValues(): boolean;
      supportsByteArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsByteValues()
      supportsByteValues(): boolean;
      supportsByteValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.supportsCustomIds()
      supportsCustomIds(): boolean;
      supportsCustomIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleArrayValues()
      supportsDoubleArrayValues(): boolean;
      supportsDoubleArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsDoubleValues()
      supportsDoubleValues(): boolean;
      supportsDoubleValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatArrayValues()
      supportsFloatArrayValues(): boolean;
      supportsFloatArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsFloatValues()
      supportsFloatValues(): boolean;
      supportsFloatValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerArrayValues()
      supportsIntegerArrayValues(): boolean;
      supportsIntegerArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsIntegerValues()
      supportsIntegerValues(): boolean;
      supportsIntegerValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongArrayValues()
      supportsLongArrayValues(): boolean;
      supportsLongArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsLongValues()
      supportsLongValues(): boolean;
      supportsLongValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMapValues()
      supportsMapValues(): boolean;
      supportsMapValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsMixedListValues()
      supportsMixedListValues(): boolean;
      supportsMixedListValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.supportsNumericIds()
      supportsNumericIds(): boolean;
      supportsNumericIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$PropertyFeatures.supportsProperties()
      supportsProperties(): boolean;
      supportsPropertiesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.supportsRemoveProperty()
      supportsRemoveProperty(): boolean;
      supportsRemovePropertyP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsSerializableValues()
      supportsSerializableValues(): boolean;
      supportsSerializableValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringArrayValues()
      supportsStringArrayValues(): boolean;
      supportsStringArrayValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.supportsStringIds()
      supportsStringIds(): boolean;
      supportsStringIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsStringValues()
      supportsStringValues(): boolean;
      supportsStringValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$DataTypeFeatures.supportsUniformListValues()
      supportsUniformListValues(): boolean;
      supportsUniformListValuesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.supportsUserSuppliedIds()
      supportsUserSuppliedIds(): boolean;
      supportsUserSuppliedIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures.supportsUuidIds()
      supportsUuidIds(): boolean;
      supportsUuidIdsP(): Promise<boolean>;
    }
    export module Graph$Features$VertexPropertyFeatures {
      export interface Static {
        FEATURE_ADD_PROPERTY: string;
        FEATURE_REMOVE_PROPERTY: string;
        FEATURE_USER_SUPPLIED_IDS: string;
        FEATURE_NUMERIC_IDS: string;
        FEATURE_STRING_IDS: string;
        FEATURE_UUID_IDS: string;
        FEATURE_CUSTOM_IDS: string;
        FEATURE_ANY_IDS: string;
        FEATURE_PROPERTIES: string;
        FEATURE_BOOLEAN_VALUES: string;
        FEATURE_BYTE_VALUES: string;
        FEATURE_DOUBLE_VALUES: string;
        FEATURE_FLOAT_VALUES: string;
        FEATURE_INTEGER_VALUES: string;
        FEATURE_LONG_VALUES: string;
        FEATURE_MAP_VALUES: string;
        FEATURE_MIXED_LIST_VALUES: string;
        FEATURE_BOOLEAN_ARRAY_VALUES: string;
        FEATURE_BYTE_ARRAY_VALUES: string;
        FEATURE_DOUBLE_ARRAY_VALUES: string;
        FEATURE_FLOAT_ARRAY_VALUES: string;
        FEATURE_INTEGER_ARRAY_VALUES: string;
        FEATURE_LONG_ARRAY_VALUES: string;
        FEATURE_SERIALIZABLE_VALUES: string;
        FEATURE_STRING_ARRAY_VALUES: string;
        FEATURE_STRING_VALUES: string;
        FEATURE_UNIFORM_LIST_VALUES: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Helper extends Java.java.lang.Object {
      // public abstract java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.annotation.Annotation.annotationType()
      annotationType(): object_t;
      annotationTypeP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
    }
    export module Graph$Helper {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Hidden extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Graph$Hidden {
      export interface Static {
        new (): com.tinkerpop.gremlin.structure.Graph$Hidden;
        // public static java.lang.String com.tinkerpop.gremlin.structure.Graph$Hidden.hide(java.lang.String)
        hide(arg0: string_t): string;
        hideP(arg0: string_t): Promise<string>;
        // public static boolean com.tinkerpop.gremlin.structure.Graph$Hidden.isHidden(java.lang.String)
        isHidden(arg0: string_t): boolean;
        isHiddenP(arg0: string_t): Promise<boolean>;
        // public static java.lang.String com.tinkerpop.gremlin.structure.Graph$Hidden.unHide(java.lang.String)
        unHide(arg0: string_t): string;
        unHideP(arg0: string_t): Promise<string>;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Io extends Java.java.lang.Object {
      // public default com.tinkerpop.gremlin.structure.io.graphml.GraphMLReader$Builder com.tinkerpop.gremlin.structure.Graph$Io.graphMLReader()
      graphMLReader(): object_t;
      graphMLReaderP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.structure.io.graphml.GraphMLWriter$Builder com.tinkerpop.gremlin.structure.Graph$Io.graphMLWriter()
      graphMLWriter(): object_t;
      graphMLWriterP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.structure.io.graphson.GraphSONMapper$Builder com.tinkerpop.gremlin.structure.Graph$Io.graphSONMapper()
      graphSONMapper(): object_t;
      graphSONMapperP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.structure.io.graphson.GraphSONReader$Builder com.tinkerpop.gremlin.structure.Graph$Io.graphSONReader()
      graphSONReader(): object_t;
      graphSONReaderP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.structure.io.graphson.GraphSONWriter$Builder com.tinkerpop.gremlin.structure.Graph$Io.graphSONWriter()
      graphSONWriter(): object_t;
      graphSONWriterP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.structure.io.kryo.KryoMapper$Builder com.tinkerpop.gremlin.structure.Graph$Io.kryoMapper()
      kryoMapper(): object_t;
      kryoMapperP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.structure.io.kryo.KryoReader$Builder com.tinkerpop.gremlin.structure.Graph$Io.kryoReader()
      kryoReader(): object_t;
      kryoReaderP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.structure.io.kryo.KryoWriter$Builder com.tinkerpop.gremlin.structure.Graph$Io.kryoWriter()
      kryoWriter(): object_t;
      kryoWriterP(): Promise<object_t>;
      // public abstract void com.tinkerpop.gremlin.structure.Graph$Io.readGraphML(java.lang.String) throws java.io.IOException
      readGraphML(arg0: string_t): void;
      readGraphMLP(arg0: string_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.structure.Graph$Io.readGraphSON(java.lang.String) throws java.io.IOException
      readGraphSON(arg0: string_t): void;
      readGraphSONP(arg0: string_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.structure.Graph$Io.readKryo(java.lang.String) throws java.io.IOException
      readKryo(arg0: string_t): void;
      readKryoP(arg0: string_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.structure.Graph$Io.writeGraphML(java.lang.String) throws java.io.IOException
      writeGraphML(arg0: string_t): void;
      writeGraphMLP(arg0: string_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.structure.Graph$Io.writeGraphSON(java.lang.String) throws java.io.IOException
      writeGraphSON(arg0: string_t): void;
      writeGraphSONP(arg0: string_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.structure.Graph$Io.writeKryo(java.lang.String) throws java.io.IOException
      writeKryo(arg0: string_t): void;
      writeKryoP(arg0: string_t): Promise<void>;
    }
    export module Graph$Io {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Iterators extends Java.java.lang.Object {
      // public abstract java.util.Iterator<com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.structure.Graph$Iterators.edgeIterator(java.lang.Object...)
      edgeIterator(...arg0: object_t[]): Iterator;
      edgeIterator(arg0: object_array_t): Iterator;
      edgeIteratorP(...arg0: object_t[]): Promise<Iterator>;
      edgeIteratorP(arg0: object_array_t): Promise<Iterator>;
      // public abstract java.util.Iterator<com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.structure.Graph$Iterators.vertexIterator(java.lang.Object...)
      vertexIterator(...arg0: object_t[]): Iterator;
      vertexIterator(arg0: object_array_t): Iterator;
      vertexIteratorP(...arg0: object_t[]): Promise<Iterator>;
      vertexIteratorP(arg0: object_array_t): Promise<Iterator>;
    }
    export module Graph$Iterators {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$OptIn extends Java.java.lang.Object {
      // public abstract java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.annotation.Annotation.annotationType()
      annotationType(): object_t;
      annotationTypeP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Graph$OptIn.value()
      value(): string;
      valueP(): Promise<string>;
    }
    export module Graph$OptIn {
      export interface Static {
        SUITE_STRUCTURE_STANDARD: string;
        SUITE_STRUCTURE_PERFORMANCE: string;
        SUITE_PROCESS_COMPUTER: string;
        SUITE_PROCESS_STANDARD: string;
        SUITE_GROOVY_PROCESS_STANDARD: string;
        SUITE_GROOVY_PROCESS_COMPUTER: string;
        SUITE_GROOVY_ENVIRONMENT: string;
        SUITE_GROOVY_ENVIRONMENT_INTEGRATE: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$OptIns extends Java.java.lang.Object {
      // public abstract java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.annotation.Annotation.annotationType()
      annotationType(): object_t;
      annotationTypeP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract com.tinkerpop.gremlin.structure.Graph$OptIn[] com.tinkerpop.gremlin.structure.Graph$OptIns.value()
      value(): Graph$OptIn[];
      valueP(): Promise<Graph$OptIn[]>;
    }
    export module Graph$OptIns {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$OptOut extends Java.java.lang.Object {
      // public abstract java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.annotation.Annotation.annotationType()
      annotationType(): object_t;
      annotationTypeP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Graph$OptOut.method()
      method(): string;
      methodP(): Promise<string>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Graph$OptOut.reason()
      reason(): string;
      reasonP(): Promise<string>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Graph$OptOut.specific()
      specific(): string;
      specificP(): Promise<string>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Graph$OptOut.test()
      test(): string;
      testP(): Promise<string>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
    }
    export module Graph$OptOut {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$OptOuts extends Java.java.lang.Object {
      // public abstract java.lang.Class<? extends java.lang.annotation.Annotation> java.lang.annotation.Annotation.annotationType()
      annotationType(): object_t;
      annotationTypeP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract com.tinkerpop.gremlin.structure.Graph$OptOut[] com.tinkerpop.gremlin.structure.Graph$OptOuts.value()
      value(): Graph$OptOut[];
      valueP(): Promise<Graph$OptOut[]>;
    }
    export module Graph$OptOuts {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Variables extends Java.java.lang.Object {
      // public default java.util.Map<java.lang.String, java.lang.Object> com.tinkerpop.gremlin.structure.Graph$Variables.asMap()
      asMap(): Map;
      asMapP(): Promise<Map>;
      // public abstract <R> java.util.Optional<R> com.tinkerpop.gremlin.structure.Graph$Variables.get(java.lang.String)
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public abstract java.util.Set<java.lang.String> com.tinkerpop.gremlin.structure.Graph$Variables.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract void com.tinkerpop.gremlin.structure.Graph$Variables.remove(java.lang.String)
      remove(arg0: string_t): void;
      removeP(arg0: string_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.structure.Graph$Variables.set(java.lang.String,java.lang.Object)
      set(arg0: string_t, arg1: object_t): void;
      setP(arg0: string_t, arg1: object_t): Promise<void>;
    }
    export module Graph$Variables {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Graph$Variables$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Graph$Variables$Exceptions {
      export interface Static {
        new (): com.tinkerpop.gremlin.structure.Graph$Variables$Exceptions;
        // public static java.lang.UnsupportedOperationException com.tinkerpop.gremlin.structure.Graph$Variables$Exceptions.dataTypeOfVariableValueNotSupported(java.lang.Object)
        dataTypeOfVariableValueNotSupported(arg0: object_t): object_t;
        dataTypeOfVariableValueNotSupportedP(arg0: object_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Graph$Variables$Exceptions.variableKeyCanNotBeEmpty()
        variableKeyCanNotBeEmpty(): object_t;
        variableKeyCanNotBeEmptyP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Graph$Variables$Exceptions.variableKeyCanNotBeNull()
        variableKeyCanNotBeNull(): object_t;
        variableKeyCanNotBeNullP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Graph$Variables$Exceptions.variableValueCanNotBeNull()
        variableValueCanNotBeNull(): object_t;
        variableValueCanNotBeNullP(): Promise<object_t>;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Operator extends Java.java.lang.Enum,Java.java.util.function_.BinaryOperator {
      // public default <V> java.util.function.BiFunction<T, U, V> java.util.function.BiFunction.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): BiFunction;
      andThenP(arg0: Function): Promise<BiFunction>;
      // public abstract R java.util.function.BiFunction.apply(T,U)
      apply(arg0: object_t, arg1: object_t): object_t;
      applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): object_t;
      getDeclaringClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Operator {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: object_t, arg1: string_t): Enum;
        valueOfP(arg0: object_t, arg1: string_t): Promise<Enum>;
        // public static com.tinkerpop.gremlin.structure.Operator com.tinkerpop.gremlin.structure.Operator.valueOf(java.lang.String)
        valueOf(arg0: string_t): Operator;
        valueOfP(arg0: string_t): Promise<Operator>;
        // public static com.tinkerpop.gremlin.structure.Operator[] com.tinkerpop.gremlin.structure.Operator.values()
        values(): Operator[];
        valuesP(): Promise<Operator[]>;
        sum: Operator;
        minus: Operator;
        mult: Operator;
        div: Operator;
        min: Operator;
        max: Operator;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Order extends Java.java.lang.Enum {
      // public abstract int com.tinkerpop.gremlin.structure.Order.compare(java.lang.Comparable,java.lang.Comparable)
      compare(arg0: Comparable, arg1: Comparable): number;
      compareP(arg0: Comparable, arg1: Comparable): Promise<number>;
      // public int com.tinkerpop.gremlin.structure.Order.compare(java.lang.Object,java.lang.Object)
      compare(arg0: object_t, arg1: object_t): number;
      compareP(arg0: object_t, arg1: object_t): Promise<number>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): object_t;
      getDeclaringClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public com.tinkerpop.gremlin.structure.Order com.tinkerpop.gremlin.structure.Order.opposite()
      opposite(): Order;
      oppositeP(): Promise<Order>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public default java.util.Comparator<T> java.util.Comparator.reversed()
      reversed(): object_t;
      reversedP(): Promise<object_t>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>,java.util.Comparator<? super U>)
      thenComparing(arg0: Function, arg1: object_t): object_t;
      thenComparingP(arg0: Function, arg1: object_t): Promise<object_t>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>)
      thenComparing(arg0: Function): object_t;
      thenComparingP(arg0: Function): Promise<object_t>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.Comparator<? super T>)
      thenComparing(arg0: object_t): object_t;
      thenComparingP(arg0: object_t): Promise<object_t>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction<? super T>)
      thenComparingDouble(arg0: object_t): object_t;
      thenComparingDoubleP(arg0: object_t): Promise<object_t>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction<? super T>)
      thenComparingInt(arg0: object_t): object_t;
      thenComparingIntP(arg0: object_t): Promise<object_t>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction<? super T>)
      thenComparingLong(arg0: object_t): object_t;
      thenComparingLongP(arg0: object_t): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Order {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: object_t, arg1: string_t): Enum;
        valueOfP(arg0: object_t, arg1: string_t): Promise<Enum>;
        // public static com.tinkerpop.gremlin.structure.Order com.tinkerpop.gremlin.structure.Order.valueOf(java.lang.String)
        valueOf(arg0: string_t): Order;
        valueOfP(arg0: string_t): Promise<Order>;
        // public static com.tinkerpop.gremlin.structure.Order[] com.tinkerpop.gremlin.structure.Order.values()
        values(): Order[];
        valuesP(): Promise<Order[]>;
        incr: Order;
        decr: Order;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Property extends Java.java.lang.Object {
      // public abstract com.tinkerpop.gremlin.structure.Element com.tinkerpop.gremlin.structure.Property.element()
      element(): Element;
      elementP(): Promise<Element>;
      // public default void com.tinkerpop.gremlin.structure.Property.ifPresent(java.util.function.Consumer<? super V>)
      ifPresent(arg0: Consumer): void;
      ifPresentP(arg0: Consumer): Promise<void>;
      // public abstract boolean com.tinkerpop.gremlin.structure.Property.isPresent()
      isPresent(): boolean;
      isPresentP(): Promise<boolean>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Property.key()
      key(): string;
      keyP(): Promise<string>;
      // public default V com.tinkerpop.gremlin.structure.Property.orElse(V)
      orElse(arg0: object_t): object_t;
      orElseP(arg0: object_t): Promise<object_t>;
      // public default V com.tinkerpop.gremlin.structure.Property.orElseGet(java.util.function.Supplier<? extends V>)
      orElseGet(arg0: object_t): object_t;
      orElseGetP(arg0: object_t): Promise<object_t>;
      // public default <E> V com.tinkerpop.gremlin.structure.Property.orElseThrow(java.util.function.Supplier<? extends E>) throws E
      orElseThrow(arg0: object_t): object_t;
      orElseThrowP(arg0: object_t): Promise<object_t>;
      // public abstract void com.tinkerpop.gremlin.structure.Property.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public abstract V com.tinkerpop.gremlin.structure.Property.value() throws java.util.NoSuchElementException
      value(): object_t;
      valueP(): Promise<object_t>;
    }
    export module Property {
      export interface Static {
        // public static <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Property.empty()
        empty(): Property;
        emptyP(): Promise<Property>;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Property$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Property$Exceptions {
      export interface Static {
        new (): com.tinkerpop.gremlin.structure.Property$Exceptions;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Property$Exceptions.dataTypeOfPropertyValueNotSupported(java.lang.Object)
        dataTypeOfPropertyValueNotSupported(arg0: object_t): object_t;
        dataTypeOfPropertyValueNotSupportedP(arg0: object_t): Promise<object_t>;
        // public static java.lang.IllegalStateException com.tinkerpop.gremlin.structure.Property$Exceptions.propertyDoesNotExist(java.lang.String)
        propertyDoesNotExist(arg0: string_t): object_t;
        propertyDoesNotExistP(arg0: string_t): Promise<object_t>;
        // public static java.lang.IllegalStateException com.tinkerpop.gremlin.structure.Property$Exceptions.propertyDoesNotExist()
        propertyDoesNotExist(): object_t;
        propertyDoesNotExistP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Property$Exceptions.propertyKeyCanNotBeAHiddenKey(java.lang.String)
        propertyKeyCanNotBeAHiddenKey(arg0: string_t): object_t;
        propertyKeyCanNotBeAHiddenKeyP(arg0: string_t): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Property$Exceptions.propertyKeyCanNotBeEmpty()
        propertyKeyCanNotBeEmpty(): object_t;
        propertyKeyCanNotBeEmptyP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Property$Exceptions.propertyKeyCanNotBeNull()
        propertyKeyCanNotBeNull(): object_t;
        propertyKeyCanNotBeNullP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Property$Exceptions.propertyValueCanNotBeNull()
        propertyValueCanNotBeNull(): object_t;
        propertyValueCanNotBeNullP(): Promise<object_t>;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface PropertyType extends Java.java.lang.Enum {
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean com.tinkerpop.gremlin.structure.PropertyType.forProperties()
      forProperties(): boolean;
      forPropertiesP(): Promise<boolean>;
      // public abstract boolean com.tinkerpop.gremlin.structure.PropertyType.forValues()
      forValues(): boolean;
      forValuesP(): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): object_t;
      getDeclaringClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module PropertyType {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: object_t, arg1: string_t): Enum;
        valueOfP(arg0: object_t, arg1: string_t): Promise<Enum>;
        // public static com.tinkerpop.gremlin.structure.PropertyType com.tinkerpop.gremlin.structure.PropertyType.valueOf(java.lang.String)
        valueOf(arg0: string_t): PropertyType;
        valueOfP(arg0: string_t): Promise<PropertyType>;
        // public static com.tinkerpop.gremlin.structure.PropertyType[] com.tinkerpop.gremlin.structure.PropertyType.values()
        values(): PropertyType[];
        valuesP(): Promise<PropertyType[]>;
        PROPERTY: PropertyType;
        VALUE: PropertyType;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Transaction extends Java.java.lang.Object {
      // public abstract void com.tinkerpop.gremlin.structure.Transaction.close()
      close(): void;
      closeP(): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.structure.Transaction.commit()
      commit(): void;
      commitP(): Promise<void>;
      // public abstract <G> G com.tinkerpop.gremlin.structure.Transaction.create()
      create(): Graph;
      createP(): Promise<Graph>;
      // public abstract boolean com.tinkerpop.gremlin.structure.Transaction.isOpen()
      isOpen(): boolean;
      isOpenP(): Promise<boolean>;
      // public abstract com.tinkerpop.gremlin.structure.Transaction com.tinkerpop.gremlin.structure.Transaction.onClose(java.util.function.Consumer<com.tinkerpop.gremlin.structure.Transaction>)
      onClose(arg0: Consumer): Transaction;
      onCloseP(arg0: Consumer): Promise<Transaction>;
      // public abstract com.tinkerpop.gremlin.structure.Transaction com.tinkerpop.gremlin.structure.Transaction.onReadWrite(java.util.function.Consumer<com.tinkerpop.gremlin.structure.Transaction>)
      onReadWrite(arg0: Consumer): Transaction;
      onReadWriteP(arg0: Consumer): Promise<Transaction>;
      // public abstract void com.tinkerpop.gremlin.structure.Transaction.open()
      open(): void;
      openP(): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.structure.Transaction.readWrite()
      readWrite(): void;
      readWriteP(): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.structure.Transaction.rollback()
      rollback(): void;
      rollbackP(): Promise<void>;
      // public abstract <R> com.tinkerpop.gremlin.structure.Transaction.com.tinkerpop.gremlin.structure.Transaction$Workload<R> com.tinkerpop.gremlin.structure.Transaction.submit(java.util.function.Function<com.tinkerpop.gremlin.structure.Graph, R>)
      submit(arg0: Function): Transaction$Workload;
      submitP(arg0: Function): Promise<Transaction$Workload>;
    }
    export module Transaction {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Transaction$CLOSE_BEHAVIOR extends Java.java.lang.Enum,Java.java.util.function_.Consumer {
      // public abstract void java.util.function.Consumer.accept(T)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.Consumer<T> java.util.function.Consumer.andThen(java.util.function.Consumer<? super T>)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): object_t;
      getDeclaringClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Transaction$CLOSE_BEHAVIOR {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: object_t, arg1: string_t): Enum;
        valueOfP(arg0: object_t, arg1: string_t): Promise<Enum>;
        // public static com.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR com.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR.valueOf(java.lang.String)
        valueOf(arg0: string_t): Transaction$CLOSE_BEHAVIOR;
        valueOfP(arg0: string_t): Promise<Transaction$CLOSE_BEHAVIOR>;
        // public static com.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR[] com.tinkerpop.gremlin.structure.Transaction$CLOSE_BEHAVIOR.values()
        values(): Transaction$CLOSE_BEHAVIOR[];
        valuesP(): Promise<Transaction$CLOSE_BEHAVIOR[]>;
        COMMIT: Transaction$CLOSE_BEHAVIOR;
        ROLLBACK: Transaction$CLOSE_BEHAVIOR;
        MANUAL: Transaction$CLOSE_BEHAVIOR;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Transaction$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Transaction$Exceptions {
      export interface Static {
        new (): com.tinkerpop.gremlin.structure.Transaction$Exceptions;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Transaction$Exceptions.onCloseBehaviorCannotBeNull()
        onCloseBehaviorCannotBeNull(): object_t;
        onCloseBehaviorCannotBeNullP(): Promise<object_t>;
        // public static java.lang.IllegalArgumentException com.tinkerpop.gremlin.structure.Transaction$Exceptions.onReadWriteBehaviorCannotBeNull()
        onReadWriteBehaviorCannotBeNull(): object_t;
        onReadWriteBehaviorCannotBeNullP(): Promise<object_t>;
        // public static java.lang.IllegalStateException com.tinkerpop.gremlin.structure.Transaction$Exceptions.openTransactionsOnClose()
        openTransactionsOnClose(): object_t;
        openTransactionsOnCloseP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException com.tinkerpop.gremlin.structure.Transaction$Exceptions.threadedTransactionsNotSupported()
        threadedTransactionsNotSupported(): object_t;
        threadedTransactionsNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalStateException com.tinkerpop.gremlin.structure.Transaction$Exceptions.transactionAlreadyOpen()
        transactionAlreadyOpen(): object_t;
        transactionAlreadyOpenP(): Promise<object_t>;
        // public static java.lang.IllegalStateException com.tinkerpop.gremlin.structure.Transaction$Exceptions.transactionMustBeOpenToReadWrite()
        transactionMustBeOpenToReadWrite(): object_t;
        transactionMustBeOpenToReadWriteP(): Promise<object_t>;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Transaction$READ_WRITE_BEHAVIOR extends Java.java.lang.Enum,Java.java.util.function_.Consumer {
      // public abstract void java.util.function.Consumer.accept(T)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.Consumer<T> java.util.function.Consumer.andThen(java.util.function.Consumer<? super T>)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): object_t;
      getDeclaringClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Transaction$READ_WRITE_BEHAVIOR {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: object_t, arg1: string_t): Enum;
        valueOfP(arg0: object_t, arg1: string_t): Promise<Enum>;
        // public static com.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR com.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR.valueOf(java.lang.String)
        valueOf(arg0: string_t): Transaction$READ_WRITE_BEHAVIOR;
        valueOfP(arg0: string_t): Promise<Transaction$READ_WRITE_BEHAVIOR>;
        // public static com.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR[] com.tinkerpop.gremlin.structure.Transaction$READ_WRITE_BEHAVIOR.values()
        values(): Transaction$READ_WRITE_BEHAVIOR[];
        valuesP(): Promise<Transaction$READ_WRITE_BEHAVIOR[]>;
        AUTO: Transaction$READ_WRITE_BEHAVIOR;
        MANUAL: Transaction$READ_WRITE_BEHAVIOR;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Transaction$Workload extends Java.java.lang.Object {
      // public R com.tinkerpop.gremlin.structure.Transaction$Workload.attempt(java.util.function.BiFunction<com.tinkerpop.gremlin.structure.Graph, java.util.function.Function<com.tinkerpop.gremlin.structure.Graph, R>, R>)
      attempt(arg0: BiFunction): object_t;
      attemptP(arg0: BiFunction): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public R com.tinkerpop.gremlin.structure.Transaction$Workload.exponentialBackoff(int,long,java.util.Set<java.lang.Class>)
      exponentialBackoff(arg0: integer_t, arg1: long_t, arg2: Set): object_t;
      exponentialBackoffP(arg0: integer_t, arg1: long_t, arg2: Set): Promise<object_t>;
      // public R com.tinkerpop.gremlin.structure.Transaction$Workload.exponentialBackoff(int,long)
      exponentialBackoff(arg0: integer_t, arg1: long_t): object_t;
      exponentialBackoffP(arg0: integer_t, arg1: long_t): Promise<object_t>;
      // public R com.tinkerpop.gremlin.structure.Transaction$Workload.exponentialBackoff(int)
      exponentialBackoff(arg0: integer_t): object_t;
      exponentialBackoffP(arg0: integer_t): Promise<object_t>;
      // public R com.tinkerpop.gremlin.structure.Transaction$Workload.exponentialBackoff()
      exponentialBackoff(): object_t;
      exponentialBackoffP(): Promise<object_t>;
      // public R com.tinkerpop.gremlin.structure.Transaction$Workload.fireAndForget()
      fireAndForget(): object_t;
      fireAndForgetP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public R com.tinkerpop.gremlin.structure.Transaction$Workload.oneAndDone()
      oneAndDone(): object_t;
      oneAndDoneP(): Promise<object_t>;
      // public R com.tinkerpop.gremlin.structure.Transaction$Workload.retry(int,long,java.util.Set<java.lang.Class>)
      retry(arg0: integer_t, arg1: long_t, arg2: Set): object_t;
      retryP(arg0: integer_t, arg1: long_t, arg2: Set): Promise<object_t>;
      // public R com.tinkerpop.gremlin.structure.Transaction$Workload.retry(int,long)
      retry(arg0: integer_t, arg1: long_t): object_t;
      retryP(arg0: integer_t, arg1: long_t): Promise<object_t>;
      // public R com.tinkerpop.gremlin.structure.Transaction$Workload.retry(int)
      retry(arg0: integer_t): object_t;
      retryP(arg0: integer_t): Promise<object_t>;
      // public R com.tinkerpop.gremlin.structure.Transaction$Workload.retry()
      retry(): object_t;
      retryP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Transaction$Workload {
      export interface Static {
        new (arg0: Graph, arg1: Function): com.tinkerpop.gremlin.structure.Transaction$Workload;
        DEFAULT_DELAY_MS: longValue_t;
        DEFAULT_TRIES: number;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Vertex extends Java.com.tinkerpop.gremlin.process.graph.VertexTraversal,Java.com.tinkerpop.gremlin.structure.Element {
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
      addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.structure.Edge com.tinkerpop.gremlin.structure.Vertex.addEdge(java.lang.String,com.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addEdge(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Edge;
      addEdge(arg0: string_t, arg1: Vertex, arg2: object_array_t): Edge;
      addEdgeP(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Promise<Edge>;
      addEdgeP(arg0: string_t, arg1: Vertex, arg2: object_array_t): Promise<Edge>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate()
      aggregate(): GraphTraversal;
      aggregateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.as(java.lang.String)
      as(arg0: string_t): GraphTraversal;
      asP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.back(java.lang.String)
      back(arg0: string_t): GraphTraversal;
      backP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.between(java.lang.String,java.lang.Comparable,java.lang.Comparable)
      between(arg0: string_t, arg1: Comparable, arg2: Comparable): GraphTraversal;
      betweenP(arg0: string_t, arg1: Comparable, arg2: Comparable): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Collection<java.lang.String>>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap(java.lang.String)
      cap(arg0: string_t): GraphTraversal;
      capP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap()
      cap(): GraphTraversal;
      capP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Predicate<A>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: object_t, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: object_t, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2,M> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Function<A, M>,java.util.Map<M, com.tinkerpop.gremlin.process.Traversal<?, E2>>)
      choose(arg0: Function, arg1: Map): GraphTraversal;
      chooseP(arg0: Function, arg1: Map): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Long> com.tinkerpop.gremlin.process.graph.ElementTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      emit(arg0: object_t): GraphTraversal;
      emitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.util.Collection<A>)
      except(arg0: Collection): GraphTraversal;
      exceptP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.String)
      except(arg0: string_t): GraphTraversal;
      exceptP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.Object)
      except(arg0: object_t): GraphTraversal;
      exceptP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      filter(arg0: object_t): GraphTraversal;
      filterP(arg0: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold(E2,java.util.function.BiFunction<E2, A, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.List<A>> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.structure.Graph com.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public abstract java.lang.Object com.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.inject(java.lang.Object...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.structure.Element$Iterators com.tinkerpop.gremlin.structure.Element.iterators()
      iterators(): Element$Iterators;
      iteratorsP(): Promise<Element$Iterators>;
      // public abstract com.tinkerpop.gremlin.structure.Vertex$Iterators com.tinkerpop.gremlin.structure.Vertex.iterators()
      iterators(): Vertex$Iterators;
      iteratorsP(): Promise<Vertex$Iterators>;
      // public default java.util.Set<java.lang.String> com.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.ElementTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, ? extends com.tinkerpop.gremlin.structure.Property<E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.structure.VertexProperty<V> com.tinkerpop.gremlin.structure.Vertex.property(java.lang.String,V,java.lang.Object...)
      property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): VertexProperty;
      property(arg0: string_t, arg1: object_t, arg2: object_array_t): VertexProperty;
      propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<VertexProperty>;
      propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<VertexProperty>;
      // public abstract <V> com.tinkerpop.gremlin.structure.VertexProperty<V> com.tinkerpop.gremlin.structure.Vertex.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): VertexProperty;
      propertyP(arg0: string_t, arg1: object_t): Promise<VertexProperty>;
      // public abstract <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> com.tinkerpop.gremlin.structure.VertexProperty<V> com.tinkerpop.gremlin.structure.Vertex.property(java.lang.String)
      property(arg0: string_t): VertexProperty;
      propertyP(arg0: string_t): Promise<VertexProperty>;
      // public default <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, java.util.Map<java.lang.String, java.util.List<com.tinkerpop.gremlin.structure.VertexProperty<E2>>>> com.tinkerpop.gremlin.process.graph.VertexTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public abstract void com.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.repeat(com.tinkerpop.gremlin.process.Traversal<?, A>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.util.Collection<A>)
      retain(arg0: Collection): GraphTraversal;
      retainP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.String)
      retain(arg0: string_t): GraphTraversal;
      retainP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.Object)
      retain(arg0: object_t): GraphTraversal;
      retainP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BiFunction<V, A, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.shuffle()
      shuffle(): GraphTraversal;
      shuffleP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<A>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.structure.VertexProperty<V> com.tinkerpop.gremlin.structure.Vertex.singleProperty(java.lang.String,V,java.lang.Object...)
      singleProperty(arg0: string_t, arg1: object_t, ...arg2: object_t[]): VertexProperty;
      singleProperty(arg0: string_t, arg1: object_t, arg2: object_array_t): VertexProperty;
      singlePropertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<VertexProperty>;
      singlePropertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<VertexProperty>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.start()
      start(): GraphTraversal;
      startP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store()
      store(): GraphTraversal;
      storeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: Set, arg1: Map, arg2: object_t): GraphTraversal;
      subgraphP(arg0: Set, arg1: Map, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: object_t): GraphTraversal;
      subgraphP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): GraphTraversal;
      submitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.ElementTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.toV(com.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      until(arg0: object_t): GraphTraversal;
      untilP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> V com.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, E2> com.tinkerpop.gremlin.process.graph.VertexTraversal.value()
      value(): GraphTraversal;
      valueP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, java.util.Map<java.lang.String, java.util.List<E2>>> com.tinkerpop.gremlin.process.graph.VertexTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, java.util.Map<java.lang.String, java.util.List<E2>>> com.tinkerpop.gremlin.process.graph.VertexTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
      where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
      whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
      where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
      whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(com.tinkerpop.gremlin.process.Traversal)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withPath()
      withPath(): GraphTraversal;
      withPathP(): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>,java.util.function.UnaryOperator<B>)
      withSack(arg0: object_t, arg1: object_t): GraphTraversal;
      withSackP(arg0: object_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>)
      withSack(arg0: object_t): GraphTraversal;
      withSackP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: object_t): GraphTraversal;
      withSideEffectP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
    }
    export module Vertex {
      export interface Static {
        DEFAULT_LABEL: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Vertex$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Vertex$Exceptions {
      export interface Static {
        new (): com.tinkerpop.gremlin.structure.Vertex$Exceptions;
        // public static java.lang.IllegalStateException com.tinkerpop.gremlin.structure.Vertex$Exceptions.edgeAdditionsNotSupported()
        edgeAdditionsNotSupported(): object_t;
        edgeAdditionsNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalStateException com.tinkerpop.gremlin.structure.Vertex$Exceptions.multiplePropertiesExistForProvidedKey(java.lang.String)
        multiplePropertiesExistForProvidedKey(arg0: string_t): object_t;
        multiplePropertiesExistForProvidedKeyP(arg0: string_t): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException com.tinkerpop.gremlin.structure.Vertex$Exceptions.userSuppliedIdsNotSupported()
        userSuppliedIdsNotSupported(): object_t;
        userSuppliedIdsNotSupportedP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException com.tinkerpop.gremlin.structure.Vertex$Exceptions.userSuppliedIdsOfThisTypeNotSupported()
        userSuppliedIdsOfThisTypeNotSupported(): object_t;
        userSuppliedIdsOfThisTypeNotSupportedP(): Promise<object_t>;
        // public static java.lang.IllegalStateException com.tinkerpop.gremlin.structure.Vertex$Exceptions.vertexRemovalNotSupported()
        vertexRemovalNotSupported(): object_t;
        vertexRemovalNotSupportedP(): Promise<object_t>;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface Vertex$Iterators extends Java.com.tinkerpop.gremlin.structure.Element$Iterators {
      // public abstract java.util.Iterator<com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.structure.Vertex$Iterators.edgeIterator(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      edgeIterator(arg0: Direction, ...arg1: string_t[]): Iterator;
      edgeIterator(arg0: Direction, arg1: array_t<string_t>): Iterator;
      edgeIteratorP(arg0: Direction, ...arg1: string_t[]): Promise<Iterator>;
      edgeIteratorP(arg0: Direction, arg1: array_t<string_t>): Promise<Iterator>;
      // public abstract <V> java.util.Iterator<? extends com.tinkerpop.gremlin.structure.Property<V>> com.tinkerpop.gremlin.structure.Element$Iterators.propertyIterator(java.lang.String...)
      propertyIterator(...arg0: string_t[]): Iterator;
      propertyIterator(arg0: array_t<string_t>): Iterator;
      propertyIteratorP(...arg0: string_t[]): Promise<Iterator>;
      propertyIteratorP(arg0: array_t<string_t>): Promise<Iterator>;
      // public default <V> java.util.Iterator<V> com.tinkerpop.gremlin.structure.Element$Iterators.valueIterator(java.lang.String...)
      valueIterator(...arg0: string_t[]): Iterator;
      valueIterator(arg0: array_t<string_t>): Iterator;
      valueIteratorP(...arg0: string_t[]): Promise<Iterator>;
      valueIteratorP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract java.util.Iterator<com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.structure.Vertex$Iterators.vertexIterator(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      vertexIterator(arg0: Direction, ...arg1: string_t[]): Iterator;
      vertexIterator(arg0: Direction, arg1: array_t<string_t>): Iterator;
      vertexIteratorP(arg0: Direction, ...arg1: string_t[]): Promise<Iterator>;
      vertexIteratorP(arg0: Direction, arg1: array_t<string_t>): Promise<Iterator>;
    }
    export module Vertex$Iterators {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface VertexProperty extends Java.com.tinkerpop.gremlin.process.graph.VertexPropertyTraversal,Java.com.tinkerpop.gremlin.structure.Element,Java.com.tinkerpop.gremlin.structure.Property {
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
      addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate()
      aggregate(): GraphTraversal;
      aggregateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.as(java.lang.String)
      as(arg0: string_t): GraphTraversal;
      asP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.back(java.lang.String)
      back(arg0: string_t): GraphTraversal;
      backP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.between(java.lang.String,java.lang.Comparable,java.lang.Comparable)
      between(arg0: string_t, arg1: Comparable, arg2: Comparable): GraphTraversal;
      betweenP(arg0: string_t, arg1: Comparable, arg2: Comparable): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Collection<java.lang.String>>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap(java.lang.String)
      cap(arg0: string_t): GraphTraversal;
      capP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap()
      cap(): GraphTraversal;
      capP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Predicate<A>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: object_t, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: object_t, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2,M> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Function<A, M>,java.util.Map<M, com.tinkerpop.gremlin.process.Traversal<?, E2>>)
      choose(arg0: Function, arg1: Map): GraphTraversal;
      chooseP(arg0: Function, arg1: Map): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Long> com.tinkerpop.gremlin.process.graph.ElementTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.structure.Element com.tinkerpop.gremlin.structure.Property.element()
      element(): Element;
      elementP(): Promise<Element>;
      // public abstract com.tinkerpop.gremlin.structure.Vertex com.tinkerpop.gremlin.structure.VertexProperty.element()
      element(): Vertex;
      elementP(): Promise<Vertex>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      emit(arg0: object_t): GraphTraversal;
      emitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.util.Collection<A>)
      except(arg0: Collection): GraphTraversal;
      exceptP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.String)
      except(arg0: string_t): GraphTraversal;
      exceptP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.Object)
      except(arg0: object_t): GraphTraversal;
      exceptP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      filter(arg0: object_t): GraphTraversal;
      filterP(arg0: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold(E2,java.util.function.BiFunction<E2, A, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.List<A>> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.structure.Graph com.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public abstract java.lang.Object com.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default void com.tinkerpop.gremlin.structure.Property.ifPresent(java.util.function.Consumer<? super V>)
      ifPresent(arg0: Consumer): void;
      ifPresentP(arg0: Consumer): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.inject(java.lang.Object...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public abstract boolean com.tinkerpop.gremlin.structure.Property.isPresent()
      isPresent(): boolean;
      isPresentP(): Promise<boolean>;
      // public abstract com.tinkerpop.gremlin.structure.VertexProperty$Iterators com.tinkerpop.gremlin.structure.VertexProperty.iterators()
      iterators(): VertexProperty$Iterators;
      iteratorsP(): Promise<VertexProperty$Iterators>;
      // public abstract com.tinkerpop.gremlin.structure.Element$Iterators com.tinkerpop.gremlin.structure.Element.iterators()
      iterators(): Element$Iterators;
      iteratorsP(): Promise<Element$Iterators>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Property.key()
      key(): string;
      keyP(): Promise<string>;
      // public default java.util.Set<java.lang.String> com.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default V com.tinkerpop.gremlin.structure.Property.orElse(V)
      orElse(arg0: object_t): object_t;
      orElseP(arg0: object_t): Promise<object_t>;
      // public default V com.tinkerpop.gremlin.structure.Property.orElseGet(java.util.function.Supplier<? extends V>)
      orElseGet(arg0: object_t): object_t;
      orElseGetP(arg0: object_t): Promise<object_t>;
      // public default <E> V com.tinkerpop.gremlin.structure.Property.orElseThrow(java.util.function.Supplier<? extends E>) throws E
      orElseThrow(arg0: object_t): object_t;
      orElseThrowP(arg0: object_t): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.ElementTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, ? extends com.tinkerpop.gremlin.structure.Property<E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public abstract <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.VertexProperty, java.util.Map<java.lang.String, com.tinkerpop.gremlin.structure.Property<E2>>> com.tinkerpop.gremlin.process.graph.VertexPropertyTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public abstract void com.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.repeat(com.tinkerpop.gremlin.process.Traversal<?, A>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.util.Collection<A>)
      retain(arg0: Collection): GraphTraversal;
      retainP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.String)
      retain(arg0: string_t): GraphTraversal;
      retainP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.Object)
      retain(arg0: object_t): GraphTraversal;
      retainP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BiFunction<V, A, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.shuffle()
      shuffle(): GraphTraversal;
      shuffleP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<A>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.start()
      start(): GraphTraversal;
      startP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store()
      store(): GraphTraversal;
      storeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: Set, arg1: Map, arg2: object_t): GraphTraversal;
      subgraphP(arg0: Set, arg1: Map, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: object_t): GraphTraversal;
      subgraphP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): GraphTraversal;
      submitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.ElementTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.toV(com.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      until(arg0: object_t): GraphTraversal;
      untilP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> V com.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public abstract V com.tinkerpop.gremlin.structure.Property.value() throws java.util.NoSuchElementException
      value(): object_t;
      valueP(): Promise<object_t>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.VertexProperty, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.VertexPropertyTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.VertexProperty, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.VertexPropertyTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
      where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
      whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
      where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
      whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(com.tinkerpop.gremlin.process.Traversal)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withPath()
      withPath(): GraphTraversal;
      withPathP(): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>,java.util.function.UnaryOperator<B>)
      withSack(arg0: object_t, arg1: object_t): GraphTraversal;
      withSackP(arg0: object_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>)
      withSack(arg0: object_t): GraphTraversal;
      withSackP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: object_t): GraphTraversal;
      withSideEffectP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
    }
    export module VertexProperty {
      export interface Static {
        // public static <V> com.tinkerpop.gremlin.structure.VertexProperty<V> com.tinkerpop.gremlin.structure.VertexProperty.empty()
        empty(): VertexProperty;
        emptyP(): Promise<VertexProperty>;
        // public static <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Property.empty()
        empty(): Property;
        emptyP(): Promise<Property>;
        DEFAULT_LABEL: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface VertexProperty$Exceptions extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module VertexProperty$Exceptions {
      export interface Static {
        new (): com.tinkerpop.gremlin.structure.VertexProperty$Exceptions;
        // public static java.lang.UnsupportedOperationException com.tinkerpop.gremlin.structure.VertexProperty$Exceptions.metaPropertiesNotSupported()
        metaPropertiesNotSupported(): object_t;
        metaPropertiesNotSupportedP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException com.tinkerpop.gremlin.structure.VertexProperty$Exceptions.multiPropertiesNotSupported()
        multiPropertiesNotSupported(): object_t;
        multiPropertiesNotSupportedP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException com.tinkerpop.gremlin.structure.VertexProperty$Exceptions.userSuppliedIdsNotSupported()
        userSuppliedIdsNotSupported(): object_t;
        userSuppliedIdsNotSupportedP(): Promise<object_t>;
        // public static java.lang.UnsupportedOperationException com.tinkerpop.gremlin.structure.VertexProperty$Exceptions.userSuppliedIdsOfThisTypeNotSupported()
        userSuppliedIdsOfThisTypeNotSupported(): object_t;
        userSuppliedIdsOfThisTypeNotSupportedP(): Promise<object_t>;
      }
    }
  }

  export module com.tinkerpop.gremlin.structure {
    export interface VertexProperty$Iterators extends Java.com.tinkerpop.gremlin.structure.Element$Iterators {
      // public abstract <V> java.util.Iterator<? extends com.tinkerpop.gremlin.structure.Property<V>> com.tinkerpop.gremlin.structure.Element$Iterators.propertyIterator(java.lang.String...)
      propertyIterator(...arg0: string_t[]): Iterator;
      propertyIterator(arg0: array_t<string_t>): Iterator;
      propertyIteratorP(...arg0: string_t[]): Promise<Iterator>;
      propertyIteratorP(arg0: array_t<string_t>): Promise<Iterator>;
      // public default <V> java.util.Iterator<V> com.tinkerpop.gremlin.structure.Element$Iterators.valueIterator(java.lang.String...)
      valueIterator(...arg0: string_t[]): Iterator;
      valueIterator(arg0: array_t<string_t>): Iterator;
      valueIteratorP(...arg0: string_t[]): Promise<Iterator>;
      valueIteratorP(arg0: array_t<string_t>): Promise<Iterator>;
    }
    export module VertexProperty$Iterators {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerEdge extends Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerElement,Java.com.tinkerpop.gremlin.structure.Edge,Java.com.tinkerpop.gremlin.structure.Edge$Iterators {
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
      addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate()
      aggregate(): GraphTraversal;
      aggregateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.as(java.lang.String)
      as(arg0: string_t): GraphTraversal;
      asP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.back(java.lang.String)
      back(arg0: string_t): GraphTraversal;
      backP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.between(java.lang.String,java.lang.Comparable,java.lang.Comparable)
      between(arg0: string_t, arg1: Comparable, arg2: Comparable): GraphTraversal;
      betweenP(arg0: string_t, arg1: Comparable, arg2: Comparable): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Collection<java.lang.String>>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap(java.lang.String)
      cap(arg0: string_t): GraphTraversal;
      capP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap()
      cap(): GraphTraversal;
      capP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Predicate<A>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: object_t, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: object_t, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2,M> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Function<A, M>,java.util.Map<M, com.tinkerpop.gremlin.process.Traversal<?, E2>>)
      choose(arg0: Function, arg1: Map): GraphTraversal;
      chooseP(arg0: Function, arg1: Map): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Long> com.tinkerpop.gremlin.process.graph.ElementTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      emit(arg0: object_t): GraphTraversal;
      emitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.util.Collection<A>)
      except(arg0: Collection): GraphTraversal;
      exceptP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.String)
      except(arg0: string_t): GraphTraversal;
      exceptP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.Object)
      except(arg0: object_t): GraphTraversal;
      exceptP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      filter(arg0: object_t): GraphTraversal;
      filterP(arg0: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold(E2,java.util.function.BiFunction<E2, A, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.List<A>> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.structure.Graph com.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public abstract java.lang.Object com.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.inject(java.lang.Object...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.structure.Element$Iterators com.tinkerpop.gremlin.structure.Element.iterators()
      iterators(): Element$Iterators;
      iteratorsP(): Promise<Element$Iterators>;
      // public abstract com.tinkerpop.gremlin.structure.Edge$Iterators com.tinkerpop.gremlin.structure.Edge.iterators()
      iterators(): Edge$Iterators;
      iteratorsP(): Promise<Edge$Iterators>;
      // public default java.util.Set<java.lang.String> com.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.ElementTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, ? extends com.tinkerpop.gremlin.structure.Property<E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public abstract <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract <V> java.util.Iterator<? extends com.tinkerpop.gremlin.structure.Property<V>> com.tinkerpop.gremlin.structure.Element$Iterators.propertyIterator(java.lang.String...)
      propertyIterator(...arg0: string_t[]): Iterator;
      propertyIterator(arg0: array_t<string_t>): Iterator;
      propertyIteratorP(...arg0: string_t[]): Promise<Iterator>;
      propertyIteratorP(arg0: array_t<string_t>): Promise<Iterator>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, java.util.Map<java.lang.String, com.tinkerpop.gremlin.structure.Property<E2>>> com.tinkerpop.gremlin.process.graph.EdgeTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public abstract void com.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.repeat(com.tinkerpop.gremlin.process.Traversal<?, A>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.util.Collection<A>)
      retain(arg0: Collection): GraphTraversal;
      retainP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.String)
      retain(arg0: string_t): GraphTraversal;
      retainP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.Object)
      retain(arg0: object_t): GraphTraversal;
      retainP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BiFunction<V, A, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.shuffle()
      shuffle(): GraphTraversal;
      shuffleP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<A>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.start()
      start(): GraphTraversal;
      startP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store()
      store(): GraphTraversal;
      storeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: Set, arg1: Map, arg2: object_t): GraphTraversal;
      subgraphP(arg0: Set, arg1: Map, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: object_t): GraphTraversal;
      subgraphP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): GraphTraversal;
      submitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.ElementTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.toV(com.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      until(arg0: object_t): GraphTraversal;
      untilP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> V com.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, E2> com.tinkerpop.gremlin.process.graph.EdgeTraversal.value()
      value(): GraphTraversal;
      valueP(): Promise<GraphTraversal>;
      // public default <V> java.util.Iterator<V> com.tinkerpop.gremlin.structure.Element$Iterators.valueIterator(java.lang.String...)
      valueIterator(...arg0: string_t[]): Iterator;
      valueIterator(arg0: array_t<string_t>): Iterator;
      valueIteratorP(...arg0: string_t[]): Promise<Iterator>;
      valueIteratorP(arg0: array_t<string_t>): Promise<Iterator>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.EdgeTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.EdgeTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public abstract java.util.Iterator<com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.structure.Edge$Iterators.vertexIterator(com.tinkerpop.gremlin.structure.Direction)
      vertexIterator(arg0: Direction): Iterator;
      vertexIteratorP(arg0: Direction): Promise<Iterator>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
      where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
      whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
      where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
      whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(com.tinkerpop.gremlin.process.Traversal)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withPath()
      withPath(): GraphTraversal;
      withPathP(): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>,java.util.function.UnaryOperator<B>)
      withSack(arg0: object_t, arg1: object_t): GraphTraversal;
      withSackP(arg0: object_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>)
      withSack(arg0: object_t): GraphTraversal;
      withSackP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: object_t): GraphTraversal;
      withSideEffectP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
    }
    export module TinkerEdge {
      export interface Static {
        DEFAULT_LABEL: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerElement extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.structure.Element,Java.com.tinkerpop.gremlin.structure.Element$Iterators {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.structure.Graph com.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.lang.Object com.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.structure.Element$Iterators com.tinkerpop.gremlin.structure.Element.iterators()
      iterators(): Element$Iterators;
      iteratorsP(): Promise<Element$Iterators>;
      // public default java.util.Set<java.lang.String> com.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract <V> java.util.Iterator<? extends com.tinkerpop.gremlin.structure.Property<V>> com.tinkerpop.gremlin.structure.Element$Iterators.propertyIterator(java.lang.String...)
      propertyIterator(...arg0: string_t[]): Iterator;
      propertyIterator(arg0: array_t<string_t>): Iterator;
      propertyIteratorP(...arg0: string_t[]): Promise<Iterator>;
      propertyIteratorP(arg0: array_t<string_t>): Promise<Iterator>;
      // public abstract void com.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default <V> V com.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public default <V> java.util.Iterator<V> com.tinkerpop.gremlin.structure.Element$Iterators.valueIterator(java.lang.String...)
      valueIterator(...arg0: string_t[]): Iterator;
      valueIterator(arg0: array_t<string_t>): Iterator;
      valueIteratorP(...arg0: string_t[]): Promise<Iterator>;
      valueIteratorP(arg0: array_t<string_t>): Promise<Iterator>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerElement {
      export interface Static {
      }
    }
  }

  export module com.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerFactory extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerFactory {
      export interface Static {
        new (): com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory;
        // public static com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.createClassic()
        createClassic(): TinkerGraph;
        createClassicP(): Promise<TinkerGraph>;
        // public static com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.createModern()
        createModern(): TinkerGraph;
        createModernP(): Promise<TinkerGraph>;
        // public static com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.createTheCrew()
        createTheCrew(): TinkerGraph;
        createTheCrewP(): Promise<TinkerGraph>;
        // public static void com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.generateClassic(com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph)
        generateClassic(arg0: TinkerGraph): void;
        generateClassicP(arg0: TinkerGraph): Promise<void>;
        // public static void com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.generateModern(com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph)
        generateModern(arg0: TinkerGraph): void;
        generateModernP(arg0: TinkerGraph): Promise<void>;
        // public static void com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.generateTheCrew(com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph)
        generateTheCrew(arg0: TinkerGraph): void;
        generateTheCrewP(arg0: TinkerGraph): Promise<void>;
      }
    }
  }

  export module com.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerFactory$SocialTraversal extends Java.com.tinkerpop.gremlin.process.Traversal {
      // public abstract com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<S, E> com.tinkerpop.gremlin.process.Traversal.asAdmin()
      asAdmin(): Traversal$Admin;
      asAdminP(): Promise<Traversal$Admin>;
      // public abstract com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal.clone() throws java.lang.CloneNotSupportedException
      clone(): Traversal;
      cloneP(): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal.created()
      created(): TinkerFactory$SocialTraversal;
      createdP(): Promise<TinkerFactory$SocialTraversal>;
      // public default <C> C com.tinkerpop.gremlin.process.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default <E2> void com.tinkerpop.gremlin.process.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: object_t, arg1: Consumer): void;
      forEachRemainingP(arg0: object_t, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public default <A,B> com.tinkerpop.gremlin.process.Traversal<A, B> com.tinkerpop.gremlin.process.Traversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal.knows()
      knows(): TinkerFactory$SocialTraversal;
      knowsP(): Promise<TinkerFactory$SocialTraversal>;
      // public default com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal<S, java.lang.String> com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal.name()
      name(): TinkerFactory$SocialTraversal;
      nameP(): Promise<TinkerFactory$SocialTraversal>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal.people(java.lang.String)
      people(arg0: string_t): TinkerFactory$SocialTraversal;
      peopleP(arg0: string_t): Promise<TinkerFactory$SocialTraversal>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): Traversal;
      submitP(arg0: object_t): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.process.util.BulkSet<E> com.tinkerpop.gremlin.process.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> com.tinkerpop.gremlin.process.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public default java.util.Optional<E> com.tinkerpop.gremlin.process.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
    }
    export module TinkerFactory$SocialTraversal {
      export interface Static {
        // public static <S> com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal<S, S> com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal.of(com.tinkerpop.gremlin.structure.Graph)
        of(arg0: Graph): TinkerFactory$SocialTraversal;
        ofP(arg0: Graph): Promise<TinkerFactory$SocialTraversal>;
        OF: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerFactory$SocialTraversal$DefaultSocialTraversal extends Java.com.tinkerpop.gremlin.process.util.DefaultTraversal,Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal {
      // public default void com.tinkerpop.gremlin.process.Traversal$Admin.addStart(com.tinkerpop.gremlin.process.Traverser<S>)
      addStart(arg0: Traverser): void;
      addStartP(arg0: Traverser): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.addStarts(java.util.Iterator<com.tinkerpop.gremlin.process.Traverser<S>>)
      addStarts(arg0: Iterator): void;
      addStartsP(arg0: Iterator): Promise<void>;
      // public abstract <S2,E2> com.tinkerpop.gremlin.process.Traversal<S2, E2> com.tinkerpop.gremlin.process.Traversal$Admin.addStep(int,com.tinkerpop.gremlin.process.Step<?, ?>) throws java.lang.IllegalStateException
      addStep(arg0: integer_t, arg1: Step): Traversal;
      addStepP(arg0: integer_t, arg1: Step): Promise<Traversal>;
      // public default <E2> com.tinkerpop.gremlin.process.Traversal<S, E2> com.tinkerpop.gremlin.process.Traversal$Admin.addStep(com.tinkerpop.gremlin.process.Step<?, E2>) throws java.lang.IllegalStateException
      addStep(arg0: Step): Traversal;
      addStepP(arg0: Step): Promise<Traversal>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.applyStrategies(com.tinkerpop.gremlin.process.TraversalEngine)
      applyStrategies(arg0: TraversalEngine): void;
      applyStrategiesP(arg0: TraversalEngine): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.Traversal.com.tinkerpop.gremlin.process.Traversal$Admin<S, E> com.tinkerpop.gremlin.process.Traversal.asAdmin()
      asAdmin(): Traversal$Admin;
      asAdminP(): Promise<Traversal$Admin>;
      // public com.tinkerpop.gremlin.process.util.DefaultTraversal<S, E> com.tinkerpop.gremlin.process.util.DefaultTraversal.clone() throws java.lang.CloneNotSupportedException
      clone(): DefaultTraversal;
      cloneP(): Promise<DefaultTraversal>;
      // public abstract com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal.clone() throws java.lang.CloneNotSupportedException
      clone(): Traversal;
      cloneP(): Promise<Traversal>;
      // public java.lang.Object com.tinkerpop.gremlin.process.util.DefaultTraversal.clone() throws java.lang.CloneNotSupportedException
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal.created()
      created(): TinkerFactory$SocialTraversal;
      createdP(): Promise<TinkerFactory$SocialTraversal>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default <C> C com.tinkerpop.gremlin.process.Traversal.fill(C)
      fill(arg0: Collection): Collection;
      fillP(arg0: Collection): Promise<Collection>;
      // public default <E2> void com.tinkerpop.gremlin.process.Traversal.forEachRemaining(java.lang.Class<E2>,java.util.function.Consumer<E2>)
      forEachRemaining(arg0: object_t, arg1: Consumer): void;
      forEachRemainingP(arg0: object_t, arg1: Consumer): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.TraversalSideEffects com.tinkerpop.gremlin.process.Traversal$Admin.getSideEffects()
      getSideEffects(): TraversalSideEffects;
      getSideEffectsP(): Promise<TraversalSideEffects>;
      // public abstract java.util.List<com.tinkerpop.gremlin.process.Step> com.tinkerpop.gremlin.process.Traversal$Admin.getSteps()
      getSteps(): List;
      getStepsP(): Promise<List>;
      // public abstract com.tinkerpop.gremlin.process.TraversalStrategies com.tinkerpop.gremlin.process.Traversal$Admin.getStrategies()
      getStrategies(): TraversalStrategies;
      getStrategiesP(): Promise<TraversalStrategies>;
      // public abstract java.util.Optional<com.tinkerpop.gremlin.process.TraversalEngine> com.tinkerpop.gremlin.process.Traversal$Admin.getTraversalEngine()
      getTraversalEngine(): object_t;
      getTraversalEngineP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.process.graph.marker.TraversalHolder<?, ?> com.tinkerpop.gremlin.process.Traversal$Admin.getTraversalHolder()
      getTraversalHolder(): object_t;
      getTraversalHolderP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.TraverserGenerator com.tinkerpop.gremlin.process.Traversal$Admin.getTraverserGenerator()
      getTraverserGenerator(): TraverserGenerator;
      getTraverserGeneratorP(): Promise<TraverserGenerator>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public default <A,B> com.tinkerpop.gremlin.process.Traversal<A, B> com.tinkerpop.gremlin.process.Traversal.iterate()
      iterate(): Traversal;
      iterateP(): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal.knows()
      knows(): TinkerFactory$SocialTraversal;
      knowsP(): Promise<TinkerFactory$SocialTraversal>;
      // public default com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal<S, java.lang.String> com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal.name()
      name(): TinkerFactory$SocialTraversal;
      nameP(): Promise<TinkerFactory$SocialTraversal>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.next(int)
      next(arg0: integer_t): List;
      nextP(arg0: integer_t): Promise<List>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory.com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal<S, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal.people(java.lang.String)
      people(arg0: string_t): TinkerFactory$SocialTraversal;
      peopleP(arg0: string_t): Promise<TinkerFactory$SocialTraversal>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default <S2,E2> com.tinkerpop.gremlin.process.Traversal<S2, E2> com.tinkerpop.gremlin.process.Traversal$Admin.removeStep(com.tinkerpop.gremlin.process.Step<?, ?>) throws java.lang.IllegalStateException
      removeStep(arg0: Step): Traversal;
      removeStepP(arg0: Step): Promise<Traversal>;
      // public abstract <S2,E2> com.tinkerpop.gremlin.process.Traversal<S2, E2> com.tinkerpop.gremlin.process.Traversal$Admin.removeStep(int) throws java.lang.IllegalStateException
      removeStep(arg0: integer_t): Traversal;
      removeStepP(arg0: integer_t): Promise<Traversal>;
      // public default void com.tinkerpop.gremlin.process.Traversal$Admin.reset()
      reset(): void;
      resetP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal$Admin.reverse() throws java.lang.IllegalStateException
      reverse(): Traversal;
      reverseP(): Promise<Traversal>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.setSideEffects(com.tinkerpop.gremlin.process.TraversalSideEffects)
      setSideEffects(arg0: TraversalSideEffects): void;
      setSideEffectsP(arg0: TraversalSideEffects): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.setStrategies(com.tinkerpop.gremlin.process.TraversalStrategies)
      setStrategies(arg0: TraversalStrategies): void;
      setStrategiesP(arg0: TraversalStrategies): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.process.Traversal$Admin.setTraversalHolder(com.tinkerpop.gremlin.process.graph.marker.TraversalHolder<?, ?>)
      setTraversalHolder(arg0: object_t): void;
      setTraversalHolderP(arg0: object_t): Promise<void>;
      // public default com.tinkerpop.gremlin.process.Traversal<S, E> com.tinkerpop.gremlin.process.Traversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): Traversal;
      submitP(arg0: object_t): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.process.util.BulkSet<E> com.tinkerpop.gremlin.process.Traversal.toBulkSet()
      toBulkSet(): BulkSet;
      toBulkSetP(): Promise<BulkSet>;
      // public default java.util.List<E> com.tinkerpop.gremlin.process.Traversal.toList()
      toList(): List;
      toListP(): Promise<List>;
      // public default java.util.Set<E> com.tinkerpop.gremlin.process.Traversal.toSet()
      toSet(): Set;
      toSetP(): Promise<Set>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default java.util.Optional<E> com.tinkerpop.gremlin.process.Traversal.tryNext()
      tryNext(): object_t;
      tryNextP(): Promise<object_t>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerFactory$SocialTraversal$DefaultSocialTraversal {
      export interface Static {
        new (arg0: Graph): com.tinkerpop.gremlin.tinkergraph.structure.TinkerFactory$SocialTraversal$DefaultSocialTraversal;
        OF: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerGraph extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.structure.Graph,Java.com.tinkerpop.gremlin.structure.Graph$Iterators {
      // public abstract com.tinkerpop.gremlin.structure.Vertex com.tinkerpop.gremlin.structure.Graph.addVertex(java.lang.Object...)
      addVertex(...arg0: object_t[]): Vertex;
      addVertex(arg0: object_array_t): Vertex;
      addVertexP(...arg0: object_t[]): Promise<Vertex>;
      addVertexP(arg0: object_array_t): Promise<Vertex>;
      // public default com.tinkerpop.gremlin.structure.Vertex com.tinkerpop.gremlin.structure.Graph.addVertex(java.lang.String)
      addVertex(arg0: string_t): Vertex;
      addVertexP(arg0: string_t): Promise<Vertex>;
      // public void com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract void java.lang.AutoCloseable.close() throws java.lang.Exception
      close(): void;
      closeP(): Promise<void>;
      // public abstract com.tinkerpop.gremlin.process.computer.GraphComputer com.tinkerpop.gremlin.structure.Graph.compute(java.lang.Class...)
      compute(...arg0: object_t[]): object_t;
      compute(arg0: object_array_t): object_t;
      computeP(...arg0: object_t[]): Promise<object_t>;
      computeP(arg0: object_array_t): Promise<object_t>;
      // public abstract org.apache.commons.configuration.Configuration com.tinkerpop.gremlin.structure.Graph.configuration()
      configuration(): object_t;
      configurationP(): Promise<object_t>;
      // public <E> void com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.createIndex(java.lang.String,java.lang.Class<E>)
      createIndex(arg0: string_t, arg1: object_t): void;
      createIndexP(arg0: string_t, arg1: object_t): Promise<void>;
      // public void com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.dropGraphView()
      dropGraphView(): void;
      dropGraphViewP(): Promise<void>;
      // public <E> void com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.dropIndex(java.lang.String,java.lang.Class<E>)
      dropIndex(arg0: string_t, arg1: object_t): void;
      dropIndexP(arg0: string_t, arg1: object_t): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Edge, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.structure.Graph.E(java.lang.Object...)
      E(...arg0: object_t[]): GraphTraversal;
      E(arg0: object_array_t): GraphTraversal;
      EP(...arg0: object_t[]): Promise<GraphTraversal>;
      EP(arg0: object_array_t): Promise<GraphTraversal>;
      // public abstract java.util.Iterator<com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.structure.Graph$Iterators.edgeIterator(java.lang.Object...)
      edgeIterator(...arg0: object_t[]): Iterator;
      edgeIterator(arg0: object_array_t): Iterator;
      edgeIteratorP(...arg0: object_t[]): Promise<Iterator>;
      edgeIteratorP(arg0: object_array_t): Promise<Iterator>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default com.tinkerpop.gremlin.structure.Graph$Features com.tinkerpop.gremlin.structure.Graph.features()
      features(): Graph$Features;
      featuresP(): Promise<Graph$Features>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public <E> java.util.Set<java.lang.String> com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.getIndexedKeys(java.lang.Class<E>)
      getIndexedKeys(arg0: object_t): Set;
      getIndexedKeysP(arg0: object_t): Promise<Set>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default com.tinkerpop.gremlin.structure.Graph$Io com.tinkerpop.gremlin.structure.Graph.io()
      io(): Graph$Io;
      ioP(): Promise<Graph$Io>;
      // public abstract com.tinkerpop.gremlin.structure.Graph$Iterators com.tinkerpop.gremlin.structure.Graph.iterators()
      iterators(): Graph$Iterators;
      iteratorsP(): Promise<Graph$Iterators>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default <T,S> T com.tinkerpop.gremlin.structure.Graph.of(java.lang.Class<T>)
      of(arg0: object_t): Traversal;
      ofP(arg0: object_t): Promise<Traversal>;
      // public default com.tinkerpop.gremlin.structure.strategy.StrategyGraph com.tinkerpop.gremlin.structure.Graph.strategy(com.tinkerpop.gremlin.structure.strategy.GraphStrategy...)
      strategy(...arg0: object_t[]): object_t;
      strategy(arg0: object_array_t): object_t;
      strategyP(...arg0: object_t[]): Promise<object_t>;
      strategyP(arg0: object_array_t): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract com.tinkerpop.gremlin.structure.Transaction com.tinkerpop.gremlin.structure.Graph.tx()
      tx(): Transaction;
      txP(): Promise<Transaction>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.structure.Graph.V(java.lang.Object...)
      V(...arg0: object_t[]): GraphTraversal;
      V(arg0: object_array_t): GraphTraversal;
      VP(...arg0: object_t[]): Promise<GraphTraversal>;
      VP(arg0: object_array_t): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.structure.Graph$Variables com.tinkerpop.gremlin.structure.Graph.variables()
      variables(): Graph$Variables;
      variablesP(): Promise<Graph$Variables>;
      // public abstract java.util.Iterator<com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.structure.Graph$Iterators.vertexIterator(java.lang.Object...)
      vertexIterator(...arg0: object_t[]): Iterator;
      vertexIterator(arg0: object_array_t): Iterator;
      vertexIteratorP(...arg0: object_t[]): Promise<Iterator>;
      vertexIteratorP(arg0: object_array_t): Promise<Iterator>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerGraph {
      export interface Static {
        // public static com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.open(org.apache.commons.configuration.Configuration)
        open(arg0: object_t): TinkerGraph;
        openP(arg0: object_t): Promise<TinkerGraph>;
        // public static com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph.open()
        open(): TinkerGraph;
        openP(): Promise<TinkerGraph>;
        GRAPH: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerGraph$TinkerGraphEdgeFeatures extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default com.tinkerpop.gremlin.structure.Graph$Features$EdgePropertyFeatures com.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.properties()
      properties(): Graph$Features$EdgePropertyFeatures;
      propertiesP(): Promise<Graph$Features$EdgePropertyFeatures>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.supportsAddEdges()
      supportsAddEdges(): boolean;
      supportsAddEdgesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAddProperty()
      supportsAddProperty(): boolean;
      supportsAddPropertyP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAnyIds()
      supportsAnyIds(): boolean;
      supportsAnyIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsCustomIds()
      supportsCustomIds(): boolean;
      supportsCustomIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsNumericIds()
      supportsNumericIds(): boolean;
      supportsNumericIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures.supportsRemoveEdges()
      supportsRemoveEdges(): boolean;
      supportsRemoveEdgesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsRemoveProperty()
      supportsRemoveProperty(): boolean;
      supportsRemovePropertyP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsStringIds()
      supportsStringIds(): boolean;
      supportsStringIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUserSuppliedIds()
      supportsUserSuppliedIds(): boolean;
      supportsUserSuppliedIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUuidIds()
      supportsUuidIds(): boolean;
      supportsUuidIdsP(): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerGraph$TinkerGraphEdgeFeatures {
      export interface Static {
        new (): com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphEdgeFeatures;
        FEATURE_ADD_EDGES: string;
        FEATURE_REMOVE_EDGES: string;
        FEATURE_USER_SUPPLIED_IDS: string;
        FEATURE_NUMERIC_IDS: string;
        FEATURE_STRING_IDS: string;
        FEATURE_UUID_IDS: string;
        FEATURE_CUSTOM_IDS: string;
        FEATURE_ANY_IDS: string;
        FEATURE_ADD_PROPERTY: string;
        FEATURE_REMOVE_PROPERTY: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerGraph$TinkerGraphFeatures extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.structure.Graph$Features {
      // public default com.tinkerpop.gremlin.structure.Graph$Features$EdgeFeatures com.tinkerpop.gremlin.structure.Graph$Features.edge()
      edge(): Graph$Features$EdgeFeatures;
      edgeP(): Promise<Graph$Features$EdgeFeatures>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures com.tinkerpop.gremlin.structure.Graph$Features.graph()
      graph(): Graph$Features$GraphFeatures;
      graphP(): Promise<Graph$Features$GraphFeatures>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features.supports(java.lang.Class<? extends com.tinkerpop.gremlin.structure.Graph$Features$FeatureSet>,java.lang.String) throws java.lang.NoSuchMethodException,java.lang.IllegalAccessException,java.lang.reflect.InvocationTargetException
      supports(arg0: object_t, arg1: string_t): boolean;
      supportsP(arg0: object_t, arg1: string_t): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures com.tinkerpop.gremlin.structure.Graph$Features.vertex()
      vertex(): Graph$Features$VertexFeatures;
      vertexP(): Promise<Graph$Features$VertexFeatures>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerGraph$TinkerGraphFeatures {
      export interface Static {
        new (): com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphFeatures;
      }
    }
  }

  export module com.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerGraph$TinkerGraphGraphFeatures extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.supportsComputer()
      supportsComputer(): boolean;
      supportsComputerP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.supportsPersistence()
      supportsPersistence(): boolean;
      supportsPersistenceP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.supportsThreadedTransactions()
      supportsThreadedTransactions(): boolean;
      supportsThreadedTransactionsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.supportsTransactions()
      supportsTransactions(): boolean;
      supportsTransactionsP(): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default com.tinkerpop.gremlin.structure.Graph$Features$VariableFeatures com.tinkerpop.gremlin.structure.Graph$Features$GraphFeatures.variables()
      variables(): Graph$Features$VariableFeatures;
      variablesP(): Promise<Graph$Features$VariableFeatures>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerGraph$TinkerGraphGraphFeatures {
      export interface Static {
        new (): com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphGraphFeatures;
        FEATURE_COMPUTER: string;
        FEATURE_TRANSACTIONS: string;
        FEATURE_PERSISTENCE: string;
        FEATURE_THREADED_TRANSACTIONS: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerGraph$TinkerGraphVertexFeatures extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default com.tinkerpop.gremlin.structure.Graph$Features$VertexPropertyFeatures com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.properties()
      properties(): Graph$Features$VertexPropertyFeatures;
      propertiesP(): Promise<Graph$Features$VertexPropertyFeatures>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAddProperty()
      supportsAddProperty(): boolean;
      supportsAddPropertyP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.supportsAddVertices()
      supportsAddVertices(): boolean;
      supportsAddVerticesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsAnyIds()
      supportsAnyIds(): boolean;
      supportsAnyIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsCustomIds()
      supportsCustomIds(): boolean;
      supportsCustomIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.supportsMetaProperties()
      supportsMetaProperties(): boolean;
      supportsMetaPropertiesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.supportsMultiProperties()
      supportsMultiProperties(): boolean;
      supportsMultiPropertiesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsNumericIds()
      supportsNumericIds(): boolean;
      supportsNumericIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsRemoveProperty()
      supportsRemoveProperty(): boolean;
      supportsRemovePropertyP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$VertexFeatures.supportsRemoveVertices()
      supportsRemoveVertices(): boolean;
      supportsRemoveVerticesP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsStringIds()
      supportsStringIds(): boolean;
      supportsStringIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUserSuppliedIds()
      supportsUserSuppliedIds(): boolean;
      supportsUserSuppliedIdsP(): Promise<boolean>;
      // public default boolean com.tinkerpop.gremlin.structure.Graph$Features$ElementFeatures.supportsUuidIds()
      supportsUuidIds(): boolean;
      supportsUuidIdsP(): Promise<boolean>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerGraph$TinkerGraphVertexFeatures {
      export interface Static {
        new (): com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph$TinkerGraphVertexFeatures;
        FEATURE_ADD_VERTICES: string;
        FEATURE_MULTI_PROPERTIES: string;
        FEATURE_META_PROPERTIES: string;
        FEATURE_REMOVE_VERTICES: string;
        FEATURE_USER_SUPPLIED_IDS: string;
        FEATURE_NUMERIC_IDS: string;
        FEATURE_STRING_IDS: string;
        FEATURE_UUID_IDS: string;
        FEATURE_CUSTOM_IDS: string;
        FEATURE_ANY_IDS: string;
        FEATURE_ADD_PROPERTY: string;
        FEATURE_REMOVE_PROPERTY: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerGraphVariables extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.structure.Graph$Variables {
      // public default java.util.Map<java.lang.String, java.lang.Object> com.tinkerpop.gremlin.structure.Graph$Variables.asMap()
      asMap(): Map;
      asMapP(): Promise<Map>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract <R> java.util.Optional<R> com.tinkerpop.gremlin.structure.Graph$Variables.get(java.lang.String)
      get(arg0: string_t): object_t;
      getP(arg0: string_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.util.Set<java.lang.String> com.tinkerpop.gremlin.structure.Graph$Variables.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.structure.Graph$Variables.remove(java.lang.String)
      remove(arg0: string_t): void;
      removeP(arg0: string_t): Promise<void>;
      // public abstract void com.tinkerpop.gremlin.structure.Graph$Variables.set(java.lang.String,java.lang.Object)
      set(arg0: string_t, arg1: object_t): void;
      setP(arg0: string_t, arg1: object_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerGraphVariables {
      export interface Static {
        new (): com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraphVariables;
      }
    }
  }

  export module com.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerHelper extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerHelper {
      export interface Static {
        new (): com.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper;
        // public static com.tinkerpop.gremlin.tinkergraph.process.computer.TinkerGraphView com.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.createGraphView(com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph,com.tinkerpop.gremlin.process.computer.GraphComputer$Isolation,java.util.Set<java.lang.String>)
        createGraphView(arg0: TinkerGraph, arg1: object_t, arg2: Set): object_t;
        createGraphViewP(arg0: TinkerGraph, arg1: object_t, arg2: Set): Promise<object_t>;
        // public static void com.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.dropView(com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph)
        dropView(arg0: TinkerGraph): void;
        dropViewP(arg0: TinkerGraph): Promise<void>;
        // public static final java.util.Iterator<com.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge> com.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.getEdges(com.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex,com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
        getEdges(arg0: TinkerVertex, arg1: Direction, ...arg2: string_t[]): Iterator;
        getEdges(arg0: TinkerVertex, arg1: Direction, arg2: array_t<string_t>): Iterator;
        getEdgesP(arg0: TinkerVertex, arg1: Direction, ...arg2: string_t[]): Promise<Iterator>;
        getEdgesP(arg0: TinkerVertex, arg1: Direction, arg2: array_t<string_t>): Promise<Iterator>;
        // public static java.util.Map<java.lang.String, java.util.List<com.tinkerpop.gremlin.structure.Property>> com.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.getProperties(com.tinkerpop.gremlin.tinkergraph.structure.TinkerElement)
        getProperties(arg0: TinkerElement): Map;
        getPropertiesP(arg0: TinkerElement): Promise<Map>;
        // public static final java.util.Iterator<com.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex> com.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.getVertices(com.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex,com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
        getVertices(arg0: TinkerVertex, arg1: Direction, ...arg2: string_t[]): Iterator;
        getVertices(arg0: TinkerVertex, arg1: Direction, arg2: array_t<string_t>): Iterator;
        getVerticesP(arg0: TinkerVertex, arg1: Direction, ...arg2: string_t[]): Promise<Iterator>;
        getVerticesP(arg0: TinkerVertex, arg1: Direction, arg2: array_t<string_t>): Promise<Iterator>;
        // public static boolean com.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.inComputerMode(com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph)
        inComputerMode(arg0: TinkerGraph): boolean;
        inComputerModeP(arg0: TinkerGraph): Promise<boolean>;
        // public static java.util.List<com.tinkerpop.gremlin.tinkergraph.structure.TinkerEdge> com.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.queryEdgeIndex(com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph,java.lang.String,java.lang.Object)
        queryEdgeIndex(arg0: TinkerGraph, arg1: string_t, arg2: object_t): List;
        queryEdgeIndexP(arg0: TinkerGraph, arg1: string_t, arg2: object_t): Promise<List>;
        // public static java.util.List<com.tinkerpop.gremlin.tinkergraph.structure.TinkerVertex> com.tinkerpop.gremlin.tinkergraph.structure.TinkerHelper.queryVertexIndex(com.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph,java.lang.String,java.lang.Object)
        queryVertexIndex(arg0: TinkerGraph, arg1: string_t, arg2: object_t): List;
        queryVertexIndexP(arg0: TinkerGraph, arg1: string_t, arg2: object_t): Promise<List>;
      }
    }
  }

  export module com.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerProperty extends Java.java.lang.Object,Java.com.tinkerpop.gremlin.structure.Property {
      // public abstract com.tinkerpop.gremlin.structure.Element com.tinkerpop.gremlin.structure.Property.element()
      element(): Element;
      elementP(): Promise<Element>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default void com.tinkerpop.gremlin.structure.Property.ifPresent(java.util.function.Consumer<? super V>)
      ifPresent(arg0: Consumer): void;
      ifPresentP(arg0: Consumer): Promise<void>;
      // public abstract boolean com.tinkerpop.gremlin.structure.Property.isPresent()
      isPresent(): boolean;
      isPresentP(): Promise<boolean>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Property.key()
      key(): string;
      keyP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default V com.tinkerpop.gremlin.structure.Property.orElse(V)
      orElse(arg0: object_t): object_t;
      orElseP(arg0: object_t): Promise<object_t>;
      // public default V com.tinkerpop.gremlin.structure.Property.orElseGet(java.util.function.Supplier<? extends V>)
      orElseGet(arg0: object_t): object_t;
      orElseGetP(arg0: object_t): Promise<object_t>;
      // public default <E> V com.tinkerpop.gremlin.structure.Property.orElseThrow(java.util.function.Supplier<? extends E>) throws E
      orElseThrow(arg0: object_t): object_t;
      orElseThrowP(arg0: object_t): Promise<object_t>;
      // public abstract void com.tinkerpop.gremlin.structure.Property.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract V com.tinkerpop.gremlin.structure.Property.value() throws java.util.NoSuchElementException
      value(): object_t;
      valueP(): Promise<object_t>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TinkerProperty {
      export interface Static {
        new (arg0: Element, arg1: string_t, arg2: object_t): com.tinkerpop.gremlin.tinkergraph.structure.TinkerProperty;
      }
    }
  }

  export module com.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerVertex extends Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerElement,Java.com.tinkerpop.gremlin.structure.Vertex,Java.com.tinkerpop.gremlin.structure.Vertex$Iterators {
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
      addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.structure.Edge com.tinkerpop.gremlin.structure.Vertex.addEdge(java.lang.String,com.tinkerpop.gremlin.structure.Vertex,java.lang.Object...)
      addEdge(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Edge;
      addEdge(arg0: string_t, arg1: Vertex, arg2: object_array_t): Edge;
      addEdgeP(arg0: string_t, arg1: Vertex, ...arg2: object_t[]): Promise<Edge>;
      addEdgeP(arg0: string_t, arg1: Vertex, arg2: object_array_t): Promise<Edge>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate()
      aggregate(): GraphTraversal;
      aggregateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.as(java.lang.String)
      as(arg0: string_t): GraphTraversal;
      asP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.back(java.lang.String)
      back(arg0: string_t): GraphTraversal;
      backP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.between(java.lang.String,java.lang.Comparable,java.lang.Comparable)
      between(arg0: string_t, arg1: Comparable, arg2: Comparable): GraphTraversal;
      betweenP(arg0: string_t, arg1: Comparable, arg2: Comparable): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Collection<java.lang.String>>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap(java.lang.String)
      cap(arg0: string_t): GraphTraversal;
      capP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap()
      cap(): GraphTraversal;
      capP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Predicate<A>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: object_t, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: object_t, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2,M> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Function<A, M>,java.util.Map<M, com.tinkerpop.gremlin.process.Traversal<?, E2>>)
      choose(arg0: Function, arg1: Map): GraphTraversal;
      chooseP(arg0: Function, arg1: Map): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Long> com.tinkerpop.gremlin.process.graph.ElementTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public abstract java.util.Iterator<com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.structure.Vertex$Iterators.edgeIterator(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      edgeIterator(arg0: Direction, ...arg1: string_t[]): Iterator;
      edgeIterator(arg0: Direction, arg1: array_t<string_t>): Iterator;
      edgeIteratorP(arg0: Direction, ...arg1: string_t[]): Promise<Iterator>;
      edgeIteratorP(arg0: Direction, arg1: array_t<string_t>): Promise<Iterator>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      emit(arg0: object_t): GraphTraversal;
      emitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.util.Collection<A>)
      except(arg0: Collection): GraphTraversal;
      exceptP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.String)
      except(arg0: string_t): GraphTraversal;
      exceptP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.Object)
      except(arg0: object_t): GraphTraversal;
      exceptP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      filter(arg0: object_t): GraphTraversal;
      filterP(arg0: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold(E2,java.util.function.BiFunction<E2, A, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.List<A>> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.structure.Graph com.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public abstract java.lang.Object com.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.inject(java.lang.Object...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.structure.Element$Iterators com.tinkerpop.gremlin.structure.Element.iterators()
      iterators(): Element$Iterators;
      iteratorsP(): Promise<Element$Iterators>;
      // public abstract com.tinkerpop.gremlin.structure.Vertex$Iterators com.tinkerpop.gremlin.structure.Vertex.iterators()
      iterators(): Vertex$Iterators;
      iteratorsP(): Promise<Vertex$Iterators>;
      // public default java.util.Set<java.lang.String> com.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.ElementTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, ? extends com.tinkerpop.gremlin.structure.Property<E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.structure.VertexProperty<V> com.tinkerpop.gremlin.structure.Vertex.property(java.lang.String,V,java.lang.Object...)
      property(arg0: string_t, arg1: object_t, ...arg2: object_t[]): VertexProperty;
      property(arg0: string_t, arg1: object_t, arg2: object_array_t): VertexProperty;
      propertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<VertexProperty>;
      propertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<VertexProperty>;
      // public abstract <V> com.tinkerpop.gremlin.structure.VertexProperty<V> com.tinkerpop.gremlin.structure.Vertex.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): VertexProperty;
      propertyP(arg0: string_t, arg1: object_t): Promise<VertexProperty>;
      // public abstract <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> com.tinkerpop.gremlin.structure.VertexProperty<V> com.tinkerpop.gremlin.structure.Vertex.property(java.lang.String)
      property(arg0: string_t): VertexProperty;
      propertyP(arg0: string_t): Promise<VertexProperty>;
      // public default <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract <V> java.util.Iterator<? extends com.tinkerpop.gremlin.structure.Property<V>> com.tinkerpop.gremlin.structure.Element$Iterators.propertyIterator(java.lang.String...)
      propertyIterator(...arg0: string_t[]): Iterator;
      propertyIterator(arg0: array_t<string_t>): Iterator;
      propertyIteratorP(...arg0: string_t[]): Promise<Iterator>;
      propertyIteratorP(arg0: array_t<string_t>): Promise<Iterator>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, java.util.Map<java.lang.String, java.util.List<com.tinkerpop.gremlin.structure.VertexProperty<E2>>>> com.tinkerpop.gremlin.process.graph.VertexTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public abstract void com.tinkerpop.gremlin.structure.Element.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.repeat(com.tinkerpop.gremlin.process.Traversal<?, A>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.util.Collection<A>)
      retain(arg0: Collection): GraphTraversal;
      retainP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.String)
      retain(arg0: string_t): GraphTraversal;
      retainP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.Object)
      retain(arg0: object_t): GraphTraversal;
      retainP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BiFunction<V, A, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.shuffle()
      shuffle(): GraphTraversal;
      shuffleP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<A>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.structure.VertexProperty<V> com.tinkerpop.gremlin.structure.Vertex.singleProperty(java.lang.String,V,java.lang.Object...)
      singleProperty(arg0: string_t, arg1: object_t, ...arg2: object_t[]): VertexProperty;
      singleProperty(arg0: string_t, arg1: object_t, arg2: object_array_t): VertexProperty;
      singlePropertyP(arg0: string_t, arg1: object_t, ...arg2: object_t[]): Promise<VertexProperty>;
      singlePropertyP(arg0: string_t, arg1: object_t, arg2: object_array_t): Promise<VertexProperty>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.start()
      start(): GraphTraversal;
      startP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store()
      store(): GraphTraversal;
      storeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: Set, arg1: Map, arg2: object_t): GraphTraversal;
      subgraphP(arg0: Set, arg1: Map, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: object_t): GraphTraversal;
      subgraphP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): GraphTraversal;
      submitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.ElementTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.toV(com.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      until(arg0: object_t): GraphTraversal;
      untilP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> V com.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, E2> com.tinkerpop.gremlin.process.graph.VertexTraversal.value()
      value(): GraphTraversal;
      valueP(): Promise<GraphTraversal>;
      // public default <V> java.util.Iterator<V> com.tinkerpop.gremlin.structure.Element$Iterators.valueIterator(java.lang.String...)
      valueIterator(...arg0: string_t[]): Iterator;
      valueIterator(arg0: array_t<string_t>): Iterator;
      valueIteratorP(...arg0: string_t[]): Promise<Iterator>;
      valueIteratorP(arg0: array_t<string_t>): Promise<Iterator>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, java.util.Map<java.lang.String, java.util.List<E2>>> com.tinkerpop.gremlin.process.graph.VertexTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.Vertex, java.util.Map<java.lang.String, java.util.List<E2>>> com.tinkerpop.gremlin.process.graph.VertexTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public abstract java.util.Iterator<com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.structure.Vertex$Iterators.vertexIterator(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      vertexIterator(arg0: Direction, ...arg1: string_t[]): Iterator;
      vertexIterator(arg0: Direction, arg1: array_t<string_t>): Iterator;
      vertexIteratorP(arg0: Direction, ...arg1: string_t[]): Promise<Iterator>;
      vertexIteratorP(arg0: Direction, arg1: array_t<string_t>): Promise<Iterator>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
      where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
      whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
      where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
      whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(com.tinkerpop.gremlin.process.Traversal)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withPath()
      withPath(): GraphTraversal;
      withPathP(): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>,java.util.function.UnaryOperator<B>)
      withSack(arg0: object_t, arg1: object_t): GraphTraversal;
      withSackP(arg0: object_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>)
      withSack(arg0: object_t): GraphTraversal;
      withSackP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: object_t): GraphTraversal;
      withSideEffectP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
    }
    export module TinkerVertex {
      export interface Static {
        DEFAULT_LABEL: string;
      }
    }
  }

  export module com.tinkerpop.gremlin.tinkergraph.structure {
    export interface TinkerVertexProperty extends Java.com.tinkerpop.gremlin.tinkergraph.structure.TinkerElement,Java.com.tinkerpop.gremlin.structure.VertexProperty,Java.com.tinkerpop.gremlin.structure.VertexProperty$Iterators {
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addBothE(java.lang.String,java.lang.String,java.lang.Object...)
      addBothE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addBothE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addBothEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addBothEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addE(com.tinkerpop.gremlin.structure.Direction,java.lang.String,java.lang.String,java.lang.Object...)
      addE(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): GraphTraversal;
      addE(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): GraphTraversal;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, ...arg3: object_t[]): Promise<GraphTraversal>;
      addEP(arg0: Direction, arg1: string_t, arg2: string_t, arg3: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addInE(java.lang.String,java.lang.String,java.lang.Object...)
      addInE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addInE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addInEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addInEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.addOutE(java.lang.String,java.lang.String,java.lang.Object...)
      addOutE(arg0: string_t, arg1: string_t, ...arg2: object_t[]): GraphTraversal;
      addOutE(arg0: string_t, arg1: string_t, arg2: object_array_t): GraphTraversal;
      addOutEP(arg0: string_t, arg1: string_t, ...arg2: object_t[]): Promise<GraphTraversal>;
      addOutEP(arg0: string_t, arg1: string_t, arg2: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate(java.lang.String)
      aggregate(arg0: string_t): GraphTraversal;
      aggregateP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.aggregate()
      aggregate(): GraphTraversal;
      aggregateP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.as(java.lang.String)
      as(arg0: string_t): GraphTraversal;
      asP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.back(java.lang.String)
      back(arg0: string_t): GraphTraversal;
      backP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.between(java.lang.String,java.lang.Comparable,java.lang.Comparable)
      between(arg0: string_t, arg1: Comparable, arg2: Comparable): GraphTraversal;
      betweenP(arg0: string_t, arg1: Comparable, arg2: Comparable): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.both(java.lang.String...)
      both(...arg0: string_t[]): GraphTraversal;
      both(arg0: array_t<string_t>): GraphTraversal;
      bothP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothE(java.lang.String...)
      bothE(...arg0: string_t[]): GraphTraversal;
      bothE(arg0: array_t<string_t>): GraphTraversal;
      bothEP(...arg0: string_t[]): Promise<GraphTraversal>;
      bothEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.bothV()
      bothV(): GraphTraversal;
      bothVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.branch(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Collection<java.lang.String>>)
      branch(arg0: Function): GraphTraversal;
      branchP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap(java.lang.String)
      cap(arg0: string_t): GraphTraversal;
      capP(arg0: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.cap()
      cap(): GraphTraversal;
      capP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Predicate<A>,com.tinkerpop.gremlin.process.Traversal<?, E2>,com.tinkerpop.gremlin.process.Traversal<?, E2>)
      choose(arg0: object_t, arg1: Traversal, arg2: Traversal): GraphTraversal;
      chooseP(arg0: object_t, arg1: Traversal, arg2: Traversal): Promise<GraphTraversal>;
      // public default <E2,M> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.choose(java.util.function.Function<A, M>,java.util.Map<M, com.tinkerpop.gremlin.process.Traversal<?, E2>>)
      choose(arg0: Function, arg1: Map): GraphTraversal;
      chooseP(arg0: Function, arg1: Map): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.coin(double)
      coin(arg0: double_t): GraphTraversal;
      coinP(arg0: double_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Long> com.tinkerpop.gremlin.process.graph.ElementTraversal.count()
      count(): GraphTraversal;
      countP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.cyclicPath()
      cyclicPath(): GraphTraversal;
      cyclicPathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.dedup()
      dedup(): GraphTraversal;
      dedupP(): Promise<GraphTraversal>;
      // public abstract com.tinkerpop.gremlin.structure.Element com.tinkerpop.gremlin.structure.Property.element()
      element(): Element;
      elementP(): Promise<Element>;
      // public abstract com.tinkerpop.gremlin.structure.Vertex com.tinkerpop.gremlin.structure.VertexProperty.element()
      element(): Vertex;
      elementP(): Promise<Vertex>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      emit(arg0: Traversal): GraphTraversal;
      emitP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      emit(arg0: object_t): GraphTraversal;
      emitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.emit()
      emit(): GraphTraversal;
      emitP(): Promise<GraphTraversal>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.util.Collection<A>)
      except(arg0: Collection): GraphTraversal;
      exceptP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.String)
      except(arg0: string_t): GraphTraversal;
      exceptP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.except(java.lang.Object)
      except(arg0: object_t): GraphTraversal;
      exceptP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.filter(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      filter(arg0: object_t): GraphTraversal;
      filterP(arg0: object_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.flatMap(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, java.util.Iterator<E2>>)
      flatMap(arg0: Function): GraphTraversal;
      flatMapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold(E2,java.util.function.BiFunction<E2, A, E2>)
      fold(arg0: object_t, arg1: BiFunction): GraphTraversal;
      foldP(arg0: object_t, arg1: BiFunction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.List<A>> com.tinkerpop.gremlin.process.graph.ElementTraversal.fold()
      fold(): GraphTraversal;
      foldP(): Promise<GraphTraversal>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public abstract com.tinkerpop.gremlin.structure.Graph com.tinkerpop.gremlin.structure.Element.graph()
      graph(): Graph;
      graphP(): Promise<Graph>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group(java.lang.String)
      group(arg0: string_t): GraphTraversal;
      groupP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.group()
      group(): GraphTraversal;
      groupP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount(java.lang.String)
      groupCount(arg0: string_t): GraphTraversal;
      groupCountP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.groupCount()
      groupCount(): GraphTraversal;
      groupCountP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: BiPredicate, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: T, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: T, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.util.function.BiPredicate,java.lang.Object)
      has(arg0: string_t, arg1: BiPredicate, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: BiPredicate, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: string_t, arg2: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: string_t, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(com.tinkerpop.gremlin.process.T,java.lang.Object)
      has(arg0: T, arg1: object_t): GraphTraversal;
      hasP(arg0: T, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String,java.lang.Object)
      has(arg0: string_t, arg1: object_t): GraphTraversal;
      hasP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.has(java.lang.String)
      has(arg0: string_t): GraphTraversal;
      hasP(arg0: string_t): Promise<GraphTraversal>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.hasNot(java.lang.String)
      hasNot(arg0: string_t): GraphTraversal;
      hasNotP(arg0: string_t): Promise<GraphTraversal>;
      // public abstract java.lang.Object com.tinkerpop.gremlin.structure.Element.id()
      id(): object_t;
      idP(): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.identity()
      identity(): GraphTraversal;
      identityP(): Promise<GraphTraversal>;
      // public default void com.tinkerpop.gremlin.structure.Property.ifPresent(java.util.function.Consumer<? super V>)
      ifPresent(arg0: Consumer): void;
      ifPresentP(arg0: Consumer): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.in(java.lang.String...)
      in(...arg0: string_t[]): GraphTraversal;
      in(arg0: array_t<string_t>): GraphTraversal;
      inP(...arg0: string_t[]): Promise<GraphTraversal>;
      inP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.inE(java.lang.String...)
      inE(...arg0: string_t[]): GraphTraversal;
      inE(arg0: array_t<string_t>): GraphTraversal;
      inEP(...arg0: string_t[]): Promise<GraphTraversal>;
      inEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.inject(java.lang.Object...)
      inject(...arg0: object_t[]): GraphTraversal;
      inject(arg0: object_array_t): GraphTraversal;
      injectP(...arg0: object_t[]): Promise<GraphTraversal>;
      injectP(arg0: object_array_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.inV()
      inV(): GraphTraversal;
      inVP(): Promise<GraphTraversal>;
      // public abstract boolean com.tinkerpop.gremlin.structure.Property.isPresent()
      isPresent(): boolean;
      isPresentP(): Promise<boolean>;
      // public abstract com.tinkerpop.gremlin.structure.VertexProperty$Iterators com.tinkerpop.gremlin.structure.VertexProperty.iterators()
      iterators(): VertexProperty$Iterators;
      iteratorsP(): Promise<VertexProperty$Iterators>;
      // public abstract com.tinkerpop.gremlin.structure.Element$Iterators com.tinkerpop.gremlin.structure.Element.iterators()
      iterators(): Element$Iterators;
      iteratorsP(): Promise<Element$Iterators>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Property.key()
      key(): string;
      keyP(): Promise<string>;
      // public default java.util.Set<java.lang.String> com.tinkerpop.gremlin.structure.Element.keys()
      keys(): Set;
      keysP(): Promise<Set>;
      // public abstract java.lang.String com.tinkerpop.gremlin.structure.Element.label()
      label(): string;
      labelP(): Promise<string>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.limit(long)
      limit(arg0: long_t): GraphTraversal;
      limitP(arg0: long_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.local(com.tinkerpop.gremlin.process.Traversal<?, E2>)
      local(arg0: Traversal): GraphTraversal;
      localP(arg0: Traversal): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.map(java.util.function.Function<com.tinkerpop.gremlin.process.Traverser<A>, E2>)
      map(arg0: Function): GraphTraversal;
      mapP(arg0: Function): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.match(java.lang.String,com.tinkerpop.gremlin.process.Traversal...)
      match(arg0: string_t, ...arg1: Traversal[]): GraphTraversal;
      match(arg0: string_t, arg1: array_t<Traversal>): GraphTraversal;
      matchP(arg0: string_t, ...arg1: Traversal[]): Promise<GraphTraversal>;
      matchP(arg0: string_t, arg1: array_t<Traversal>): Promise<GraphTraversal>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.order()
      order(): GraphTraversal;
      orderP(): Promise<GraphTraversal>;
      // public default V com.tinkerpop.gremlin.structure.Property.orElse(V)
      orElse(arg0: object_t): object_t;
      orElseP(arg0: object_t): Promise<object_t>;
      // public default V com.tinkerpop.gremlin.structure.Property.orElseGet(java.util.function.Supplier<? extends V>)
      orElseGet(arg0: object_t): object_t;
      orElseGetP(arg0: object_t): Promise<object_t>;
      // public default <E> V com.tinkerpop.gremlin.structure.Property.orElseThrow(java.util.function.Supplier<? extends E>) throws E
      orElseThrow(arg0: object_t): object_t;
      orElseThrowP(arg0: object_t): Promise<object_t>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.otherV()
      otherV(): GraphTraversal;
      otherVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.out(java.lang.String...)
      out(...arg0: string_t[]): GraphTraversal;
      out(arg0: array_t<string_t>): GraphTraversal;
      outP(...arg0: string_t[]): Promise<GraphTraversal>;
      outP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.outE(java.lang.String...)
      outE(...arg0: string_t[]): GraphTraversal;
      outE(arg0: array_t<string_t>): GraphTraversal;
      outEP(...arg0: string_t[]): Promise<GraphTraversal>;
      outEP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.outV()
      outV(): GraphTraversal;
      outVP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.process.Path> com.tinkerpop.gremlin.process.graph.ElementTraversal.path()
      path(): GraphTraversal;
      pathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.profile()
      profile(): GraphTraversal;
      profileP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, ? extends com.tinkerpop.gremlin.structure.Property<E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.properties(java.lang.String...)
      properties(...arg0: string_t[]): GraphTraversal;
      properties(arg0: array_t<string_t>): GraphTraversal;
      propertiesP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertiesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public abstract <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String,V)
      property(arg0: string_t, arg1: object_t): Property;
      propertyP(arg0: string_t, arg1: object_t): Promise<Property>;
      // public default <V> com.tinkerpop.gremlin.structure.Property<V> com.tinkerpop.gremlin.structure.Element.property(java.lang.String)
      property(arg0: string_t): Property;
      propertyP(arg0: string_t): Promise<Property>;
      // public abstract <V> java.util.Iterator<? extends com.tinkerpop.gremlin.structure.Property<V>> com.tinkerpop.gremlin.structure.Element$Iterators.propertyIterator(java.lang.String...)
      propertyIterator(...arg0: string_t[]): Iterator;
      propertyIterator(arg0: array_t<string_t>): Iterator;
      propertyIteratorP(...arg0: string_t[]): Promise<Iterator>;
      propertyIteratorP(arg0: array_t<string_t>): Promise<Iterator>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.VertexProperty, java.util.Map<java.lang.String, com.tinkerpop.gremlin.structure.Property<E2>>> com.tinkerpop.gremlin.process.graph.VertexPropertyTraversal.propertyMap(java.lang.String...)
      propertyMap(...arg0: string_t[]): GraphTraversal;
      propertyMap(arg0: array_t<string_t>): GraphTraversal;
      propertyMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      propertyMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.range(long,long)
      range(arg0: long_t, arg1: long_t): GraphTraversal;
      rangeP(arg0: long_t, arg1: long_t): Promise<GraphTraversal>;
      // public abstract void com.tinkerpop.gremlin.structure.Property.remove()
      remove(): void;
      removeP(): Promise<void>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.repeat(com.tinkerpop.gremlin.process.Traversal<?, A>)
      repeat(arg0: Traversal): GraphTraversal;
      repeatP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.util.Collection<A>)
      retain(arg0: Collection): GraphTraversal;
      retainP(arg0: Collection): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.String)
      retain(arg0: string_t): GraphTraversal;
      retainP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.retain(java.lang.Object)
      retain(arg0: object_t): GraphTraversal;
      retainP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BinaryOperator<V>,java.lang.String)
      sack(arg0: BinaryOperator, arg1: string_t): GraphTraversal;
      sackP(arg0: BinaryOperator, arg1: string_t): Promise<GraphTraversal>;
      // public default <V> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack(java.util.function.BiFunction<V, A, V>)
      sack(arg0: BiFunction): GraphTraversal;
      sackP(arg0: BiFunction): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.sack()
      sack(): GraphTraversal;
      sackP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sample(int)
      sample(arg0: integer_t): GraphTraversal;
      sampleP(arg0: integer_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String...)
      select(...arg0: string_t[]): GraphTraversal;
      select(arg0: array_t<string_t>): GraphTraversal;
      selectP(...arg0: string_t[]): Promise<GraphTraversal>;
      selectP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.select(java.lang.String)
      select(arg0: string_t): GraphTraversal;
      selectP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.shuffle()
      shuffle(): GraphTraversal;
      shuffleP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.sideEffect(java.util.function.Consumer<com.tinkerpop.gremlin.process.Traverser<A>>)
      sideEffect(arg0: Consumer): GraphTraversal;
      sideEffectP(arg0: Consumer): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.simplePath()
      simplePath(): GraphTraversal;
      simplePathP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.start()
      start(): GraphTraversal;
      startP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store(java.lang.String)
      store(arg0: string_t): GraphTraversal;
      storeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.store()
      store(): GraphTraversal;
      storeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: Set, arg2: Map, arg3: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.Set<java.lang.Object>,java.util.Map<java.lang.Object, com.tinkerpop.gremlin.structure.Vertex>,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: Set, arg1: Map, arg2: object_t): GraphTraversal;
      subgraphP(arg0: Set, arg1: Map, arg2: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.lang.String,java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: string_t, arg1: object_t): GraphTraversal;
      subgraphP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.subgraph(java.util.function.Predicate<com.tinkerpop.gremlin.structure.Edge>)
      subgraph(arg0: object_t): GraphTraversal;
      subgraphP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.submit(com.tinkerpop.gremlin.process.computer.GraphComputer)
      submit(arg0: object_t): GraphTraversal;
      submitP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.lang.Double> com.tinkerpop.gremlin.process.graph.ElementTraversal.sum()
      sum(): GraphTraversal;
      sumP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.timeLimit(long)
      timeLimit(arg0: long_t): GraphTraversal;
      timeLimitP(arg0: long_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.times(int)
      times(arg0: integer_t): GraphTraversal;
      timesP(arg0: integer_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.to(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      to(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      to(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Edge> com.tinkerpop.gremlin.process.graph.ElementTraversal.toE(com.tinkerpop.gremlin.structure.Direction,java.lang.String...)
      toE(arg0: Direction, ...arg1: string_t[]): GraphTraversal;
      toE(arg0: Direction, arg1: array_t<string_t>): GraphTraversal;
      toEP(arg0: Direction, ...arg1: string_t[]): Promise<GraphTraversal>;
      toEP(arg0: Direction, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, com.tinkerpop.gremlin.structure.Vertex> com.tinkerpop.gremlin.process.graph.ElementTraversal.toV(com.tinkerpop.gremlin.structure.Direction)
      toV(arg0: Direction): GraphTraversal;
      toVP(arg0: Direction): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree(java.lang.String)
      tree(arg0: string_t): GraphTraversal;
      treeP(arg0: string_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.tree()
      tree(): GraphTraversal;
      treeP(): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.unfold()
      unfold(): GraphTraversal;
      unfoldP(): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.union(com.tinkerpop.gremlin.process.Traversal<?, E2>...)
      union(...arg0: Traversal[]): GraphTraversal;
      union(arg0: array_t<Traversal>): GraphTraversal;
      unionP(...arg0: Traversal[]): Promise<GraphTraversal>;
      unionP(arg0: array_t<Traversal>): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(com.tinkerpop.gremlin.process.Traversal<?, ?>)
      until(arg0: Traversal): GraphTraversal;
      untilP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.until(java.util.function.Predicate<com.tinkerpop.gremlin.process.Traverser<A>>)
      until(arg0: object_t): GraphTraversal;
      untilP(arg0: object_t): Promise<GraphTraversal>;
      // public default <V> V com.tinkerpop.gremlin.structure.Element.value(java.lang.String) throws java.util.NoSuchElementException
      value(arg0: string_t): object_t;
      valueP(arg0: string_t): Promise<object_t>;
      // public abstract V com.tinkerpop.gremlin.structure.Property.value() throws java.util.NoSuchElementException
      value(): object_t;
      valueP(): Promise<object_t>;
      // public default <V> java.util.Iterator<V> com.tinkerpop.gremlin.structure.Element$Iterators.valueIterator(java.lang.String...)
      valueIterator(...arg0: string_t[]): Iterator;
      valueIterator(arg0: array_t<string_t>): Iterator;
      valueIteratorP(...arg0: string_t[]): Promise<Iterator>;
      valueIteratorP(arg0: array_t<string_t>): Promise<Iterator>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.VertexProperty, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.VertexPropertyTraversal.valueMap(boolean,java.lang.String...)
      valueMap(arg0: boolean_t, ...arg1: string_t[]): GraphTraversal;
      valueMap(arg0: boolean_t, arg1: array_t<string_t>): GraphTraversal;
      valueMapP(arg0: boolean_t, ...arg1: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: boolean_t, arg1: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<com.tinkerpop.gremlin.structure.VertexProperty, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.VertexPropertyTraversal.valueMap(java.lang.String...)
      valueMap(...arg0: string_t[]): GraphTraversal;
      valueMap(arg0: array_t<string_t>): GraphTraversal;
      valueMapP(...arg0: string_t[]): Promise<GraphTraversal>;
      valueMapP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, E2> com.tinkerpop.gremlin.process.graph.ElementTraversal.values(java.lang.String...)
      values(...arg0: string_t[]): GraphTraversal;
      values(arg0: array_t<string_t>): GraphTraversal;
      valuesP(...arg0: string_t[]): Promise<GraphTraversal>;
      valuesP(arg0: array_t<string_t>): Promise<GraphTraversal>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.util.function.BiPredicate,java.lang.String)
      where(arg0: string_t, arg1: BiPredicate, arg2: string_t): GraphTraversal;
      whereP(arg0: string_t, arg1: BiPredicate, arg2: string_t): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(java.lang.String,java.lang.String,java.util.function.BiPredicate)
      where(arg0: string_t, arg1: string_t, arg2: BiPredicate): GraphTraversal;
      whereP(arg0: string_t, arg1: string_t, arg2: BiPredicate): Promise<GraphTraversal>;
      // public default <E2> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, java.util.Map<java.lang.String, E2>> com.tinkerpop.gremlin.process.graph.ElementTraversal.where(com.tinkerpop.gremlin.process.Traversal)
      where(arg0: Traversal): GraphTraversal;
      whereP(arg0: Traversal): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withPath()
      withPath(): GraphTraversal;
      withPathP(): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>,java.util.function.UnaryOperator<B>)
      withSack(arg0: object_t, arg1: object_t): GraphTraversal;
      withSackP(arg0: object_t, arg1: object_t): Promise<GraphTraversal>;
      // public default <B> com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSack(java.util.function.Supplier<B>)
      withSack(arg0: object_t): GraphTraversal;
      withSackP(arg0: object_t): Promise<GraphTraversal>;
      // public default com.tinkerpop.gremlin.process.graph.GraphTraversal<A, A> com.tinkerpop.gremlin.process.graph.ElementTraversal.withSideEffect(java.lang.String,java.util.function.Supplier)
      withSideEffect(arg0: string_t, arg1: object_t): GraphTraversal;
      withSideEffectP(arg0: string_t, arg1: object_t): Promise<GraphTraversal>;
    }
    export module TinkerVertexProperty {
      export interface Static {
        new (arg0: object_t, arg1: TinkerVertex, arg2: string_t, arg3: object_t, ...arg4: object_t[]): com.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty;
        new (arg0: TinkerVertex, arg1: string_t, arg2: object_t, ...arg3: object_t[]): com.tinkerpop.gremlin.tinkergraph.structure.TinkerVertexProperty;
        DEFAULT_LABEL: string;
      }
    }
  }

  export module java.lang {
    export interface Boolean extends Java.java.lang.Object,Java.java.lang.Comparable {
      // public boolean java.lang.Boolean.booleanValue()
      booleanValue(): boolean;
      booleanValueP(): Promise<boolean>;
      // public int java.lang.Boolean.compareTo(java.lang.Boolean)
      compareTo(arg0: boolean_t): number;
      compareToP(arg0: boolean_t): Promise<number>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Boolean {
      export interface Static {
        new (arg0: string_t): java.lang.Boolean;
        new (arg0: boolean_t): java.lang.Boolean;
        // public static int java.lang.Boolean.compare(boolean,boolean)
        compare(arg0: boolean_t, arg1: boolean_t): number;
        compareP(arg0: boolean_t, arg1: boolean_t): Promise<number>;
        // public static boolean java.lang.Boolean.getBoolean(java.lang.String)
        getBoolean(arg0: string_t): boolean;
        getBooleanP(arg0: string_t): Promise<boolean>;
        // public static int java.lang.Boolean.hashCode(boolean)
        hashCode(arg0: boolean_t): number;
        hashCodeP(arg0: boolean_t): Promise<number>;
        // public static boolean java.lang.Boolean.logicalAnd(boolean,boolean)
        logicalAnd(arg0: boolean_t, arg1: boolean_t): boolean;
        logicalAndP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
        // public static boolean java.lang.Boolean.logicalOr(boolean,boolean)
        logicalOr(arg0: boolean_t, arg1: boolean_t): boolean;
        logicalOrP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
        // public static boolean java.lang.Boolean.logicalXor(boolean,boolean)
        logicalXor(arg0: boolean_t, arg1: boolean_t): boolean;
        logicalXorP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
        // public static boolean java.lang.Boolean.parseBoolean(java.lang.String)
        parseBoolean(arg0: string_t): boolean;
        parseBooleanP(arg0: string_t): Promise<boolean>;
        // public static java.lang.String java.lang.Boolean.toString(boolean)
        toString(arg0: boolean_t): string;
        toStringP(arg0: boolean_t): Promise<string>;
        // public static java.lang.Boolean java.lang.Boolean.valueOf(java.lang.String)
        valueOf(arg0: string_t): boolean;
        valueOfP(arg0: string_t): Promise<boolean>;
        // public static java.lang.Boolean java.lang.Boolean.valueOf(boolean)
        valueOf(arg0: boolean_t): boolean;
        valueOfP(arg0: boolean_t): Promise<boolean>;
        TRUE: boolean;
        FALSE: boolean;
        TYPE: object_t;
      }
    }
  }

  export module java.lang {
    export interface Cloneable extends Java.java.lang.Object {
    }
    export module Cloneable {
      export interface Static {
      }
    }
  }

  export module java.lang {
    export interface Comparable extends Java.java.lang.Object {
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
    }
    export module Comparable {
      export interface Static {
      }
    }
  }

  export module java.lang {
    export interface Double extends Java.java.lang.Number,Java.java.lang.Comparable {
      // public byte java.lang.Number.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.Double.compareTo(java.lang.Double)
      compareTo(arg0: double_t): number;
      compareToP(arg0: double_t): Promise<number>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract float java.lang.Number.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.lang.Number.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public boolean java.lang.Double.isInfinite()
      isInfinite(): boolean;
      isInfiniteP(): Promise<boolean>;
      // public boolean java.lang.Double.isNaN()
      isNaN(): boolean;
      isNaNP(): Promise<boolean>;
      // public abstract long java.lang.Number.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Number.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Double {
      export interface Static {
        new (arg0: string_t): java.lang.Double;
        new (arg0: double_t): java.lang.Double;
        // public static int java.lang.Double.compare(double,double)
        compare(arg0: double_t, arg1: double_t): number;
        compareP(arg0: double_t, arg1: double_t): Promise<number>;
        // public static long java.lang.Double.doubleToLongBits(double)
        doubleToLongBits(arg0: double_t): longValue_t;
        doubleToLongBitsP(arg0: double_t): Promise<longValue_t>;
        // public static native long java.lang.Double.doubleToRawLongBits(double)
        doubleToRawLongBits(arg0: double_t): longValue_t;
        doubleToRawLongBitsP(arg0: double_t): Promise<longValue_t>;
        // public static int java.lang.Double.hashCode(double)
        hashCode(arg0: double_t): number;
        hashCodeP(arg0: double_t): Promise<number>;
        // public static boolean java.lang.Double.isFinite(double)
        isFinite(arg0: double_t): boolean;
        isFiniteP(arg0: double_t): Promise<boolean>;
        // public static boolean java.lang.Double.isInfinite(double)
        isInfinite(arg0: double_t): boolean;
        isInfiniteP(arg0: double_t): Promise<boolean>;
        // public static boolean java.lang.Double.isNaN(double)
        isNaN(arg0: double_t): boolean;
        isNaNP(arg0: double_t): Promise<boolean>;
        // public static native double java.lang.Double.longBitsToDouble(long)
        longBitsToDouble(arg0: long_t): number;
        longBitsToDoubleP(arg0: long_t): Promise<number>;
        // public static double java.lang.Double.max(double,double)
        max(arg0: double_t, arg1: double_t): number;
        maxP(arg0: double_t, arg1: double_t): Promise<number>;
        // public static double java.lang.Double.min(double,double)
        min(arg0: double_t, arg1: double_t): number;
        minP(arg0: double_t, arg1: double_t): Promise<number>;
        // public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException
        parseDouble(arg0: string_t): number;
        parseDoubleP(arg0: string_t): Promise<number>;
        // public static double java.lang.Double.sum(double,double)
        sum(arg0: double_t, arg1: double_t): number;
        sumP(arg0: double_t, arg1: double_t): Promise<number>;
        // public static java.lang.String java.lang.Double.toHexString(double)
        toHexString(arg0: double_t): string;
        toHexStringP(arg0: double_t): Promise<string>;
        // public static java.lang.String java.lang.Double.toString(double)
        toString(arg0: double_t): string;
        toStringP(arg0: double_t): Promise<string>;
        // public static java.lang.Double java.lang.Double.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOf(arg0: string_t): number;
        valueOfP(arg0: string_t): Promise<number>;
        // public static java.lang.Double java.lang.Double.valueOf(double)
        valueOf(arg0: double_t): number;
        valueOfP(arg0: double_t): Promise<number>;
        POSITIVE_INFINITY: number;
        NEGATIVE_INFINITY: number;
        NaN: number;
        MAX_VALUE: number;
        MIN_NORMAL: number;
        MIN_VALUE: number;
        MAX_EXPONENT: number;
        MIN_EXPONENT: number;
        SIZE: number;
        BYTES: number;
        TYPE: object_t;
      }
    }
  }

  export module java.lang {
    export interface Enum extends Java.java.lang.Object,Java.java.lang.Comparable {
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareTo(arg0: Enum): number;
      compareToP(arg0: Enum): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClass(): object_t;
      getDeclaringClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Enum {
      export interface Static {
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOf(arg0: object_t, arg1: string_t): Enum;
        valueOfP(arg0: object_t, arg1: string_t): Promise<Enum>;
      }
    }
  }

  export module java.lang {
    export interface Exception extends Java.java.lang.Throwable {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressed(arg0: Throwable): void;
      addSuppressedP(arg0: Throwable): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTrace(): Throwable;
      fillInStackTraceP(): Promise<Throwable>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCause(): Throwable;
      getCauseP(): Promise<Throwable>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressed(): Throwable[];
      getSuppressedP(): Promise<Throwable[]>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCause(arg0: Throwable): Throwable;
      initCauseP(arg0: Throwable): Promise<Throwable>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Exception {
      export interface Static {
        new (arg0: string_t, arg1: Throwable): java.lang.Exception;
        new (arg0: Throwable): java.lang.Exception;
        new (arg0: string_t): java.lang.Exception;
        new (): java.lang.Exception;
      }
    }
  }

  export module java.lang {
    export interface Float extends Java.java.lang.Number,Java.java.lang.Comparable {
      // public byte java.lang.Number.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.Float.compareTo(java.lang.Float)
      compareTo(arg0: float_t): number;
      compareToP(arg0: float_t): Promise<number>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract float java.lang.Number.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.lang.Number.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public boolean java.lang.Float.isInfinite()
      isInfinite(): boolean;
      isInfiniteP(): Promise<boolean>;
      // public boolean java.lang.Float.isNaN()
      isNaN(): boolean;
      isNaNP(): Promise<boolean>;
      // public abstract long java.lang.Number.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Number.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Float {
      export interface Static {
        new (arg0: string_t): java.lang.Float;
        new (arg0: float_t): java.lang.Float;
        new (arg0: double_t): java.lang.Float;
        // public static int java.lang.Float.compare(float,float)
        compare(arg0: float_t, arg1: float_t): number;
        compareP(arg0: float_t, arg1: float_t): Promise<number>;
        // public static int java.lang.Float.floatToIntBits(float)
        floatToIntBits(arg0: float_t): number;
        floatToIntBitsP(arg0: float_t): Promise<number>;
        // public static native int java.lang.Float.floatToRawIntBits(float)
        floatToRawIntBits(arg0: float_t): number;
        floatToRawIntBitsP(arg0: float_t): Promise<number>;
        // public static int java.lang.Float.hashCode(float)
        hashCode(arg0: float_t): number;
        hashCodeP(arg0: float_t): Promise<number>;
        // public static native float java.lang.Float.intBitsToFloat(int)
        intBitsToFloat(arg0: integer_t): number;
        intBitsToFloatP(arg0: integer_t): Promise<number>;
        // public static boolean java.lang.Float.isFinite(float)
        isFinite(arg0: float_t): boolean;
        isFiniteP(arg0: float_t): Promise<boolean>;
        // public static boolean java.lang.Float.isInfinite(float)
        isInfinite(arg0: float_t): boolean;
        isInfiniteP(arg0: float_t): Promise<boolean>;
        // public static boolean java.lang.Float.isNaN(float)
        isNaN(arg0: float_t): boolean;
        isNaNP(arg0: float_t): Promise<boolean>;
        // public static float java.lang.Float.max(float,float)
        max(arg0: float_t, arg1: float_t): number;
        maxP(arg0: float_t, arg1: float_t): Promise<number>;
        // public static float java.lang.Float.min(float,float)
        min(arg0: float_t, arg1: float_t): number;
        minP(arg0: float_t, arg1: float_t): Promise<number>;
        // public static float java.lang.Float.parseFloat(java.lang.String) throws java.lang.NumberFormatException
        parseFloat(arg0: string_t): number;
        parseFloatP(arg0: string_t): Promise<number>;
        // public static float java.lang.Float.sum(float,float)
        sum(arg0: float_t, arg1: float_t): number;
        sumP(arg0: float_t, arg1: float_t): Promise<number>;
        // public static java.lang.String java.lang.Float.toHexString(float)
        toHexString(arg0: float_t): string;
        toHexStringP(arg0: float_t): Promise<string>;
        // public static java.lang.String java.lang.Float.toString(float)
        toString(arg0: float_t): string;
        toStringP(arg0: float_t): Promise<string>;
        // public static java.lang.Float java.lang.Float.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOf(arg0: string_t): number;
        valueOfP(arg0: string_t): Promise<number>;
        // public static java.lang.Float java.lang.Float.valueOf(float)
        valueOf(arg0: float_t): number;
        valueOfP(arg0: float_t): Promise<number>;
        POSITIVE_INFINITY: number;
        NEGATIVE_INFINITY: number;
        NaN: number;
        MAX_VALUE: number;
        MIN_NORMAL: number;
        MIN_VALUE: number;
        MAX_EXPONENT: number;
        MIN_EXPONENT: number;
        SIZE: number;
        BYTES: number;
        TYPE: object_t;
      }
    }
  }

  export module java.lang {
    export interface Integer extends Java.java.lang.Number,Java.java.lang.Comparable {
      // public byte java.lang.Number.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public int java.lang.Integer.compareTo(java.lang.Integer)
      compareTo(arg0: integer_t): number;
      compareToP(arg0: integer_t): Promise<number>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract float java.lang.Number.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.lang.Number.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public abstract long java.lang.Number.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Number.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Integer {
      export interface Static {
        new (arg0: string_t): java.lang.Integer;
        new (arg0: integer_t): java.lang.Integer;
        // public static int java.lang.Integer.bitCount(int)
        bitCount(arg0: integer_t): number;
        bitCountP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.compare(int,int)
        compare(arg0: integer_t, arg1: integer_t): number;
        compareP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.compareUnsigned(int,int)
        compareUnsigned(arg0: integer_t, arg1: integer_t): number;
        compareUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.decode(java.lang.String) throws java.lang.NumberFormatException
        decode(arg0: string_t): number;
        decodeP(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.divideUnsigned(int,int)
        divideUnsigned(arg0: integer_t, arg1: integer_t): number;
        divideUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,java.lang.Integer)
        getInteger(arg0: string_t, arg1: integer_t): number;
        getIntegerP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,int)
        getInteger(arg0: string_t, arg1: integer_t): number;
        getIntegerP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String)
        getInteger(arg0: string_t): number;
        getIntegerP(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.hashCode(int)
        hashCode(arg0: integer_t): number;
        hashCodeP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.highestOneBit(int)
        highestOneBit(arg0: integer_t): number;
        highestOneBitP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.lowestOneBit(int)
        lowestOneBit(arg0: integer_t): number;
        lowestOneBitP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.max(int,int)
        max(arg0: integer_t, arg1: integer_t): number;
        maxP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.min(int,int)
        min(arg0: integer_t, arg1: integer_t): number;
        minP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.numberOfLeadingZeros(int)
        numberOfLeadingZeros(arg0: integer_t): number;
        numberOfLeadingZerosP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.numberOfTrailingZeros(int)
        numberOfTrailingZeros(arg0: integer_t): number;
        numberOfTrailingZerosP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.parseInt(java.lang.String,int) throws java.lang.NumberFormatException
        parseInt(arg0: string_t, arg1: integer_t): number;
        parseIntP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.parseInt(java.lang.String) throws java.lang.NumberFormatException
        parseInt(arg0: string_t): number;
        parseIntP(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.parseUnsignedInt(java.lang.String,int) throws java.lang.NumberFormatException
        parseUnsignedInt(arg0: string_t, arg1: integer_t): number;
        parseUnsignedIntP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.parseUnsignedInt(java.lang.String) throws java.lang.NumberFormatException
        parseUnsignedInt(arg0: string_t): number;
        parseUnsignedIntP(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.remainderUnsigned(int,int)
        remainderUnsigned(arg0: integer_t, arg1: integer_t): number;
        remainderUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.reverse(int)
        reverse(arg0: integer_t): number;
        reverseP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.reverseBytes(int)
        reverseBytes(arg0: integer_t): number;
        reverseBytesP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.rotateLeft(int,int)
        rotateLeft(arg0: integer_t, arg1: integer_t): number;
        rotateLeftP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.rotateRight(int,int)
        rotateRight(arg0: integer_t, arg1: integer_t): number;
        rotateRightP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.signum(int)
        signum(arg0: integer_t): number;
        signumP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.sum(int,int)
        sum(arg0: integer_t, arg1: integer_t): number;
        sumP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static java.lang.String java.lang.Integer.toBinaryString(int)
        toBinaryString(arg0: integer_t): string;
        toBinaryStringP(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toHexString(int)
        toHexString(arg0: integer_t): string;
        toHexStringP(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toOctalString(int)
        toOctalString(arg0: integer_t): string;
        toOctalStringP(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toString(int,int)
        toString(arg0: integer_t, arg1: integer_t): string;
        toStringP(arg0: integer_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toString(int)
        toString(arg0: integer_t): string;
        toStringP(arg0: integer_t): Promise<string>;
        // public static long java.lang.Integer.toUnsignedLong(int)
        toUnsignedLong(arg0: integer_t): longValue_t;
        toUnsignedLongP(arg0: integer_t): Promise<longValue_t>;
        // public static java.lang.String java.lang.Integer.toUnsignedString(int,int)
        toUnsignedString(arg0: integer_t, arg1: integer_t): string;
        toUnsignedStringP(arg0: integer_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toUnsignedString(int)
        toUnsignedString(arg0: integer_t): string;
        toUnsignedStringP(arg0: integer_t): Promise<string>;
        // public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
        valueOf(arg0: string_t, arg1: integer_t): number;
        valueOfP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOf(arg0: string_t): number;
        valueOfP(arg0: string_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.valueOf(int)
        valueOf(arg0: integer_t): number;
        valueOfP(arg0: integer_t): Promise<number>;
        MIN_VALUE: number;
        MAX_VALUE: number;
        TYPE: object_t;
        SIZE: number;
        BYTES: number;
      }
    }
  }

  export module java.lang {
    export interface Iterable extends Java.java.lang.Object {
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
    }
    export module Iterable {
      export interface Static {
      }
    }
  }

  export module java.lang {
    export interface Long extends Java.java.lang.Number,Java.java.lang.Comparable {
      // public byte java.lang.Number.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.Long.compareTo(java.lang.Long)
      compareTo(arg0: long_t): number;
      compareToP(arg0: long_t): Promise<number>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract float java.lang.Number.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.lang.Number.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public abstract long java.lang.Number.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Number.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Long {
      export interface Static {
        new (arg0: string_t): java.lang.Long;
        new (arg0: long_t): java.lang.Long;
        // public static int java.lang.Long.bitCount(long)
        bitCount(arg0: long_t): number;
        bitCountP(arg0: long_t): Promise<number>;
        // public static int java.lang.Long.compare(long,long)
        compare(arg0: long_t, arg1: long_t): number;
        compareP(arg0: long_t, arg1: long_t): Promise<number>;
        // public static int java.lang.Long.compareUnsigned(long,long)
        compareUnsigned(arg0: long_t, arg1: long_t): number;
        compareUnsignedP(arg0: long_t, arg1: long_t): Promise<number>;
        // public static java.lang.Long java.lang.Long.decode(java.lang.String) throws java.lang.NumberFormatException
        decode(arg0: string_t): longValue_t;
        decodeP(arg0: string_t): Promise<longValue_t>;
        // public static long java.lang.Long.divideUnsigned(long,long)
        divideUnsigned(arg0: long_t, arg1: long_t): longValue_t;
        divideUnsignedP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.getLong(java.lang.String,java.lang.Long)
        getLong(arg0: string_t, arg1: long_t): longValue_t;
        getLongP(arg0: string_t, arg1: long_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.getLong(java.lang.String,long)
        getLong(arg0: string_t, arg1: long_t): longValue_t;
        getLongP(arg0: string_t, arg1: long_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.getLong(java.lang.String)
        getLong(arg0: string_t): longValue_t;
        getLongP(arg0: string_t): Promise<longValue_t>;
        // public static int java.lang.Long.hashCode(long)
        hashCode(arg0: long_t): number;
        hashCodeP(arg0: long_t): Promise<number>;
        // public static long java.lang.Long.highestOneBit(long)
        highestOneBit(arg0: long_t): longValue_t;
        highestOneBitP(arg0: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.lowestOneBit(long)
        lowestOneBit(arg0: long_t): longValue_t;
        lowestOneBitP(arg0: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.max(long,long)
        max(arg0: long_t, arg1: long_t): longValue_t;
        maxP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.min(long,long)
        min(arg0: long_t, arg1: long_t): longValue_t;
        minP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static int java.lang.Long.numberOfLeadingZeros(long)
        numberOfLeadingZeros(arg0: long_t): number;
        numberOfLeadingZerosP(arg0: long_t): Promise<number>;
        // public static int java.lang.Long.numberOfTrailingZeros(long)
        numberOfTrailingZeros(arg0: long_t): number;
        numberOfTrailingZerosP(arg0: long_t): Promise<number>;
        // public static long java.lang.Long.parseLong(java.lang.String,int) throws java.lang.NumberFormatException
        parseLong(arg0: string_t, arg1: integer_t): longValue_t;
        parseLongP(arg0: string_t, arg1: integer_t): Promise<longValue_t>;
        // public static long java.lang.Long.parseLong(java.lang.String) throws java.lang.NumberFormatException
        parseLong(arg0: string_t): longValue_t;
        parseLongP(arg0: string_t): Promise<longValue_t>;
        // public static long java.lang.Long.parseUnsignedLong(java.lang.String,int) throws java.lang.NumberFormatException
        parseUnsignedLong(arg0: string_t, arg1: integer_t): longValue_t;
        parseUnsignedLongP(arg0: string_t, arg1: integer_t): Promise<longValue_t>;
        // public static long java.lang.Long.parseUnsignedLong(java.lang.String) throws java.lang.NumberFormatException
        parseUnsignedLong(arg0: string_t): longValue_t;
        parseUnsignedLongP(arg0: string_t): Promise<longValue_t>;
        // public static long java.lang.Long.remainderUnsigned(long,long)
        remainderUnsigned(arg0: long_t, arg1: long_t): longValue_t;
        remainderUnsignedP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.reverse(long)
        reverse(arg0: long_t): longValue_t;
        reverseP(arg0: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.reverseBytes(long)
        reverseBytes(arg0: long_t): longValue_t;
        reverseBytesP(arg0: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.rotateLeft(long,int)
        rotateLeft(arg0: long_t, arg1: integer_t): longValue_t;
        rotateLeftP(arg0: long_t, arg1: integer_t): Promise<longValue_t>;
        // public static long java.lang.Long.rotateRight(long,int)
        rotateRight(arg0: long_t, arg1: integer_t): longValue_t;
        rotateRightP(arg0: long_t, arg1: integer_t): Promise<longValue_t>;
        // public static int java.lang.Long.signum(long)
        signum(arg0: long_t): number;
        signumP(arg0: long_t): Promise<number>;
        // public static long java.lang.Long.sum(long,long)
        sum(arg0: long_t, arg1: long_t): longValue_t;
        sumP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static java.lang.String java.lang.Long.toBinaryString(long)
        toBinaryString(arg0: long_t): string;
        toBinaryStringP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toHexString(long)
        toHexString(arg0: long_t): string;
        toHexStringP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toOctalString(long)
        toOctalString(arg0: long_t): string;
        toOctalStringP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toString(long,int)
        toString(arg0: long_t, arg1: integer_t): string;
        toStringP(arg0: long_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toString(long)
        toString(arg0: long_t): string;
        toStringP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toUnsignedString(long,int)
        toUnsignedString(arg0: long_t, arg1: integer_t): string;
        toUnsignedStringP(arg0: long_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toUnsignedString(long)
        toUnsignedString(arg0: long_t): string;
        toUnsignedStringP(arg0: long_t): Promise<string>;
        // public static java.lang.Long java.lang.Long.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
        valueOf(arg0: string_t, arg1: integer_t): longValue_t;
        valueOfP(arg0: string_t, arg1: integer_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOf(arg0: string_t): longValue_t;
        valueOfP(arg0: string_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.valueOf(long)
        valueOf(arg0: long_t): longValue_t;
        valueOfP(arg0: long_t): Promise<longValue_t>;
        MIN_VALUE: longValue_t;
        MAX_VALUE: longValue_t;
        TYPE: object_t;
        SIZE: number;
        BYTES: number;
      }
    }
  }

  export module java.lang {
    export interface Number extends Java.java.lang.Object {
      // public byte java.lang.Number.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract float java.lang.Number.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.lang.Number.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public abstract long java.lang.Number.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Number.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Number {
      export interface Static {
        new (): java.lang.Number;
      }
    }
  }

  export module java.lang {
    export interface Object  {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Object {
      export interface Static {
        new (): java.lang.Object;
      }
    }
  }

  export module java.lang {
    export interface Short extends Java.java.lang.Number,Java.java.lang.Comparable {
      // public byte java.lang.Number.byteValue()
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.Short.compareTo(java.lang.Short)
      compareTo(arg0: short_t): number;
      compareToP(arg0: short_t): Promise<number>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract float java.lang.Number.floatValue()
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.lang.Number.intValue()
      intValue(): number;
      intValueP(): Promise<number>;
      // public abstract long java.lang.Number.longValue()
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Number.shortValue()
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Short {
      export interface Static {
        new (arg0: string_t): java.lang.Short;
        new (arg0: short_t): java.lang.Short;
        // public static int java.lang.Short.compare(short,short)
        compare(arg0: short_t, arg1: short_t): number;
        compareP(arg0: short_t, arg1: short_t): Promise<number>;
        // public static java.lang.Short java.lang.Short.decode(java.lang.String) throws java.lang.NumberFormatException
        decode(arg0: string_t): number;
        decodeP(arg0: string_t): Promise<number>;
        // public static int java.lang.Short.hashCode(short)
        hashCode(arg0: short_t): number;
        hashCodeP(arg0: short_t): Promise<number>;
        // public static short java.lang.Short.parseShort(java.lang.String,int) throws java.lang.NumberFormatException
        parseShort(arg0: string_t, arg1: integer_t): number;
        parseShortP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static short java.lang.Short.parseShort(java.lang.String) throws java.lang.NumberFormatException
        parseShort(arg0: string_t): number;
        parseShortP(arg0: string_t): Promise<number>;
        // public static short java.lang.Short.reverseBytes(short)
        reverseBytes(arg0: short_t): number;
        reverseBytesP(arg0: short_t): Promise<number>;
        // public static java.lang.String java.lang.Short.toString(short)
        toString(arg0: short_t): string;
        toStringP(arg0: short_t): Promise<string>;
        // public static int java.lang.Short.toUnsignedInt(short)
        toUnsignedInt(arg0: short_t): number;
        toUnsignedIntP(arg0: short_t): Promise<number>;
        // public static long java.lang.Short.toUnsignedLong(short)
        toUnsignedLong(arg0: short_t): longValue_t;
        toUnsignedLongP(arg0: short_t): Promise<longValue_t>;
        // public static java.lang.Short java.lang.Short.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
        valueOf(arg0: string_t, arg1: integer_t): number;
        valueOfP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Short java.lang.Short.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOf(arg0: string_t): number;
        valueOfP(arg0: string_t): Promise<number>;
        // public static java.lang.Short java.lang.Short.valueOf(short)
        valueOf(arg0: short_t): number;
        valueOfP(arg0: short_t): Promise<number>;
        MIN_VALUE: number;
        MAX_VALUE: number;
        TYPE: object_t;
        SIZE: number;
        BYTES: number;
      }
    }
  }

  export module java.lang {
    export interface String extends Java.java.lang.Object,Java.java.lang.Comparable {
      // public char java.lang.String.charAt(int)
      charAt(arg0: integer_t): object_t;
      charAtP(arg0: integer_t): Promise<object_t>;
      // public default java.util.stream.IntStream java.lang.CharSequence.chars()
      chars(): object_t;
      charsP(): Promise<object_t>;
      // public int java.lang.String.codePointAt(int)
      codePointAt(arg0: integer_t): number;
      codePointAtP(arg0: integer_t): Promise<number>;
      // public int java.lang.String.codePointBefore(int)
      codePointBefore(arg0: integer_t): number;
      codePointBeforeP(arg0: integer_t): Promise<number>;
      // public int java.lang.String.codePointCount(int,int)
      codePointCount(arg0: integer_t, arg1: integer_t): number;
      codePointCountP(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public default java.util.stream.IntStream java.lang.CharSequence.codePoints()
      codePoints(): object_t;
      codePointsP(): Promise<object_t>;
      // public int java.lang.String.compareTo(java.lang.String)
      compareTo(arg0: string_t): number;
      compareToP(arg0: string_t): Promise<number>;
      // public abstract int java.lang.Comparable.compareTo(T)
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.String.compareToIgnoreCase(java.lang.String)
      compareToIgnoreCase(arg0: string_t): number;
      compareToIgnoreCaseP(arg0: string_t): Promise<number>;
      // public java.lang.String java.lang.String.concat(java.lang.String)
      concat(arg0: string_t): string;
      concatP(arg0: string_t): Promise<string>;
      // public boolean java.lang.String.contains(java.lang.CharSequence)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.String.contentEquals(java.lang.StringBuffer)
      contentEquals(arg0: object_t): boolean;
      contentEqualsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.String.contentEquals(java.lang.CharSequence)
      contentEquals(arg0: object_t): boolean;
      contentEqualsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.String.endsWith(java.lang.String)
      endsWith(arg0: string_t): boolean;
      endsWithP(arg0: string_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.String.equalsIgnoreCase(java.lang.String)
      equalsIgnoreCase(arg0: string_t): boolean;
      equalsIgnoreCaseP(arg0: string_t): Promise<boolean>;
      // public void java.lang.String.getBytes(int,int,byte[],int)
      getBytes(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): void;
      getBytesP(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): Promise<void>;
      // public byte[] java.lang.String.getBytes(java.nio.charset.Charset)
      getBytes(arg0: object_t): object_t[];
      getBytesP(arg0: object_t): Promise<object_t[]>;
      // public byte[] java.lang.String.getBytes(java.lang.String) throws java.io.UnsupportedEncodingException
      getBytes(arg0: string_t): object_t[];
      getBytesP(arg0: string_t): Promise<object_t[]>;
      // public byte[] java.lang.String.getBytes()
      getBytes(): object_t[];
      getBytesP(): Promise<object_t[]>;
      // public void java.lang.String.getChars(int,int,char[],int)
      getChars(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): void;
      getCharsP(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.lang.String.indexOf(java.lang.String,int)
      indexOf(arg0: string_t, arg1: integer_t): number;
      indexOfP(arg0: string_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.indexOf(int,int)
      indexOf(arg0: integer_t, arg1: integer_t): number;
      indexOfP(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.indexOf(java.lang.String)
      indexOf(arg0: string_t): number;
      indexOfP(arg0: string_t): Promise<number>;
      // public int java.lang.String.indexOf(int)
      indexOf(arg0: integer_t): number;
      indexOfP(arg0: integer_t): Promise<number>;
      // public native java.lang.String java.lang.String.intern()
      intern(): string;
      internP(): Promise<string>;
      // public boolean java.lang.String.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public int java.lang.String.lastIndexOf(java.lang.String,int)
      lastIndexOf(arg0: string_t, arg1: integer_t): number;
      lastIndexOfP(arg0: string_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.lastIndexOf(int,int)
      lastIndexOf(arg0: integer_t, arg1: integer_t): number;
      lastIndexOfP(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.lastIndexOf(java.lang.String)
      lastIndexOf(arg0: string_t): number;
      lastIndexOfP(arg0: string_t): Promise<number>;
      // public int java.lang.String.lastIndexOf(int)
      lastIndexOf(arg0: integer_t): number;
      lastIndexOfP(arg0: integer_t): Promise<number>;
      // public int java.lang.String.length()
      length(): number;
      lengthP(): Promise<number>;
      // public boolean java.lang.String.matches(java.lang.String)
      matches(arg0: string_t): boolean;
      matchesP(arg0: string_t): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public int java.lang.String.offsetByCodePoints(int,int)
      offsetByCodePoints(arg0: integer_t, arg1: integer_t): number;
      offsetByCodePointsP(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public boolean java.lang.String.regionMatches(boolean,int,java.lang.String,int,int)
      regionMatches(arg0: boolean_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t): boolean;
      regionMatchesP(arg0: boolean_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t): Promise<boolean>;
      // public boolean java.lang.String.regionMatches(int,java.lang.String,int,int)
      regionMatches(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t): boolean;
      regionMatchesP(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t): Promise<boolean>;
      // public java.lang.String java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)
      replace(arg0: object_t, arg1: object_t): string;
      replaceP(arg0: object_t, arg1: object_t): Promise<string>;
      // public java.lang.String java.lang.String.replace(char,char)
      replace(arg0: object_t, arg1: object_t): string;
      replaceP(arg0: object_t, arg1: object_t): Promise<string>;
      // public java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String)
      replaceAll(arg0: string_t, arg1: string_t): string;
      replaceAllP(arg0: string_t, arg1: string_t): Promise<string>;
      // public java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String)
      replaceFirst(arg0: string_t, arg1: string_t): string;
      replaceFirstP(arg0: string_t, arg1: string_t): Promise<string>;
      // public java.lang.String[] java.lang.String.split(java.lang.String,int)
      split(arg0: string_t, arg1: integer_t): string[];
      splitP(arg0: string_t, arg1: integer_t): Promise<string[]>;
      // public java.lang.String[] java.lang.String.split(java.lang.String)
      split(arg0: string_t): string[];
      splitP(arg0: string_t): Promise<string[]>;
      // public boolean java.lang.String.startsWith(java.lang.String,int)
      startsWith(arg0: string_t, arg1: integer_t): boolean;
      startsWithP(arg0: string_t, arg1: integer_t): Promise<boolean>;
      // public boolean java.lang.String.startsWith(java.lang.String)
      startsWith(arg0: string_t): boolean;
      startsWithP(arg0: string_t): Promise<boolean>;
      // public java.lang.CharSequence java.lang.String.subSequence(int,int)
      subSequence(arg0: integer_t, arg1: integer_t): object_t;
      subSequenceP(arg0: integer_t, arg1: integer_t): Promise<object_t>;
      // public java.lang.String java.lang.String.substring(int,int)
      substring(arg0: integer_t, arg1: integer_t): string;
      substringP(arg0: integer_t, arg1: integer_t): Promise<string>;
      // public java.lang.String java.lang.String.substring(int)
      substring(arg0: integer_t): string;
      substringP(arg0: integer_t): Promise<string>;
      // public char[] java.lang.String.toCharArray()
      toCharArray(): object_t[];
      toCharArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.String.toLowerCase(java.util.Locale)
      toLowerCase(arg0: object_t): string;
      toLowerCaseP(arg0: object_t): Promise<string>;
      // public java.lang.String java.lang.String.toLowerCase()
      toLowerCase(): string;
      toLowerCaseP(): Promise<string>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public java.lang.String java.lang.String.toUpperCase(java.util.Locale)
      toUpperCase(arg0: object_t): string;
      toUpperCaseP(arg0: object_t): Promise<string>;
      // public java.lang.String java.lang.String.toUpperCase()
      toUpperCase(): string;
      toUpperCaseP(): Promise<string>;
      // public java.lang.String java.lang.String.trim()
      trim(): string;
      trimP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module String {
      export interface Static {
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): java.lang.String;
        new (arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: object_array_t, arg1: object_t): java.lang.String;
        new (arg0: object_array_t, arg1: string_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t): java.lang.String;
        new (arg0: object_t): java.lang.String;
        new (arg0: object_t): java.lang.String;
        new (arg0: string_t): java.lang.String;
        new (arg0: object_array_t): java.lang.String;
        new (arg0: object_array_t): java.lang.String;
        new (): java.lang.String;
        // public static java.lang.String java.lang.String.copyValueOf(char[],int,int)
        copyValueOf(arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
        copyValueOfP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
        // public static java.lang.String java.lang.String.copyValueOf(char[])
        copyValueOf(arg0: object_array_t): string;
        copyValueOfP(arg0: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object...)
        format(arg0: object_t, arg1: string_t, ...arg2: object_t[]): string;
        format(arg0: object_t, arg1: string_t, arg2: object_array_t): string;
        formatP(arg0: object_t, arg1: string_t, ...arg2: object_t[]): Promise<string>;
        formatP(arg0: object_t, arg1: string_t, arg2: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.format(java.lang.String,java.lang.Object...)
        format(arg0: string_t, ...arg1: object_t[]): string;
        format(arg0: string_t, arg1: object_array_t): string;
        formatP(arg0: string_t, ...arg1: object_t[]): Promise<string>;
        formatP(arg0: string_t, arg1: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence...)
        join(arg0: object_t, ...arg1: object_t[]): string;
        join(arg0: object_t, arg1: object_array_t): string;
        joinP(arg0: object_t, ...arg1: object_t[]): Promise<string>;
        joinP(arg0: object_t, arg1: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.Iterable<? extends java.lang.CharSequence>)
        join(arg0: object_t, arg1: Iterable): string;
        joinP(arg0: object_t, arg1: Iterable): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char[],int,int)
        valueOf(arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
        valueOfP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(java.lang.Object)
        valueOf(arg0: object_t): string;
        valueOfP(arg0: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char[])
        valueOf(arg0: object_array_t): string;
        valueOfP(arg0: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(boolean)
        valueOf(arg0: boolean_t): string;
        valueOfP(arg0: boolean_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(long)
        valueOf(arg0: long_t): string;
        valueOfP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(int)
        valueOf(arg0: integer_t): string;
        valueOfP(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(float)
        valueOf(arg0: float_t): string;
        valueOfP(arg0: float_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(double)
        valueOf(arg0: double_t): string;
        valueOfP(arg0: double_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char)
        valueOf(arg0: object_t): string;
        valueOfP(arg0: object_t): Promise<string>;
        CASE_INSENSITIVE_ORDER: object_t;
      }
    }
  }

  export module java.lang {
    export interface Throwable extends Java.java.lang.Object {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressed(arg0: Throwable): void;
      addSuppressedP(arg0: Throwable): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTrace(): Throwable;
      fillInStackTraceP(): Promise<Throwable>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCause(): Throwable;
      getCauseP(): Promise<Throwable>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressed(): Throwable[];
      getSuppressedP(): Promise<Throwable[]>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCause(arg0: Throwable): Throwable;
      initCauseP(arg0: Throwable): Promise<Throwable>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Throwable {
      export interface Static {
        new (arg0: string_t, arg1: Throwable): java.lang.Throwable;
        new (arg0: Throwable): java.lang.Throwable;
        new (arg0: string_t): java.lang.Throwable;
        new (): java.lang.Throwable;
      }
    }
  }

  export module java.util {
    export interface AbstractCollection extends Java.java.lang.Object,Java.java.util.Collection {
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractCollection {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface AbstractList extends Java.java.util.AbstractCollection,Java.java.util.List {
      // public abstract void java.util.List.add(int,E)
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAll(arg0: integer_t, arg1: Collection): boolean;
      addAllP(arg0: integer_t, arg1: Collection): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public abstract E java.util.List.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIterator(arg0: integer_t): object_t;
      listIteratorP(arg0: integer_t): Promise<object_t>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIterator(): object_t;
      listIteratorP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.List.remove(int)
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract E java.util.List.set(int,E)
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sort(arg0: object_t): void;
      sortP(arg0: object_t): Promise<void>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subList(arg0: integer_t, arg1: integer_t): List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<List>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractList {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface AbstractSet extends Java.java.util.AbstractCollection,Java.java.util.Set {
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractSet {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface ArrayList extends Java.java.util.AbstractList,Java.java.lang.Cloneable,Java.java.util.List {
      // public abstract void java.util.List.add(int,E)
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAll(arg0: integer_t, arg1: Collection): boolean;
      addAllP(arg0: integer_t, arg1: Collection): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.ArrayList.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public void java.util.ArrayList.ensureCapacity(int)
      ensureCapacity(arg0: integer_t): void;
      ensureCapacityP(arg0: integer_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public abstract E java.util.List.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIterator(arg0: integer_t): object_t;
      listIteratorP(arg0: integer_t): Promise<object_t>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIterator(): object_t;
      listIteratorP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.List.remove(int)
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract E java.util.List.set(int,E)
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sort(arg0: object_t): void;
      sortP(arg0: object_t): Promise<void>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subList(arg0: integer_t, arg1: integer_t): List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<List>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public void java.util.ArrayList.trimToSize()
      trimToSize(): void;
      trimToSizeP(): Promise<void>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ArrayList {
      export interface Static {
        new (arg0: Collection): java.util.ArrayList;
        new (arg0: integer_t): java.util.ArrayList;
        new (): java.util.ArrayList;
      }
    }
  }

  export module java.util {
    export interface Arrays extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Arrays {
      export interface Static {
        // public static <T> java.util.List<T> java.util.Arrays.asList(T...)
        asList(...arg0: object_t[]): List;
        asList(arg0: object_array_t): List;
        asListP(...arg0: object_t[]): Promise<List>;
        asListP(arg0: object_array_t): Promise<List>;
        // public static <T> int java.util.Arrays.binarySearch(T[],int,int,T,java.util.Comparator<? super T>)
        binarySearch(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t, arg4: object_t): number;
        binarySearchP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t, arg4: object_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(java.lang.Object[],int,int,java.lang.Object)
        binarySearch(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): number;
        binarySearchP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(short[],int,int,short)
        binarySearch(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t, arg3: short_t): number;
        binarySearchP(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t, arg3: short_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(long[],int,int,long)
        binarySearch(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: long_t): number;
        binarySearchP(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: long_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(int[],int,int,int)
        binarySearch(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t): number;
        binarySearchP(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(float[],int,int,float)
        binarySearch(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t, arg3: float_t): number;
        binarySearchP(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t, arg3: float_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(double[],int,int,double)
        binarySearch(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: double_t): number;
        binarySearchP(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: double_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(char[],int,int,char)
        binarySearch(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): number;
        binarySearchP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(byte[],int,int,byte)
        binarySearch(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): number;
        binarySearchP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<number>;
        // public static <T> int java.util.Arrays.binarySearch(T[],T,java.util.Comparator<? super T>)
        binarySearch(arg0: object_array_t, arg1: object_t, arg2: object_t): number;
        binarySearchP(arg0: object_array_t, arg1: object_t, arg2: object_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)
        binarySearch(arg0: object_array_t, arg1: object_t): number;
        binarySearchP(arg0: object_array_t, arg1: object_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(short[],short)
        binarySearch(arg0: array_t<short_t>, arg1: short_t): number;
        binarySearchP(arg0: array_t<short_t>, arg1: short_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(long[],long)
        binarySearch(arg0: array_t<long_t>, arg1: long_t): number;
        binarySearchP(arg0: array_t<long_t>, arg1: long_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(int[],int)
        binarySearch(arg0: array_t<integer_t>, arg1: integer_t): number;
        binarySearchP(arg0: array_t<integer_t>, arg1: integer_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(float[],float)
        binarySearch(arg0: array_t<float_t>, arg1: float_t): number;
        binarySearchP(arg0: array_t<float_t>, arg1: float_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(double[],double)
        binarySearch(arg0: array_t<double_t>, arg1: double_t): number;
        binarySearchP(arg0: array_t<double_t>, arg1: double_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(char[],char)
        binarySearch(arg0: object_array_t, arg1: object_t): number;
        binarySearchP(arg0: object_array_t, arg1: object_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(byte[],byte)
        binarySearch(arg0: object_array_t, arg1: object_t): number;
        binarySearchP(arg0: object_array_t, arg1: object_t): Promise<number>;
        // public static <T,U> T[] java.util.Arrays.copyOf(U[],int,java.lang.Class<? extends T[]>)
        copyOf(arg0: object_array_t, arg1: integer_t, arg2: object_t): object_t[];
        copyOfP(arg0: object_array_t, arg1: integer_t, arg2: object_t): Promise<object_t[]>;
        // public static <T> T[] java.util.Arrays.copyOf(T[],int)
        copyOf(arg0: object_array_t, arg1: integer_t): object_t[];
        copyOfP(arg0: object_array_t, arg1: integer_t): Promise<object_t[]>;
        // public static boolean[] java.util.Arrays.copyOf(boolean[],int)
        copyOf(arg0: array_t<boolean_t>, arg1: integer_t): boolean[];
        copyOfP(arg0: array_t<boolean_t>, arg1: integer_t): Promise<boolean[]>;
        // public static short[] java.util.Arrays.copyOf(short[],int)
        copyOf(arg0: array_t<short_t>, arg1: integer_t): number[];
        copyOfP(arg0: array_t<short_t>, arg1: integer_t): Promise<number[]>;
        // public static long[] java.util.Arrays.copyOf(long[],int)
        copyOf(arg0: array_t<long_t>, arg1: integer_t): longValue_t[];
        copyOfP(arg0: array_t<long_t>, arg1: integer_t): Promise<longValue_t[]>;
        // public static int[] java.util.Arrays.copyOf(int[],int)
        copyOf(arg0: array_t<integer_t>, arg1: integer_t): number[];
        copyOfP(arg0: array_t<integer_t>, arg1: integer_t): Promise<number[]>;
        // public static float[] java.util.Arrays.copyOf(float[],int)
        copyOf(arg0: array_t<float_t>, arg1: integer_t): number[];
        copyOfP(arg0: array_t<float_t>, arg1: integer_t): Promise<number[]>;
        // public static double[] java.util.Arrays.copyOf(double[],int)
        copyOf(arg0: array_t<double_t>, arg1: integer_t): number[];
        copyOfP(arg0: array_t<double_t>, arg1: integer_t): Promise<number[]>;
        // public static char[] java.util.Arrays.copyOf(char[],int)
        copyOf(arg0: object_array_t, arg1: integer_t): object_t[];
        copyOfP(arg0: object_array_t, arg1: integer_t): Promise<object_t[]>;
        // public static byte[] java.util.Arrays.copyOf(byte[],int)
        copyOf(arg0: object_array_t, arg1: integer_t): object_t[];
        copyOfP(arg0: object_array_t, arg1: integer_t): Promise<object_t[]>;
        // public static <T,U> T[] java.util.Arrays.copyOfRange(U[],int,int,java.lang.Class<? extends T[]>)
        copyOfRange(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): object_t[];
        copyOfRangeP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<object_t[]>;
        // public static <T> T[] java.util.Arrays.copyOfRange(T[],int,int)
        copyOfRange(arg0: object_array_t, arg1: integer_t, arg2: integer_t): object_t[];
        copyOfRangeP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<object_t[]>;
        // public static boolean[] java.util.Arrays.copyOfRange(boolean[],int,int)
        copyOfRange(arg0: array_t<boolean_t>, arg1: integer_t, arg2: integer_t): boolean[];
        copyOfRangeP(arg0: array_t<boolean_t>, arg1: integer_t, arg2: integer_t): Promise<boolean[]>;
        // public static short[] java.util.Arrays.copyOfRange(short[],int,int)
        copyOfRange(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t): number[];
        copyOfRangeP(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t): Promise<number[]>;
        // public static long[] java.util.Arrays.copyOfRange(long[],int,int)
        copyOfRange(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): longValue_t[];
        copyOfRangeP(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): Promise<longValue_t[]>;
        // public static int[] java.util.Arrays.copyOfRange(int[],int,int)
        copyOfRange(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): number[];
        copyOfRangeP(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<number[]>;
        // public static float[] java.util.Arrays.copyOfRange(float[],int,int)
        copyOfRange(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t): number[];
        copyOfRangeP(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t): Promise<number[]>;
        // public static double[] java.util.Arrays.copyOfRange(double[],int,int)
        copyOfRange(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): number[];
        copyOfRangeP(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): Promise<number[]>;
        // public static char[] java.util.Arrays.copyOfRange(char[],int,int)
        copyOfRange(arg0: object_array_t, arg1: integer_t, arg2: integer_t): object_t[];
        copyOfRangeP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<object_t[]>;
        // public static byte[] java.util.Arrays.copyOfRange(byte[],int,int)
        copyOfRange(arg0: object_array_t, arg1: integer_t, arg2: integer_t): object_t[];
        copyOfRangeP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<object_t[]>;
        // public static boolean java.util.Arrays.deepEquals(java.lang.Object[],java.lang.Object[])
        deepEquals(arg0: object_array_t, arg1: object_array_t): boolean;
        deepEqualsP(arg0: object_array_t, arg1: object_array_t): Promise<boolean>;
        // public static int java.util.Arrays.deepHashCode(java.lang.Object[])
        deepHashCode(arg0: object_array_t): number;
        deepHashCodeP(arg0: object_array_t): Promise<number>;
        // public static java.lang.String java.util.Arrays.deepToString(java.lang.Object[])
        deepToString(arg0: object_array_t): string;
        deepToStringP(arg0: object_array_t): Promise<string>;
        // public static boolean java.util.Arrays.equals(java.lang.Object[],java.lang.Object[])
        equals(arg0: object_array_t, arg1: object_array_t): boolean;
        equalsP(arg0: object_array_t, arg1: object_array_t): Promise<boolean>;
        // public static boolean java.util.Arrays.equals(boolean[],boolean[])
        equals(arg0: array_t<boolean_t>, arg1: array_t<boolean_t>): boolean;
        equalsP(arg0: array_t<boolean_t>, arg1: array_t<boolean_t>): Promise<boolean>;
        // public static boolean java.util.Arrays.equals(short[],short[])
        equals(arg0: array_t<short_t>, arg1: array_t<short_t>): boolean;
        equalsP(arg0: array_t<short_t>, arg1: array_t<short_t>): Promise<boolean>;
        // public static boolean java.util.Arrays.equals(long[],long[])
        equals(arg0: array_t<long_t>, arg1: array_t<long_t>): boolean;
        equalsP(arg0: array_t<long_t>, arg1: array_t<long_t>): Promise<boolean>;
        // public static boolean java.util.Arrays.equals(int[],int[])
        equals(arg0: array_t<integer_t>, arg1: array_t<integer_t>): boolean;
        equalsP(arg0: array_t<integer_t>, arg1: array_t<integer_t>): Promise<boolean>;
        // public static boolean java.util.Arrays.equals(float[],float[])
        equals(arg0: array_t<float_t>, arg1: array_t<float_t>): boolean;
        equalsP(arg0: array_t<float_t>, arg1: array_t<float_t>): Promise<boolean>;
        // public static boolean java.util.Arrays.equals(double[],double[])
        equals(arg0: array_t<double_t>, arg1: array_t<double_t>): boolean;
        equalsP(arg0: array_t<double_t>, arg1: array_t<double_t>): Promise<boolean>;
        // public static boolean java.util.Arrays.equals(char[],char[])
        equals(arg0: object_array_t, arg1: object_array_t): boolean;
        equalsP(arg0: object_array_t, arg1: object_array_t): Promise<boolean>;
        // public static boolean java.util.Arrays.equals(byte[],byte[])
        equals(arg0: object_array_t, arg1: object_array_t): boolean;
        equalsP(arg0: object_array_t, arg1: object_array_t): Promise<boolean>;
        // public static void java.util.Arrays.fill(java.lang.Object[],int,int,java.lang.Object)
        fill(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): void;
        fillP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<void>;
        // public static void java.util.Arrays.fill(boolean[],int,int,boolean)
        fill(arg0: array_t<boolean_t>, arg1: integer_t, arg2: integer_t, arg3: boolean_t): void;
        fillP(arg0: array_t<boolean_t>, arg1: integer_t, arg2: integer_t, arg3: boolean_t): Promise<void>;
        // public static void java.util.Arrays.fill(short[],int,int,short)
        fill(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t, arg3: short_t): void;
        fillP(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t, arg3: short_t): Promise<void>;
        // public static void java.util.Arrays.fill(long[],int,int,long)
        fill(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: long_t): void;
        fillP(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: long_t): Promise<void>;
        // public static void java.util.Arrays.fill(int[],int,int,int)
        fill(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t): void;
        fillP(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<void>;
        // public static void java.util.Arrays.fill(float[],int,int,float)
        fill(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t, arg3: float_t): void;
        fillP(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t, arg3: float_t): Promise<void>;
        // public static void java.util.Arrays.fill(double[],int,int,double)
        fill(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: double_t): void;
        fillP(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: double_t): Promise<void>;
        // public static void java.util.Arrays.fill(char[],int,int,char)
        fill(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): void;
        fillP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<void>;
        // public static void java.util.Arrays.fill(byte[],int,int,byte)
        fill(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): void;
        fillP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<void>;
        // public static void java.util.Arrays.fill(java.lang.Object[],java.lang.Object)
        fill(arg0: object_array_t, arg1: object_t): void;
        fillP(arg0: object_array_t, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.fill(boolean[],boolean)
        fill(arg0: array_t<boolean_t>, arg1: boolean_t): void;
        fillP(arg0: array_t<boolean_t>, arg1: boolean_t): Promise<void>;
        // public static void java.util.Arrays.fill(short[],short)
        fill(arg0: array_t<short_t>, arg1: short_t): void;
        fillP(arg0: array_t<short_t>, arg1: short_t): Promise<void>;
        // public static void java.util.Arrays.fill(long[],long)
        fill(arg0: array_t<long_t>, arg1: long_t): void;
        fillP(arg0: array_t<long_t>, arg1: long_t): Promise<void>;
        // public static void java.util.Arrays.fill(int[],int)
        fill(arg0: array_t<integer_t>, arg1: integer_t): void;
        fillP(arg0: array_t<integer_t>, arg1: integer_t): Promise<void>;
        // public static void java.util.Arrays.fill(float[],float)
        fill(arg0: array_t<float_t>, arg1: float_t): void;
        fillP(arg0: array_t<float_t>, arg1: float_t): Promise<void>;
        // public static void java.util.Arrays.fill(double[],double)
        fill(arg0: array_t<double_t>, arg1: double_t): void;
        fillP(arg0: array_t<double_t>, arg1: double_t): Promise<void>;
        // public static void java.util.Arrays.fill(char[],char)
        fill(arg0: object_array_t, arg1: object_t): void;
        fillP(arg0: object_array_t, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.fill(byte[],byte)
        fill(arg0: object_array_t, arg1: object_t): void;
        fillP(arg0: object_array_t, arg1: object_t): Promise<void>;
        // public static int java.util.Arrays.hashCode(java.lang.Object[])
        hashCode(arg0: object_array_t): number;
        hashCodeP(arg0: object_array_t): Promise<number>;
        // public static int java.util.Arrays.hashCode(boolean[])
        hashCode(arg0: array_t<boolean_t>): number;
        hashCodeP(arg0: array_t<boolean_t>): Promise<number>;
        // public static int java.util.Arrays.hashCode(short[])
        hashCode(arg0: array_t<short_t>): number;
        hashCodeP(arg0: array_t<short_t>): Promise<number>;
        // public static int java.util.Arrays.hashCode(long[])
        hashCode(arg0: array_t<long_t>): number;
        hashCodeP(arg0: array_t<long_t>): Promise<number>;
        // public static int java.util.Arrays.hashCode(int[])
        hashCode(arg0: array_t<integer_t>): number;
        hashCodeP(arg0: array_t<integer_t>): Promise<number>;
        // public static int java.util.Arrays.hashCode(float[])
        hashCode(arg0: array_t<float_t>): number;
        hashCodeP(arg0: array_t<float_t>): Promise<number>;
        // public static int java.util.Arrays.hashCode(double[])
        hashCode(arg0: array_t<double_t>): number;
        hashCodeP(arg0: array_t<double_t>): Promise<number>;
        // public static int java.util.Arrays.hashCode(char[])
        hashCode(arg0: object_array_t): number;
        hashCodeP(arg0: object_array_t): Promise<number>;
        // public static int java.util.Arrays.hashCode(byte[])
        hashCode(arg0: object_array_t): number;
        hashCodeP(arg0: object_array_t): Promise<number>;
        // public static <T> void java.util.Arrays.parallelPrefix(T[],int,int,java.util.function.BinaryOperator<T>)
        parallelPrefix(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: BinaryOperator): void;
        parallelPrefixP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: BinaryOperator): Promise<void>;
        // public static void java.util.Arrays.parallelPrefix(double[],int,int,java.util.function.DoubleBinaryOperator)
        parallelPrefix(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: object_t): void;
        parallelPrefixP(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<void>;
        // public static void java.util.Arrays.parallelPrefix(long[],int,int,java.util.function.LongBinaryOperator)
        parallelPrefix(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: object_t): void;
        parallelPrefixP(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<void>;
        // public static void java.util.Arrays.parallelPrefix(int[],int,int,java.util.function.IntBinaryOperator)
        parallelPrefix(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: object_t): void;
        parallelPrefixP(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<void>;
        // public static <T> void java.util.Arrays.parallelPrefix(T[],java.util.function.BinaryOperator<T>)
        parallelPrefix(arg0: object_array_t, arg1: BinaryOperator): void;
        parallelPrefixP(arg0: object_array_t, arg1: BinaryOperator): Promise<void>;
        // public static void java.util.Arrays.parallelPrefix(double[],java.util.function.DoubleBinaryOperator)
        parallelPrefix(arg0: array_t<double_t>, arg1: object_t): void;
        parallelPrefixP(arg0: array_t<double_t>, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.parallelPrefix(long[],java.util.function.LongBinaryOperator)
        parallelPrefix(arg0: array_t<long_t>, arg1: object_t): void;
        parallelPrefixP(arg0: array_t<long_t>, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.parallelPrefix(int[],java.util.function.IntBinaryOperator)
        parallelPrefix(arg0: array_t<integer_t>, arg1: object_t): void;
        parallelPrefixP(arg0: array_t<integer_t>, arg1: object_t): Promise<void>;
        // public static <T> void java.util.Arrays.parallelSetAll(T[],java.util.function.IntFunction<? extends T>)
        parallelSetAll(arg0: object_array_t, arg1: object_t): void;
        parallelSetAllP(arg0: object_array_t, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.parallelSetAll(double[],java.util.function.IntToDoubleFunction)
        parallelSetAll(arg0: array_t<double_t>, arg1: object_t): void;
        parallelSetAllP(arg0: array_t<double_t>, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.parallelSetAll(long[],java.util.function.IntToLongFunction)
        parallelSetAll(arg0: array_t<long_t>, arg1: object_t): void;
        parallelSetAllP(arg0: array_t<long_t>, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.parallelSetAll(int[],java.util.function.IntUnaryOperator)
        parallelSetAll(arg0: array_t<integer_t>, arg1: object_t): void;
        parallelSetAllP(arg0: array_t<integer_t>, arg1: object_t): Promise<void>;
        // public static <T> void java.util.Arrays.parallelSort(T[],int,int,java.util.Comparator<? super T>)
        parallelSort(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): void;
        parallelSortP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<void>;
        // public static <T> void java.util.Arrays.parallelSort(T[],int,int)
        parallelSort(arg0: array_t<Comparable>, arg1: integer_t, arg2: integer_t): void;
        parallelSortP(arg0: array_t<Comparable>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.parallelSort(short[],int,int)
        parallelSort(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t): void;
        parallelSortP(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.parallelSort(long[],int,int)
        parallelSort(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): void;
        parallelSortP(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.parallelSort(int[],int,int)
        parallelSort(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): void;
        parallelSortP(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.parallelSort(float[],int,int)
        parallelSort(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t): void;
        parallelSortP(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.parallelSort(double[],int,int)
        parallelSort(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): void;
        parallelSortP(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.parallelSort(char[],int,int)
        parallelSort(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
        parallelSortP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.parallelSort(byte[],int,int)
        parallelSort(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
        parallelSortP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static <T> void java.util.Arrays.parallelSort(T[],java.util.Comparator<? super T>)
        parallelSort(arg0: object_array_t, arg1: object_t): void;
        parallelSortP(arg0: object_array_t, arg1: object_t): Promise<void>;
        // public static <T> void java.util.Arrays.parallelSort(T[])
        parallelSort(arg0: array_t<Comparable>): void;
        parallelSortP(arg0: array_t<Comparable>): Promise<void>;
        // public static void java.util.Arrays.parallelSort(short[])
        parallelSort(arg0: array_t<short_t>): void;
        parallelSortP(arg0: array_t<short_t>): Promise<void>;
        // public static void java.util.Arrays.parallelSort(long[])
        parallelSort(arg0: array_t<long_t>): void;
        parallelSortP(arg0: array_t<long_t>): Promise<void>;
        // public static void java.util.Arrays.parallelSort(int[])
        parallelSort(arg0: array_t<integer_t>): void;
        parallelSortP(arg0: array_t<integer_t>): Promise<void>;
        // public static void java.util.Arrays.parallelSort(float[])
        parallelSort(arg0: array_t<float_t>): void;
        parallelSortP(arg0: array_t<float_t>): Promise<void>;
        // public static void java.util.Arrays.parallelSort(double[])
        parallelSort(arg0: array_t<double_t>): void;
        parallelSortP(arg0: array_t<double_t>): Promise<void>;
        // public static void java.util.Arrays.parallelSort(char[])
        parallelSort(arg0: object_array_t): void;
        parallelSortP(arg0: object_array_t): Promise<void>;
        // public static void java.util.Arrays.parallelSort(byte[])
        parallelSort(arg0: object_array_t): void;
        parallelSortP(arg0: object_array_t): Promise<void>;
        // public static <T> void java.util.Arrays.setAll(T[],java.util.function.IntFunction<? extends T>)
        setAll(arg0: object_array_t, arg1: object_t): void;
        setAllP(arg0: object_array_t, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.setAll(double[],java.util.function.IntToDoubleFunction)
        setAll(arg0: array_t<double_t>, arg1: object_t): void;
        setAllP(arg0: array_t<double_t>, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.setAll(long[],java.util.function.IntToLongFunction)
        setAll(arg0: array_t<long_t>, arg1: object_t): void;
        setAllP(arg0: array_t<long_t>, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.setAll(int[],java.util.function.IntUnaryOperator)
        setAll(arg0: array_t<integer_t>, arg1: object_t): void;
        setAllP(arg0: array_t<integer_t>, arg1: object_t): Promise<void>;
        // public static <T> void java.util.Arrays.sort(T[],int,int,java.util.Comparator<? super T>)
        sort(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): void;
        sortP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<void>;
        // public static void java.util.Arrays.sort(java.lang.Object[],int,int)
        sort(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
        sortP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.sort(short[],int,int)
        sort(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t): void;
        sortP(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.sort(long[],int,int)
        sort(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): void;
        sortP(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.sort(int[],int,int)
        sort(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): void;
        sortP(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.sort(float[],int,int)
        sort(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t): void;
        sortP(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.sort(double[],int,int)
        sort(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): void;
        sortP(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.sort(char[],int,int)
        sort(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
        sortP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.sort(byte[],int,int)
        sort(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
        sortP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static <T> void java.util.Arrays.sort(T[],java.util.Comparator<? super T>)
        sort(arg0: object_array_t, arg1: object_t): void;
        sortP(arg0: object_array_t, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.sort(java.lang.Object[])
        sort(arg0: object_array_t): void;
        sortP(arg0: object_array_t): Promise<void>;
        // public static void java.util.Arrays.sort(short[])
        sort(arg0: array_t<short_t>): void;
        sortP(arg0: array_t<short_t>): Promise<void>;
        // public static void java.util.Arrays.sort(long[])
        sort(arg0: array_t<long_t>): void;
        sortP(arg0: array_t<long_t>): Promise<void>;
        // public static void java.util.Arrays.sort(int[])
        sort(arg0: array_t<integer_t>): void;
        sortP(arg0: array_t<integer_t>): Promise<void>;
        // public static void java.util.Arrays.sort(float[])
        sort(arg0: array_t<float_t>): void;
        sortP(arg0: array_t<float_t>): Promise<void>;
        // public static void java.util.Arrays.sort(double[])
        sort(arg0: array_t<double_t>): void;
        sortP(arg0: array_t<double_t>): Promise<void>;
        // public static void java.util.Arrays.sort(char[])
        sort(arg0: object_array_t): void;
        sortP(arg0: object_array_t): Promise<void>;
        // public static void java.util.Arrays.sort(byte[])
        sort(arg0: object_array_t): void;
        sortP(arg0: object_array_t): Promise<void>;
        // public static <T> java.util.Spliterator<T> java.util.Arrays.spliterator(T[],int,int)
        spliterator(arg0: object_array_t, arg1: integer_t, arg2: integer_t): object_t;
        spliteratorP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<object_t>;
        // public static java.util.Spliterator$OfDouble java.util.Arrays.spliterator(double[],int,int)
        spliterator(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): object_t;
        spliteratorP(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): Promise<object_t>;
        // public static java.util.Spliterator$OfLong java.util.Arrays.spliterator(long[],int,int)
        spliterator(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): object_t;
        spliteratorP(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): Promise<object_t>;
        // public static java.util.Spliterator$OfInt java.util.Arrays.spliterator(int[],int,int)
        spliterator(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): object_t;
        spliteratorP(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<object_t>;
        // public static <T> java.util.Spliterator<T> java.util.Arrays.spliterator(T[])
        spliterator(arg0: object_array_t): object_t;
        spliteratorP(arg0: object_array_t): Promise<object_t>;
        // public static java.util.Spliterator$OfDouble java.util.Arrays.spliterator(double[])
        spliterator(arg0: array_t<double_t>): object_t;
        spliteratorP(arg0: array_t<double_t>): Promise<object_t>;
        // public static java.util.Spliterator$OfLong java.util.Arrays.spliterator(long[])
        spliterator(arg0: array_t<long_t>): object_t;
        spliteratorP(arg0: array_t<long_t>): Promise<object_t>;
        // public static java.util.Spliterator$OfInt java.util.Arrays.spliterator(int[])
        spliterator(arg0: array_t<integer_t>): object_t;
        spliteratorP(arg0: array_t<integer_t>): Promise<object_t>;
        // public static <T> java.util.stream.Stream<T> java.util.Arrays.stream(T[],int,int)
        stream(arg0: object_array_t, arg1: integer_t, arg2: integer_t): object_t;
        streamP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<object_t>;
        // public static java.util.stream.DoubleStream java.util.Arrays.stream(double[],int,int)
        stream(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): object_t;
        streamP(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): Promise<object_t>;
        // public static java.util.stream.LongStream java.util.Arrays.stream(long[],int,int)
        stream(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): object_t;
        streamP(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): Promise<object_t>;
        // public static java.util.stream.IntStream java.util.Arrays.stream(int[],int,int)
        stream(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): object_t;
        streamP(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<object_t>;
        // public static <T> java.util.stream.Stream<T> java.util.Arrays.stream(T[])
        stream(arg0: object_array_t): object_t;
        streamP(arg0: object_array_t): Promise<object_t>;
        // public static java.util.stream.DoubleStream java.util.Arrays.stream(double[])
        stream(arg0: array_t<double_t>): object_t;
        streamP(arg0: array_t<double_t>): Promise<object_t>;
        // public static java.util.stream.LongStream java.util.Arrays.stream(long[])
        stream(arg0: array_t<long_t>): object_t;
        streamP(arg0: array_t<long_t>): Promise<object_t>;
        // public static java.util.stream.IntStream java.util.Arrays.stream(int[])
        stream(arg0: array_t<integer_t>): object_t;
        streamP(arg0: array_t<integer_t>): Promise<object_t>;
        // public static java.lang.String java.util.Arrays.toString(java.lang.Object[])
        toString(arg0: object_array_t): string;
        toStringP(arg0: object_array_t): Promise<string>;
        // public static java.lang.String java.util.Arrays.toString(boolean[])
        toString(arg0: array_t<boolean_t>): string;
        toStringP(arg0: array_t<boolean_t>): Promise<string>;
        // public static java.lang.String java.util.Arrays.toString(short[])
        toString(arg0: array_t<short_t>): string;
        toStringP(arg0: array_t<short_t>): Promise<string>;
        // public static java.lang.String java.util.Arrays.toString(long[])
        toString(arg0: array_t<long_t>): string;
        toStringP(arg0: array_t<long_t>): Promise<string>;
        // public static java.lang.String java.util.Arrays.toString(int[])
        toString(arg0: array_t<integer_t>): string;
        toStringP(arg0: array_t<integer_t>): Promise<string>;
        // public static java.lang.String java.util.Arrays.toString(float[])
        toString(arg0: array_t<float_t>): string;
        toStringP(arg0: array_t<float_t>): Promise<string>;
        // public static java.lang.String java.util.Arrays.toString(double[])
        toString(arg0: array_t<double_t>): string;
        toStringP(arg0: array_t<double_t>): Promise<string>;
        // public static java.lang.String java.util.Arrays.toString(char[])
        toString(arg0: object_array_t): string;
        toStringP(arg0: object_array_t): Promise<string>;
        // public static java.lang.String java.util.Arrays.toString(byte[])
        toString(arg0: object_array_t): string;
        toStringP(arg0: object_array_t): Promise<string>;
      }
    }
  }

  export module java.util {
    export interface Collection extends Java.java.lang.Iterable {
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module Collection {
      export interface Static {
      }
    }
  }

  export module java.util.function_ {
    export interface BiFunction extends Java.java.lang.Object {
      // public default <V> java.util.function.BiFunction<T, U, V> java.util.function.BiFunction.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): BiFunction;
      andThenP(arg0: Function): Promise<BiFunction>;
      // public abstract R java.util.function.BiFunction.apply(T,U)
      apply(arg0: object_t, arg1: object_t): object_t;
      applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
    }
    export module BiFunction {
      export interface Static {
      }
    }
  }

  export module java.util.function_ {
    export interface BinaryOperator extends Java.java.util.function_.BiFunction {
      // public default <V> java.util.function.BiFunction<T, U, V> java.util.function.BiFunction.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): BiFunction;
      andThenP(arg0: Function): Promise<BiFunction>;
      // public abstract R java.util.function.BiFunction.apply(T,U)
      apply(arg0: object_t, arg1: object_t): object_t;
      applyP(arg0: object_t, arg1: object_t): Promise<object_t>;
    }
    export module BinaryOperator {
      export interface Static {
        // public static <T> java.util.function.BinaryOperator<T> java.util.function.BinaryOperator.maxBy(java.util.Comparator<? super T>)
        maxBy(arg0: object_t): BinaryOperator;
        maxByP(arg0: object_t): Promise<BinaryOperator>;
        // public static <T> java.util.function.BinaryOperator<T> java.util.function.BinaryOperator.minBy(java.util.Comparator<? super T>)
        minBy(arg0: object_t): BinaryOperator;
        minByP(arg0: object_t): Promise<BinaryOperator>;
      }
    }
  }

  export module java.util.function_ {
    export interface BiPredicate extends Java.java.lang.Object {
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.and(java.util.function.BiPredicate<? super T, ? super U>)
      and(arg0: BiPredicate): BiPredicate;
      andP(arg0: BiPredicate): Promise<BiPredicate>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.negate()
      negate(): BiPredicate;
      negateP(): Promise<BiPredicate>;
      // public default java.util.function.BiPredicate<T, U> java.util.function.BiPredicate.or(java.util.function.BiPredicate<? super T, ? super U>)
      or(arg0: BiPredicate): BiPredicate;
      orP(arg0: BiPredicate): Promise<BiPredicate>;
      // public abstract boolean java.util.function.BiPredicate.test(T,U)
      test(arg0: object_t, arg1: object_t): boolean;
      testP(arg0: object_t, arg1: object_t): Promise<boolean>;
    }
    export module BiPredicate {
      export interface Static {
      }
    }
  }

  export module java.util.function_ {
    export interface Consumer extends Java.java.lang.Object {
      // public abstract void java.util.function.Consumer.accept(T)
      accept(arg0: object_t): void;
      acceptP(arg0: object_t): Promise<void>;
      // public default java.util.function.Consumer<T> java.util.function.Consumer.andThen(java.util.function.Consumer<? super T>)
      andThen(arg0: Consumer): Consumer;
      andThenP(arg0: Consumer): Promise<Consumer>;
    }
    export module Consumer {
      export interface Static {
      }
    }
  }

  export module java.util.function_ {
    export interface Function extends Java.java.lang.Object {
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThen(arg0: Function): Function;
      andThenP(arg0: Function): Promise<Function>;
      // public abstract R java.util.function.Function.apply(T)
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      compose(arg0: Function): Function;
      composeP(arg0: Function): Promise<Function>;
    }
    export module Function {
      export interface Static {
        // public static <T> java.util.function.Function<T, T> java.util.function.Function.identity()
        identity(): Function;
        identityP(): Promise<Function>;
      }
    }
  }

  export module java.util {
    export interface HashSet extends Java.java.util.AbstractSet,Java.java.lang.Cloneable,Java.java.util.Set {
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.HashSet.clone()
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module HashSet {
      export interface Static {
        new (arg0: integer_t, arg1: float_t): java.util.HashSet;
        new (arg0: Collection): java.util.HashSet;
        new (arg0: integer_t): java.util.HashSet;
        new (): java.util.HashSet;
      }
    }
  }

  export module java.util {
    export interface Iterator extends Java.java.lang.Object {
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemaining(arg0: Consumer): void;
      forEachRemainingP(arg0: Consumer): Promise<void>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public abstract E java.util.Iterator.next()
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default void java.util.Iterator.remove()
      remove(): void;
      removeP(): Promise<void>;
    }
    export module Iterator {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface List extends Java.java.util.Collection {
      // public abstract void java.util.List.add(int,E)
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAll(arg0: integer_t, arg1: Collection): boolean;
      addAllP(arg0: integer_t, arg1: Collection): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public abstract E java.util.List.get(int)
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIterator(arg0: integer_t): object_t;
      listIteratorP(arg0: integer_t): Promise<object_t>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIterator(): object_t;
      listIteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.List.remove(int)
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract E java.util.List.set(int,E)
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sort(arg0: object_t): void;
      sortP(arg0: object_t): Promise<void>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subList(arg0: integer_t, arg1: integer_t): List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<List>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module List {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface Map extends Java.java.lang.Object {
      // public abstract void java.util.Map.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      compute(arg0: object_t, arg1: BiFunction): object_t;
      computeP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsent(arg0: object_t, arg1: Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresent(arg0: object_t, arg1: BiFunction): object_t;
      computeIfPresentP(arg0: object_t, arg1: BiFunction): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySet(): Set;
      entrySetP(): Promise<Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySet(): Set;
      keySetP(): Promise<Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      merge(arg0: object_t, arg1: object_t, arg2: BiFunction): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: BiFunction): Promise<object_t>;
      // public abstract V java.util.Map.put(K,V)
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAll(arg0: Map): void;
      putAllP(arg0: Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAll(arg0: BiFunction): void;
      replaceAllP(arg0: BiFunction): Promise<void>;
      // public abstract int java.util.Map.size()
      size(): number;
      sizeP(): Promise<number>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      values(): Collection;
      valuesP(): Promise<Collection>;
    }
    export module Map {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface NoSuchElementException extends Java.java.lang.Exception {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressed(arg0: Throwable): void;
      addSuppressedP(arg0: Throwable): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTrace(): Throwable;
      fillInStackTraceP(): Promise<Throwable>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCause(): Throwable;
      getCauseP(): Promise<Throwable>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClass(): object_t;
      getClassP(): Promise<object_t>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressed(): Throwable[];
      getSuppressedP(): Promise<Throwable[]>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCause(arg0: Throwable): Throwable;
      initCauseP(arg0: Throwable): Promise<Throwable>;
      // public final native void java.lang.Object.notify()
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      wait(): void;
      waitP(): Promise<void>;
    }
    export module NoSuchElementException {
      export interface Static {
        new (arg0: string_t): java.util.NoSuchElementException;
        new (): java.util.NoSuchElementException;
      }
    }
  }

  export module java.util {
    export interface Set extends Java.java.util.Collection {
      // public abstract boolean java.util.Collection.add(E)
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAll(arg0: Collection): boolean;
      addAllP(arg0: Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAll(arg0: Collection): boolean;
      containsAllP(arg0: Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEach(arg0: Consumer): void;
      forEachP(arg0: Consumer): Promise<void>;
      // public native int java.lang.Object.hashCode()
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iterator(): Iterator;
      iteratorP(): Promise<Iterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAll(arg0: Collection): boolean;
      removeAllP(arg0: Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAll(arg0: Collection): boolean;
      retainAllP(arg0: Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliterator(): object_t;
      spliteratorP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module Set {
      export interface Static {
      }
    }
  }


  } // module Java

} // module Module
