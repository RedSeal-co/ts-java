// tsJavaModule.ts
// This file was generated by ts-java.
/// <reference path="../typings/java/java.d.ts" />
/// <reference path="../typings/lodash/lodash.d.ts" />
/// <reference path="../typings/debug/debug.d.ts" />

// Generated using the following tsjava options:
// tsJavaModulePath:
//   tsJavaModule.ts
// classpath:
// classes:
//   java.lang.Boolean
//   java.lang.Class
//   java.lang.Double
//   java.lang.Enum
//   java.lang.Float
//   java.lang.Integer
//   java.lang.Iterable
//   java.lang.Long
//   java.lang.Number
//   java.lang.Short
//   java.util.Collection
//   java.util.function.Consumer
//   java.util.function.DoubleConsumer
//   java.util.function.Function
//   java.util.function.IntConsumer
//   java.util.function.LongConsumer
//   java.util.Iterator
//   java.util.List
// packages:
//   java.util.stream.**

// TODO: Modify this template for Generics

/* tslint:disable:max-line-length class-name */

declare function require(name: string): any;
require('source-map-support').install();

import _java = require('java');
import _ = require('lodash');
import BluePromise = require('bluebird');
import path = require('path');
import debug = require('debug');
var dlog = debug('tsJavaModule:' + __dirname);
dlog('imported');

_java.asyncOptions = {
    syncSuffix: '',
    asyncSuffix: 'A',
    promiseSuffix: 'P',
    promisify: BluePromise.promisify
};
dlog('asyncOptions:', _java.asyncOptions);

// JVM initialization callback which adds tsjava.classpath to the JVM classpath.
function beforeJvm(): BluePromise<void> {
  var moduleJars: string[] = [];
  moduleJars.forEach((jarPath: string) => {
    var fullJarPath: string = path.join(__dirname, '', jarPath);
    dlog('Adding to classpath:', fullJarPath);
    _java.classpath.push(fullJarPath);
  });
  return BluePromise.resolve();
}

_java.registerClientP(beforeJvm);

export module Java {
  'use strict';

  interface StringDict {
    [index: string]: string;
  }

  export type NodeJavaAPI = typeof _java;

  export function getJava(): NodeJavaAPI {
    return _java;
  }

  export function ensureJvm(): Promise<void> {
    return _java.ensureJvm();
  }


  // Return the fully qualified class path for a class name.
  // Returns undefined if the className is ambiguous or not present in the configured classes.
  export function fullyQualifiedName(className: string): string {
    var shortToLongMap: StringDict = {
      'Boolean': 'java.lang.Boolean',
      'Class': 'java.lang.Class',
      'Double': 'java.lang.Double',
      'Enum': 'java.lang.Enum',
      'Float': 'java.lang.Float',
      'Integer': 'java.lang.Integer',
      'Iterable': 'java.lang.Iterable',
      'Long': 'java.lang.Long',
      'Object': 'java.lang.Object',
      'Short': 'java.lang.Short',
      'String': 'java.lang.String',
      'Collection': 'java.util.Collection',
      'Consumer': 'java.util.function.Consumer',
      'DoubleConsumer': 'java.util.function.DoubleConsumer',
      'Function': 'java.util.function.Function',
      'IntConsumer': 'java.util.function.IntConsumer',
      'LongConsumer': 'java.util.function.LongConsumer',
      'Iterator': 'java.util.Iterator',
      'List': 'java.util.List',
      'BaseStream': 'java.util.stream.BaseStream',
      'Collector': 'java.util.stream.Collector',
      'Collector$Characteristics': 'java.util.stream.Collector$Characteristics',
      'Collectors': 'java.util.stream.Collectors',
      'DoubleStream': 'java.util.stream.DoubleStream',
      'DoubleStream$Builder': 'java.util.stream.DoubleStream$Builder',
      'IntStream': 'java.util.stream.IntStream',
      'IntStream$Builder': 'java.util.stream.IntStream$Builder',
      'LongStream': 'java.util.stream.LongStream',
      'LongStream$Builder': 'java.util.stream.LongStream$Builder',
      'Stream': 'java.util.stream.Stream',
      'Stream$Builder': 'java.util.stream.Stream$Builder',
      'StreamSupport': 'java.util.stream.StreamSupport'
    };
    return shortToLongMap[className];
  }

  export function importClass(className: 'Boolean'): Java.java.lang.Boolean.Static;
  export function importClass(className: 'Class'): Java.java.lang.Class.Static;
  export function importClass(className: 'Double'): Java.java.lang.Double.Static;
  export function importClass(className: 'Enum'): Java.java.lang.Enum.Static;
  export function importClass(className: 'Float'): Java.java.lang.Float.Static;
  export function importClass(className: 'Integer'): Java.java.lang.Integer.Static;
  export function importClass(className: 'Iterable'): Java.java.lang.Iterable.Static;
  export function importClass(className: 'Long'): Java.java.lang.Long.Static;
  export function importClass(className: 'Object'): Java.java.lang.Object.Static;
  export function importClass(className: 'Short'): Java.java.lang.Short.Static;
  export function importClass(className: 'String'): Java.java.lang.String.Static;
  export function importClass(className: 'Collection'): Java.java.util.Collection.Static;
  export function importClass(className: 'Consumer'): Java.java.util.function_.Consumer.Static;
  export function importClass(className: 'DoubleConsumer'): Java.java.util.function_.DoubleConsumer.Static;
  export function importClass(className: 'Function'): Java.java.util.function_.Function.Static;
  export function importClass(className: 'IntConsumer'): Java.java.util.function_.IntConsumer.Static;
  export function importClass(className: 'LongConsumer'): Java.java.util.function_.LongConsumer.Static;
  export function importClass(className: 'Iterator'): Java.java.util.Iterator.Static;
  export function importClass(className: 'List'): Java.java.util.List.Static;
  export function importClass(className: 'BaseStream'): Java.java.util.stream.BaseStream.Static;
  export function importClass(className: 'Collector'): Java.java.util.stream.Collector.Static;
  export function importClass(className: 'Collector$Characteristics'): Java.java.util.stream.Collector$Characteristics.Static;
  export function importClass(className: 'Collectors'): Java.java.util.stream.Collectors.Static;
  export function importClass(className: 'DoubleStream'): Java.java.util.stream.DoubleStream.Static;
  export function importClass(className: 'DoubleStream$Builder'): Java.java.util.stream.DoubleStream$Builder.Static;
  export function importClass(className: 'IntStream'): Java.java.util.stream.IntStream.Static;
  export function importClass(className: 'IntStream$Builder'): Java.java.util.stream.IntStream$Builder.Static;
  export function importClass(className: 'LongStream'): Java.java.util.stream.LongStream.Static;
  export function importClass(className: 'LongStream$Builder'): Java.java.util.stream.LongStream$Builder.Static;
  export function importClass(className: 'Stream'): Java.java.util.stream.Stream.Static;
  export function importClass(className: 'Stream$Builder'): Java.java.util.stream.Stream$Builder.Static;
  export function importClass(className: 'StreamSupport'): Java.java.util.stream.StreamSupport.Static;
  export function importClass(className: 'java.lang.Boolean'): Java.java.lang.Boolean.Static;
  export function importClass(className: 'java.lang.Class'): Java.java.lang.Class.Static;
  export function importClass(className: 'java.lang.Double'): Java.java.lang.Double.Static;
  export function importClass(className: 'java.lang.Enum'): Java.java.lang.Enum.Static;
  export function importClass(className: 'java.lang.Float'): Java.java.lang.Float.Static;
  export function importClass(className: 'java.lang.Integer'): Java.java.lang.Integer.Static;
  export function importClass(className: 'java.lang.Iterable'): Java.java.lang.Iterable.Static;
  export function importClass(className: 'java.lang.Long'): Java.java.lang.Long.Static;
  export function importClass(className: 'java.lang.Number'): Java.java.lang.Number.Static;
  export function importClass(className: 'java.lang.Object'): Java.java.lang.Object.Static;
  export function importClass(className: 'java.lang.Short'): Java.java.lang.Short.Static;
  export function importClass(className: 'java.lang.String'): Java.java.lang.String.Static;
  export function importClass(className: 'java.util.Collection'): Java.java.util.Collection.Static;
  export function importClass(className: 'java.util.function.Consumer'): Java.java.util.function_.Consumer.Static;
  export function importClass(className: 'java.util.function.DoubleConsumer'): Java.java.util.function_.DoubleConsumer.Static;
  export function importClass(className: 'java.util.function.Function'): Java.java.util.function_.Function.Static;
  export function importClass(className: 'java.util.function.IntConsumer'): Java.java.util.function_.IntConsumer.Static;
  export function importClass(className: 'java.util.function.LongConsumer'): Java.java.util.function_.LongConsumer.Static;
  export function importClass(className: 'java.util.Iterator'): Java.java.util.Iterator.Static;
  export function importClass(className: 'java.util.List'): Java.java.util.List.Static;
  export function importClass(className: 'java.util.stream.BaseStream'): Java.java.util.stream.BaseStream.Static;
  export function importClass(className: 'java.util.stream.Collector'): Java.java.util.stream.Collector.Static;
  export function importClass(className: 'java.util.stream.Collector$Characteristics'): Java.java.util.stream.Collector$Characteristics.Static;
  export function importClass(className: 'java.util.stream.Collectors'): Java.java.util.stream.Collectors.Static;
  export function importClass(className: 'java.util.stream.DoubleStream'): Java.java.util.stream.DoubleStream.Static;
  export function importClass(className: 'java.util.stream.DoubleStream$Builder'): Java.java.util.stream.DoubleStream$Builder.Static;
  export function importClass(className: 'java.util.stream.IntStream'): Java.java.util.stream.IntStream.Static;
  export function importClass(className: 'java.util.stream.IntStream$Builder'): Java.java.util.stream.IntStream$Builder.Static;
  export function importClass(className: 'java.util.stream.LongStream'): Java.java.util.stream.LongStream.Static;
  export function importClass(className: 'java.util.stream.LongStream$Builder'): Java.java.util.stream.LongStream$Builder.Static;
  export function importClass(className: 'java.util.stream.Stream'): Java.java.util.stream.Stream.Static;
  export function importClass(className: 'java.util.stream.Stream$Builder'): Java.java.util.stream.Stream$Builder.Static;
  export function importClass(className: 'java.util.stream.StreamSupport'): Java.java.util.stream.StreamSupport.Static;
  export function importClass(className: string): any;
  export function importClass(className: string): any {
    var fullName: string = fullyQualifiedName(className) || className;
    return _java.import(fullName);
  }

  export function asInstanceOf(obj: any, className: 'Boolean'): Java.java.lang.Boolean;
  export function asInstanceOf(obj: any, className: 'Class'): Java.java.lang.Class<any>;
  export function asInstanceOf(obj: any, className: 'Double'): Java.java.lang.Double;
  export function asInstanceOf(obj: any, className: 'Enum'): Java.java.lang.Enum<any>;
  export function asInstanceOf(obj: any, className: 'Float'): Java.java.lang.Float;
  export function asInstanceOf(obj: any, className: 'Integer'): Java.java.lang.Integer;
  export function asInstanceOf(obj: any, className: 'Iterable'): Java.java.lang.Iterable<any>;
  export function asInstanceOf(obj: any, className: 'Long'): Java.java.lang.Long;
  export function asInstanceOf(obj: any, className: 'Object'): Java.java.lang.Object;
  export function asInstanceOf(obj: any, className: 'Short'): Java.java.lang.Short;
  export function asInstanceOf(obj: any, className: 'String'): Java.java.lang.String;
  export function asInstanceOf(obj: any, className: 'Collection'): Java.java.util.Collection<any>;
  export function asInstanceOf(obj: any, className: 'Consumer'): Java.java.util.function_.Consumer<any>;
  export function asInstanceOf(obj: any, className: 'DoubleConsumer'): Java.java.util.function_.DoubleConsumer;
  export function asInstanceOf(obj: any, className: 'Function'): Java.java.util.function_.Function<any ,any>;
  export function asInstanceOf(obj: any, className: 'IntConsumer'): Java.java.util.function_.IntConsumer;
  export function asInstanceOf(obj: any, className: 'LongConsumer'): Java.java.util.function_.LongConsumer;
  export function asInstanceOf(obj: any, className: 'Iterator'): Java.java.util.Iterator<any>;
  export function asInstanceOf(obj: any, className: 'List'): Java.java.util.List<any>;
  export function asInstanceOf(obj: any, className: 'BaseStream'): Java.java.util.stream.BaseStream<any ,any>;
  export function asInstanceOf(obj: any, className: 'Collector'): Java.java.util.stream.Collector<any ,any ,any>;
  export function asInstanceOf(obj: any, className: 'Collector$Characteristics'): Java.java.util.stream.Collector$Characteristics;
  export function asInstanceOf(obj: any, className: 'Collectors'): Java.java.util.stream.Collectors;
  export function asInstanceOf(obj: any, className: 'DoubleStream'): Java.java.util.stream.DoubleStream;
  export function asInstanceOf(obj: any, className: 'DoubleStream$Builder'): Java.java.util.stream.DoubleStream$Builder;
  export function asInstanceOf(obj: any, className: 'IntStream'): Java.java.util.stream.IntStream;
  export function asInstanceOf(obj: any, className: 'IntStream$Builder'): Java.java.util.stream.IntStream$Builder;
  export function asInstanceOf(obj: any, className: 'LongStream'): Java.java.util.stream.LongStream;
  export function asInstanceOf(obj: any, className: 'LongStream$Builder'): Java.java.util.stream.LongStream$Builder;
  export function asInstanceOf(obj: any, className: 'Stream'): Java.java.util.stream.Stream<any>;
  export function asInstanceOf(obj: any, className: 'Stream$Builder'): Java.java.util.stream.Stream$Builder<any>;
  export function asInstanceOf(obj: any, className: 'StreamSupport'): Java.java.util.stream.StreamSupport;
  export function asInstanceOf(obj: any, className: 'java.lang.Boolean'): Java.java.lang.Boolean;
  export function asInstanceOf(obj: any, className: 'java.lang.Class'): Java.java.lang.Class<any>;
  export function asInstanceOf(obj: any, className: 'java.lang.Double'): Java.java.lang.Double;
  export function asInstanceOf(obj: any, className: 'java.lang.Enum'): Java.java.lang.Enum<any>;
  export function asInstanceOf(obj: any, className: 'java.lang.Float'): Java.java.lang.Float;
  export function asInstanceOf(obj: any, className: 'java.lang.Integer'): Java.java.lang.Integer;
  export function asInstanceOf(obj: any, className: 'java.lang.Iterable'): Java.java.lang.Iterable<any>;
  export function asInstanceOf(obj: any, className: 'java.lang.Long'): Java.java.lang.Long;
  export function asInstanceOf(obj: any, className: 'java.lang.Number'): Java.java.lang.Number;
  export function asInstanceOf(obj: any, className: 'java.lang.Object'): Java.java.lang.Object;
  export function asInstanceOf(obj: any, className: 'java.lang.Short'): Java.java.lang.Short;
  export function asInstanceOf(obj: any, className: 'java.lang.String'): Java.java.lang.String;
  export function asInstanceOf(obj: any, className: 'java.util.Collection'): Java.java.util.Collection<any>;
  export function asInstanceOf(obj: any, className: 'java.util.function.Consumer'): Java.java.util.function_.Consumer<any>;
  export function asInstanceOf(obj: any, className: 'java.util.function.DoubleConsumer'): Java.java.util.function_.DoubleConsumer;
  export function asInstanceOf(obj: any, className: 'java.util.function.Function'): Java.java.util.function_.Function<any ,any>;
  export function asInstanceOf(obj: any, className: 'java.util.function.IntConsumer'): Java.java.util.function_.IntConsumer;
  export function asInstanceOf(obj: any, className: 'java.util.function.LongConsumer'): Java.java.util.function_.LongConsumer;
  export function asInstanceOf(obj: any, className: 'java.util.Iterator'): Java.java.util.Iterator<any>;
  export function asInstanceOf(obj: any, className: 'java.util.List'): Java.java.util.List<any>;
  export function asInstanceOf(obj: any, className: 'java.util.stream.BaseStream'): Java.java.util.stream.BaseStream<any ,any>;
  export function asInstanceOf(obj: any, className: 'java.util.stream.Collector'): Java.java.util.stream.Collector<any ,any ,any>;
  export function asInstanceOf(obj: any, className: 'java.util.stream.Collector$Characteristics'): Java.java.util.stream.Collector$Characteristics;
  export function asInstanceOf(obj: any, className: 'java.util.stream.Collectors'): Java.java.util.stream.Collectors;
  export function asInstanceOf(obj: any, className: 'java.util.stream.DoubleStream'): Java.java.util.stream.DoubleStream;
  export function asInstanceOf(obj: any, className: 'java.util.stream.DoubleStream$Builder'): Java.java.util.stream.DoubleStream$Builder;
  export function asInstanceOf(obj: any, className: 'java.util.stream.IntStream'): Java.java.util.stream.IntStream;
  export function asInstanceOf(obj: any, className: 'java.util.stream.IntStream$Builder'): Java.java.util.stream.IntStream$Builder;
  export function asInstanceOf(obj: any, className: 'java.util.stream.LongStream'): Java.java.util.stream.LongStream;
  export function asInstanceOf(obj: any, className: 'java.util.stream.LongStream$Builder'): Java.java.util.stream.LongStream$Builder;
  export function asInstanceOf(obj: any, className: 'java.util.stream.Stream'): Java.java.util.stream.Stream<any>;
  export function asInstanceOf(obj: any, className: 'java.util.stream.Stream$Builder'): Java.java.util.stream.Stream$Builder<any>;
  export function asInstanceOf(obj: any, className: 'java.util.stream.StreamSupport'): Java.java.util.stream.StreamSupport;
  export function asInstanceOf(obj: any, className: string): any;
  export function asInstanceOf(obj: any, className: string): any {
    var fullName: string = fullyQualifiedName(className) || className;
    if (_java.instanceOf(obj, fullName)) {
      return obj;
    } else {
      throw new Error('asInstanceOf fails, obj is not a ' + fullName);
    }
  }

  export interface Callback<T> {
    (err?: Error, result?: T): void;
  }

  // Returns true if javaObject is an instance of the named class, which may be a short className.
  // Returns false if javaObject is not an instance of the named class.
  // Throws an exception if the named class does not exist, or is an ambiguous short name.
  export function instanceOf(javaObject: any, className: string): boolean {
    var fullName: string = fullyQualifiedName(className) || className;
    return smellsLikeJavaObject(javaObject) && _java.instanceOf(javaObject, fullName);
  }

  export function newShort(val: number): Java.java.lang.Short { return _java.newShort(val); }
  export function newLong(val: number): Java.java.lang.Long { return _java.newLong(val); }
  export function newFloat(val: number): Java.java.lang.Float { return _java.newFloat(val); }
  export function newDouble(val: number): Java.java.lang.Double { return _java.newDouble(val); }

  export function newInstanceA(className: 'Boolean', arg0: Java.String, cb: Callback<Java.Boolean>): void;
  export function newInstanceA(className: 'Boolean', arg0: any, cb: Callback<Java.Boolean>): void;
  export function newInstanceA(className: 'Double', arg0: Java.String, cb: Callback<Java.Double>): void;
  export function newInstanceA(className: 'Double', arg0: any, cb: Callback<Java.Double>): void;
  export function newInstanceA(className: 'Float', arg0: Java.String, cb: Callback<Java.Float>): void;
  export function newInstanceA(className: 'Float', arg0: any, cb: Callback<Java.Float>): void;
  export function newInstanceA(className: 'Float', arg0: any, cb: Callback<Java.Float>): void;
  export function newInstanceA(className: 'Integer', arg0: Java.String, cb: Callback<Java.Integer>): void;
  export function newInstanceA(className: 'Integer', arg0: any, cb: Callback<Java.Integer>): void;
  export function newInstanceA(className: 'Long', arg0: Java.String, cb: Callback<Java.Long>): void;
  export function newInstanceA(className: 'Long', arg0: any, cb: Callback<Java.Long>): void;
  export function newInstanceA(className: 'Object', cb: Callback<Java.Object>): void;
  export function newInstanceA(className: 'Short', arg0: Java.String, cb: Callback<Java.Short>): void;
  export function newInstanceA(className: 'Short', arg0: any, cb: Callback<Java.Short>): void;
  export function newInstanceA(className: 'String', arg0: any, arg1: any, arg2: any, arg3: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'String', arg0: any, arg1: any, arg2: any, arg3: Java.String, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'String', arg0: any, arg1: any, arg2: any, arg3: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'String', arg0: any, arg1: any, arg2: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'String', arg0: any, arg1: any, arg2: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'String', arg0: any, arg1: any, arg2: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'String', arg0: any, arg1: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'String', arg0: any, arg1: Java.String, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'String', arg0: any, arg1: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'String', arg0: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'String', arg0: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'String', arg0: Java.String, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'String', arg0: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'String', arg0: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'String', cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'java.lang.Boolean', arg0: Java.String, cb: Callback<Java.Boolean>): void;
  export function newInstanceA(className: 'java.lang.Boolean', arg0: any, cb: Callback<Java.Boolean>): void;
  export function newInstanceA(className: 'java.lang.Double', arg0: Java.String, cb: Callback<Java.Double>): void;
  export function newInstanceA(className: 'java.lang.Double', arg0: any, cb: Callback<Java.Double>): void;
  export function newInstanceA(className: 'java.lang.Float', arg0: Java.String, cb: Callback<Java.Float>): void;
  export function newInstanceA(className: 'java.lang.Float', arg0: any, cb: Callback<Java.Float>): void;
  export function newInstanceA(className: 'java.lang.Float', arg0: any, cb: Callback<Java.Float>): void;
  export function newInstanceA(className: 'java.lang.Integer', arg0: Java.String, cb: Callback<Java.Integer>): void;
  export function newInstanceA(className: 'java.lang.Integer', arg0: any, cb: Callback<Java.Integer>): void;
  export function newInstanceA(className: 'java.lang.Long', arg0: Java.String, cb: Callback<Java.Long>): void;
  export function newInstanceA(className: 'java.lang.Long', arg0: any, cb: Callback<Java.Long>): void;
  export function newInstanceA(className: 'java.lang.Number', cb: Callback<Java.java.lang.Number>): void;
  export function newInstanceA(className: 'java.lang.Object', cb: Callback<Java.Object>): void;
  export function newInstanceA(className: 'java.lang.Short', arg0: Java.String, cb: Callback<Java.Short>): void;
  export function newInstanceA(className: 'java.lang.Short', arg0: any, cb: Callback<Java.Short>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: any, arg1: any, arg2: any, arg3: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: any, arg1: any, arg2: any, arg3: Java.String, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: any, arg1: any, arg2: any, arg3: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: any, arg1: any, arg2: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: any, arg1: any, arg2: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: any, arg1: any, arg2: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: any, arg1: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: any, arg1: Java.String, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: any, arg1: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: Java.String, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: any, cb: Callback<Java.String>): void;
  export function newInstanceA(className: 'java.lang.String', cb: Callback<Java.String>): void;
  export function newInstanceA(className: string, ...args: any[]): void;
  export function newInstanceA(className: string, ...args: any[]): any {
    var fullName: string = fullyQualifiedName(className) || className;
    args.unshift(fullName);
    return _java.newInstance.apply(_java, args);
  }

  export function newInstance(className: 'Boolean', arg0: Java.String): Java.Boolean;
  export function newInstance(className: 'Boolean', arg0: any): Java.Boolean;
  export function newInstance(className: 'Double', arg0: Java.String): Java.Double;
  export function newInstance(className: 'Double', arg0: any): Java.Double;
  export function newInstance(className: 'Float', arg0: Java.String): Java.Float;
  export function newInstance(className: 'Float', arg0: any): Java.Float;
  export function newInstance(className: 'Float', arg0: any): Java.Float;
  export function newInstance(className: 'Integer', arg0: Java.String): Java.Integer;
  export function newInstance(className: 'Integer', arg0: any): Java.Integer;
  export function newInstance(className: 'Long', arg0: Java.String): Java.Long;
  export function newInstance(className: 'Long', arg0: any): Java.Long;
  export function newInstance(className: 'Object'): Java.Object;
  export function newInstance(className: 'Short', arg0: Java.String): Java.Short;
  export function newInstance(className: 'Short', arg0: any): Java.Short;
  export function newInstance(className: 'String', arg0: any, arg1: any, arg2: any, arg3: any): Java.String;
  export function newInstance(className: 'String', arg0: any, arg1: any, arg2: any, arg3: Java.String): Java.String;
  export function newInstance(className: 'String', arg0: any, arg1: any, arg2: any, arg3: any): Java.String;
  export function newInstance(className: 'String', arg0: any, arg1: any, arg2: any): Java.String;
  export function newInstance(className: 'String', arg0: any, arg1: any, arg2: any): Java.String;
  export function newInstance(className: 'String', arg0: any, arg1: any, arg2: any): Java.String;
  export function newInstance(className: 'String', arg0: any, arg1: any): Java.String;
  export function newInstance(className: 'String', arg0: any, arg1: Java.String): Java.String;
  export function newInstance(className: 'String', arg0: any, arg1: any): Java.String;
  export function newInstance(className: 'String', arg0: any): Java.String;
  export function newInstance(className: 'String', arg0: any): Java.String;
  export function newInstance(className: 'String', arg0: Java.String): Java.String;
  export function newInstance(className: 'String', arg0: any): Java.String;
  export function newInstance(className: 'String', arg0: any): Java.String;
  export function newInstance(className: 'String'): Java.String;
  export function newInstance(className: 'java.lang.Boolean', arg0: Java.String): Java.Boolean;
  export function newInstance(className: 'java.lang.Boolean', arg0: any): Java.Boolean;
  export function newInstance(className: 'java.lang.Double', arg0: Java.String): Java.Double;
  export function newInstance(className: 'java.lang.Double', arg0: any): Java.Double;
  export function newInstance(className: 'java.lang.Float', arg0: Java.String): Java.Float;
  export function newInstance(className: 'java.lang.Float', arg0: any): Java.Float;
  export function newInstance(className: 'java.lang.Float', arg0: any): Java.Float;
  export function newInstance(className: 'java.lang.Integer', arg0: Java.String): Java.Integer;
  export function newInstance(className: 'java.lang.Integer', arg0: any): Java.Integer;
  export function newInstance(className: 'java.lang.Long', arg0: Java.String): Java.Long;
  export function newInstance(className: 'java.lang.Long', arg0: any): Java.Long;
  export function newInstance(className: 'java.lang.Number'): Java.java.lang.Number;
  export function newInstance(className: 'java.lang.Object'): Java.Object;
  export function newInstance(className: 'java.lang.Short', arg0: Java.String): Java.Short;
  export function newInstance(className: 'java.lang.Short', arg0: any): Java.Short;
  export function newInstance(className: 'java.lang.String', arg0: any, arg1: any, arg2: any, arg3: any): Java.String;
  export function newInstance(className: 'java.lang.String', arg0: any, arg1: any, arg2: any, arg3: Java.String): Java.String;
  export function newInstance(className: 'java.lang.String', arg0: any, arg1: any, arg2: any, arg3: any): Java.String;
  export function newInstance(className: 'java.lang.String', arg0: any, arg1: any, arg2: any): Java.String;
  export function newInstance(className: 'java.lang.String', arg0: any, arg1: any, arg2: any): Java.String;
  export function newInstance(className: 'java.lang.String', arg0: any, arg1: any, arg2: any): Java.String;
  export function newInstance(className: 'java.lang.String', arg0: any, arg1: any): Java.String;
  export function newInstance(className: 'java.lang.String', arg0: any, arg1: Java.String): Java.String;
  export function newInstance(className: 'java.lang.String', arg0: any, arg1: any): Java.String;
  export function newInstance(className: 'java.lang.String', arg0: any): Java.String;
  export function newInstance(className: 'java.lang.String', arg0: any): Java.String;
  export function newInstance(className: 'java.lang.String', arg0: Java.String): Java.String;
  export function newInstance(className: 'java.lang.String', arg0: any): Java.String;
  export function newInstance(className: 'java.lang.String', arg0: any): Java.String;
  export function newInstance(className: 'java.lang.String'): Java.String;
  export function newInstance(className: string, ...args: any[]): any;
  export function newInstance(className: string, ...args: any[]): any {
    var fullName: string = fullyQualifiedName(className) || className;
    args.unshift(fullName);
    return _java.newInstanceSync.apply(_java, args);
  }

  export function newInstanceP(className: 'Boolean', arg0: Java.String): Promise<Java.Boolean>;
  export function newInstanceP(className: 'Boolean', arg0: any): Promise<Java.Boolean>;
  export function newInstanceP(className: 'Double', arg0: Java.String): Promise<Java.Double>;
  export function newInstanceP(className: 'Double', arg0: any): Promise<Java.Double>;
  export function newInstanceP(className: 'Float', arg0: Java.String): Promise<Java.Float>;
  export function newInstanceP(className: 'Float', arg0: any): Promise<Java.Float>;
  export function newInstanceP(className: 'Float', arg0: any): Promise<Java.Float>;
  export function newInstanceP(className: 'Integer', arg0: Java.String): Promise<Java.Integer>;
  export function newInstanceP(className: 'Integer', arg0: any): Promise<Java.Integer>;
  export function newInstanceP(className: 'Long', arg0: Java.String): Promise<Java.Long>;
  export function newInstanceP(className: 'Long', arg0: any): Promise<Java.Long>;
  export function newInstanceP(className: 'Object'): Promise<Java.Object>;
  export function newInstanceP(className: 'Short', arg0: Java.String): Promise<Java.Short>;
  export function newInstanceP(className: 'Short', arg0: any): Promise<Java.Short>;
  export function newInstanceP(className: 'String', arg0: any, arg1: any, arg2: any, arg3: any): Promise<Java.String>;
  export function newInstanceP(className: 'String', arg0: any, arg1: any, arg2: any, arg3: Java.String): Promise<Java.String>;
  export function newInstanceP(className: 'String', arg0: any, arg1: any, arg2: any, arg3: any): Promise<Java.String>;
  export function newInstanceP(className: 'String', arg0: any, arg1: any, arg2: any): Promise<Java.String>;
  export function newInstanceP(className: 'String', arg0: any, arg1: any, arg2: any): Promise<Java.String>;
  export function newInstanceP(className: 'String', arg0: any, arg1: any, arg2: any): Promise<Java.String>;
  export function newInstanceP(className: 'String', arg0: any, arg1: any): Promise<Java.String>;
  export function newInstanceP(className: 'String', arg0: any, arg1: Java.String): Promise<Java.String>;
  export function newInstanceP(className: 'String', arg0: any, arg1: any): Promise<Java.String>;
  export function newInstanceP(className: 'String', arg0: any): Promise<Java.String>;
  export function newInstanceP(className: 'String', arg0: any): Promise<Java.String>;
  export function newInstanceP(className: 'String', arg0: Java.String): Promise<Java.String>;
  export function newInstanceP(className: 'String', arg0: any): Promise<Java.String>;
  export function newInstanceP(className: 'String', arg0: any): Promise<Java.String>;
  export function newInstanceP(className: 'String'): Promise<Java.String>;
  export function newInstanceP(className: 'java.lang.Boolean', arg0: Java.String): Promise<Java.Boolean>;
  export function newInstanceP(className: 'java.lang.Boolean', arg0: any): Promise<Java.Boolean>;
  export function newInstanceP(className: 'java.lang.Double', arg0: Java.String): Promise<Java.Double>;
  export function newInstanceP(className: 'java.lang.Double', arg0: any): Promise<Java.Double>;
  export function newInstanceP(className: 'java.lang.Float', arg0: Java.String): Promise<Java.Float>;
  export function newInstanceP(className: 'java.lang.Float', arg0: any): Promise<Java.Float>;
  export function newInstanceP(className: 'java.lang.Float', arg0: any): Promise<Java.Float>;
  export function newInstanceP(className: 'java.lang.Integer', arg0: Java.String): Promise<Java.Integer>;
  export function newInstanceP(className: 'java.lang.Integer', arg0: any): Promise<Java.Integer>;
  export function newInstanceP(className: 'java.lang.Long', arg0: Java.String): Promise<Java.Long>;
  export function newInstanceP(className: 'java.lang.Long', arg0: any): Promise<Java.Long>;
  export function newInstanceP(className: 'java.lang.Number'): Promise<Java.java.lang.Number>;
  export function newInstanceP(className: 'java.lang.Object'): Promise<Java.Object>;
  export function newInstanceP(className: 'java.lang.Short', arg0: Java.String): Promise<Java.Short>;
  export function newInstanceP(className: 'java.lang.Short', arg0: any): Promise<Java.Short>;
  export function newInstanceP(className: 'java.lang.String', arg0: any, arg1: any, arg2: any, arg3: any): Promise<Java.String>;
  export function newInstanceP(className: 'java.lang.String', arg0: any, arg1: any, arg2: any, arg3: Java.String): Promise<Java.String>;
  export function newInstanceP(className: 'java.lang.String', arg0: any, arg1: any, arg2: any, arg3: any): Promise<Java.String>;
  export function newInstanceP(className: 'java.lang.String', arg0: any, arg1: any, arg2: any): Promise<Java.String>;
  export function newInstanceP(className: 'java.lang.String', arg0: any, arg1: any, arg2: any): Promise<Java.String>;
  export function newInstanceP(className: 'java.lang.String', arg0: any, arg1: any, arg2: any): Promise<Java.String>;
  export function newInstanceP(className: 'java.lang.String', arg0: any, arg1: any): Promise<Java.String>;
  export function newInstanceP(className: 'java.lang.String', arg0: any, arg1: Java.String): Promise<Java.String>;
  export function newInstanceP(className: 'java.lang.String', arg0: any, arg1: any): Promise<Java.String>;
  export function newInstanceP(className: 'java.lang.String', arg0: any): Promise<Java.String>;
  export function newInstanceP(className: 'java.lang.String', arg0: any): Promise<Java.String>;
  export function newInstanceP(className: 'java.lang.String', arg0: Java.String): Promise<Java.String>;
  export function newInstanceP(className: 'java.lang.String', arg0: any): Promise<Java.String>;
  export function newInstanceP(className: 'java.lang.String', arg0: any): Promise<Java.String>;
  export function newInstanceP(className: 'java.lang.String'): Promise<Java.String>;
  export function newInstanceP(className: string, ...args: any[]): Promise<any>;
  export function newInstanceP(className: string, ...args: any[]): Promise<any> {
    var fullName: string = fullyQualifiedName(className) || className;
    args.unshift(fullName);
    return _java.newInstanceP.apply(_java, args);
  }

  export function newArray(className: 'Boolean', arg: boolean_t[]): array_t<java.lang.Boolean>;
  export function newArray(className: 'Class', arg: Java.Class<any>[]): array_t<java.lang.Class<any>>;
  export function newArray(className: 'Double', arg: double_t[]): array_t<java.lang.Double>;
  export function newArray(className: 'Enum', arg: Java.Enum<any>[]): array_t<java.lang.Enum<any>>;
  export function newArray(className: 'Float', arg: float_t[]): array_t<java.lang.Float>;
  export function newArray(className: 'Integer', arg: integer_t[]): array_t<java.lang.Integer>;
  export function newArray(className: 'Iterable', arg: Java.Iterable<any>[]): array_t<java.lang.Iterable<any>>;
  export function newArray(className: 'Long', arg: long_t[]): array_t<java.lang.Long>;
  export function newArray(className: 'Object', arg: object_t[]): array_t<java.lang.Object>;
  export function newArray(className: 'Short', arg: short_t[]): array_t<java.lang.Short>;
  export function newArray(className: 'String', arg: string_t[]): array_t<java.lang.String>;
  export function newArray(className: 'Collection', arg: Java.Collection<any>[]): array_t<java.util.Collection<any>>;
  export function newArray(className: 'Consumer', arg: Java.Consumer<any>[]): array_t<java.util.function_.Consumer<any>>;
  export function newArray(className: 'DoubleConsumer', arg: Java.DoubleConsumer[]): array_t<java.util.function_.DoubleConsumer>;
  export function newArray(className: 'Function', arg: Java.Function<any, any>[]): array_t<java.util.function_.Function<any ,any>>;
  export function newArray(className: 'IntConsumer', arg: Java.IntConsumer[]): array_t<java.util.function_.IntConsumer>;
  export function newArray(className: 'LongConsumer', arg: Java.LongConsumer[]): array_t<java.util.function_.LongConsumer>;
  export function newArray(className: 'Iterator', arg: Java.Iterator<any>[]): array_t<java.util.Iterator<any>>;
  export function newArray(className: 'List', arg: Java.List<any>[]): array_t<java.util.List<any>>;
  export function newArray(className: 'BaseStream', arg: Java.BaseStream<any, any>[]): array_t<java.util.stream.BaseStream<any ,any>>;
  export function newArray(className: 'Collector', arg: Java.Collector<any, any, any>[]): array_t<java.util.stream.Collector<any ,any ,any>>;
  export function newArray(className: 'Collector$Characteristics', arg: Java.Collector$Characteristics[]): array_t<java.util.stream.Collector$Characteristics>;
  export function newArray(className: 'Collectors', arg: Java.Collectors[]): array_t<java.util.stream.Collectors>;
  export function newArray(className: 'DoubleStream', arg: Java.DoubleStream[]): array_t<java.util.stream.DoubleStream>;
  export function newArray(className: 'DoubleStream$Builder', arg: Java.DoubleStream$Builder[]): array_t<java.util.stream.DoubleStream$Builder>;
  export function newArray(className: 'IntStream', arg: Java.IntStream[]): array_t<java.util.stream.IntStream>;
  export function newArray(className: 'IntStream$Builder', arg: Java.IntStream$Builder[]): array_t<java.util.stream.IntStream$Builder>;
  export function newArray(className: 'LongStream', arg: Java.LongStream[]): array_t<java.util.stream.LongStream>;
  export function newArray(className: 'LongStream$Builder', arg: Java.LongStream$Builder[]): array_t<java.util.stream.LongStream$Builder>;
  export function newArray(className: 'Stream', arg: Java.Stream<any>[]): array_t<java.util.stream.Stream<any>>;
  export function newArray(className: 'Stream$Builder', arg: Java.Stream$Builder<any>[]): array_t<java.util.stream.Stream$Builder<any>>;
  export function newArray(className: 'StreamSupport', arg: Java.StreamSupport[]): array_t<java.util.stream.StreamSupport>;
  export function newArray(className: 'java.lang.Boolean', arg: boolean_t[]): array_t<java.lang.Boolean>;
  export function newArray(className: 'java.lang.Class', arg: Java.Class<any>[]): array_t<java.lang.Class<any>>;
  export function newArray(className: 'java.lang.Double', arg: double_t[]): array_t<java.lang.Double>;
  export function newArray(className: 'java.lang.Enum', arg: Java.Enum<any>[]): array_t<java.lang.Enum<any>>;
  export function newArray(className: 'java.lang.Float', arg: float_t[]): array_t<java.lang.Float>;
  export function newArray(className: 'java.lang.Integer', arg: integer_t[]): array_t<java.lang.Integer>;
  export function newArray(className: 'java.lang.Iterable', arg: Java.Iterable<any>[]): array_t<java.lang.Iterable<any>>;
  export function newArray(className: 'java.lang.Long', arg: long_t[]): array_t<java.lang.Long>;
  export function newArray(className: 'java.lang.Number', arg: number_t[]): array_t<java.lang.Number>;
  export function newArray(className: 'java.lang.Object', arg: object_t[]): array_t<java.lang.Object>;
  export function newArray(className: 'java.lang.Short', arg: short_t[]): array_t<java.lang.Short>;
  export function newArray(className: 'java.lang.String', arg: string_t[]): array_t<java.lang.String>;
  export function newArray(className: 'java.util.Collection', arg: Java.Collection<any>[]): array_t<java.util.Collection<any>>;
  export function newArray(className: 'java.util.function.Consumer', arg: Java.Consumer<any>[]): array_t<java.util.function_.Consumer<any>>;
  export function newArray(className: 'java.util.function.DoubleConsumer', arg: Java.DoubleConsumer[]): array_t<java.util.function_.DoubleConsumer>;
  export function newArray(className: 'java.util.function.Function', arg: Java.Function<any, any>[]): array_t<java.util.function_.Function<any ,any>>;
  export function newArray(className: 'java.util.function.IntConsumer', arg: Java.IntConsumer[]): array_t<java.util.function_.IntConsumer>;
  export function newArray(className: 'java.util.function.LongConsumer', arg: Java.LongConsumer[]): array_t<java.util.function_.LongConsumer>;
  export function newArray(className: 'java.util.Iterator', arg: Java.Iterator<any>[]): array_t<java.util.Iterator<any>>;
  export function newArray(className: 'java.util.List', arg: Java.List<any>[]): array_t<java.util.List<any>>;
  export function newArray(className: 'java.util.stream.BaseStream', arg: Java.BaseStream<any, any>[]): array_t<java.util.stream.BaseStream<any ,any>>;
  export function newArray(className: 'java.util.stream.Collector', arg: Java.Collector<any, any, any>[]): array_t<java.util.stream.Collector<any ,any ,any>>;
  export function newArray(className: 'java.util.stream.Collector$Characteristics', arg: Java.Collector$Characteristics[]): array_t<java.util.stream.Collector$Characteristics>;
  export function newArray(className: 'java.util.stream.Collectors', arg: Java.Collectors[]): array_t<java.util.stream.Collectors>;
  export function newArray(className: 'java.util.stream.DoubleStream', arg: Java.DoubleStream[]): array_t<java.util.stream.DoubleStream>;
  export function newArray(className: 'java.util.stream.DoubleStream$Builder', arg: Java.DoubleStream$Builder[]): array_t<java.util.stream.DoubleStream$Builder>;
  export function newArray(className: 'java.util.stream.IntStream', arg: Java.IntStream[]): array_t<java.util.stream.IntStream>;
  export function newArray(className: 'java.util.stream.IntStream$Builder', arg: Java.IntStream$Builder[]): array_t<java.util.stream.IntStream$Builder>;
  export function newArray(className: 'java.util.stream.LongStream', arg: Java.LongStream[]): array_t<java.util.stream.LongStream>;
  export function newArray(className: 'java.util.stream.LongStream$Builder', arg: Java.LongStream$Builder[]): array_t<java.util.stream.LongStream$Builder>;
  export function newArray(className: 'java.util.stream.Stream', arg: Java.Stream<any>[]): array_t<java.util.stream.Stream<any>>;
  export function newArray(className: 'java.util.stream.Stream$Builder', arg: Java.Stream$Builder<any>[]): array_t<java.util.stream.Stream$Builder<any>>;
  export function newArray(className: 'java.util.stream.StreamSupport', arg: Java.StreamSupport[]): array_t<java.util.stream.StreamSupport>;
  export function newArray<T>(className: string, arg: any[]): array_t<T>;
  export function newArray<T>(className: string, arg: any[]): array_t<T> {
    var fullName: string = fullyQualifiedName(className) || className;
    return _java.newArray(fullName, arg);
  }

  // export module Java {

  // Node-java has special handling for methods that return long or java.lang.Long,
  // returning a Javascript Number but with an additional property longValue.
  export interface longValue_t extends Number {
    longValue: string;
  }

  // Node-java can automatically coerce a javascript string into a java.lang.String.
  // This special type alias allows to declare that possiblity to Typescript.
  export type string_t = string | Java.java.lang.String;

  // Java methods that take java.lang.Object parameters implicitly will take a java.lang.String.
  // But string_t is not sufficient for this case, we need object_t.
  export type object_t = Java.java.lang.Object | string | boolean | number | longValue_t;

  // Java methods that take long or java.lang.Long parameters may take javascript numbers,
  // longValue_t (see above) or java.lang.Long.
  // This special type alias allows to declare that possiblity to Typescript.
  export type long_t = number | longValue_t | Java.java.lang.Long;

  // Handling of other primitive numeric types is simpler, as there is no loss of precision.
  export type boolean_t = boolean | Java.java.lang.Boolean;
  export type short_t = number | Java.java.lang.Short;
  export type integer_t = number | Java.java.lang.Integer;
  export type double_t = number | Java.java.lang.Double;
  export type float_t = number | Java.java.lang.Float;
  export type number_t = number | Java.java.lang.Number;

  export interface array_t<T> extends Java.java.lang.Object {
    // This is an opaque type for a java array_t T[];
    // Use Java.newArray<T>(className, [...]) to create wherever a Java method expects a T[],
    // most notably for vararg parameteters.
    __dummy: T;
  }

  export type object_array_t = array_t<Java.java.lang.Object> | object_t[];

  export import Boolean = java.lang.Boolean;
  export import Class = java.lang.Class;
  export import Double = java.lang.Double;
  export import Enum = java.lang.Enum;
  export import Float = java.lang.Float;
  export import Integer = java.lang.Integer;
  export import Iterable = java.lang.Iterable;
  export import Long = java.lang.Long;
  export import Object = java.lang.Object;
  export import Short = java.lang.Short;
  export import String = java.lang.String;
  export import Collection = java.util.Collection;
  export import Consumer = java.util.function_.Consumer;
  export import DoubleConsumer = java.util.function_.DoubleConsumer;
  export import Function = java.util.function_.Function;
  export import IntConsumer = java.util.function_.IntConsumer;
  export import LongConsumer = java.util.function_.LongConsumer;
  export import Iterator = java.util.Iterator;
  export import List = java.util.List;
  export import BaseStream = java.util.stream.BaseStream;
  export import Collector = java.util.stream.Collector;
  export import Collector$Characteristics = java.util.stream.Collector$Characteristics;
  export import Collectors = java.util.stream.Collectors;
  export import DoubleStream = java.util.stream.DoubleStream;
  export import DoubleStream$Builder = java.util.stream.DoubleStream$Builder;
  export import IntStream = java.util.stream.IntStream;
  export import IntStream$Builder = java.util.stream.IntStream$Builder;
  export import LongStream = java.util.stream.LongStream;
  export import LongStream$Builder = java.util.stream.LongStream$Builder;
  export import Stream = java.util.stream.Stream;
  export import Stream$Builder = java.util.stream.Stream$Builder;
  export import StreamSupport = java.util.stream.StreamSupport;

  export module java.lang {
    export interface Boolean extends Java.java.lang.Object {
      // public boolean java.lang.Boolean.booleanValue()
      booleanValueA( cb: Callback<any>): void;
      booleanValue(): any;
      booleanValueP(): Promise<any>;
      // public int java.lang.Boolean.compareTo(java.lang.Boolean)
      compareToA(arg0: Java.Boolean, cb: Callback<any>): void;
      compareTo(arg0: Java.Boolean): any;
      compareToP(arg0: Java.Boolean): Promise<any>;
      // public int java.lang.Boolean.compareTo(java.lang.Object)
      compareToA(arg0: Java.Object, cb: Callback<any>): void;
      compareTo(arg0: Java.Object): any;
      compareToP(arg0: Java.Object): Promise<any>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: Java.Object, cb: Callback<any>): void;
      equals(arg0: Java.Object): any;
      equalsP(arg0: Java.Object): Promise<any>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class<any>>): void;
      getClass(): Java.Class<any>;
      getClassP(): Promise<Java.Class<any>>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<any>): void;
      hashCode(): any;
      hashCodeP(): Promise<any>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<any>): void;
      notify(): any;
      notifyP(): Promise<any>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<any>): void;
      notifyAll(): any;
      notifyAllP(): Promise<any>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<Java.String>): void;
      toString(): Java.String;
      toStringP(): Promise<Java.String>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: any, arg1: any, cb: Callback<any>): void;
      wait(arg0: any, arg1: any): any;
      waitP(arg0: any, arg1: any): Promise<any>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: any, cb: Callback<any>): void;
      wait(arg0: any): any;
      waitP(arg0: any): Promise<any>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<any>): void;
      wait(): any;
      waitP(): Promise<any>;
    }
    export module Boolean {
      export interface Static {
        TRUE: boolean;
        FALSE: boolean;
        TYPE: Java.Class;
        class: Java.Class;
        new (arg0: Java.String): java.lang.Boolean;
        new (arg0: any): java.lang.Boolean;
        // public static int java.lang.Boolean.compare(boolean,boolean)
        compareA(arg0: any, arg1: any, cb: Callback<any>): void;
        compare(arg0: any, arg1: any): any;
        compareP(arg0: any, arg1: any): Promise<any>;
        // public static boolean java.lang.Boolean.getBoolean(java.lang.String)
        getBooleanA(arg0: Java.String, cb: Callback<any>): void;
        getBoolean(arg0: Java.String): any;
        getBooleanP(arg0: Java.String): Promise<any>;
        // public static int java.lang.Boolean.hashCode(boolean)
        hashCodeA(arg0: any, cb: Callback<any>): void;
        hashCode(arg0: any): any;
        hashCodeP(arg0: any): Promise<any>;
        // public static boolean java.lang.Boolean.logicalAnd(boolean,boolean)
        logicalAndA(arg0: any, arg1: any, cb: Callback<any>): void;
        logicalAnd(arg0: any, arg1: any): any;
        logicalAndP(arg0: any, arg1: any): Promise<any>;
        // public static boolean java.lang.Boolean.logicalOr(boolean,boolean)
        logicalOrA(arg0: any, arg1: any, cb: Callback<any>): void;
        logicalOr(arg0: any, arg1: any): any;
        logicalOrP(arg0: any, arg1: any): Promise<any>;
        // public static boolean java.lang.Boolean.logicalXor(boolean,boolean)
        logicalXorA(arg0: any, arg1: any, cb: Callback<any>): void;
        logicalXor(arg0: any, arg1: any): any;
        logicalXorP(arg0: any, arg1: any): Promise<any>;
        // public static boolean java.lang.Boolean.parseBoolean(java.lang.String)
        parseBooleanA(arg0: Java.String, cb: Callback<any>): void;
        parseBoolean(arg0: Java.String): any;
        parseBooleanP(arg0: Java.String): Promise<any>;
        // public static java.lang.String java.lang.Boolean.toString(boolean)
        toStringA(arg0: any, cb: Callback<Java.String>): void;
        toString(arg0: any): Java.String;
        toStringP(arg0: any): Promise<Java.String>;
        // public static java.lang.Boolean java.lang.Boolean.valueOf(java.lang.String)
        valueOfA(arg0: Java.String, cb: Callback<Java.Boolean>): void;
        valueOf(arg0: Java.String): Java.Boolean;
        valueOfP(arg0: Java.String): Promise<Java.Boolean>;
        // public static java.lang.Boolean java.lang.Boolean.valueOf(boolean)
        valueOfA(arg0: any, cb: Callback<Java.Boolean>): void;
        valueOf(arg0: any): Java.Boolean;
        valueOfP(arg0: any): Promise<Java.Boolean>;
      }
    }
  }

  export module java.lang {
    export interface Class<T> extends Java.java.lang.Object {
      // public <U> java.lang.Class<? extends U> java.lang.Class.asSubclass(java.lang.Class<U>)
      asSubclassA(arg0: any, cb: Callback<any>): void;
      asSubclass(arg0: any): any;
      asSubclassP(arg0: any): Promise<any>;
      // public T java.lang.Class.cast(java.lang.Object)
      castA(arg0: Java.Object, cb: Callback<any>): void;
      cast(arg0: Java.Object): any;
      castP(arg0: Java.Object): Promise<any>;
      // public boolean java.lang.Class.desiredAssertionStatus()
      desiredAssertionStatusA( cb: Callback<any>): void;
      desiredAssertionStatus(): any;
      desiredAssertionStatusP(): Promise<any>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: Java.Object, cb: Callback<any>): void;
      equals(arg0: Java.Object): any;
      equalsP(arg0: Java.Object): Promise<any>;
      // public java.lang.reflect.AnnotatedType[] java.lang.Class.getAnnotatedInterfaces()
      getAnnotatedInterfacesA( cb: Callback<any>): void;
      getAnnotatedInterfaces(): any;
      getAnnotatedInterfacesP(): Promise<any>;
      // public java.lang.reflect.AnnotatedType java.lang.Class.getAnnotatedSuperclass()
      getAnnotatedSuperclassA( cb: Callback<any>): void;
      getAnnotatedSuperclass(): any;
      getAnnotatedSuperclassP(): Promise<any>;
      // public <A> A java.lang.Class.getAnnotation(java.lang.Class<A>)
      getAnnotationA(arg0: any, cb: Callback<any>): void;
      getAnnotation(arg0: any): any;
      getAnnotationP(arg0: any): Promise<any>;
      // public java.lang.annotation.Annotation[] java.lang.Class.getAnnotations()
      getAnnotationsA( cb: Callback<any>): void;
      getAnnotations(): any;
      getAnnotationsP(): Promise<any>;
      // public <A> A[] java.lang.Class.getAnnotationsByType(java.lang.Class<A>)
      getAnnotationsByTypeA(arg0: any, cb: Callback<any>): void;
      getAnnotationsByType(arg0: any): any;
      getAnnotationsByTypeP(arg0: any): Promise<any>;
      // public java.lang.String java.lang.Class.getCanonicalName()
      getCanonicalNameA( cb: Callback<Java.String>): void;
      getCanonicalName(): Java.String;
      getCanonicalNameP(): Promise<Java.String>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class<any>>): void;
      getClass(): Java.Class<any>;
      getClassP(): Promise<Java.Class<any>>;
      // public java.lang.Class<?>[] java.lang.Class.getClasses()
      getClassesA( cb: Callback<Java.Class<any>[]>): void;
      getClasses(): Java.Class<any>[];
      getClassesP(): Promise<Java.Class<any>[]>;
      // public java.lang.ClassLoader java.lang.Class.getClassLoader()
      getClassLoaderA( cb: Callback<any>): void;
      getClassLoader(): any;
      getClassLoaderP(): Promise<any>;
      // public native java.lang.Class<?> java.lang.Class.getComponentType()
      getComponentTypeA( cb: Callback<Java.Class<any>>): void;
      getComponentType(): Java.Class<any>;
      getComponentTypeP(): Promise<Java.Class<any>>;
      // public java.lang.reflect.Constructor<T> java.lang.Class.getConstructor(java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getConstructorA(arg0: Java.Class<any>[], cb: Callback<any>): void;
      getConstructor(...arg0: Java.Class<any>[]): any;
      getConstructor(arg0: Java.Class<any>[]): any;
      getConstructorP(...arg0: Java.Class<any>[]): Promise<any>;
      getConstructorP(arg0: Java.Class<any>[]): Promise<any>;
      // public java.lang.reflect.Constructor<?>[] java.lang.Class.getConstructors() throws java.lang.SecurityException
      getConstructorsA( cb: Callback<any>): void;
      getConstructors(): any;
      getConstructorsP(): Promise<any>;
      // public <A> A java.lang.Class.getDeclaredAnnotation(java.lang.Class<A>)
      getDeclaredAnnotationA(arg0: any, cb: Callback<any>): void;
      getDeclaredAnnotation(arg0: any): any;
      getDeclaredAnnotationP(arg0: any): Promise<any>;
      // public java.lang.annotation.Annotation[] java.lang.Class.getDeclaredAnnotations()
      getDeclaredAnnotationsA( cb: Callback<any>): void;
      getDeclaredAnnotations(): any;
      getDeclaredAnnotationsP(): Promise<any>;
      // public <A> A[] java.lang.Class.getDeclaredAnnotationsByType(java.lang.Class<A>)
      getDeclaredAnnotationsByTypeA(arg0: any, cb: Callback<any>): void;
      getDeclaredAnnotationsByType(arg0: any): any;
      getDeclaredAnnotationsByTypeP(arg0: any): Promise<any>;
      // public java.lang.Class<?>[] java.lang.Class.getDeclaredClasses() throws java.lang.SecurityException
      getDeclaredClassesA( cb: Callback<Java.Class<any>[]>): void;
      getDeclaredClasses(): Java.Class<any>[];
      getDeclaredClassesP(): Promise<Java.Class<any>[]>;
      // public java.lang.reflect.Constructor<T> java.lang.Class.getDeclaredConstructor(java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getDeclaredConstructorA(arg0: Java.Class<any>[], cb: Callback<any>): void;
      getDeclaredConstructor(...arg0: Java.Class<any>[]): any;
      getDeclaredConstructor(arg0: Java.Class<any>[]): any;
      getDeclaredConstructorP(...arg0: Java.Class<any>[]): Promise<any>;
      getDeclaredConstructorP(arg0: Java.Class<any>[]): Promise<any>;
      // public java.lang.reflect.Constructor<?>[] java.lang.Class.getDeclaredConstructors() throws java.lang.SecurityException
      getDeclaredConstructorsA( cb: Callback<any>): void;
      getDeclaredConstructors(): any;
      getDeclaredConstructorsP(): Promise<any>;
      // public java.lang.reflect.Field java.lang.Class.getDeclaredField(java.lang.String) throws java.lang.NoSuchFieldException,java.lang.SecurityException
      getDeclaredFieldA(arg0: Java.String, cb: Callback<any>): void;
      getDeclaredField(arg0: Java.String): any;
      getDeclaredFieldP(arg0: Java.String): Promise<any>;
      // public java.lang.reflect.Field[] java.lang.Class.getDeclaredFields() throws java.lang.SecurityException
      getDeclaredFieldsA( cb: Callback<any>): void;
      getDeclaredFields(): any;
      getDeclaredFieldsP(): Promise<any>;
      // public java.lang.reflect.Method java.lang.Class.getDeclaredMethod(java.lang.String,java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getDeclaredMethodA(arg0: Java.String, arg1: Java.Class<any>[], cb: Callback<any>): void;
      getDeclaredMethod(arg0: Java.String, ...arg1: Java.Class<any>[]): any;
      getDeclaredMethod(arg0: Java.String, arg1: Java.Class<any>[]): any;
      getDeclaredMethodP(arg0: Java.String, ...arg1: Java.Class<any>[]): Promise<any>;
      getDeclaredMethodP(arg0: Java.String, arg1: Java.Class<any>[]): Promise<any>;
      // public java.lang.reflect.Method[] java.lang.Class.getDeclaredMethods() throws java.lang.SecurityException
      getDeclaredMethodsA( cb: Callback<any>): void;
      getDeclaredMethods(): any;
      getDeclaredMethodsP(): Promise<any>;
      // public java.lang.Class<?> java.lang.Class.getDeclaringClass() throws java.lang.SecurityException
      getDeclaringClassA( cb: Callback<Java.Class<any>>): void;
      getDeclaringClass(): Java.Class<any>;
      getDeclaringClassP(): Promise<Java.Class<any>>;
      // public java.lang.Class<?> java.lang.Class.getEnclosingClass() throws java.lang.SecurityException
      getEnclosingClassA( cb: Callback<Java.Class<any>>): void;
      getEnclosingClass(): Java.Class<any>;
      getEnclosingClassP(): Promise<Java.Class<any>>;
      // public java.lang.reflect.Constructor<?> java.lang.Class.getEnclosingConstructor() throws java.lang.SecurityException
      getEnclosingConstructorA( cb: Callback<any>): void;
      getEnclosingConstructor(): any;
      getEnclosingConstructorP(): Promise<any>;
      // public java.lang.reflect.Method java.lang.Class.getEnclosingMethod() throws java.lang.SecurityException
      getEnclosingMethodA( cb: Callback<any>): void;
      getEnclosingMethod(): any;
      getEnclosingMethodP(): Promise<any>;
      // public T[] java.lang.Class.getEnumConstants()
      getEnumConstantsA( cb: Callback<any>): void;
      getEnumConstants(): any;
      getEnumConstantsP(): Promise<any>;
      // public java.lang.reflect.Field java.lang.Class.getField(java.lang.String) throws java.lang.NoSuchFieldException,java.lang.SecurityException
      getFieldA(arg0: Java.String, cb: Callback<any>): void;
      getField(arg0: Java.String): any;
      getFieldP(arg0: Java.String): Promise<any>;
      // public java.lang.reflect.Field[] java.lang.Class.getFields() throws java.lang.SecurityException
      getFieldsA( cb: Callback<any>): void;
      getFields(): any;
      getFieldsP(): Promise<any>;
      // public java.lang.reflect.Type[] java.lang.Class.getGenericInterfaces()
      getGenericInterfacesA( cb: Callback<any>): void;
      getGenericInterfaces(): any;
      getGenericInterfacesP(): Promise<any>;
      // public java.lang.reflect.Type java.lang.Class.getGenericSuperclass()
      getGenericSuperclassA( cb: Callback<any>): void;
      getGenericSuperclass(): any;
      getGenericSuperclassP(): Promise<any>;
      // public java.lang.Class<?>[] java.lang.Class.getInterfaces()
      getInterfacesA( cb: Callback<Java.Class<any>[]>): void;
      getInterfaces(): Java.Class<any>[];
      getInterfacesP(): Promise<Java.Class<any>[]>;
      // public java.lang.reflect.Method java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getMethodA(arg0: Java.String, arg1: Java.Class<any>[], cb: Callback<any>): void;
      getMethod(arg0: Java.String, ...arg1: Java.Class<any>[]): any;
      getMethod(arg0: Java.String, arg1: Java.Class<any>[]): any;
      getMethodP(arg0: Java.String, ...arg1: Java.Class<any>[]): Promise<any>;
      getMethodP(arg0: Java.String, arg1: Java.Class<any>[]): Promise<any>;
      // public java.lang.reflect.Method[] java.lang.Class.getMethods() throws java.lang.SecurityException
      getMethodsA( cb: Callback<any>): void;
      getMethods(): any;
      getMethodsP(): Promise<any>;
      // public native int java.lang.Class.getModifiers()
      getModifiersA( cb: Callback<any>): void;
      getModifiers(): any;
      getModifiersP(): Promise<any>;
      // public java.lang.String java.lang.Class.getName()
      getNameA( cb: Callback<Java.String>): void;
      getName(): Java.String;
      getNameP(): Promise<Java.String>;
      // public java.lang.Package java.lang.Class.getPackage()
      getPackageA( cb: Callback<any>): void;
      getPackage(): any;
      getPackageP(): Promise<any>;
      // public java.security.ProtectionDomain java.lang.Class.getProtectionDomain()
      getProtectionDomainA( cb: Callback<any>): void;
      getProtectionDomain(): any;
      getProtectionDomainP(): Promise<any>;
      // public java.net.URL java.lang.Class.getResource(java.lang.String)
      getResourceA(arg0: Java.String, cb: Callback<any>): void;
      getResource(arg0: Java.String): any;
      getResourceP(arg0: Java.String): Promise<any>;
      // public java.io.InputStream java.lang.Class.getResourceAsStream(java.lang.String)
      getResourceAsStreamA(arg0: Java.String, cb: Callback<any>): void;
      getResourceAsStream(arg0: Java.String): any;
      getResourceAsStreamP(arg0: Java.String): Promise<any>;
      // public native java.lang.Object[] java.lang.Class.getSigners()
      getSignersA( cb: Callback<Java.Object[]>): void;
      getSigners(): Java.Object[];
      getSignersP(): Promise<Java.Object[]>;
      // public java.lang.String java.lang.Class.getSimpleName()
      getSimpleNameA( cb: Callback<Java.String>): void;
      getSimpleName(): Java.String;
      getSimpleNameP(): Promise<Java.String>;
      // public native java.lang.Class<? super T> java.lang.Class.getSuperclass()
      getSuperclassA( cb: Callback<any>): void;
      getSuperclass(): any;
      getSuperclassP(): Promise<any>;
      // public java.lang.String java.lang.Class.getTypeName()
      getTypeNameA( cb: Callback<Java.String>): void;
      getTypeName(): Java.String;
      getTypeNameP(): Promise<Java.String>;
      // public java.lang.reflect.TypeVariable<java.lang.Class<T>>[] java.lang.Class.getTypeParameters()
      getTypeParametersA( cb: Callback<any>): void;
      getTypeParameters(): any;
      getTypeParametersP(): Promise<any>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<any>): void;
      hashCode(): any;
      hashCodeP(): Promise<any>;
      // public boolean java.lang.Class.isAnnotation()
      isAnnotationA( cb: Callback<any>): void;
      isAnnotation(): any;
      isAnnotationP(): Promise<any>;
      // public boolean java.lang.Class.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresentA(arg0: any, cb: Callback<any>): void;
      isAnnotationPresent(arg0: any): any;
      isAnnotationPresentP(arg0: any): Promise<any>;
      // public boolean java.lang.Class.isAnonymousClass()
      isAnonymousClassA( cb: Callback<any>): void;
      isAnonymousClass(): any;
      isAnonymousClassP(): Promise<any>;
      // public native boolean java.lang.Class.isArray()
      isArrayA( cb: Callback<any>): void;
      isArray(): any;
      isArrayP(): Promise<any>;
      // public native boolean java.lang.Class.isAssignableFrom(java.lang.Class<?>)
      isAssignableFromA(arg0: Java.Class<any>, cb: Callback<any>): void;
      isAssignableFrom(arg0: Java.Class<any>): any;
      isAssignableFromP(arg0: Java.Class<any>): Promise<any>;
      // public boolean java.lang.Class.isEnum()
      isEnumA( cb: Callback<any>): void;
      isEnum(): any;
      isEnumP(): Promise<any>;
      // public native boolean java.lang.Class.isInstance(java.lang.Object)
      isInstanceA(arg0: Java.Object, cb: Callback<any>): void;
      isInstance(arg0: Java.Object): any;
      isInstanceP(arg0: Java.Object): Promise<any>;
      // public native boolean java.lang.Class.isInterface()
      isInterfaceA( cb: Callback<any>): void;
      isInterface(): any;
      isInterfaceP(): Promise<any>;
      // public boolean java.lang.Class.isLocalClass()
      isLocalClassA( cb: Callback<any>): void;
      isLocalClass(): any;
      isLocalClassP(): Promise<any>;
      // public boolean java.lang.Class.isMemberClass()
      isMemberClassA( cb: Callback<any>): void;
      isMemberClass(): any;
      isMemberClassP(): Promise<any>;
      // public native boolean java.lang.Class.isPrimitive()
      isPrimitiveA( cb: Callback<any>): void;
      isPrimitive(): any;
      isPrimitiveP(): Promise<any>;
      // public boolean java.lang.Class.isSynthetic()
      isSyntheticA( cb: Callback<any>): void;
      isSynthetic(): any;
      isSyntheticP(): Promise<any>;
      // public T java.lang.Class.newInstance() throws java.lang.InstantiationException,java.lang.IllegalAccessException
      newInstanceA( cb: Callback<any>): void;
      newInstance(): any;
      newInstanceP(): Promise<any>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<any>): void;
      notify(): any;
      notifyP(): Promise<any>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<any>): void;
      notifyAll(): any;
      notifyAllP(): Promise<any>;
      // public java.lang.String java.lang.Class.toGenericString()
      toGenericStringA( cb: Callback<Java.String>): void;
      toGenericString(): Java.String;
      toGenericStringP(): Promise<Java.String>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<Java.String>): void;
      toString(): Java.String;
      toStringP(): Promise<Java.String>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: any, arg1: any, cb: Callback<any>): void;
      wait(arg0: any, arg1: any): any;
      waitP(arg0: any, arg1: any): Promise<any>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: any, cb: Callback<any>): void;
      wait(arg0: any): any;
      waitP(arg0: any): Promise<any>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<any>): void;
      wait(): any;
      waitP(): Promise<any>;
    }
    export module Class {
      export interface Static {
        class: Java.Class;
        // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader) throws java.lang.ClassNotFoundException
        forNameA(arg0: Java.String, arg1: any, arg2: any, cb: Callback<Java.Class<any>>): void;
        forName(arg0: Java.String, arg1: any, arg2: any): Java.Class<any>;
        forNameP(arg0: Java.String, arg1: any, arg2: any): Promise<Java.Class<any>>;
        // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String) throws java.lang.ClassNotFoundException
        forNameA(arg0: Java.String, cb: Callback<Java.Class<any>>): void;
        forName(arg0: Java.String): Java.Class<any>;
        forNameP(arg0: Java.String): Promise<Java.Class<any>>;
      }
    }
  }

  export module java.lang {
    export interface Double extends Java.java.lang.Number {
      // public byte java.lang.Number.byteValue()
      byteValueA( cb: Callback<any>): void;
      byteValue(): any;
      byteValueP(): Promise<any>;
      // public int java.lang.Double.compareTo(java.lang.Object)
      compareToA(arg0: Java.Object, cb: Callback<any>): void;
      compareTo(arg0: Java.Object): any;
      compareToP(arg0: Java.Object): Promise<any>;
      // public int java.lang.Double.compareTo(java.lang.Double)
      compareToA(arg0: Java.Double, cb: Callback<any>): void;
      compareTo(arg0: Java.Double): any;
      compareToP(arg0: Java.Double): Promise<any>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValueA( cb: Callback<any>): void;
      doubleValue(): any;
      doubleValueP(): Promise<any>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: Java.Object, cb: Callback<any>): void;
      equals(arg0: Java.Object): any;
      equalsP(arg0: Java.Object): Promise<any>;
      // public abstract float java.lang.Number.floatValue()
      floatValueA( cb: Callback<any>): void;
      floatValue(): any;
      floatValueP(): Promise<any>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class<any>>): void;
      getClass(): Java.Class<any>;
      getClassP(): Promise<Java.Class<any>>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<any>): void;
      hashCode(): any;
      hashCodeP(): Promise<any>;
      // public abstract int java.lang.Number.intValue()
      intValueA( cb: Callback<any>): void;
      intValue(): any;
      intValueP(): Promise<any>;
      // public boolean java.lang.Double.isInfinite()
      isInfiniteA( cb: Callback<any>): void;
      isInfinite(): any;
      isInfiniteP(): Promise<any>;
      // public boolean java.lang.Double.isNaN()
      isNaNA( cb: Callback<any>): void;
      isNaN(): any;
      isNaNP(): Promise<any>;
      // public abstract long java.lang.Number.longValue()
      longValueA( cb: Callback<any>): void;
      longValue(): any;
      longValueP(): Promise<any>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<any>): void;
      notify(): any;
      notifyP(): Promise<any>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<any>): void;
      notifyAll(): any;
      notifyAllP(): Promise<any>;
      // public short java.lang.Number.shortValue()
      shortValueA( cb: Callback<any>): void;
      shortValue(): any;
      shortValueP(): Promise<any>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<Java.String>): void;
      toString(): Java.String;
      toStringP(): Promise<Java.String>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: any, arg1: any, cb: Callback<any>): void;
      wait(arg0: any, arg1: any): any;
      waitP(arg0: any, arg1: any): Promise<any>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: any, cb: Callback<any>): void;
      wait(arg0: any): any;
      waitP(arg0: any): Promise<any>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<any>): void;
      wait(): any;
      waitP(): Promise<any>;
    }
    export module Double {
      export interface Static {
        POSITIVE_INFINITY: number;
        NEGATIVE_INFINITY: number;
        NaN: number;
        MAX_VALUE: number;
        MIN_NORMAL: number;
        MIN_VALUE: number;
        MAX_EXPONENT: number;
        MIN_EXPONENT: number;
        SIZE: number;
        BYTES: number;
        TYPE: Java.Class;
        class: Java.Class;
        new (arg0: Java.String): java.lang.Double;
        new (arg0: any): java.lang.Double;
        // public static int java.lang.Double.compare(double,double)
        compareA(arg0: any, arg1: any, cb: Callback<any>): void;
        compare(arg0: any, arg1: any): any;
        compareP(arg0: any, arg1: any): Promise<any>;
        // public static long java.lang.Double.doubleToLongBits(double)
        doubleToLongBitsA(arg0: any, cb: Callback<any>): void;
        doubleToLongBits(arg0: any): any;
        doubleToLongBitsP(arg0: any): Promise<any>;
        // public static native long java.lang.Double.doubleToRawLongBits(double)
        doubleToRawLongBitsA(arg0: any, cb: Callback<any>): void;
        doubleToRawLongBits(arg0: any): any;
        doubleToRawLongBitsP(arg0: any): Promise<any>;
        // public static int java.lang.Double.hashCode(double)
        hashCodeA(arg0: any, cb: Callback<any>): void;
        hashCode(arg0: any): any;
        hashCodeP(arg0: any): Promise<any>;
        // public static boolean java.lang.Double.isFinite(double)
        isFiniteA(arg0: any, cb: Callback<any>): void;
        isFinite(arg0: any): any;
        isFiniteP(arg0: any): Promise<any>;
        // public static boolean java.lang.Double.isInfinite(double)
        isInfiniteA(arg0: any, cb: Callback<any>): void;
        isInfinite(arg0: any): any;
        isInfiniteP(arg0: any): Promise<any>;
        // public static boolean java.lang.Double.isNaN(double)
        isNaNA(arg0: any, cb: Callback<any>): void;
        isNaN(arg0: any): any;
        isNaNP(arg0: any): Promise<any>;
        // public static native double java.lang.Double.longBitsToDouble(long)
        longBitsToDoubleA(arg0: any, cb: Callback<any>): void;
        longBitsToDouble(arg0: any): any;
        longBitsToDoubleP(arg0: any): Promise<any>;
        // public static double java.lang.Double.max(double,double)
        maxA(arg0: any, arg1: any, cb: Callback<any>): void;
        max(arg0: any, arg1: any): any;
        maxP(arg0: any, arg1: any): Promise<any>;
        // public static double java.lang.Double.min(double,double)
        minA(arg0: any, arg1: any, cb: Callback<any>): void;
        min(arg0: any, arg1: any): any;
        minP(arg0: any, arg1: any): Promise<any>;
        // public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException
        parseDoubleA(arg0: Java.String, cb: Callback<any>): void;
        parseDouble(arg0: Java.String): any;
        parseDoubleP(arg0: Java.String): Promise<any>;
        // public static double java.lang.Double.sum(double,double)
        sumA(arg0: any, arg1: any, cb: Callback<any>): void;
        sum(arg0: any, arg1: any): any;
        sumP(arg0: any, arg1: any): Promise<any>;
        // public static java.lang.String java.lang.Double.toHexString(double)
        toHexStringA(arg0: any, cb: Callback<Java.String>): void;
        toHexString(arg0: any): Java.String;
        toHexStringP(arg0: any): Promise<Java.String>;
        // public static java.lang.String java.lang.Double.toString(double)
        toStringA(arg0: any, cb: Callback<Java.String>): void;
        toString(arg0: any): Java.String;
        toStringP(arg0: any): Promise<Java.String>;
        // public static java.lang.Double java.lang.Double.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOfA(arg0: Java.String, cb: Callback<Java.Double>): void;
        valueOf(arg0: Java.String): Java.Double;
        valueOfP(arg0: Java.String): Promise<Java.Double>;
        // public static java.lang.Double java.lang.Double.valueOf(double)
        valueOfA(arg0: any, cb: Callback<Java.Double>): void;
        valueOf(arg0: any): Java.Double;
        valueOfP(arg0: any): Promise<Java.Double>;
      }
    }
  }

  export module java.lang {
    export interface Enum<E> extends Java.java.lang.Object {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareToA(arg0: Java.Object, cb: Callback<any>): void;
      compareTo(arg0: Java.Object): any;
      compareToP(arg0: Java.Object): Promise<any>;
      // public final int java.lang.Enum.compareTo(E)
      compareToA(arg0: any, cb: Callback<any>): void;
      compareTo(arg0: any): any;
      compareToP(arg0: any): Promise<any>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: Java.Object, cb: Callback<any>): void;
      equals(arg0: Java.Object): any;
      equalsP(arg0: Java.Object): Promise<any>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class<any>>): void;
      getClass(): Java.Class<any>;
      getClassP(): Promise<Java.Class<any>>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClassA( cb: Callback<any>): void;
      getDeclaringClass(): any;
      getDeclaringClassP(): Promise<any>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<any>): void;
      hashCode(): any;
      hashCodeP(): Promise<any>;
      // public final java.lang.String java.lang.Enum.name()
      nameA( cb: Callback<Java.String>): void;
      name(): Java.String;
      nameP(): Promise<Java.String>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<any>): void;
      notify(): any;
      notifyP(): Promise<any>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<any>): void;
      notifyAll(): any;
      notifyAllP(): Promise<any>;
      // public final int java.lang.Enum.ordinal()
      ordinalA( cb: Callback<any>): void;
      ordinal(): any;
      ordinalP(): Promise<any>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<Java.String>): void;
      toString(): Java.String;
      toStringP(): Promise<Java.String>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: any, arg1: any, cb: Callback<any>): void;
      wait(arg0: any, arg1: any): any;
      waitP(arg0: any, arg1: any): Promise<any>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: any, cb: Callback<any>): void;
      wait(arg0: any): any;
      waitP(arg0: any): Promise<any>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<any>): void;
      wait(): any;
      waitP(): Promise<any>;
    }
    export module Enum {
      export interface Static {
        class: Java.Class;
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOfA(arg0: any, arg1: Java.String, cb: Callback<any>): void;
        valueOf(arg0: any, arg1: Java.String): any;
        valueOfP(arg0: any, arg1: Java.String): Promise<any>;
      }
    }
  }

  export module java.lang {
    export interface Float extends Java.java.lang.Number {
      // public byte java.lang.Number.byteValue()
      byteValueA( cb: Callback<any>): void;
      byteValue(): any;
      byteValueP(): Promise<any>;
      // public int java.lang.Float.compareTo(java.lang.Object)
      compareToA(arg0: Java.Object, cb: Callback<any>): void;
      compareTo(arg0: Java.Object): any;
      compareToP(arg0: Java.Object): Promise<any>;
      // public int java.lang.Float.compareTo(java.lang.Float)
      compareToA(arg0: Java.Float, cb: Callback<any>): void;
      compareTo(arg0: Java.Float): any;
      compareToP(arg0: Java.Float): Promise<any>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValueA( cb: Callback<any>): void;
      doubleValue(): any;
      doubleValueP(): Promise<any>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: Java.Object, cb: Callback<any>): void;
      equals(arg0: Java.Object): any;
      equalsP(arg0: Java.Object): Promise<any>;
      // public abstract float java.lang.Number.floatValue()
      floatValueA( cb: Callback<any>): void;
      floatValue(): any;
      floatValueP(): Promise<any>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class<any>>): void;
      getClass(): Java.Class<any>;
      getClassP(): Promise<Java.Class<any>>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<any>): void;
      hashCode(): any;
      hashCodeP(): Promise<any>;
      // public abstract int java.lang.Number.intValue()
      intValueA( cb: Callback<any>): void;
      intValue(): any;
      intValueP(): Promise<any>;
      // public boolean java.lang.Float.isInfinite()
      isInfiniteA( cb: Callback<any>): void;
      isInfinite(): any;
      isInfiniteP(): Promise<any>;
      // public boolean java.lang.Float.isNaN()
      isNaNA( cb: Callback<any>): void;
      isNaN(): any;
      isNaNP(): Promise<any>;
      // public abstract long java.lang.Number.longValue()
      longValueA( cb: Callback<any>): void;
      longValue(): any;
      longValueP(): Promise<any>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<any>): void;
      notify(): any;
      notifyP(): Promise<any>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<any>): void;
      notifyAll(): any;
      notifyAllP(): Promise<any>;
      // public short java.lang.Number.shortValue()
      shortValueA( cb: Callback<any>): void;
      shortValue(): any;
      shortValueP(): Promise<any>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<Java.String>): void;
      toString(): Java.String;
      toStringP(): Promise<Java.String>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: any, arg1: any, cb: Callback<any>): void;
      wait(arg0: any, arg1: any): any;
      waitP(arg0: any, arg1: any): Promise<any>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: any, cb: Callback<any>): void;
      wait(arg0: any): any;
      waitP(arg0: any): Promise<any>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<any>): void;
      wait(): any;
      waitP(): Promise<any>;
    }
    export module Float {
      export interface Static {
        POSITIVE_INFINITY: number;
        NEGATIVE_INFINITY: number;
        NaN: number;
        MAX_VALUE: number;
        MIN_NORMAL: number;
        MIN_VALUE: number;
        MAX_EXPONENT: number;
        MIN_EXPONENT: number;
        SIZE: number;
        BYTES: number;
        TYPE: Java.Class;
        class: Java.Class;
        new (arg0: Java.String): java.lang.Float;
        new (arg0: any): java.lang.Float;
        new (arg0: any): java.lang.Float;
        // public static int java.lang.Float.compare(float,float)
        compareA(arg0: any, arg1: any, cb: Callback<any>): void;
        compare(arg0: any, arg1: any): any;
        compareP(arg0: any, arg1: any): Promise<any>;
        // public static int java.lang.Float.floatToIntBits(float)
        floatToIntBitsA(arg0: any, cb: Callback<any>): void;
        floatToIntBits(arg0: any): any;
        floatToIntBitsP(arg0: any): Promise<any>;
        // public static native int java.lang.Float.floatToRawIntBits(float)
        floatToRawIntBitsA(arg0: any, cb: Callback<any>): void;
        floatToRawIntBits(arg0: any): any;
        floatToRawIntBitsP(arg0: any): Promise<any>;
        // public static int java.lang.Float.hashCode(float)
        hashCodeA(arg0: any, cb: Callback<any>): void;
        hashCode(arg0: any): any;
        hashCodeP(arg0: any): Promise<any>;
        // public static native float java.lang.Float.intBitsToFloat(int)
        intBitsToFloatA(arg0: any, cb: Callback<any>): void;
        intBitsToFloat(arg0: any): any;
        intBitsToFloatP(arg0: any): Promise<any>;
        // public static boolean java.lang.Float.isFinite(float)
        isFiniteA(arg0: any, cb: Callback<any>): void;
        isFinite(arg0: any): any;
        isFiniteP(arg0: any): Promise<any>;
        // public static boolean java.lang.Float.isInfinite(float)
        isInfiniteA(arg0: any, cb: Callback<any>): void;
        isInfinite(arg0: any): any;
        isInfiniteP(arg0: any): Promise<any>;
        // public static boolean java.lang.Float.isNaN(float)
        isNaNA(arg0: any, cb: Callback<any>): void;
        isNaN(arg0: any): any;
        isNaNP(arg0: any): Promise<any>;
        // public static float java.lang.Float.max(float,float)
        maxA(arg0: any, arg1: any, cb: Callback<any>): void;
        max(arg0: any, arg1: any): any;
        maxP(arg0: any, arg1: any): Promise<any>;
        // public static float java.lang.Float.min(float,float)
        minA(arg0: any, arg1: any, cb: Callback<any>): void;
        min(arg0: any, arg1: any): any;
        minP(arg0: any, arg1: any): Promise<any>;
        // public static float java.lang.Float.parseFloat(java.lang.String) throws java.lang.NumberFormatException
        parseFloatA(arg0: Java.String, cb: Callback<any>): void;
        parseFloat(arg0: Java.String): any;
        parseFloatP(arg0: Java.String): Promise<any>;
        // public static float java.lang.Float.sum(float,float)
        sumA(arg0: any, arg1: any, cb: Callback<any>): void;
        sum(arg0: any, arg1: any): any;
        sumP(arg0: any, arg1: any): Promise<any>;
        // public static java.lang.String java.lang.Float.toHexString(float)
        toHexStringA(arg0: any, cb: Callback<Java.String>): void;
        toHexString(arg0: any): Java.String;
        toHexStringP(arg0: any): Promise<Java.String>;
        // public static java.lang.String java.lang.Float.toString(float)
        toStringA(arg0: any, cb: Callback<Java.String>): void;
        toString(arg0: any): Java.String;
        toStringP(arg0: any): Promise<Java.String>;
        // public static java.lang.Float java.lang.Float.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOfA(arg0: Java.String, cb: Callback<Java.Float>): void;
        valueOf(arg0: Java.String): Java.Float;
        valueOfP(arg0: Java.String): Promise<Java.Float>;
        // public static java.lang.Float java.lang.Float.valueOf(float)
        valueOfA(arg0: any, cb: Callback<Java.Float>): void;
        valueOf(arg0: any): Java.Float;
        valueOfP(arg0: any): Promise<Java.Float>;
      }
    }
  }

  export module java.lang {
    export interface Integer extends Java.java.lang.Number {
      // public byte java.lang.Number.byteValue()
      byteValueA( cb: Callback<any>): void;
      byteValue(): any;
      byteValueP(): Promise<any>;
      // public int java.lang.Integer.compareTo(java.lang.Integer)
      compareToA(arg0: Java.Integer, cb: Callback<any>): void;
      compareTo(arg0: Java.Integer): any;
      compareToP(arg0: Java.Integer): Promise<any>;
      // public int java.lang.Integer.compareTo(java.lang.Object)
      compareToA(arg0: Java.Object, cb: Callback<any>): void;
      compareTo(arg0: Java.Object): any;
      compareToP(arg0: Java.Object): Promise<any>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValueA( cb: Callback<any>): void;
      doubleValue(): any;
      doubleValueP(): Promise<any>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: Java.Object, cb: Callback<any>): void;
      equals(arg0: Java.Object): any;
      equalsP(arg0: Java.Object): Promise<any>;
      // public abstract float java.lang.Number.floatValue()
      floatValueA( cb: Callback<any>): void;
      floatValue(): any;
      floatValueP(): Promise<any>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class<any>>): void;
      getClass(): Java.Class<any>;
      getClassP(): Promise<Java.Class<any>>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<any>): void;
      hashCode(): any;
      hashCodeP(): Promise<any>;
      // public abstract int java.lang.Number.intValue()
      intValueA( cb: Callback<any>): void;
      intValue(): any;
      intValueP(): Promise<any>;
      // public abstract long java.lang.Number.longValue()
      longValueA( cb: Callback<any>): void;
      longValue(): any;
      longValueP(): Promise<any>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<any>): void;
      notify(): any;
      notifyP(): Promise<any>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<any>): void;
      notifyAll(): any;
      notifyAllP(): Promise<any>;
      // public short java.lang.Number.shortValue()
      shortValueA( cb: Callback<any>): void;
      shortValue(): any;
      shortValueP(): Promise<any>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<Java.String>): void;
      toString(): Java.String;
      toStringP(): Promise<Java.String>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: any, arg1: any, cb: Callback<any>): void;
      wait(arg0: any, arg1: any): any;
      waitP(arg0: any, arg1: any): Promise<any>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: any, cb: Callback<any>): void;
      wait(arg0: any): any;
      waitP(arg0: any): Promise<any>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<any>): void;
      wait(): any;
      waitP(): Promise<any>;
    }
    export module Integer {
      export interface Static {
        MIN_VALUE: number;
        MAX_VALUE: number;
        TYPE: Java.Class;
        SIZE: number;
        BYTES: number;
        class: Java.Class;
        new (arg0: Java.String): java.lang.Integer;
        new (arg0: any): java.lang.Integer;
        // public static int java.lang.Integer.bitCount(int)
        bitCountA(arg0: any, cb: Callback<any>): void;
        bitCount(arg0: any): any;
        bitCountP(arg0: any): Promise<any>;
        // public static int java.lang.Integer.compare(int,int)
        compareA(arg0: any, arg1: any, cb: Callback<any>): void;
        compare(arg0: any, arg1: any): any;
        compareP(arg0: any, arg1: any): Promise<any>;
        // public static int java.lang.Integer.compareUnsigned(int,int)
        compareUnsignedA(arg0: any, arg1: any, cb: Callback<any>): void;
        compareUnsigned(arg0: any, arg1: any): any;
        compareUnsignedP(arg0: any, arg1: any): Promise<any>;
        // public static java.lang.Integer java.lang.Integer.decode(java.lang.String) throws java.lang.NumberFormatException
        decodeA(arg0: Java.String, cb: Callback<Java.Integer>): void;
        decode(arg0: Java.String): Java.Integer;
        decodeP(arg0: Java.String): Promise<Java.Integer>;
        // public static int java.lang.Integer.divideUnsigned(int,int)
        divideUnsignedA(arg0: any, arg1: any, cb: Callback<any>): void;
        divideUnsigned(arg0: any, arg1: any): any;
        divideUnsignedP(arg0: any, arg1: any): Promise<any>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,java.lang.Integer)
        getIntegerA(arg0: Java.String, arg1: Java.Integer, cb: Callback<Java.Integer>): void;
        getInteger(arg0: Java.String, arg1: Java.Integer): Java.Integer;
        getIntegerP(arg0: Java.String, arg1: Java.Integer): Promise<Java.Integer>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,int)
        getIntegerA(arg0: Java.String, arg1: any, cb: Callback<Java.Integer>): void;
        getInteger(arg0: Java.String, arg1: any): Java.Integer;
        getIntegerP(arg0: Java.String, arg1: any): Promise<Java.Integer>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String)
        getIntegerA(arg0: Java.String, cb: Callback<Java.Integer>): void;
        getInteger(arg0: Java.String): Java.Integer;
        getIntegerP(arg0: Java.String): Promise<Java.Integer>;
        // public static int java.lang.Integer.hashCode(int)
        hashCodeA(arg0: any, cb: Callback<any>): void;
        hashCode(arg0: any): any;
        hashCodeP(arg0: any): Promise<any>;
        // public static int java.lang.Integer.highestOneBit(int)
        highestOneBitA(arg0: any, cb: Callback<any>): void;
        highestOneBit(arg0: any): any;
        highestOneBitP(arg0: any): Promise<any>;
        // public static int java.lang.Integer.lowestOneBit(int)
        lowestOneBitA(arg0: any, cb: Callback<any>): void;
        lowestOneBit(arg0: any): any;
        lowestOneBitP(arg0: any): Promise<any>;
        // public static int java.lang.Integer.max(int,int)
        maxA(arg0: any, arg1: any, cb: Callback<any>): void;
        max(arg0: any, arg1: any): any;
        maxP(arg0: any, arg1: any): Promise<any>;
        // public static int java.lang.Integer.min(int,int)
        minA(arg0: any, arg1: any, cb: Callback<any>): void;
        min(arg0: any, arg1: any): any;
        minP(arg0: any, arg1: any): Promise<any>;
        // public static int java.lang.Integer.numberOfLeadingZeros(int)
        numberOfLeadingZerosA(arg0: any, cb: Callback<any>): void;
        numberOfLeadingZeros(arg0: any): any;
        numberOfLeadingZerosP(arg0: any): Promise<any>;
        // public static int java.lang.Integer.numberOfTrailingZeros(int)
        numberOfTrailingZerosA(arg0: any, cb: Callback<any>): void;
        numberOfTrailingZeros(arg0: any): any;
        numberOfTrailingZerosP(arg0: any): Promise<any>;
        // public static int java.lang.Integer.parseInt(java.lang.String,int) throws java.lang.NumberFormatException
        parseIntA(arg0: Java.String, arg1: any, cb: Callback<any>): void;
        parseInt(arg0: Java.String, arg1: any): any;
        parseIntP(arg0: Java.String, arg1: any): Promise<any>;
        // public static int java.lang.Integer.parseInt(java.lang.String) throws java.lang.NumberFormatException
        parseIntA(arg0: Java.String, cb: Callback<any>): void;
        parseInt(arg0: Java.String): any;
        parseIntP(arg0: Java.String): Promise<any>;
        // public static int java.lang.Integer.parseUnsignedInt(java.lang.String,int) throws java.lang.NumberFormatException
        parseUnsignedIntA(arg0: Java.String, arg1: any, cb: Callback<any>): void;
        parseUnsignedInt(arg0: Java.String, arg1: any): any;
        parseUnsignedIntP(arg0: Java.String, arg1: any): Promise<any>;
        // public static int java.lang.Integer.parseUnsignedInt(java.lang.String) throws java.lang.NumberFormatException
        parseUnsignedIntA(arg0: Java.String, cb: Callback<any>): void;
        parseUnsignedInt(arg0: Java.String): any;
        parseUnsignedIntP(arg0: Java.String): Promise<any>;
        // public static int java.lang.Integer.remainderUnsigned(int,int)
        remainderUnsignedA(arg0: any, arg1: any, cb: Callback<any>): void;
        remainderUnsigned(arg0: any, arg1: any): any;
        remainderUnsignedP(arg0: any, arg1: any): Promise<any>;
        // public static int java.lang.Integer.reverse(int)
        reverseA(arg0: any, cb: Callback<any>): void;
        reverse(arg0: any): any;
        reverseP(arg0: any): Promise<any>;
        // public static int java.lang.Integer.reverseBytes(int)
        reverseBytesA(arg0: any, cb: Callback<any>): void;
        reverseBytes(arg0: any): any;
        reverseBytesP(arg0: any): Promise<any>;
        // public static int java.lang.Integer.rotateLeft(int,int)
        rotateLeftA(arg0: any, arg1: any, cb: Callback<any>): void;
        rotateLeft(arg0: any, arg1: any): any;
        rotateLeftP(arg0: any, arg1: any): Promise<any>;
        // public static int java.lang.Integer.rotateRight(int,int)
        rotateRightA(arg0: any, arg1: any, cb: Callback<any>): void;
        rotateRight(arg0: any, arg1: any): any;
        rotateRightP(arg0: any, arg1: any): Promise<any>;
        // public static int java.lang.Integer.signum(int)
        signumA(arg0: any, cb: Callback<any>): void;
        signum(arg0: any): any;
        signumP(arg0: any): Promise<any>;
        // public static int java.lang.Integer.sum(int,int)
        sumA(arg0: any, arg1: any, cb: Callback<any>): void;
        sum(arg0: any, arg1: any): any;
        sumP(arg0: any, arg1: any): Promise<any>;
        // public static java.lang.String java.lang.Integer.toBinaryString(int)
        toBinaryStringA(arg0: any, cb: Callback<Java.String>): void;
        toBinaryString(arg0: any): Java.String;
        toBinaryStringP(arg0: any): Promise<Java.String>;
        // public static java.lang.String java.lang.Integer.toHexString(int)
        toHexStringA(arg0: any, cb: Callback<Java.String>): void;
        toHexString(arg0: any): Java.String;
        toHexStringP(arg0: any): Promise<Java.String>;
        // public static java.lang.String java.lang.Integer.toOctalString(int)
        toOctalStringA(arg0: any, cb: Callback<Java.String>): void;
        toOctalString(arg0: any): Java.String;
        toOctalStringP(arg0: any): Promise<Java.String>;
        // public static java.lang.String java.lang.Integer.toString(int,int)
        toStringA(arg0: any, arg1: any, cb: Callback<Java.String>): void;
        toString(arg0: any, arg1: any): Java.String;
        toStringP(arg0: any, arg1: any): Promise<Java.String>;
        // public static java.lang.String java.lang.Integer.toString(int)
        toStringA(arg0: any, cb: Callback<Java.String>): void;
        toString(arg0: any): Java.String;
        toStringP(arg0: any): Promise<Java.String>;
        // public static long java.lang.Integer.toUnsignedLong(int)
        toUnsignedLongA(arg0: any, cb: Callback<any>): void;
        toUnsignedLong(arg0: any): any;
        toUnsignedLongP(arg0: any): Promise<any>;
        // public static java.lang.String java.lang.Integer.toUnsignedString(int,int)
        toUnsignedStringA(arg0: any, arg1: any, cb: Callback<Java.String>): void;
        toUnsignedString(arg0: any, arg1: any): Java.String;
        toUnsignedStringP(arg0: any, arg1: any): Promise<Java.String>;
        // public static java.lang.String java.lang.Integer.toUnsignedString(int)
        toUnsignedStringA(arg0: any, cb: Callback<Java.String>): void;
        toUnsignedString(arg0: any): Java.String;
        toUnsignedStringP(arg0: any): Promise<Java.String>;
        // public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
        valueOfA(arg0: Java.String, arg1: any, cb: Callback<Java.Integer>): void;
        valueOf(arg0: Java.String, arg1: any): Java.Integer;
        valueOfP(arg0: Java.String, arg1: any): Promise<Java.Integer>;
        // public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOfA(arg0: Java.String, cb: Callback<Java.Integer>): void;
        valueOf(arg0: Java.String): Java.Integer;
        valueOfP(arg0: Java.String): Promise<Java.Integer>;
        // public static java.lang.Integer java.lang.Integer.valueOf(int)
        valueOfA(arg0: any, cb: Callback<Java.Integer>): void;
        valueOf(arg0: any): Java.Integer;
        valueOfP(arg0: any): Promise<Java.Integer>;
      }
    }
  }

  export module java.lang {
    export interface Iterable<T> extends Java.java.lang.Object {
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: any, cb: Callback<any>): void;
      forEach(arg0: any): any;
      forEachP(arg0: any): Promise<any>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iteratorA( cb: Callback<any>): void;
      iterator(): any;
      iteratorP(): Promise<any>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliteratorA( cb: Callback<any>): void;
      spliterator(): any;
      spliteratorP(): Promise<any>;
    }
    export module Iterable {
      export interface Static {
        class: Java.Class;
      }
    }
  }

  export module java.lang {
    export interface Long extends Java.java.lang.Number {
      // public byte java.lang.Number.byteValue()
      byteValueA( cb: Callback<any>): void;
      byteValue(): any;
      byteValueP(): Promise<any>;
      // public int java.lang.Long.compareTo(java.lang.Object)
      compareToA(arg0: Java.Object, cb: Callback<any>): void;
      compareTo(arg0: Java.Object): any;
      compareToP(arg0: Java.Object): Promise<any>;
      // public int java.lang.Long.compareTo(java.lang.Long)
      compareToA(arg0: Java.Long, cb: Callback<any>): void;
      compareTo(arg0: Java.Long): any;
      compareToP(arg0: Java.Long): Promise<any>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValueA( cb: Callback<any>): void;
      doubleValue(): any;
      doubleValueP(): Promise<any>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: Java.Object, cb: Callback<any>): void;
      equals(arg0: Java.Object): any;
      equalsP(arg0: Java.Object): Promise<any>;
      // public abstract float java.lang.Number.floatValue()
      floatValueA( cb: Callback<any>): void;
      floatValue(): any;
      floatValueP(): Promise<any>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class<any>>): void;
      getClass(): Java.Class<any>;
      getClassP(): Promise<Java.Class<any>>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<any>): void;
      hashCode(): any;
      hashCodeP(): Promise<any>;
      // public abstract int java.lang.Number.intValue()
      intValueA( cb: Callback<any>): void;
      intValue(): any;
      intValueP(): Promise<any>;
      // public abstract long java.lang.Number.longValue()
      longValueA( cb: Callback<any>): void;
      longValue(): any;
      longValueP(): Promise<any>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<any>): void;
      notify(): any;
      notifyP(): Promise<any>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<any>): void;
      notifyAll(): any;
      notifyAllP(): Promise<any>;
      // public short java.lang.Number.shortValue()
      shortValueA( cb: Callback<any>): void;
      shortValue(): any;
      shortValueP(): Promise<any>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<Java.String>): void;
      toString(): Java.String;
      toStringP(): Promise<Java.String>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: any, arg1: any, cb: Callback<any>): void;
      wait(arg0: any, arg1: any): any;
      waitP(arg0: any, arg1: any): Promise<any>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: any, cb: Callback<any>): void;
      wait(arg0: any): any;
      waitP(arg0: any): Promise<any>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<any>): void;
      wait(): any;
      waitP(): Promise<any>;
    }
    export module Long {
      export interface Static {
        MIN_VALUE: longValue_t;
        MAX_VALUE: longValue_t;
        TYPE: Java.Class;
        SIZE: number;
        BYTES: number;
        class: Java.Class;
        new (arg0: Java.String): java.lang.Long;
        new (arg0: any): java.lang.Long;
        // public static int java.lang.Long.bitCount(long)
        bitCountA(arg0: any, cb: Callback<any>): void;
        bitCount(arg0: any): any;
        bitCountP(arg0: any): Promise<any>;
        // public static int java.lang.Long.compare(long,long)
        compareA(arg0: any, arg1: any, cb: Callback<any>): void;
        compare(arg0: any, arg1: any): any;
        compareP(arg0: any, arg1: any): Promise<any>;
        // public static int java.lang.Long.compareUnsigned(long,long)
        compareUnsignedA(arg0: any, arg1: any, cb: Callback<any>): void;
        compareUnsigned(arg0: any, arg1: any): any;
        compareUnsignedP(arg0: any, arg1: any): Promise<any>;
        // public static java.lang.Long java.lang.Long.decode(java.lang.String) throws java.lang.NumberFormatException
        decodeA(arg0: Java.String, cb: Callback<Java.Long>): void;
        decode(arg0: Java.String): Java.Long;
        decodeP(arg0: Java.String): Promise<Java.Long>;
        // public static long java.lang.Long.divideUnsigned(long,long)
        divideUnsignedA(arg0: any, arg1: any, cb: Callback<any>): void;
        divideUnsigned(arg0: any, arg1: any): any;
        divideUnsignedP(arg0: any, arg1: any): Promise<any>;
        // public static java.lang.Long java.lang.Long.getLong(java.lang.String,java.lang.Long)
        getLongA(arg0: Java.String, arg1: Java.Long, cb: Callback<Java.Long>): void;
        getLong(arg0: Java.String, arg1: Java.Long): Java.Long;
        getLongP(arg0: Java.String, arg1: Java.Long): Promise<Java.Long>;
        // public static java.lang.Long java.lang.Long.getLong(java.lang.String,long)
        getLongA(arg0: Java.String, arg1: any, cb: Callback<Java.Long>): void;
        getLong(arg0: Java.String, arg1: any): Java.Long;
        getLongP(arg0: Java.String, arg1: any): Promise<Java.Long>;
        // public static java.lang.Long java.lang.Long.getLong(java.lang.String)
        getLongA(arg0: Java.String, cb: Callback<Java.Long>): void;
        getLong(arg0: Java.String): Java.Long;
        getLongP(arg0: Java.String): Promise<Java.Long>;
        // public static int java.lang.Long.hashCode(long)
        hashCodeA(arg0: any, cb: Callback<any>): void;
        hashCode(arg0: any): any;
        hashCodeP(arg0: any): Promise<any>;
        // public static long java.lang.Long.highestOneBit(long)
        highestOneBitA(arg0: any, cb: Callback<any>): void;
        highestOneBit(arg0: any): any;
        highestOneBitP(arg0: any): Promise<any>;
        // public static long java.lang.Long.lowestOneBit(long)
        lowestOneBitA(arg0: any, cb: Callback<any>): void;
        lowestOneBit(arg0: any): any;
        lowestOneBitP(arg0: any): Promise<any>;
        // public static long java.lang.Long.max(long,long)
        maxA(arg0: any, arg1: any, cb: Callback<any>): void;
        max(arg0: any, arg1: any): any;
        maxP(arg0: any, arg1: any): Promise<any>;
        // public static long java.lang.Long.min(long,long)
        minA(arg0: any, arg1: any, cb: Callback<any>): void;
        min(arg0: any, arg1: any): any;
        minP(arg0: any, arg1: any): Promise<any>;
        // public static int java.lang.Long.numberOfLeadingZeros(long)
        numberOfLeadingZerosA(arg0: any, cb: Callback<any>): void;
        numberOfLeadingZeros(arg0: any): any;
        numberOfLeadingZerosP(arg0: any): Promise<any>;
        // public static int java.lang.Long.numberOfTrailingZeros(long)
        numberOfTrailingZerosA(arg0: any, cb: Callback<any>): void;
        numberOfTrailingZeros(arg0: any): any;
        numberOfTrailingZerosP(arg0: any): Promise<any>;
        // public static long java.lang.Long.parseLong(java.lang.String,int) throws java.lang.NumberFormatException
        parseLongA(arg0: Java.String, arg1: any, cb: Callback<any>): void;
        parseLong(arg0: Java.String, arg1: any): any;
        parseLongP(arg0: Java.String, arg1: any): Promise<any>;
        // public static long java.lang.Long.parseLong(java.lang.String) throws java.lang.NumberFormatException
        parseLongA(arg0: Java.String, cb: Callback<any>): void;
        parseLong(arg0: Java.String): any;
        parseLongP(arg0: Java.String): Promise<any>;
        // public static long java.lang.Long.parseUnsignedLong(java.lang.String,int) throws java.lang.NumberFormatException
        parseUnsignedLongA(arg0: Java.String, arg1: any, cb: Callback<any>): void;
        parseUnsignedLong(arg0: Java.String, arg1: any): any;
        parseUnsignedLongP(arg0: Java.String, arg1: any): Promise<any>;
        // public static long java.lang.Long.parseUnsignedLong(java.lang.String) throws java.lang.NumberFormatException
        parseUnsignedLongA(arg0: Java.String, cb: Callback<any>): void;
        parseUnsignedLong(arg0: Java.String): any;
        parseUnsignedLongP(arg0: Java.String): Promise<any>;
        // public static long java.lang.Long.remainderUnsigned(long,long)
        remainderUnsignedA(arg0: any, arg1: any, cb: Callback<any>): void;
        remainderUnsigned(arg0: any, arg1: any): any;
        remainderUnsignedP(arg0: any, arg1: any): Promise<any>;
        // public static long java.lang.Long.reverse(long)
        reverseA(arg0: any, cb: Callback<any>): void;
        reverse(arg0: any): any;
        reverseP(arg0: any): Promise<any>;
        // public static long java.lang.Long.reverseBytes(long)
        reverseBytesA(arg0: any, cb: Callback<any>): void;
        reverseBytes(arg0: any): any;
        reverseBytesP(arg0: any): Promise<any>;
        // public static long java.lang.Long.rotateLeft(long,int)
        rotateLeftA(arg0: any, arg1: any, cb: Callback<any>): void;
        rotateLeft(arg0: any, arg1: any): any;
        rotateLeftP(arg0: any, arg1: any): Promise<any>;
        // public static long java.lang.Long.rotateRight(long,int)
        rotateRightA(arg0: any, arg1: any, cb: Callback<any>): void;
        rotateRight(arg0: any, arg1: any): any;
        rotateRightP(arg0: any, arg1: any): Promise<any>;
        // public static int java.lang.Long.signum(long)
        signumA(arg0: any, cb: Callback<any>): void;
        signum(arg0: any): any;
        signumP(arg0: any): Promise<any>;
        // public static long java.lang.Long.sum(long,long)
        sumA(arg0: any, arg1: any, cb: Callback<any>): void;
        sum(arg0: any, arg1: any): any;
        sumP(arg0: any, arg1: any): Promise<any>;
        // public static java.lang.String java.lang.Long.toBinaryString(long)
        toBinaryStringA(arg0: any, cb: Callback<Java.String>): void;
        toBinaryString(arg0: any): Java.String;
        toBinaryStringP(arg0: any): Promise<Java.String>;
        // public static java.lang.String java.lang.Long.toHexString(long)
        toHexStringA(arg0: any, cb: Callback<Java.String>): void;
        toHexString(arg0: any): Java.String;
        toHexStringP(arg0: any): Promise<Java.String>;
        // public static java.lang.String java.lang.Long.toOctalString(long)
        toOctalStringA(arg0: any, cb: Callback<Java.String>): void;
        toOctalString(arg0: any): Java.String;
        toOctalStringP(arg0: any): Promise<Java.String>;
        // public static java.lang.String java.lang.Long.toString(long,int)
        toStringA(arg0: any, arg1: any, cb: Callback<Java.String>): void;
        toString(arg0: any, arg1: any): Java.String;
        toStringP(arg0: any, arg1: any): Promise<Java.String>;
        // public static java.lang.String java.lang.Long.toString(long)
        toStringA(arg0: any, cb: Callback<Java.String>): void;
        toString(arg0: any): Java.String;
        toStringP(arg0: any): Promise<Java.String>;
        // public static java.lang.String java.lang.Long.toUnsignedString(long,int)
        toUnsignedStringA(arg0: any, arg1: any, cb: Callback<Java.String>): void;
        toUnsignedString(arg0: any, arg1: any): Java.String;
        toUnsignedStringP(arg0: any, arg1: any): Promise<Java.String>;
        // public static java.lang.String java.lang.Long.toUnsignedString(long)
        toUnsignedStringA(arg0: any, cb: Callback<Java.String>): void;
        toUnsignedString(arg0: any): Java.String;
        toUnsignedStringP(arg0: any): Promise<Java.String>;
        // public static java.lang.Long java.lang.Long.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
        valueOfA(arg0: Java.String, arg1: any, cb: Callback<Java.Long>): void;
        valueOf(arg0: Java.String, arg1: any): Java.Long;
        valueOfP(arg0: Java.String, arg1: any): Promise<Java.Long>;
        // public static java.lang.Long java.lang.Long.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOfA(arg0: Java.String, cb: Callback<Java.Long>): void;
        valueOf(arg0: Java.String): Java.Long;
        valueOfP(arg0: Java.String): Promise<Java.Long>;
        // public static java.lang.Long java.lang.Long.valueOf(long)
        valueOfA(arg0: any, cb: Callback<Java.Long>): void;
        valueOf(arg0: any): Java.Long;
        valueOfP(arg0: any): Promise<Java.Long>;
      }
    }
  }

  export module java.lang {
    export interface Number extends Java.java.lang.Object {
      // public byte java.lang.Number.byteValue()
      byteValueA( cb: Callback<any>): void;
      byteValue(): any;
      byteValueP(): Promise<any>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValueA( cb: Callback<any>): void;
      doubleValue(): any;
      doubleValueP(): Promise<any>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: Java.Object, cb: Callback<any>): void;
      equals(arg0: Java.Object): any;
      equalsP(arg0: Java.Object): Promise<any>;
      // public abstract float java.lang.Number.floatValue()
      floatValueA( cb: Callback<any>): void;
      floatValue(): any;
      floatValueP(): Promise<any>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class<any>>): void;
      getClass(): Java.Class<any>;
      getClassP(): Promise<Java.Class<any>>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<any>): void;
      hashCode(): any;
      hashCodeP(): Promise<any>;
      // public abstract int java.lang.Number.intValue()
      intValueA( cb: Callback<any>): void;
      intValue(): any;
      intValueP(): Promise<any>;
      // public abstract long java.lang.Number.longValue()
      longValueA( cb: Callback<any>): void;
      longValue(): any;
      longValueP(): Promise<any>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<any>): void;
      notify(): any;
      notifyP(): Promise<any>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<any>): void;
      notifyAll(): any;
      notifyAllP(): Promise<any>;
      // public short java.lang.Number.shortValue()
      shortValueA( cb: Callback<any>): void;
      shortValue(): any;
      shortValueP(): Promise<any>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<Java.String>): void;
      toString(): Java.String;
      toStringP(): Promise<Java.String>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: any, arg1: any, cb: Callback<any>): void;
      wait(arg0: any, arg1: any): any;
      waitP(arg0: any, arg1: any): Promise<any>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: any, cb: Callback<any>): void;
      wait(arg0: any): any;
      waitP(arg0: any): Promise<any>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<any>): void;
      wait(): any;
      waitP(): Promise<any>;
    }
    export module Number {
      export interface Static {
        class: Java.Class;
        new (): java.lang.Number;
      }
    }
  }

  export module java.lang {
    export interface Object  {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: Java.Object, cb: Callback<any>): void;
      equals(arg0: Java.Object): any;
      equalsP(arg0: Java.Object): Promise<any>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class<any>>): void;
      getClass(): Java.Class<any>;
      getClassP(): Promise<Java.Class<any>>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<any>): void;
      hashCode(): any;
      hashCodeP(): Promise<any>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<any>): void;
      notify(): any;
      notifyP(): Promise<any>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<any>): void;
      notifyAll(): any;
      notifyAllP(): Promise<any>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<Java.String>): void;
      toString(): Java.String;
      toStringP(): Promise<Java.String>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: any, arg1: any, cb: Callback<any>): void;
      wait(arg0: any, arg1: any): any;
      waitP(arg0: any, arg1: any): Promise<any>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: any, cb: Callback<any>): void;
      wait(arg0: any): any;
      waitP(arg0: any): Promise<any>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<any>): void;
      wait(): any;
      waitP(): Promise<any>;
    }
    export module Object {
      export interface Static {
        class: Java.Class;
        new (): java.lang.Object;
      }
    }
  }

  export module java.lang {
    export interface Short extends Java.java.lang.Number {
      // public byte java.lang.Number.byteValue()
      byteValueA( cb: Callback<any>): void;
      byteValue(): any;
      byteValueP(): Promise<any>;
      // public int java.lang.Short.compareTo(java.lang.Object)
      compareToA(arg0: Java.Object, cb: Callback<any>): void;
      compareTo(arg0: Java.Object): any;
      compareToP(arg0: Java.Object): Promise<any>;
      // public int java.lang.Short.compareTo(java.lang.Short)
      compareToA(arg0: Java.Short, cb: Callback<any>): void;
      compareTo(arg0: Java.Short): any;
      compareToP(arg0: Java.Short): Promise<any>;
      // public abstract double java.lang.Number.doubleValue()
      doubleValueA( cb: Callback<any>): void;
      doubleValue(): any;
      doubleValueP(): Promise<any>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: Java.Object, cb: Callback<any>): void;
      equals(arg0: Java.Object): any;
      equalsP(arg0: Java.Object): Promise<any>;
      // public abstract float java.lang.Number.floatValue()
      floatValueA( cb: Callback<any>): void;
      floatValue(): any;
      floatValueP(): Promise<any>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class<any>>): void;
      getClass(): Java.Class<any>;
      getClassP(): Promise<Java.Class<any>>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<any>): void;
      hashCode(): any;
      hashCodeP(): Promise<any>;
      // public abstract int java.lang.Number.intValue()
      intValueA( cb: Callback<any>): void;
      intValue(): any;
      intValueP(): Promise<any>;
      // public abstract long java.lang.Number.longValue()
      longValueA( cb: Callback<any>): void;
      longValue(): any;
      longValueP(): Promise<any>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<any>): void;
      notify(): any;
      notifyP(): Promise<any>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<any>): void;
      notifyAll(): any;
      notifyAllP(): Promise<any>;
      // public short java.lang.Number.shortValue()
      shortValueA( cb: Callback<any>): void;
      shortValue(): any;
      shortValueP(): Promise<any>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<Java.String>): void;
      toString(): Java.String;
      toStringP(): Promise<Java.String>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: any, arg1: any, cb: Callback<any>): void;
      wait(arg0: any, arg1: any): any;
      waitP(arg0: any, arg1: any): Promise<any>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: any, cb: Callback<any>): void;
      wait(arg0: any): any;
      waitP(arg0: any): Promise<any>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<any>): void;
      wait(): any;
      waitP(): Promise<any>;
    }
    export module Short {
      export interface Static {
        MIN_VALUE: number;
        MAX_VALUE: number;
        TYPE: Java.Class;
        SIZE: number;
        BYTES: number;
        class: Java.Class;
        new (arg0: Java.String): java.lang.Short;
        new (arg0: any): java.lang.Short;
        // public static int java.lang.Short.compare(short,short)
        compareA(arg0: any, arg1: any, cb: Callback<any>): void;
        compare(arg0: any, arg1: any): any;
        compareP(arg0: any, arg1: any): Promise<any>;
        // public static java.lang.Short java.lang.Short.decode(java.lang.String) throws java.lang.NumberFormatException
        decodeA(arg0: Java.String, cb: Callback<Java.Short>): void;
        decode(arg0: Java.String): Java.Short;
        decodeP(arg0: Java.String): Promise<Java.Short>;
        // public static int java.lang.Short.hashCode(short)
        hashCodeA(arg0: any, cb: Callback<any>): void;
        hashCode(arg0: any): any;
        hashCodeP(arg0: any): Promise<any>;
        // public static short java.lang.Short.parseShort(java.lang.String,int) throws java.lang.NumberFormatException
        parseShortA(arg0: Java.String, arg1: any, cb: Callback<any>): void;
        parseShort(arg0: Java.String, arg1: any): any;
        parseShortP(arg0: Java.String, arg1: any): Promise<any>;
        // public static short java.lang.Short.parseShort(java.lang.String) throws java.lang.NumberFormatException
        parseShortA(arg0: Java.String, cb: Callback<any>): void;
        parseShort(arg0: Java.String): any;
        parseShortP(arg0: Java.String): Promise<any>;
        // public static short java.lang.Short.reverseBytes(short)
        reverseBytesA(arg0: any, cb: Callback<any>): void;
        reverseBytes(arg0: any): any;
        reverseBytesP(arg0: any): Promise<any>;
        // public static java.lang.String java.lang.Short.toString(short)
        toStringA(arg0: any, cb: Callback<Java.String>): void;
        toString(arg0: any): Java.String;
        toStringP(arg0: any): Promise<Java.String>;
        // public static int java.lang.Short.toUnsignedInt(short)
        toUnsignedIntA(arg0: any, cb: Callback<any>): void;
        toUnsignedInt(arg0: any): any;
        toUnsignedIntP(arg0: any): Promise<any>;
        // public static long java.lang.Short.toUnsignedLong(short)
        toUnsignedLongA(arg0: any, cb: Callback<any>): void;
        toUnsignedLong(arg0: any): any;
        toUnsignedLongP(arg0: any): Promise<any>;
        // public static java.lang.Short java.lang.Short.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
        valueOfA(arg0: Java.String, arg1: any, cb: Callback<Java.Short>): void;
        valueOf(arg0: Java.String, arg1: any): Java.Short;
        valueOfP(arg0: Java.String, arg1: any): Promise<Java.Short>;
        // public static java.lang.Short java.lang.Short.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOfA(arg0: Java.String, cb: Callback<Java.Short>): void;
        valueOf(arg0: Java.String): Java.Short;
        valueOfP(arg0: Java.String): Promise<Java.Short>;
        // public static java.lang.Short java.lang.Short.valueOf(short)
        valueOfA(arg0: any, cb: Callback<Java.Short>): void;
        valueOf(arg0: any): Java.Short;
        valueOfP(arg0: any): Promise<Java.Short>;
      }
    }
  }

  export module java.lang {
    export interface String extends Java.java.lang.Object {
      // public char java.lang.String.charAt(int)
      charAtA(arg0: any, cb: Callback<any>): void;
      charAt(arg0: any): any;
      charAtP(arg0: any): Promise<any>;
      // public default java.util.stream.IntStream java.lang.CharSequence.chars()
      charsA( cb: Callback<Java.IntStream>): void;
      chars(): Java.IntStream;
      charsP(): Promise<Java.IntStream>;
      // public int java.lang.String.codePointAt(int)
      codePointAtA(arg0: any, cb: Callback<any>): void;
      codePointAt(arg0: any): any;
      codePointAtP(arg0: any): Promise<any>;
      // public int java.lang.String.codePointBefore(int)
      codePointBeforeA(arg0: any, cb: Callback<any>): void;
      codePointBefore(arg0: any): any;
      codePointBeforeP(arg0: any): Promise<any>;
      // public int java.lang.String.codePointCount(int,int)
      codePointCountA(arg0: any, arg1: any, cb: Callback<any>): void;
      codePointCount(arg0: any, arg1: any): any;
      codePointCountP(arg0: any, arg1: any): Promise<any>;
      // public default java.util.stream.IntStream java.lang.CharSequence.codePoints()
      codePointsA( cb: Callback<Java.IntStream>): void;
      codePoints(): Java.IntStream;
      codePointsP(): Promise<Java.IntStream>;
      // public int java.lang.String.compareTo(java.lang.String)
      compareToA(arg0: Java.String, cb: Callback<any>): void;
      compareTo(arg0: Java.String): any;
      compareToP(arg0: Java.String): Promise<any>;
      // public int java.lang.String.compareTo(java.lang.Object)
      compareToA(arg0: Java.Object, cb: Callback<any>): void;
      compareTo(arg0: Java.Object): any;
      compareToP(arg0: Java.Object): Promise<any>;
      // public int java.lang.String.compareToIgnoreCase(java.lang.String)
      compareToIgnoreCaseA(arg0: Java.String, cb: Callback<any>): void;
      compareToIgnoreCase(arg0: Java.String): any;
      compareToIgnoreCaseP(arg0: Java.String): Promise<any>;
      // public java.lang.String java.lang.String.concat(java.lang.String)
      concatA(arg0: Java.String, cb: Callback<Java.String>): void;
      concat(arg0: Java.String): Java.String;
      concatP(arg0: Java.String): Promise<Java.String>;
      // public boolean java.lang.String.contains(java.lang.CharSequence)
      containsA(arg0: any, cb: Callback<any>): void;
      contains(arg0: any): any;
      containsP(arg0: any): Promise<any>;
      // public boolean java.lang.String.contentEquals(java.lang.StringBuffer)
      contentEqualsA(arg0: any, cb: Callback<any>): void;
      contentEquals(arg0: any): any;
      contentEqualsP(arg0: any): Promise<any>;
      // public boolean java.lang.String.contentEquals(java.lang.CharSequence)
      contentEqualsA(arg0: any, cb: Callback<any>): void;
      contentEquals(arg0: any): any;
      contentEqualsP(arg0: any): Promise<any>;
      // public boolean java.lang.String.endsWith(java.lang.String)
      endsWithA(arg0: Java.String, cb: Callback<any>): void;
      endsWith(arg0: Java.String): any;
      endsWithP(arg0: Java.String): Promise<any>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: Java.Object, cb: Callback<any>): void;
      equals(arg0: Java.Object): any;
      equalsP(arg0: Java.Object): Promise<any>;
      // public boolean java.lang.String.equalsIgnoreCase(java.lang.String)
      equalsIgnoreCaseA(arg0: Java.String, cb: Callback<any>): void;
      equalsIgnoreCase(arg0: Java.String): any;
      equalsIgnoreCaseP(arg0: Java.String): Promise<any>;
      // public void java.lang.String.getBytes(int,int,byte[],int)
      getBytesA(arg0: any, arg1: any, arg2: any, arg3: any, cb: Callback<any>): void;
      getBytes(arg0: any, arg1: any, arg2: any, arg3: any): any;
      getBytesP(arg0: any, arg1: any, arg2: any, arg3: any): Promise<any>;
      // public byte[] java.lang.String.getBytes(java.nio.charset.Charset)
      getBytesA(arg0: any, cb: Callback<any>): void;
      getBytes(arg0: any): any;
      getBytesP(arg0: any): Promise<any>;
      // public byte[] java.lang.String.getBytes(java.lang.String) throws java.io.UnsupportedEncodingException
      getBytesA(arg0: Java.String, cb: Callback<any>): void;
      getBytes(arg0: Java.String): any;
      getBytesP(arg0: Java.String): Promise<any>;
      // public byte[] java.lang.String.getBytes()
      getBytesA( cb: Callback<any>): void;
      getBytes(): any;
      getBytesP(): Promise<any>;
      // public void java.lang.String.getChars(int,int,char[],int)
      getCharsA(arg0: any, arg1: any, arg2: any, arg3: any, cb: Callback<any>): void;
      getChars(arg0: any, arg1: any, arg2: any, arg3: any): any;
      getCharsP(arg0: any, arg1: any, arg2: any, arg3: any): Promise<any>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class<any>>): void;
      getClass(): Java.Class<any>;
      getClassP(): Promise<Java.Class<any>>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<any>): void;
      hashCode(): any;
      hashCodeP(): Promise<any>;
      // public int java.lang.String.indexOf(java.lang.String,int)
      indexOfA(arg0: Java.String, arg1: any, cb: Callback<any>): void;
      indexOf(arg0: Java.String, arg1: any): any;
      indexOfP(arg0: Java.String, arg1: any): Promise<any>;
      // public int java.lang.String.indexOf(int,int)
      indexOfA(arg0: any, arg1: any, cb: Callback<any>): void;
      indexOf(arg0: any, arg1: any): any;
      indexOfP(arg0: any, arg1: any): Promise<any>;
      // public int java.lang.String.indexOf(java.lang.String)
      indexOfA(arg0: Java.String, cb: Callback<any>): void;
      indexOf(arg0: Java.String): any;
      indexOfP(arg0: Java.String): Promise<any>;
      // public int java.lang.String.indexOf(int)
      indexOfA(arg0: any, cb: Callback<any>): void;
      indexOf(arg0: any): any;
      indexOfP(arg0: any): Promise<any>;
      // public native java.lang.String java.lang.String.intern()
      internA( cb: Callback<Java.String>): void;
      intern(): Java.String;
      internP(): Promise<Java.String>;
      // public boolean java.lang.String.isEmpty()
      isEmptyA( cb: Callback<any>): void;
      isEmpty(): any;
      isEmptyP(): Promise<any>;
      // public int java.lang.String.lastIndexOf(java.lang.String,int)
      lastIndexOfA(arg0: Java.String, arg1: any, cb: Callback<any>): void;
      lastIndexOf(arg0: Java.String, arg1: any): any;
      lastIndexOfP(arg0: Java.String, arg1: any): Promise<any>;
      // public int java.lang.String.lastIndexOf(int,int)
      lastIndexOfA(arg0: any, arg1: any, cb: Callback<any>): void;
      lastIndexOf(arg0: any, arg1: any): any;
      lastIndexOfP(arg0: any, arg1: any): Promise<any>;
      // public int java.lang.String.lastIndexOf(java.lang.String)
      lastIndexOfA(arg0: Java.String, cb: Callback<any>): void;
      lastIndexOf(arg0: Java.String): any;
      lastIndexOfP(arg0: Java.String): Promise<any>;
      // public int java.lang.String.lastIndexOf(int)
      lastIndexOfA(arg0: any, cb: Callback<any>): void;
      lastIndexOf(arg0: any): any;
      lastIndexOfP(arg0: any): Promise<any>;
      // public int java.lang.String.length()
      lengthA( cb: Callback<any>): void;
      length(): any;
      lengthP(): Promise<any>;
      // public boolean java.lang.String.matches(java.lang.String)
      matchesA(arg0: Java.String, cb: Callback<any>): void;
      matches(arg0: Java.String): any;
      matchesP(arg0: Java.String): Promise<any>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<any>): void;
      notify(): any;
      notifyP(): Promise<any>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<any>): void;
      notifyAll(): any;
      notifyAllP(): Promise<any>;
      // public int java.lang.String.offsetByCodePoints(int,int)
      offsetByCodePointsA(arg0: any, arg1: any, cb: Callback<any>): void;
      offsetByCodePoints(arg0: any, arg1: any): any;
      offsetByCodePointsP(arg0: any, arg1: any): Promise<any>;
      // public boolean java.lang.String.regionMatches(boolean,int,java.lang.String,int,int)
      regionMatchesA(arg0: any, arg1: any, arg2: Java.String, arg3: any, arg4: any, cb: Callback<any>): void;
      regionMatches(arg0: any, arg1: any, arg2: Java.String, arg3: any, arg4: any): any;
      regionMatchesP(arg0: any, arg1: any, arg2: Java.String, arg3: any, arg4: any): Promise<any>;
      // public boolean java.lang.String.regionMatches(int,java.lang.String,int,int)
      regionMatchesA(arg0: any, arg1: Java.String, arg2: any, arg3: any, cb: Callback<any>): void;
      regionMatches(arg0: any, arg1: Java.String, arg2: any, arg3: any): any;
      regionMatchesP(arg0: any, arg1: Java.String, arg2: any, arg3: any): Promise<any>;
      // public java.lang.String java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)
      replaceA(arg0: any, arg1: any, cb: Callback<Java.String>): void;
      replace(arg0: any, arg1: any): Java.String;
      replaceP(arg0: any, arg1: any): Promise<Java.String>;
      // public java.lang.String java.lang.String.replace(char,char)
      replaceA(arg0: any, arg1: any, cb: Callback<Java.String>): void;
      replace(arg0: any, arg1: any): Java.String;
      replaceP(arg0: any, arg1: any): Promise<Java.String>;
      // public java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String)
      replaceAllA(arg0: Java.String, arg1: Java.String, cb: Callback<Java.String>): void;
      replaceAll(arg0: Java.String, arg1: Java.String): Java.String;
      replaceAllP(arg0: Java.String, arg1: Java.String): Promise<Java.String>;
      // public java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String)
      replaceFirstA(arg0: Java.String, arg1: Java.String, cb: Callback<Java.String>): void;
      replaceFirst(arg0: Java.String, arg1: Java.String): Java.String;
      replaceFirstP(arg0: Java.String, arg1: Java.String): Promise<Java.String>;
      // public java.lang.String[] java.lang.String.split(java.lang.String,int)
      splitA(arg0: Java.String, arg1: any, cb: Callback<Java.String[]>): void;
      split(arg0: Java.String, arg1: any): Java.String[];
      splitP(arg0: Java.String, arg1: any): Promise<Java.String[]>;
      // public java.lang.String[] java.lang.String.split(java.lang.String)
      splitA(arg0: Java.String, cb: Callback<Java.String[]>): void;
      split(arg0: Java.String): Java.String[];
      splitP(arg0: Java.String): Promise<Java.String[]>;
      // public boolean java.lang.String.startsWith(java.lang.String,int)
      startsWithA(arg0: Java.String, arg1: any, cb: Callback<any>): void;
      startsWith(arg0: Java.String, arg1: any): any;
      startsWithP(arg0: Java.String, arg1: any): Promise<any>;
      // public boolean java.lang.String.startsWith(java.lang.String)
      startsWithA(arg0: Java.String, cb: Callback<any>): void;
      startsWith(arg0: Java.String): any;
      startsWithP(arg0: Java.String): Promise<any>;
      // public java.lang.CharSequence java.lang.String.subSequence(int,int)
      subSequenceA(arg0: any, arg1: any, cb: Callback<any>): void;
      subSequence(arg0: any, arg1: any): any;
      subSequenceP(arg0: any, arg1: any): Promise<any>;
      // public java.lang.String java.lang.String.substring(int,int)
      substringA(arg0: any, arg1: any, cb: Callback<Java.String>): void;
      substring(arg0: any, arg1: any): Java.String;
      substringP(arg0: any, arg1: any): Promise<Java.String>;
      // public java.lang.String java.lang.String.substring(int)
      substringA(arg0: any, cb: Callback<Java.String>): void;
      substring(arg0: any): Java.String;
      substringP(arg0: any): Promise<Java.String>;
      // public char[] java.lang.String.toCharArray()
      toCharArrayA( cb: Callback<any>): void;
      toCharArray(): any;
      toCharArrayP(): Promise<any>;
      // public java.lang.String java.lang.String.toLowerCase(java.util.Locale)
      toLowerCaseA(arg0: any, cb: Callback<Java.String>): void;
      toLowerCase(arg0: any): Java.String;
      toLowerCaseP(arg0: any): Promise<Java.String>;
      // public java.lang.String java.lang.String.toLowerCase()
      toLowerCaseA( cb: Callback<Java.String>): void;
      toLowerCase(): Java.String;
      toLowerCaseP(): Promise<Java.String>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<Java.String>): void;
      toString(): Java.String;
      toStringP(): Promise<Java.String>;
      // public java.lang.String java.lang.String.toUpperCase(java.util.Locale)
      toUpperCaseA(arg0: any, cb: Callback<Java.String>): void;
      toUpperCase(arg0: any): Java.String;
      toUpperCaseP(arg0: any): Promise<Java.String>;
      // public java.lang.String java.lang.String.toUpperCase()
      toUpperCaseA( cb: Callback<Java.String>): void;
      toUpperCase(): Java.String;
      toUpperCaseP(): Promise<Java.String>;
      // public java.lang.String java.lang.String.trim()
      trimA( cb: Callback<Java.String>): void;
      trim(): Java.String;
      trimP(): Promise<Java.String>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: any, arg1: any, cb: Callback<any>): void;
      wait(arg0: any, arg1: any): any;
      waitP(arg0: any, arg1: any): Promise<any>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: any, cb: Callback<any>): void;
      wait(arg0: any): any;
      waitP(arg0: any): Promise<any>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<any>): void;
      wait(): any;
      waitP(): Promise<any>;
    }
    export module String {
      export interface Static {
        CASE_INSENSITIVE_ORDER: object_t;
        class: Java.Class;
        new (arg0: any, arg1: any, arg2: any, arg3: any): java.lang.String;
        new (arg0: any, arg1: any, arg2: any, arg3: Java.String): java.lang.String;
        new (arg0: any, arg1: any, arg2: any, arg3: any): java.lang.String;
        new (arg0: any, arg1: any, arg2: any): java.lang.String;
        new (arg0: any, arg1: any, arg2: any): java.lang.String;
        new (arg0: any, arg1: any, arg2: any): java.lang.String;
        new (arg0: any, arg1: any): java.lang.String;
        new (arg0: any, arg1: Java.String): java.lang.String;
        new (arg0: any, arg1: any): java.lang.String;
        new (arg0: any): java.lang.String;
        new (arg0: any): java.lang.String;
        new (arg0: Java.String): java.lang.String;
        new (arg0: any): java.lang.String;
        new (arg0: any): java.lang.String;
        new (): java.lang.String;
        // public static java.lang.String java.lang.String.copyValueOf(char[],int,int)
        copyValueOfA(arg0: any, arg1: any, arg2: any, cb: Callback<Java.String>): void;
        copyValueOf(arg0: any, arg1: any, arg2: any): Java.String;
        copyValueOfP(arg0: any, arg1: any, arg2: any): Promise<Java.String>;
        // public static java.lang.String java.lang.String.copyValueOf(char[])
        copyValueOfA(arg0: any, cb: Callback<Java.String>): void;
        copyValueOf(arg0: any): Java.String;
        copyValueOfP(arg0: any): Promise<Java.String>;
        // public static java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object...)
        formatA(arg0: any, arg1: Java.String, arg2: Java.Object[], cb: Callback<Java.String>): void;
        format(arg0: any, arg1: Java.String, ...arg2: Java.Object[]): Java.String;
        format(arg0: any, arg1: Java.String, arg2: Java.Object[]): Java.String;
        formatP(arg0: any, arg1: Java.String, ...arg2: Java.Object[]): Promise<Java.String>;
        formatP(arg0: any, arg1: Java.String, arg2: Java.Object[]): Promise<Java.String>;
        // public static java.lang.String java.lang.String.format(java.lang.String,java.lang.Object...)
        formatA(arg0: Java.String, arg1: Java.Object[], cb: Callback<Java.String>): void;
        format(arg0: Java.String, ...arg1: Java.Object[]): Java.String;
        format(arg0: Java.String, arg1: Java.Object[]): Java.String;
        formatP(arg0: Java.String, ...arg1: Java.Object[]): Promise<Java.String>;
        formatP(arg0: Java.String, arg1: Java.Object[]): Promise<Java.String>;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence...)
        joinA(arg0: any, arg1: any, cb: Callback<Java.String>): void;
        join(arg0: any, ...arg1: any): Java.String;
        join(arg0: any, arg1: any): Java.String;
        joinP(arg0: any, ...arg1: any): Promise<Java.String>;
        joinP(arg0: any, arg1: any): Promise<Java.String>;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.Iterable<? extends java.lang.CharSequence>)
        joinA(arg0: any, arg1: any, cb: Callback<Java.String>): void;
        join(arg0: any, arg1: any): Java.String;
        joinP(arg0: any, arg1: any): Promise<Java.String>;
        // public static java.lang.String java.lang.String.valueOf(char[],int,int)
        valueOfA(arg0: any, arg1: any, arg2: any, cb: Callback<Java.String>): void;
        valueOf(arg0: any, arg1: any, arg2: any): Java.String;
        valueOfP(arg0: any, arg1: any, arg2: any): Promise<Java.String>;
        // public static java.lang.String java.lang.String.valueOf(java.lang.Object)
        valueOfA(arg0: Java.Object, cb: Callback<Java.String>): void;
        valueOf(arg0: Java.Object): Java.String;
        valueOfP(arg0: Java.Object): Promise<Java.String>;
        // public static java.lang.String java.lang.String.valueOf(char[])
        valueOfA(arg0: any, cb: Callback<Java.String>): void;
        valueOf(arg0: any): Java.String;
        valueOfP(arg0: any): Promise<Java.String>;
        // public static java.lang.String java.lang.String.valueOf(boolean)
        valueOfA(arg0: any, cb: Callback<Java.String>): void;
        valueOf(arg0: any): Java.String;
        valueOfP(arg0: any): Promise<Java.String>;
        // public static java.lang.String java.lang.String.valueOf(long)
        valueOfA(arg0: any, cb: Callback<Java.String>): void;
        valueOf(arg0: any): Java.String;
        valueOfP(arg0: any): Promise<Java.String>;
        // public static java.lang.String java.lang.String.valueOf(int)
        valueOfA(arg0: any, cb: Callback<Java.String>): void;
        valueOf(arg0: any): Java.String;
        valueOfP(arg0: any): Promise<Java.String>;
        // public static java.lang.String java.lang.String.valueOf(float)
        valueOfA(arg0: any, cb: Callback<Java.String>): void;
        valueOf(arg0: any): Java.String;
        valueOfP(arg0: any): Promise<Java.String>;
        // public static java.lang.String java.lang.String.valueOf(double)
        valueOfA(arg0: any, cb: Callback<Java.String>): void;
        valueOf(arg0: any): Java.String;
        valueOfP(arg0: any): Promise<Java.String>;
        // public static java.lang.String java.lang.String.valueOf(char)
        valueOfA(arg0: any, cb: Callback<Java.String>): void;
        valueOf(arg0: any): Java.String;
        valueOfP(arg0: any): Promise<Java.String>;
      }
    }
  }

  export module java.util {
    export interface Collection<E> extends Java.java.lang.Iterable {
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: any, cb: Callback<any>): void;
      add(arg0: any): any;
      addP(arg0: any): Promise<any>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: any, cb: Callback<any>): void;
      addAll(arg0: any): any;
      addAllP(arg0: any): Promise<any>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<any>): void;
      clear(): any;
      clearP(): Promise<any>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: Java.Object, cb: Callback<any>): void;
      contains(arg0: Java.Object): any;
      containsP(arg0: Java.Object): Promise<any>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection<any>, cb: Callback<any>): void;
      containsAll(arg0: Java.Collection<any>): any;
      containsAllP(arg0: Java.Collection<any>): Promise<any>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: Java.Object, cb: Callback<any>): void;
      equals(arg0: Java.Object): any;
      equalsP(arg0: Java.Object): Promise<any>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: any, cb: Callback<any>): void;
      forEach(arg0: any): any;
      forEachP(arg0: any): Promise<any>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<any>): void;
      hashCode(): any;
      hashCodeP(): Promise<any>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<any>): void;
      isEmpty(): any;
      isEmptyP(): Promise<any>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iteratorA( cb: Callback<any>): void;
      iterator(): any;
      iteratorP(): Promise<any>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<any>): void;
      parallelStream(): any;
      parallelStreamP(): Promise<any>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: Java.Object, cb: Callback<any>): void;
      remove(arg0: Java.Object): any;
      removeP(arg0: Java.Object): Promise<any>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection<any>, cb: Callback<any>): void;
      removeAll(arg0: Java.Collection<any>): any;
      removeAllP(arg0: Java.Collection<any>): Promise<any>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: any, cb: Callback<any>): void;
      removeIf(arg0: any): any;
      removeIfP(arg0: any): Promise<any>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection<any>, cb: Callback<any>): void;
      retainAll(arg0: Java.Collection<any>): any;
      retainAllP(arg0: Java.Collection<any>): Promise<any>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<any>): void;
      size(): any;
      sizeP(): Promise<any>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliteratorA( cb: Callback<any>): void;
      spliterator(): any;
      spliteratorP(): Promise<any>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<any>): void;
      stream(): any;
      streamP(): Promise<any>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: any, cb: Callback<any>): void;
      toArray(arg0: any): any;
      toArrayP(arg0: any): Promise<any>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<Java.Object[]>): void;
      toArray(): Java.Object[];
      toArrayP(): Promise<Java.Object[]>;
    }
    export module Collection {
      export interface Static {
        class: Java.Class;
      }
    }
  }

  export module java.util.function_ {
    export interface Consumer<T> extends Java.java.lang.Object {
      // public abstract void java.util.function.Consumer.accept(T)
      acceptA(arg0: any, cb: Callback<any>): void;
      accept(arg0: any): any;
      acceptP(arg0: any): Promise<any>;
      // public default java.util.function.Consumer<T> java.util.function.Consumer.andThen(java.util.function.Consumer<? super T>)
      andThenA(arg0: any, cb: Callback<any>): void;
      andThen(arg0: any): any;
      andThenP(arg0: any): Promise<any>;
    }
    export module Consumer {
      export interface Static {
        class: Java.Class;
      }
    }
  }

  export module java.util.function_ {
    export interface DoubleConsumer extends Java.java.lang.Object {
      // public abstract void java.util.function.DoubleConsumer.accept(double)
      acceptA(arg0: any, cb: Callback<any>): void;
      accept(arg0: any): any;
      acceptP(arg0: any): Promise<any>;
      // public default java.util.function.DoubleConsumer java.util.function.DoubleConsumer.andThen(java.util.function.DoubleConsumer)
      andThenA(arg0: Java.DoubleConsumer, cb: Callback<Java.DoubleConsumer>): void;
      andThen(arg0: Java.DoubleConsumer): Java.DoubleConsumer;
      andThenP(arg0: Java.DoubleConsumer): Promise<Java.DoubleConsumer>;
    }
    export module DoubleConsumer {
      export interface Static {
        class: Java.Class;
      }
    }
  }

  export module java.util.function_ {
    export interface Function<T ,R> extends Java.java.lang.Object {
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThenA(arg0: any, cb: Callback<any>): void;
      andThen(arg0: any): any;
      andThenP(arg0: any): Promise<any>;
      // public abstract R java.util.function.Function.apply(T)
      applyA(arg0: any, cb: Callback<any>): void;
      apply(arg0: any): any;
      applyP(arg0: any): Promise<any>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      composeA(arg0: any, cb: Callback<any>): void;
      compose(arg0: any): any;
      composeP(arg0: any): Promise<any>;
    }
    export module Function {
      export interface Static {
        class: Java.Class;
        // public static <T> java.util.function.Function<T, T> java.util.function.Function.identity()
        identityA( cb: Callback<any>): void;
        identity(): any;
        identityP(): Promise<any>;
      }
    }
  }

  export module java.util.function_ {
    export interface IntConsumer extends Java.java.lang.Object {
      // public abstract void java.util.function.IntConsumer.accept(int)
      acceptA(arg0: any, cb: Callback<any>): void;
      accept(arg0: any): any;
      acceptP(arg0: any): Promise<any>;
      // public default java.util.function.IntConsumer java.util.function.IntConsumer.andThen(java.util.function.IntConsumer)
      andThenA(arg0: Java.IntConsumer, cb: Callback<Java.IntConsumer>): void;
      andThen(arg0: Java.IntConsumer): Java.IntConsumer;
      andThenP(arg0: Java.IntConsumer): Promise<Java.IntConsumer>;
    }
    export module IntConsumer {
      export interface Static {
        class: Java.Class;
      }
    }
  }

  export module java.util.function_ {
    export interface LongConsumer extends Java.java.lang.Object {
      // public abstract void java.util.function.LongConsumer.accept(long)
      acceptA(arg0: any, cb: Callback<any>): void;
      accept(arg0: any): any;
      acceptP(arg0: any): Promise<any>;
      // public default java.util.function.LongConsumer java.util.function.LongConsumer.andThen(java.util.function.LongConsumer)
      andThenA(arg0: Java.LongConsumer, cb: Callback<Java.LongConsumer>): void;
      andThen(arg0: Java.LongConsumer): Java.LongConsumer;
      andThenP(arg0: Java.LongConsumer): Promise<Java.LongConsumer>;
    }
    export module LongConsumer {
      export interface Static {
        class: Java.Class;
      }
    }
  }

  export module java.util {
    export interface Iterator<E> extends Java.java.lang.Object {
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemainingA(arg0: any, cb: Callback<any>): void;
      forEachRemaining(arg0: any): any;
      forEachRemainingP(arg0: any): Promise<any>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNextA( cb: Callback<any>): void;
      hasNext(): any;
      hasNextP(): Promise<any>;
      // public abstract E java.util.Iterator.next()
      nextA( cb: Callback<any>): void;
      next(): any;
      nextP(): Promise<any>;
      // public default void java.util.Iterator.remove()
      removeA( cb: Callback<any>): void;
      remove(): any;
      removeP(): Promise<any>;
    }
    export module Iterator {
      export interface Static {
        class: Java.Class;
      }
    }
  }

  export module java.util {
    export interface List<E> extends Java.java.util.Collection {
      // public abstract void java.util.List.add(int,E)
      addA(arg0: any, arg1: any, cb: Callback<any>): void;
      add(arg0: any, arg1: any): any;
      addP(arg0: any, arg1: any): Promise<any>;
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: any, cb: Callback<any>): void;
      add(arg0: any): any;
      addP(arg0: any): Promise<any>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAllA(arg0: any, arg1: any, cb: Callback<any>): void;
      addAll(arg0: any, arg1: any): any;
      addAllP(arg0: any, arg1: any): Promise<any>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: any, cb: Callback<any>): void;
      addAll(arg0: any): any;
      addAllP(arg0: any): Promise<any>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<any>): void;
      clear(): any;
      clearP(): Promise<any>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: Java.Object, cb: Callback<any>): void;
      contains(arg0: Java.Object): any;
      containsP(arg0: Java.Object): Promise<any>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection<any>, cb: Callback<any>): void;
      containsAll(arg0: Java.Collection<any>): any;
      containsAllP(arg0: Java.Collection<any>): Promise<any>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: Java.Object, cb: Callback<any>): void;
      equals(arg0: Java.Object): any;
      equalsP(arg0: Java.Object): Promise<any>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: any, cb: Callback<any>): void;
      forEach(arg0: any): any;
      forEachP(arg0: any): Promise<any>;
      // public abstract E java.util.List.get(int)
      getA(arg0: any, cb: Callback<any>): void;
      get(arg0: any): any;
      getP(arg0: any): Promise<any>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<any>): void;
      hashCode(): any;
      hashCodeP(): Promise<any>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOfA(arg0: Java.Object, cb: Callback<any>): void;
      indexOf(arg0: Java.Object): any;
      indexOfP(arg0: Java.Object): Promise<any>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<any>): void;
      isEmpty(): any;
      isEmptyP(): Promise<any>;
      // public abstract java.util.Iterator<T> java.lang.Iterable.iterator()
      iteratorA( cb: Callback<any>): void;
      iterator(): any;
      iteratorP(): Promise<any>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOfA(arg0: Java.Object, cb: Callback<any>): void;
      lastIndexOf(arg0: Java.Object): any;
      lastIndexOfP(arg0: Java.Object): Promise<any>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIteratorA(arg0: any, cb: Callback<any>): void;
      listIterator(arg0: any): any;
      listIteratorP(arg0: any): Promise<any>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIteratorA( cb: Callback<any>): void;
      listIterator(): any;
      listIteratorP(): Promise<any>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<any>): void;
      parallelStream(): any;
      parallelStreamP(): Promise<any>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: Java.Object, cb: Callback<any>): void;
      remove(arg0: Java.Object): any;
      removeP(arg0: Java.Object): Promise<any>;
      // public abstract E java.util.List.remove(int)
      removeA(arg0: any, cb: Callback<any>): void;
      remove(arg0: any): any;
      removeP(arg0: any): Promise<any>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection<any>, cb: Callback<any>): void;
      removeAll(arg0: Java.Collection<any>): any;
      removeAllP(arg0: Java.Collection<any>): Promise<any>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: any, cb: Callback<any>): void;
      removeIf(arg0: any): any;
      removeIfP(arg0: any): Promise<any>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAllA(arg0: any, cb: Callback<any>): void;
      replaceAll(arg0: any): any;
      replaceAllP(arg0: any): Promise<any>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection<any>, cb: Callback<any>): void;
      retainAll(arg0: Java.Collection<any>): any;
      retainAllP(arg0: Java.Collection<any>): Promise<any>;
      // public abstract E java.util.List.set(int,E)
      setA(arg0: any, arg1: any, cb: Callback<any>): void;
      set(arg0: any, arg1: any): any;
      setP(arg0: any, arg1: any): Promise<any>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<any>): void;
      size(): any;
      sizeP(): Promise<any>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sortA(arg0: any, cb: Callback<any>): void;
      sort(arg0: any): any;
      sortP(arg0: any): Promise<any>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliteratorA( cb: Callback<any>): void;
      spliterator(): any;
      spliteratorP(): Promise<any>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<any>): void;
      stream(): any;
      streamP(): Promise<any>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subListA(arg0: any, arg1: any, cb: Callback<any>): void;
      subList(arg0: any, arg1: any): any;
      subListP(arg0: any, arg1: any): Promise<any>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: any, cb: Callback<any>): void;
      toArray(arg0: any): any;
      toArrayP(arg0: any): Promise<any>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<Java.Object[]>): void;
      toArray(): Java.Object[];
      toArrayP(): Promise<Java.Object[]>;
    }
    export module List {
      export interface Static {
        class: Java.Class;
      }
    }
  }

  export module java.util.stream {
    export interface BaseStream<T ,S> extends Java.java.lang.Object {
      // public abstract void java.util.stream.BaseStream.close()
      closeA( cb: Callback<any>): void;
      close(): any;
      closeP(): Promise<any>;
      // public abstract boolean java.util.stream.BaseStream.isParallel()
      isParallelA( cb: Callback<any>): void;
      isParallel(): any;
      isParallelP(): Promise<any>;
      // public abstract java.util.Iterator<T> java.util.stream.BaseStream.iterator()
      iteratorA( cb: Callback<any>): void;
      iterator(): any;
      iteratorP(): Promise<any>;
      // public abstract S java.util.stream.BaseStream.onClose(java.lang.Runnable)
      onCloseA(arg0: any, cb: Callback<any>): void;
      onClose(arg0: any): any;
      onCloseP(arg0: any): Promise<any>;
      // public abstract S java.util.stream.BaseStream.parallel()
      parallelA( cb: Callback<any>): void;
      parallel(): any;
      parallelP(): Promise<any>;
      // public abstract S java.util.stream.BaseStream.sequential()
      sequentialA( cb: Callback<any>): void;
      sequential(): any;
      sequentialP(): Promise<any>;
      // public abstract java.util.Spliterator<T> java.util.stream.BaseStream.spliterator()
      spliteratorA( cb: Callback<any>): void;
      spliterator(): any;
      spliteratorP(): Promise<any>;
      // public abstract S java.util.stream.BaseStream.unordered()
      unorderedA( cb: Callback<any>): void;
      unordered(): any;
      unorderedP(): Promise<any>;
    }
    export module BaseStream {
      export interface Static {
        class: Java.Class;
      }
    }
  }

  export module java.util.stream {
    export interface Collector<T ,A ,R> extends Java.java.lang.Object {
      // public abstract java.util.function.BiConsumer<A, T> java.util.stream.Collector.accumulator()
      accumulatorA( cb: Callback<any>): void;
      accumulator(): any;
      accumulatorP(): Promise<any>;
      // public abstract java.util.Set<java.util.stream.Collector$Characteristics> java.util.stream.Collector.characteristics()
      characteristicsA( cb: Callback<any>): void;
      characteristics(): any;
      characteristicsP(): Promise<any>;
      // public abstract java.util.function.BinaryOperator<A> java.util.stream.Collector.combiner()
      combinerA( cb: Callback<any>): void;
      combiner(): any;
      combinerP(): Promise<any>;
      // public abstract java.util.function.Function<A, R> java.util.stream.Collector.finisher()
      finisherA( cb: Callback<any>): void;
      finisher(): any;
      finisherP(): Promise<any>;
      // public abstract java.util.function.Supplier<A> java.util.stream.Collector.supplier()
      supplierA( cb: Callback<any>): void;
      supplier(): any;
      supplierP(): Promise<any>;
    }
    export module Collector {
      export interface Static {
        class: Java.Class;
        // public static <T,A,R> java.util.stream.Collector<T, A, R> java.util.stream.Collector.of(java.util.function.Supplier<A>,java.util.function.BiConsumer<A, T>,java.util.function.BinaryOperator<A>,java.util.function.Function<A, R>,java.util.stream.Collector$Characteristics...)
        ofA(arg0: any, arg1: any, arg2: any, arg3: any, arg4: Java.Collector$Characteristics[], cb: Callback<any>): void;
        of(arg0: any, arg1: any, arg2: any, arg3: any, ...arg4: Java.Collector$Characteristics[]): any;
        of(arg0: any, arg1: any, arg2: any, arg3: any, arg4: Java.Collector$Characteristics[]): any;
        ofP(arg0: any, arg1: any, arg2: any, arg3: any, ...arg4: Java.Collector$Characteristics[]): Promise<any>;
        ofP(arg0: any, arg1: any, arg2: any, arg3: any, arg4: Java.Collector$Characteristics[]): Promise<any>;
        // public static <T,R> java.util.stream.Collector<T, R, R> java.util.stream.Collector.of(java.util.function.Supplier<R>,java.util.function.BiConsumer<R, T>,java.util.function.BinaryOperator<R>,java.util.stream.Collector$Characteristics...)
        ofA(arg0: any, arg1: any, arg2: any, arg3: Java.Collector$Characteristics[], cb: Callback<any>): void;
        of(arg0: any, arg1: any, arg2: any, ...arg3: Java.Collector$Characteristics[]): any;
        of(arg0: any, arg1: any, arg2: any, arg3: Java.Collector$Characteristics[]): any;
        ofP(arg0: any, arg1: any, arg2: any, ...arg3: Java.Collector$Characteristics[]): Promise<any>;
        ofP(arg0: any, arg1: any, arg2: any, arg3: Java.Collector$Characteristics[]): Promise<any>;
      }
    }
  }

  export module java.util.stream {
    export interface Collector$Characteristics extends Java.java.lang.Enum {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareToA(arg0: Java.Object, cb: Callback<any>): void;
      compareTo(arg0: Java.Object): any;
      compareToP(arg0: Java.Object): Promise<any>;
      // public final int java.lang.Enum.compareTo(E)
      compareToA(arg0: any, cb: Callback<any>): void;
      compareTo(arg0: any): any;
      compareToP(arg0: any): Promise<any>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: Java.Object, cb: Callback<any>): void;
      equals(arg0: Java.Object): any;
      equalsP(arg0: Java.Object): Promise<any>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class<any>>): void;
      getClass(): Java.Class<any>;
      getClassP(): Promise<Java.Class<any>>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClassA( cb: Callback<any>): void;
      getDeclaringClass(): any;
      getDeclaringClassP(): Promise<any>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<any>): void;
      hashCode(): any;
      hashCodeP(): Promise<any>;
      // public final java.lang.String java.lang.Enum.name()
      nameA( cb: Callback<Java.String>): void;
      name(): Java.String;
      nameP(): Promise<Java.String>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<any>): void;
      notify(): any;
      notifyP(): Promise<any>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<any>): void;
      notifyAll(): any;
      notifyAllP(): Promise<any>;
      // public final int java.lang.Enum.ordinal()
      ordinalA( cb: Callback<any>): void;
      ordinal(): any;
      ordinalP(): Promise<any>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<Java.String>): void;
      toString(): Java.String;
      toStringP(): Promise<Java.String>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: any, arg1: any, cb: Callback<any>): void;
      wait(arg0: any, arg1: any): any;
      waitP(arg0: any, arg1: any): Promise<any>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: any, cb: Callback<any>): void;
      wait(arg0: any): any;
      waitP(arg0: any): Promise<any>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<any>): void;
      wait(): any;
      waitP(): Promise<any>;
    }
    export module Collector$Characteristics {
      export interface Static {
        CONCURRENT: Java.Collector$Characteristics;
        UNORDERED: Java.Collector$Characteristics;
        IDENTITY_FINISH: Java.Collector$Characteristics;
        class: Java.Class;
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOfA(arg0: any, arg1: Java.String, cb: Callback<any>): void;
        valueOf(arg0: any, arg1: Java.String): any;
        valueOfP(arg0: any, arg1: Java.String): Promise<any>;
        // public static java.util.stream.Collector$Characteristics java.util.stream.Collector$Characteristics.valueOf(java.lang.String)
        valueOfA(arg0: Java.String, cb: Callback<Java.Collector$Characteristics>): void;
        valueOf(arg0: Java.String): Java.Collector$Characteristics;
        valueOfP(arg0: Java.String): Promise<Java.Collector$Characteristics>;
        // public static java.util.stream.Collector$Characteristics[] java.util.stream.Collector$Characteristics.values()
        valuesA( cb: Callback<Java.Collector$Characteristics[]>): void;
        values(): Java.Collector$Characteristics[];
        valuesP(): Promise<Java.Collector$Characteristics[]>;
      }
    }
  }

  export module java.util.stream {
    export interface Collectors extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: Java.Object, cb: Callback<any>): void;
      equals(arg0: Java.Object): any;
      equalsP(arg0: Java.Object): Promise<any>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class<any>>): void;
      getClass(): Java.Class<any>;
      getClassP(): Promise<Java.Class<any>>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<any>): void;
      hashCode(): any;
      hashCodeP(): Promise<any>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<any>): void;
      notify(): any;
      notifyP(): Promise<any>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<any>): void;
      notifyAll(): any;
      notifyAllP(): Promise<any>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<Java.String>): void;
      toString(): Java.String;
      toStringP(): Promise<Java.String>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: any, arg1: any, cb: Callback<any>): void;
      wait(arg0: any, arg1: any): any;
      waitP(arg0: any, arg1: any): Promise<any>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: any, cb: Callback<any>): void;
      wait(arg0: any): any;
      waitP(arg0: any): Promise<any>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<any>): void;
      wait(): any;
      waitP(): Promise<any>;
    }
    export module Collectors {
      export interface Static {
        class: Java.Class;
        // public static <T> java.util.stream.Collector<T, ?, java.lang.Double> java.util.stream.Collectors.averagingDouble(java.util.function.ToDoubleFunction<? super T>)
        averagingDoubleA(arg0: any, cb: Callback<any>): void;
        averagingDouble(arg0: any): any;
        averagingDoubleP(arg0: any): Promise<any>;
        // public static <T> java.util.stream.Collector<T, ?, java.lang.Double> java.util.stream.Collectors.averagingInt(java.util.function.ToIntFunction<? super T>)
        averagingIntA(arg0: any, cb: Callback<any>): void;
        averagingInt(arg0: any): any;
        averagingIntP(arg0: any): Promise<any>;
        // public static <T> java.util.stream.Collector<T, ?, java.lang.Double> java.util.stream.Collectors.averagingLong(java.util.function.ToLongFunction<? super T>)
        averagingLongA(arg0: any, cb: Callback<any>): void;
        averagingLong(arg0: any): any;
        averagingLongP(arg0: any): Promise<any>;
        // public static <T,A,R,RR> java.util.stream.Collector<T, A, RR> java.util.stream.Collectors.collectingAndThen(java.util.stream.Collector<T, A, R>,java.util.function.Function<R, RR>)
        collectingAndThenA(arg0: any, arg1: any, cb: Callback<any>): void;
        collectingAndThen(arg0: any, arg1: any): any;
        collectingAndThenP(arg0: any, arg1: any): Promise<any>;
        // public static <T> java.util.stream.Collector<T, ?, java.lang.Long> java.util.stream.Collectors.counting()
        countingA( cb: Callback<any>): void;
        counting(): any;
        countingP(): Promise<any>;
        // public static <T,K,D,A,M> java.util.stream.Collector<T, ?, M> java.util.stream.Collectors.groupingBy(java.util.function.Function<? super T, ? extends K>,java.util.function.Supplier<M>,java.util.stream.Collector<? super T, A, D>)
        groupingByA(arg0: any, arg1: any, arg2: any, cb: Callback<any>): void;
        groupingBy(arg0: any, arg1: any, arg2: any): any;
        groupingByP(arg0: any, arg1: any, arg2: any): Promise<any>;
        // public static <T,K,A,D> java.util.stream.Collector<T, ?, java.util.Map<K, D>> java.util.stream.Collectors.groupingBy(java.util.function.Function<? super T, ? extends K>,java.util.stream.Collector<? super T, A, D>)
        groupingByA(arg0: any, arg1: any, cb: Callback<any>): void;
        groupingBy(arg0: any, arg1: any): any;
        groupingByP(arg0: any, arg1: any): Promise<any>;
        // public static <T,K> java.util.stream.Collector<T, ?, java.util.Map<K, java.util.List<T>>> java.util.stream.Collectors.groupingBy(java.util.function.Function<? super T, ? extends K>)
        groupingByA(arg0: any, cb: Callback<any>): void;
        groupingBy(arg0: any): any;
        groupingByP(arg0: any): Promise<any>;
        // public static <T,K,A,D,M> java.util.stream.Collector<T, ?, M> java.util.stream.Collectors.groupingByConcurrent(java.util.function.Function<? super T, ? extends K>,java.util.function.Supplier<M>,java.util.stream.Collector<? super T, A, D>)
        groupingByConcurrentA(arg0: any, arg1: any, arg2: any, cb: Callback<any>): void;
        groupingByConcurrent(arg0: any, arg1: any, arg2: any): any;
        groupingByConcurrentP(arg0: any, arg1: any, arg2: any): Promise<any>;
        // public static <T,K,A,D> java.util.stream.Collector<T, ?, java.util.concurrent.ConcurrentMap<K, D>> java.util.stream.Collectors.groupingByConcurrent(java.util.function.Function<? super T, ? extends K>,java.util.stream.Collector<? super T, A, D>)
        groupingByConcurrentA(arg0: any, arg1: any, cb: Callback<any>): void;
        groupingByConcurrent(arg0: any, arg1: any): any;
        groupingByConcurrentP(arg0: any, arg1: any): Promise<any>;
        // public static <T,K> java.util.stream.Collector<T, ?, java.util.concurrent.ConcurrentMap<K, java.util.List<T>>> java.util.stream.Collectors.groupingByConcurrent(java.util.function.Function<? super T, ? extends K>)
        groupingByConcurrentA(arg0: any, cb: Callback<any>): void;
        groupingByConcurrent(arg0: any): any;
        groupingByConcurrentP(arg0: any): Promise<any>;
        // public static java.util.stream.Collector<java.lang.CharSequence, ?, java.lang.String> java.util.stream.Collectors.joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)
        joiningA(arg0: any, arg1: any, arg2: any, cb: Callback<any>): void;
        joining(arg0: any, arg1: any, arg2: any): any;
        joiningP(arg0: any, arg1: any, arg2: any): Promise<any>;
        // public static java.util.stream.Collector<java.lang.CharSequence, ?, java.lang.String> java.util.stream.Collectors.joining(java.lang.CharSequence)
        joiningA(arg0: any, cb: Callback<any>): void;
        joining(arg0: any): any;
        joiningP(arg0: any): Promise<any>;
        // public static java.util.stream.Collector<java.lang.CharSequence, ?, java.lang.String> java.util.stream.Collectors.joining()
        joiningA( cb: Callback<any>): void;
        joining(): any;
        joiningP(): Promise<any>;
        // public static <T,U,A,R> java.util.stream.Collector<T, ?, R> java.util.stream.Collectors.mapping(java.util.function.Function<? super T, ? extends U>,java.util.stream.Collector<? super U, A, R>)
        mappingA(arg0: any, arg1: any, cb: Callback<any>): void;
        mapping(arg0: any, arg1: any): any;
        mappingP(arg0: any, arg1: any): Promise<any>;
        // public static <T> java.util.stream.Collector<T, ?, java.util.Optional<T>> java.util.stream.Collectors.maxBy(java.util.Comparator<? super T>)
        maxByA(arg0: any, cb: Callback<any>): void;
        maxBy(arg0: any): any;
        maxByP(arg0: any): Promise<any>;
        // public static <T> java.util.stream.Collector<T, ?, java.util.Optional<T>> java.util.stream.Collectors.minBy(java.util.Comparator<? super T>)
        minByA(arg0: any, cb: Callback<any>): void;
        minBy(arg0: any): any;
        minByP(arg0: any): Promise<any>;
        // public static <T,D,A> java.util.stream.Collector<T, ?, java.util.Map<java.lang.Boolean, D>> java.util.stream.Collectors.partitioningBy(java.util.function.Predicate<? super T>,java.util.stream.Collector<? super T, A, D>)
        partitioningByA(arg0: any, arg1: any, cb: Callback<any>): void;
        partitioningBy(arg0: any, arg1: any): any;
        partitioningByP(arg0: any, arg1: any): Promise<any>;
        // public static <T> java.util.stream.Collector<T, ?, java.util.Map<java.lang.Boolean, java.util.List<T>>> java.util.stream.Collectors.partitioningBy(java.util.function.Predicate<? super T>)
        partitioningByA(arg0: any, cb: Callback<any>): void;
        partitioningBy(arg0: any): any;
        partitioningByP(arg0: any): Promise<any>;
        // public static <T,U> java.util.stream.Collector<T, ?, U> java.util.stream.Collectors.reducing(U,java.util.function.Function<? super T, ? extends U>,java.util.function.BinaryOperator<U>)
        reducingA(arg0: any, arg1: any, arg2: any, cb: Callback<any>): void;
        reducing(arg0: any, arg1: any, arg2: any): any;
        reducingP(arg0: any, arg1: any, arg2: any): Promise<any>;
        // public static <T> java.util.stream.Collector<T, ?, T> java.util.stream.Collectors.reducing(T,java.util.function.BinaryOperator<T>)
        reducingA(arg0: any, arg1: any, cb: Callback<any>): void;
        reducing(arg0: any, arg1: any): any;
        reducingP(arg0: any, arg1: any): Promise<any>;
        // public static <T> java.util.stream.Collector<T, ?, java.util.Optional<T>> java.util.stream.Collectors.reducing(java.util.function.BinaryOperator<T>)
        reducingA(arg0: any, cb: Callback<any>): void;
        reducing(arg0: any): any;
        reducingP(arg0: any): Promise<any>;
        // public static <T> java.util.stream.Collector<T, ?, java.util.DoubleSummaryStatistics> java.util.stream.Collectors.summarizingDouble(java.util.function.ToDoubleFunction<? super T>)
        summarizingDoubleA(arg0: any, cb: Callback<any>): void;
        summarizingDouble(arg0: any): any;
        summarizingDoubleP(arg0: any): Promise<any>;
        // public static <T> java.util.stream.Collector<T, ?, java.util.IntSummaryStatistics> java.util.stream.Collectors.summarizingInt(java.util.function.ToIntFunction<? super T>)
        summarizingIntA(arg0: any, cb: Callback<any>): void;
        summarizingInt(arg0: any): any;
        summarizingIntP(arg0: any): Promise<any>;
        // public static <T> java.util.stream.Collector<T, ?, java.util.LongSummaryStatistics> java.util.stream.Collectors.summarizingLong(java.util.function.ToLongFunction<? super T>)
        summarizingLongA(arg0: any, cb: Callback<any>): void;
        summarizingLong(arg0: any): any;
        summarizingLongP(arg0: any): Promise<any>;
        // public static <T> java.util.stream.Collector<T, ?, java.lang.Double> java.util.stream.Collectors.summingDouble(java.util.function.ToDoubleFunction<? super T>)
        summingDoubleA(arg0: any, cb: Callback<any>): void;
        summingDouble(arg0: any): any;
        summingDoubleP(arg0: any): Promise<any>;
        // public static <T> java.util.stream.Collector<T, ?, java.lang.Integer> java.util.stream.Collectors.summingInt(java.util.function.ToIntFunction<? super T>)
        summingIntA(arg0: any, cb: Callback<any>): void;
        summingInt(arg0: any): any;
        summingIntP(arg0: any): Promise<any>;
        // public static <T> java.util.stream.Collector<T, ?, java.lang.Long> java.util.stream.Collectors.summingLong(java.util.function.ToLongFunction<? super T>)
        summingLongA(arg0: any, cb: Callback<any>): void;
        summingLong(arg0: any): any;
        summingLongP(arg0: any): Promise<any>;
        // public static <T,C> java.util.stream.Collector<T, ?, C> java.util.stream.Collectors.toCollection(java.util.function.Supplier<C>)
        toCollectionA(arg0: any, cb: Callback<any>): void;
        toCollection(arg0: any): any;
        toCollectionP(arg0: any): Promise<any>;
        // public static <T,K,U,M> java.util.stream.Collector<T, ?, M> java.util.stream.Collectors.toConcurrentMap(java.util.function.Function<? super T, ? extends K>,java.util.function.Function<? super T, ? extends U>,java.util.function.BinaryOperator<U>,java.util.function.Supplier<M>)
        toConcurrentMapA(arg0: any, arg1: any, arg2: any, arg3: any, cb: Callback<any>): void;
        toConcurrentMap(arg0: any, arg1: any, arg2: any, arg3: any): any;
        toConcurrentMapP(arg0: any, arg1: any, arg2: any, arg3: any): Promise<any>;
        // public static <T,K,U> java.util.stream.Collector<T, ?, java.util.concurrent.ConcurrentMap<K, U>> java.util.stream.Collectors.toConcurrentMap(java.util.function.Function<? super T, ? extends K>,java.util.function.Function<? super T, ? extends U>,java.util.function.BinaryOperator<U>)
        toConcurrentMapA(arg0: any, arg1: any, arg2: any, cb: Callback<any>): void;
        toConcurrentMap(arg0: any, arg1: any, arg2: any): any;
        toConcurrentMapP(arg0: any, arg1: any, arg2: any): Promise<any>;
        // public static <T,K,U> java.util.stream.Collector<T, ?, java.util.concurrent.ConcurrentMap<K, U>> java.util.stream.Collectors.toConcurrentMap(java.util.function.Function<? super T, ? extends K>,java.util.function.Function<? super T, ? extends U>)
        toConcurrentMapA(arg0: any, arg1: any, cb: Callback<any>): void;
        toConcurrentMap(arg0: any, arg1: any): any;
        toConcurrentMapP(arg0: any, arg1: any): Promise<any>;
        // public static <T> java.util.stream.Collector<T, ?, java.util.List<T>> java.util.stream.Collectors.toList()
        toListA( cb: Callback<any>): void;
        toList(): any;
        toListP(): Promise<any>;
        // public static <T,K,U,M> java.util.stream.Collector<T, ?, M> java.util.stream.Collectors.toMap(java.util.function.Function<? super T, ? extends K>,java.util.function.Function<? super T, ? extends U>,java.util.function.BinaryOperator<U>,java.util.function.Supplier<M>)
        toMapA(arg0: any, arg1: any, arg2: any, arg3: any, cb: Callback<any>): void;
        toMap(arg0: any, arg1: any, arg2: any, arg3: any): any;
        toMapP(arg0: any, arg1: any, arg2: any, arg3: any): Promise<any>;
        // public static <T,K,U> java.util.stream.Collector<T, ?, java.util.Map<K, U>> java.util.stream.Collectors.toMap(java.util.function.Function<? super T, ? extends K>,java.util.function.Function<? super T, ? extends U>,java.util.function.BinaryOperator<U>)
        toMapA(arg0: any, arg1: any, arg2: any, cb: Callback<any>): void;
        toMap(arg0: any, arg1: any, arg2: any): any;
        toMapP(arg0: any, arg1: any, arg2: any): Promise<any>;
        // public static <T,K,U> java.util.stream.Collector<T, ?, java.util.Map<K, U>> java.util.stream.Collectors.toMap(java.util.function.Function<? super T, ? extends K>,java.util.function.Function<? super T, ? extends U>)
        toMapA(arg0: any, arg1: any, cb: Callback<any>): void;
        toMap(arg0: any, arg1: any): any;
        toMapP(arg0: any, arg1: any): Promise<any>;
        // public static <T> java.util.stream.Collector<T, ?, java.util.Set<T>> java.util.stream.Collectors.toSet()
        toSetA( cb: Callback<any>): void;
        toSet(): any;
        toSetP(): Promise<any>;
      }
    }
  }

  export module java.util.stream {
    export interface DoubleStream extends Java.java.util.stream.BaseStream {
      // public abstract boolean java.util.stream.DoubleStream.allMatch(java.util.function.DoublePredicate)
      allMatchA(arg0: any, cb: Callback<any>): void;
      allMatch(arg0: any): any;
      allMatchP(arg0: any): Promise<any>;
      // public abstract boolean java.util.stream.DoubleStream.anyMatch(java.util.function.DoublePredicate)
      anyMatchA(arg0: any, cb: Callback<any>): void;
      anyMatch(arg0: any): any;
      anyMatchP(arg0: any): Promise<any>;
      // public abstract java.util.OptionalDouble java.util.stream.DoubleStream.average()
      averageA( cb: Callback<any>): void;
      average(): any;
      averageP(): Promise<any>;
      // public abstract java.util.stream.Stream<java.lang.Double> java.util.stream.DoubleStream.boxed()
      boxedA( cb: Callback<Java.Stream<Java.Double>>): void;
      boxed(): Java.Stream<Java.Double>;
      boxedP(): Promise<Java.Stream<Java.Double>>;
      // public abstract void java.util.stream.BaseStream.close()
      closeA( cb: Callback<any>): void;
      close(): any;
      closeP(): Promise<any>;
      // public abstract <R> R java.util.stream.DoubleStream.collect(java.util.function.Supplier<R>,java.util.function.ObjDoubleConsumer<R>,java.util.function.BiConsumer<R, R>)
      collectA(arg0: any, arg1: any, arg2: any, cb: Callback<any>): void;
      collect(arg0: any, arg1: any, arg2: any): any;
      collectP(arg0: any, arg1: any, arg2: any): Promise<any>;
      // public abstract long java.util.stream.DoubleStream.count()
      countA( cb: Callback<any>): void;
      count(): any;
      countP(): Promise<any>;
      // public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.distinct()
      distinctA( cb: Callback<Java.DoubleStream>): void;
      distinct(): Java.DoubleStream;
      distinctP(): Promise<Java.DoubleStream>;
      // public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.filter(java.util.function.DoublePredicate)
      filterA(arg0: any, cb: Callback<Java.DoubleStream>): void;
      filter(arg0: any): Java.DoubleStream;
      filterP(arg0: any): Promise<Java.DoubleStream>;
      // public abstract java.util.OptionalDouble java.util.stream.DoubleStream.findAny()
      findAnyA( cb: Callback<any>): void;
      findAny(): any;
      findAnyP(): Promise<any>;
      // public abstract java.util.OptionalDouble java.util.stream.DoubleStream.findFirst()
      findFirstA( cb: Callback<any>): void;
      findFirst(): any;
      findFirstP(): Promise<any>;
      // public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.flatMap(java.util.function.DoubleFunction<? extends java.util.stream.DoubleStream>)
      flatMapA(arg0: any, cb: Callback<Java.DoubleStream>): void;
      flatMap(arg0: any): Java.DoubleStream;
      flatMapP(arg0: any): Promise<Java.DoubleStream>;
      // public abstract void java.util.stream.DoubleStream.forEach(java.util.function.DoubleConsumer)
      forEachA(arg0: Java.DoubleConsumer, cb: Callback<any>): void;
      forEach(arg0: Java.DoubleConsumer): any;
      forEachP(arg0: Java.DoubleConsumer): Promise<any>;
      // public abstract void java.util.stream.DoubleStream.forEachOrdered(java.util.function.DoubleConsumer)
      forEachOrderedA(arg0: Java.DoubleConsumer, cb: Callback<any>): void;
      forEachOrdered(arg0: Java.DoubleConsumer): any;
      forEachOrderedP(arg0: Java.DoubleConsumer): Promise<any>;
      // public abstract boolean java.util.stream.BaseStream.isParallel()
      isParallelA( cb: Callback<any>): void;
      isParallel(): any;
      isParallelP(): Promise<any>;
      // public abstract java.util.PrimitiveIterator$OfDouble java.util.stream.DoubleStream.iterator()
      iteratorA( cb: Callback<any>): void;
      iterator(): any;
      iteratorP(): Promise<any>;
      // public abstract java.util.Iterator<T> java.util.stream.BaseStream.iterator()
      iteratorA( cb: Callback<any>): void;
      iterator(): any;
      iteratorP(): Promise<any>;
      // public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.limit(long)
      limitA(arg0: any, cb: Callback<Java.DoubleStream>): void;
      limit(arg0: any): Java.DoubleStream;
      limitP(arg0: any): Promise<Java.DoubleStream>;
      // public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.map(java.util.function.DoubleUnaryOperator)
      mapA(arg0: any, cb: Callback<Java.DoubleStream>): void;
      map(arg0: any): Java.DoubleStream;
      mapP(arg0: any): Promise<Java.DoubleStream>;
      // public abstract java.util.stream.IntStream java.util.stream.DoubleStream.mapToInt(java.util.function.DoubleToIntFunction)
      mapToIntA(arg0: any, cb: Callback<Java.IntStream>): void;
      mapToInt(arg0: any): Java.IntStream;
      mapToIntP(arg0: any): Promise<Java.IntStream>;
      // public abstract java.util.stream.LongStream java.util.stream.DoubleStream.mapToLong(java.util.function.DoubleToLongFunction)
      mapToLongA(arg0: any, cb: Callback<Java.LongStream>): void;
      mapToLong(arg0: any): Java.LongStream;
      mapToLongP(arg0: any): Promise<Java.LongStream>;
      // public abstract <U> java.util.stream.Stream<U> java.util.stream.DoubleStream.mapToObj(java.util.function.DoubleFunction<? extends U>)
      mapToObjA(arg0: any, cb: Callback<any>): void;
      mapToObj(arg0: any): any;
      mapToObjP(arg0: any): Promise<any>;
      // public abstract java.util.OptionalDouble java.util.stream.DoubleStream.max()
      maxA( cb: Callback<any>): void;
      max(): any;
      maxP(): Promise<any>;
      // public abstract java.util.OptionalDouble java.util.stream.DoubleStream.min()
      minA( cb: Callback<any>): void;
      min(): any;
      minP(): Promise<any>;
      // public abstract boolean java.util.stream.DoubleStream.noneMatch(java.util.function.DoublePredicate)
      noneMatchA(arg0: any, cb: Callback<any>): void;
      noneMatch(arg0: any): any;
      noneMatchP(arg0: any): Promise<any>;
      // public abstract S java.util.stream.BaseStream.onClose(java.lang.Runnable)
      onCloseA(arg0: any, cb: Callback<any>): void;
      onClose(arg0: any): any;
      onCloseP(arg0: any): Promise<any>;
      // public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.parallel()
      parallelA( cb: Callback<Java.DoubleStream>): void;
      parallel(): Java.DoubleStream;
      parallelP(): Promise<Java.DoubleStream>;
      // public abstract S java.util.stream.BaseStream.parallel()
      parallelA( cb: Callback<any>): void;
      parallel(): any;
      parallelP(): Promise<any>;
      // public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.peek(java.util.function.DoubleConsumer)
      peekA(arg0: Java.DoubleConsumer, cb: Callback<Java.DoubleStream>): void;
      peek(arg0: Java.DoubleConsumer): Java.DoubleStream;
      peekP(arg0: Java.DoubleConsumer): Promise<Java.DoubleStream>;
      // public abstract double java.util.stream.DoubleStream.reduce(double,java.util.function.DoubleBinaryOperator)
      reduceA(arg0: any, arg1: any, cb: Callback<any>): void;
      reduce(arg0: any, arg1: any): any;
      reduceP(arg0: any, arg1: any): Promise<any>;
      // public abstract java.util.OptionalDouble java.util.stream.DoubleStream.reduce(java.util.function.DoubleBinaryOperator)
      reduceA(arg0: any, cb: Callback<any>): void;
      reduce(arg0: any): any;
      reduceP(arg0: any): Promise<any>;
      // public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.sequential()
      sequentialA( cb: Callback<Java.DoubleStream>): void;
      sequential(): Java.DoubleStream;
      sequentialP(): Promise<Java.DoubleStream>;
      // public abstract S java.util.stream.BaseStream.sequential()
      sequentialA( cb: Callback<any>): void;
      sequential(): any;
      sequentialP(): Promise<any>;
      // public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.skip(long)
      skipA(arg0: any, cb: Callback<Java.DoubleStream>): void;
      skip(arg0: any): Java.DoubleStream;
      skipP(arg0: any): Promise<Java.DoubleStream>;
      // public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream.sorted()
      sortedA( cb: Callback<Java.DoubleStream>): void;
      sorted(): Java.DoubleStream;
      sortedP(): Promise<Java.DoubleStream>;
      // public abstract java.util.Spliterator$OfDouble java.util.stream.DoubleStream.spliterator()
      spliteratorA( cb: Callback<any>): void;
      spliterator(): any;
      spliteratorP(): Promise<any>;
      // public abstract java.util.Spliterator<T> java.util.stream.BaseStream.spliterator()
      spliteratorA( cb: Callback<any>): void;
      spliterator(): any;
      spliteratorP(): Promise<any>;
      // public abstract double java.util.stream.DoubleStream.sum()
      sumA( cb: Callback<any>): void;
      sum(): any;
      sumP(): Promise<any>;
      // public abstract java.util.DoubleSummaryStatistics java.util.stream.DoubleStream.summaryStatistics()
      summaryStatisticsA( cb: Callback<any>): void;
      summaryStatistics(): any;
      summaryStatisticsP(): Promise<any>;
      // public abstract double[] java.util.stream.DoubleStream.toArray()
      toArrayA( cb: Callback<any>): void;
      toArray(): any;
      toArrayP(): Promise<any>;
      // public abstract S java.util.stream.BaseStream.unordered()
      unorderedA( cb: Callback<any>): void;
      unordered(): any;
      unorderedP(): Promise<any>;
    }
    export module DoubleStream {
      export interface Static {
        class: Java.Class;
        // public static java.util.stream.DoubleStream$Builder java.util.stream.DoubleStream.builder()
        builderA( cb: Callback<Java.DoubleStream$Builder>): void;
        builder(): Java.DoubleStream$Builder;
        builderP(): Promise<Java.DoubleStream$Builder>;
        // public static java.util.stream.DoubleStream java.util.stream.DoubleStream.concat(java.util.stream.DoubleStream,java.util.stream.DoubleStream)
        concatA(arg0: Java.DoubleStream, arg1: Java.DoubleStream, cb: Callback<Java.DoubleStream>): void;
        concat(arg0: Java.DoubleStream, arg1: Java.DoubleStream): Java.DoubleStream;
        concatP(arg0: Java.DoubleStream, arg1: Java.DoubleStream): Promise<Java.DoubleStream>;
        // public static java.util.stream.DoubleStream java.util.stream.DoubleStream.empty()
        emptyA( cb: Callback<Java.DoubleStream>): void;
        empty(): Java.DoubleStream;
        emptyP(): Promise<Java.DoubleStream>;
        // public static java.util.stream.DoubleStream java.util.stream.DoubleStream.generate(java.util.function.DoubleSupplier)
        generateA(arg0: any, cb: Callback<Java.DoubleStream>): void;
        generate(arg0: any): Java.DoubleStream;
        generateP(arg0: any): Promise<Java.DoubleStream>;
        // public static java.util.stream.DoubleStream java.util.stream.DoubleStream.iterate(double,java.util.function.DoubleUnaryOperator)
        iterateA(arg0: any, arg1: any, cb: Callback<Java.DoubleStream>): void;
        iterate(arg0: any, arg1: any): Java.DoubleStream;
        iterateP(arg0: any, arg1: any): Promise<Java.DoubleStream>;
        // public static java.util.stream.DoubleStream java.util.stream.DoubleStream.of(double...)
        ofA(arg0: any, cb: Callback<Java.DoubleStream>): void;
        of(...arg0: any): Java.DoubleStream;
        of(arg0: any): Java.DoubleStream;
        ofP(...arg0: any): Promise<Java.DoubleStream>;
        ofP(arg0: any): Promise<Java.DoubleStream>;
        // public static java.util.stream.DoubleStream java.util.stream.DoubleStream.of(double)
        ofA(arg0: any, cb: Callback<Java.DoubleStream>): void;
        of(arg0: any): Java.DoubleStream;
        ofP(arg0: any): Promise<Java.DoubleStream>;
      }
    }
  }

  export module java.util.stream {
    export interface DoubleStream$Builder extends Java.java.util.function_.DoubleConsumer {
      // public abstract void java.util.function.DoubleConsumer.accept(double)
      acceptA(arg0: any, cb: Callback<any>): void;
      accept(arg0: any): any;
      acceptP(arg0: any): Promise<any>;
      // public default java.util.stream.DoubleStream$Builder java.util.stream.DoubleStream$Builder.add(double)
      addA(arg0: any, cb: Callback<Java.DoubleStream$Builder>): void;
      add(arg0: any): Java.DoubleStream$Builder;
      addP(arg0: any): Promise<Java.DoubleStream$Builder>;
      // public default java.util.function.DoubleConsumer java.util.function.DoubleConsumer.andThen(java.util.function.DoubleConsumer)
      andThenA(arg0: Java.DoubleConsumer, cb: Callback<Java.DoubleConsumer>): void;
      andThen(arg0: Java.DoubleConsumer): Java.DoubleConsumer;
      andThenP(arg0: Java.DoubleConsumer): Promise<Java.DoubleConsumer>;
      // public abstract java.util.stream.DoubleStream java.util.stream.DoubleStream$Builder.build()
      buildA( cb: Callback<Java.DoubleStream>): void;
      build(): Java.DoubleStream;
      buildP(): Promise<Java.DoubleStream>;
    }
    export module DoubleStream$Builder {
      export interface Static {
        class: Java.Class;
      }
    }
  }

  export module java.util.stream {
    export interface IntStream extends Java.java.util.stream.BaseStream {
      // public abstract boolean java.util.stream.IntStream.allMatch(java.util.function.IntPredicate)
      allMatchA(arg0: any, cb: Callback<any>): void;
      allMatch(arg0: any): any;
      allMatchP(arg0: any): Promise<any>;
      // public abstract boolean java.util.stream.IntStream.anyMatch(java.util.function.IntPredicate)
      anyMatchA(arg0: any, cb: Callback<any>): void;
      anyMatch(arg0: any): any;
      anyMatchP(arg0: any): Promise<any>;
      // public abstract java.util.stream.DoubleStream java.util.stream.IntStream.asDoubleStream()
      asDoubleStreamA( cb: Callback<Java.DoubleStream>): void;
      asDoubleStream(): Java.DoubleStream;
      asDoubleStreamP(): Promise<Java.DoubleStream>;
      // public abstract java.util.stream.LongStream java.util.stream.IntStream.asLongStream()
      asLongStreamA( cb: Callback<Java.LongStream>): void;
      asLongStream(): Java.LongStream;
      asLongStreamP(): Promise<Java.LongStream>;
      // public abstract java.util.OptionalDouble java.util.stream.IntStream.average()
      averageA( cb: Callback<any>): void;
      average(): any;
      averageP(): Promise<any>;
      // public abstract java.util.stream.Stream<java.lang.Integer> java.util.stream.IntStream.boxed()
      boxedA( cb: Callback<Java.Stream<Java.Integer>>): void;
      boxed(): Java.Stream<Java.Integer>;
      boxedP(): Promise<Java.Stream<Java.Integer>>;
      // public abstract void java.util.stream.BaseStream.close()
      closeA( cb: Callback<any>): void;
      close(): any;
      closeP(): Promise<any>;
      // public abstract <R> R java.util.stream.IntStream.collect(java.util.function.Supplier<R>,java.util.function.ObjIntConsumer<R>,java.util.function.BiConsumer<R, R>)
      collectA(arg0: any, arg1: any, arg2: any, cb: Callback<any>): void;
      collect(arg0: any, arg1: any, arg2: any): any;
      collectP(arg0: any, arg1: any, arg2: any): Promise<any>;
      // public abstract long java.util.stream.IntStream.count()
      countA( cb: Callback<any>): void;
      count(): any;
      countP(): Promise<any>;
      // public abstract java.util.stream.IntStream java.util.stream.IntStream.distinct()
      distinctA( cb: Callback<Java.IntStream>): void;
      distinct(): Java.IntStream;
      distinctP(): Promise<Java.IntStream>;
      // public abstract java.util.stream.IntStream java.util.stream.IntStream.filter(java.util.function.IntPredicate)
      filterA(arg0: any, cb: Callback<Java.IntStream>): void;
      filter(arg0: any): Java.IntStream;
      filterP(arg0: any): Promise<Java.IntStream>;
      // public abstract java.util.OptionalInt java.util.stream.IntStream.findAny()
      findAnyA( cb: Callback<any>): void;
      findAny(): any;
      findAnyP(): Promise<any>;
      // public abstract java.util.OptionalInt java.util.stream.IntStream.findFirst()
      findFirstA( cb: Callback<any>): void;
      findFirst(): any;
      findFirstP(): Promise<any>;
      // public abstract java.util.stream.IntStream java.util.stream.IntStream.flatMap(java.util.function.IntFunction<? extends java.util.stream.IntStream>)
      flatMapA(arg0: any, cb: Callback<Java.IntStream>): void;
      flatMap(arg0: any): Java.IntStream;
      flatMapP(arg0: any): Promise<Java.IntStream>;
      // public abstract void java.util.stream.IntStream.forEach(java.util.function.IntConsumer)
      forEachA(arg0: Java.IntConsumer, cb: Callback<any>): void;
      forEach(arg0: Java.IntConsumer): any;
      forEachP(arg0: Java.IntConsumer): Promise<any>;
      // public abstract void java.util.stream.IntStream.forEachOrdered(java.util.function.IntConsumer)
      forEachOrderedA(arg0: Java.IntConsumer, cb: Callback<any>): void;
      forEachOrdered(arg0: Java.IntConsumer): any;
      forEachOrderedP(arg0: Java.IntConsumer): Promise<any>;
      // public abstract boolean java.util.stream.BaseStream.isParallel()
      isParallelA( cb: Callback<any>): void;
      isParallel(): any;
      isParallelP(): Promise<any>;
      // public abstract java.util.PrimitiveIterator$OfInt java.util.stream.IntStream.iterator()
      iteratorA( cb: Callback<any>): void;
      iterator(): any;
      iteratorP(): Promise<any>;
      // public abstract java.util.Iterator<T> java.util.stream.BaseStream.iterator()
      iteratorA( cb: Callback<any>): void;
      iterator(): any;
      iteratorP(): Promise<any>;
      // public abstract java.util.stream.IntStream java.util.stream.IntStream.limit(long)
      limitA(arg0: any, cb: Callback<Java.IntStream>): void;
      limit(arg0: any): Java.IntStream;
      limitP(arg0: any): Promise<Java.IntStream>;
      // public abstract java.util.stream.IntStream java.util.stream.IntStream.map(java.util.function.IntUnaryOperator)
      mapA(arg0: any, cb: Callback<Java.IntStream>): void;
      map(arg0: any): Java.IntStream;
      mapP(arg0: any): Promise<Java.IntStream>;
      // public abstract java.util.stream.DoubleStream java.util.stream.IntStream.mapToDouble(java.util.function.IntToDoubleFunction)
      mapToDoubleA(arg0: any, cb: Callback<Java.DoubleStream>): void;
      mapToDouble(arg0: any): Java.DoubleStream;
      mapToDoubleP(arg0: any): Promise<Java.DoubleStream>;
      // public abstract java.util.stream.LongStream java.util.stream.IntStream.mapToLong(java.util.function.IntToLongFunction)
      mapToLongA(arg0: any, cb: Callback<Java.LongStream>): void;
      mapToLong(arg0: any): Java.LongStream;
      mapToLongP(arg0: any): Promise<Java.LongStream>;
      // public abstract <U> java.util.stream.Stream<U> java.util.stream.IntStream.mapToObj(java.util.function.IntFunction<? extends U>)
      mapToObjA(arg0: any, cb: Callback<any>): void;
      mapToObj(arg0: any): any;
      mapToObjP(arg0: any): Promise<any>;
      // public abstract java.util.OptionalInt java.util.stream.IntStream.max()
      maxA( cb: Callback<any>): void;
      max(): any;
      maxP(): Promise<any>;
      // public abstract java.util.OptionalInt java.util.stream.IntStream.min()
      minA( cb: Callback<any>): void;
      min(): any;
      minP(): Promise<any>;
      // public abstract boolean java.util.stream.IntStream.noneMatch(java.util.function.IntPredicate)
      noneMatchA(arg0: any, cb: Callback<any>): void;
      noneMatch(arg0: any): any;
      noneMatchP(arg0: any): Promise<any>;
      // public abstract S java.util.stream.BaseStream.onClose(java.lang.Runnable)
      onCloseA(arg0: any, cb: Callback<any>): void;
      onClose(arg0: any): any;
      onCloseP(arg0: any): Promise<any>;
      // public abstract S java.util.stream.BaseStream.parallel()
      parallelA( cb: Callback<any>): void;
      parallel(): any;
      parallelP(): Promise<any>;
      // public abstract java.util.stream.IntStream java.util.stream.IntStream.parallel()
      parallelA( cb: Callback<Java.IntStream>): void;
      parallel(): Java.IntStream;
      parallelP(): Promise<Java.IntStream>;
      // public abstract java.util.stream.IntStream java.util.stream.IntStream.peek(java.util.function.IntConsumer)
      peekA(arg0: Java.IntConsumer, cb: Callback<Java.IntStream>): void;
      peek(arg0: Java.IntConsumer): Java.IntStream;
      peekP(arg0: Java.IntConsumer): Promise<Java.IntStream>;
      // public abstract int java.util.stream.IntStream.reduce(int,java.util.function.IntBinaryOperator)
      reduceA(arg0: any, arg1: any, cb: Callback<any>): void;
      reduce(arg0: any, arg1: any): any;
      reduceP(arg0: any, arg1: any): Promise<any>;
      // public abstract java.util.OptionalInt java.util.stream.IntStream.reduce(java.util.function.IntBinaryOperator)
      reduceA(arg0: any, cb: Callback<any>): void;
      reduce(arg0: any): any;
      reduceP(arg0: any): Promise<any>;
      // public abstract S java.util.stream.BaseStream.sequential()
      sequentialA( cb: Callback<any>): void;
      sequential(): any;
      sequentialP(): Promise<any>;
      // public abstract java.util.stream.IntStream java.util.stream.IntStream.sequential()
      sequentialA( cb: Callback<Java.IntStream>): void;
      sequential(): Java.IntStream;
      sequentialP(): Promise<Java.IntStream>;
      // public abstract java.util.stream.IntStream java.util.stream.IntStream.skip(long)
      skipA(arg0: any, cb: Callback<Java.IntStream>): void;
      skip(arg0: any): Java.IntStream;
      skipP(arg0: any): Promise<Java.IntStream>;
      // public abstract java.util.stream.IntStream java.util.stream.IntStream.sorted()
      sortedA( cb: Callback<Java.IntStream>): void;
      sorted(): Java.IntStream;
      sortedP(): Promise<Java.IntStream>;
      // public abstract java.util.Spliterator$OfInt java.util.stream.IntStream.spliterator()
      spliteratorA( cb: Callback<any>): void;
      spliterator(): any;
      spliteratorP(): Promise<any>;
      // public abstract java.util.Spliterator<T> java.util.stream.BaseStream.spliterator()
      spliteratorA( cb: Callback<any>): void;
      spliterator(): any;
      spliteratorP(): Promise<any>;
      // public abstract int java.util.stream.IntStream.sum()
      sumA( cb: Callback<any>): void;
      sum(): any;
      sumP(): Promise<any>;
      // public abstract java.util.IntSummaryStatistics java.util.stream.IntStream.summaryStatistics()
      summaryStatisticsA( cb: Callback<any>): void;
      summaryStatistics(): any;
      summaryStatisticsP(): Promise<any>;
      // public abstract int[] java.util.stream.IntStream.toArray()
      toArrayA( cb: Callback<any>): void;
      toArray(): any;
      toArrayP(): Promise<any>;
      // public abstract S java.util.stream.BaseStream.unordered()
      unorderedA( cb: Callback<any>): void;
      unordered(): any;
      unorderedP(): Promise<any>;
    }
    export module IntStream {
      export interface Static {
        class: Java.Class;
        // public static java.util.stream.IntStream$Builder java.util.stream.IntStream.builder()
        builderA( cb: Callback<Java.IntStream$Builder>): void;
        builder(): Java.IntStream$Builder;
        builderP(): Promise<Java.IntStream$Builder>;
        // public static java.util.stream.IntStream java.util.stream.IntStream.concat(java.util.stream.IntStream,java.util.stream.IntStream)
        concatA(arg0: Java.IntStream, arg1: Java.IntStream, cb: Callback<Java.IntStream>): void;
        concat(arg0: Java.IntStream, arg1: Java.IntStream): Java.IntStream;
        concatP(arg0: Java.IntStream, arg1: Java.IntStream): Promise<Java.IntStream>;
        // public static java.util.stream.IntStream java.util.stream.IntStream.empty()
        emptyA( cb: Callback<Java.IntStream>): void;
        empty(): Java.IntStream;
        emptyP(): Promise<Java.IntStream>;
        // public static java.util.stream.IntStream java.util.stream.IntStream.generate(java.util.function.IntSupplier)
        generateA(arg0: any, cb: Callback<Java.IntStream>): void;
        generate(arg0: any): Java.IntStream;
        generateP(arg0: any): Promise<Java.IntStream>;
        // public static java.util.stream.IntStream java.util.stream.IntStream.iterate(int,java.util.function.IntUnaryOperator)
        iterateA(arg0: any, arg1: any, cb: Callback<Java.IntStream>): void;
        iterate(arg0: any, arg1: any): Java.IntStream;
        iterateP(arg0: any, arg1: any): Promise<Java.IntStream>;
        // public static java.util.stream.IntStream java.util.stream.IntStream.of(int...)
        ofA(arg0: any, cb: Callback<Java.IntStream>): void;
        of(...arg0: any): Java.IntStream;
        of(arg0: any): Java.IntStream;
        ofP(...arg0: any): Promise<Java.IntStream>;
        ofP(arg0: any): Promise<Java.IntStream>;
        // public static java.util.stream.IntStream java.util.stream.IntStream.of(int)
        ofA(arg0: any, cb: Callback<Java.IntStream>): void;
        of(arg0: any): Java.IntStream;
        ofP(arg0: any): Promise<Java.IntStream>;
        // public static java.util.stream.IntStream java.util.stream.IntStream.range(int,int)
        rangeA(arg0: any, arg1: any, cb: Callback<Java.IntStream>): void;
        range(arg0: any, arg1: any): Java.IntStream;
        rangeP(arg0: any, arg1: any): Promise<Java.IntStream>;
        // public static java.util.stream.IntStream java.util.stream.IntStream.rangeClosed(int,int)
        rangeClosedA(arg0: any, arg1: any, cb: Callback<Java.IntStream>): void;
        rangeClosed(arg0: any, arg1: any): Java.IntStream;
        rangeClosedP(arg0: any, arg1: any): Promise<Java.IntStream>;
      }
    }
  }

  export module java.util.stream {
    export interface IntStream$Builder extends Java.java.util.function_.IntConsumer {
      // public abstract void java.util.function.IntConsumer.accept(int)
      acceptA(arg0: any, cb: Callback<any>): void;
      accept(arg0: any): any;
      acceptP(arg0: any): Promise<any>;
      // public default java.util.stream.IntStream$Builder java.util.stream.IntStream$Builder.add(int)
      addA(arg0: any, cb: Callback<Java.IntStream$Builder>): void;
      add(arg0: any): Java.IntStream$Builder;
      addP(arg0: any): Promise<Java.IntStream$Builder>;
      // public default java.util.function.IntConsumer java.util.function.IntConsumer.andThen(java.util.function.IntConsumer)
      andThenA(arg0: Java.IntConsumer, cb: Callback<Java.IntConsumer>): void;
      andThen(arg0: Java.IntConsumer): Java.IntConsumer;
      andThenP(arg0: Java.IntConsumer): Promise<Java.IntConsumer>;
      // public abstract java.util.stream.IntStream java.util.stream.IntStream$Builder.build()
      buildA( cb: Callback<Java.IntStream>): void;
      build(): Java.IntStream;
      buildP(): Promise<Java.IntStream>;
    }
    export module IntStream$Builder {
      export interface Static {
        class: Java.Class;
      }
    }
  }

  export module java.util.stream {
    export interface LongStream extends Java.java.util.stream.BaseStream {
      // public abstract boolean java.util.stream.LongStream.allMatch(java.util.function.LongPredicate)
      allMatchA(arg0: any, cb: Callback<any>): void;
      allMatch(arg0: any): any;
      allMatchP(arg0: any): Promise<any>;
      // public abstract boolean java.util.stream.LongStream.anyMatch(java.util.function.LongPredicate)
      anyMatchA(arg0: any, cb: Callback<any>): void;
      anyMatch(arg0: any): any;
      anyMatchP(arg0: any): Promise<any>;
      // public abstract java.util.stream.DoubleStream java.util.stream.LongStream.asDoubleStream()
      asDoubleStreamA( cb: Callback<Java.DoubleStream>): void;
      asDoubleStream(): Java.DoubleStream;
      asDoubleStreamP(): Promise<Java.DoubleStream>;
      // public abstract java.util.OptionalDouble java.util.stream.LongStream.average()
      averageA( cb: Callback<any>): void;
      average(): any;
      averageP(): Promise<any>;
      // public abstract java.util.stream.Stream<java.lang.Long> java.util.stream.LongStream.boxed()
      boxedA( cb: Callback<Java.Stream<Java.Long>>): void;
      boxed(): Java.Stream<Java.Long>;
      boxedP(): Promise<Java.Stream<Java.Long>>;
      // public abstract void java.util.stream.BaseStream.close()
      closeA( cb: Callback<any>): void;
      close(): any;
      closeP(): Promise<any>;
      // public abstract <R> R java.util.stream.LongStream.collect(java.util.function.Supplier<R>,java.util.function.ObjLongConsumer<R>,java.util.function.BiConsumer<R, R>)
      collectA(arg0: any, arg1: any, arg2: any, cb: Callback<any>): void;
      collect(arg0: any, arg1: any, arg2: any): any;
      collectP(arg0: any, arg1: any, arg2: any): Promise<any>;
      // public abstract long java.util.stream.LongStream.count()
      countA( cb: Callback<any>): void;
      count(): any;
      countP(): Promise<any>;
      // public abstract java.util.stream.LongStream java.util.stream.LongStream.distinct()
      distinctA( cb: Callback<Java.LongStream>): void;
      distinct(): Java.LongStream;
      distinctP(): Promise<Java.LongStream>;
      // public abstract java.util.stream.LongStream java.util.stream.LongStream.filter(java.util.function.LongPredicate)
      filterA(arg0: any, cb: Callback<Java.LongStream>): void;
      filter(arg0: any): Java.LongStream;
      filterP(arg0: any): Promise<Java.LongStream>;
      // public abstract java.util.OptionalLong java.util.stream.LongStream.findAny()
      findAnyA( cb: Callback<any>): void;
      findAny(): any;
      findAnyP(): Promise<any>;
      // public abstract java.util.OptionalLong java.util.stream.LongStream.findFirst()
      findFirstA( cb: Callback<any>): void;
      findFirst(): any;
      findFirstP(): Promise<any>;
      // public abstract java.util.stream.LongStream java.util.stream.LongStream.flatMap(java.util.function.LongFunction<? extends java.util.stream.LongStream>)
      flatMapA(arg0: any, cb: Callback<Java.LongStream>): void;
      flatMap(arg0: any): Java.LongStream;
      flatMapP(arg0: any): Promise<Java.LongStream>;
      // public abstract void java.util.stream.LongStream.forEach(java.util.function.LongConsumer)
      forEachA(arg0: Java.LongConsumer, cb: Callback<any>): void;
      forEach(arg0: Java.LongConsumer): any;
      forEachP(arg0: Java.LongConsumer): Promise<any>;
      // public abstract void java.util.stream.LongStream.forEachOrdered(java.util.function.LongConsumer)
      forEachOrderedA(arg0: Java.LongConsumer, cb: Callback<any>): void;
      forEachOrdered(arg0: Java.LongConsumer): any;
      forEachOrderedP(arg0: Java.LongConsumer): Promise<any>;
      // public abstract boolean java.util.stream.BaseStream.isParallel()
      isParallelA( cb: Callback<any>): void;
      isParallel(): any;
      isParallelP(): Promise<any>;
      // public abstract java.util.PrimitiveIterator$OfLong java.util.stream.LongStream.iterator()
      iteratorA( cb: Callback<any>): void;
      iterator(): any;
      iteratorP(): Promise<any>;
      // public abstract java.util.Iterator<T> java.util.stream.BaseStream.iterator()
      iteratorA( cb: Callback<any>): void;
      iterator(): any;
      iteratorP(): Promise<any>;
      // public abstract java.util.stream.LongStream java.util.stream.LongStream.limit(long)
      limitA(arg0: any, cb: Callback<Java.LongStream>): void;
      limit(arg0: any): Java.LongStream;
      limitP(arg0: any): Promise<Java.LongStream>;
      // public abstract java.util.stream.LongStream java.util.stream.LongStream.map(java.util.function.LongUnaryOperator)
      mapA(arg0: any, cb: Callback<Java.LongStream>): void;
      map(arg0: any): Java.LongStream;
      mapP(arg0: any): Promise<Java.LongStream>;
      // public abstract java.util.stream.DoubleStream java.util.stream.LongStream.mapToDouble(java.util.function.LongToDoubleFunction)
      mapToDoubleA(arg0: any, cb: Callback<Java.DoubleStream>): void;
      mapToDouble(arg0: any): Java.DoubleStream;
      mapToDoubleP(arg0: any): Promise<Java.DoubleStream>;
      // public abstract java.util.stream.IntStream java.util.stream.LongStream.mapToInt(java.util.function.LongToIntFunction)
      mapToIntA(arg0: any, cb: Callback<Java.IntStream>): void;
      mapToInt(arg0: any): Java.IntStream;
      mapToIntP(arg0: any): Promise<Java.IntStream>;
      // public abstract <U> java.util.stream.Stream<U> java.util.stream.LongStream.mapToObj(java.util.function.LongFunction<? extends U>)
      mapToObjA(arg0: any, cb: Callback<any>): void;
      mapToObj(arg0: any): any;
      mapToObjP(arg0: any): Promise<any>;
      // public abstract java.util.OptionalLong java.util.stream.LongStream.max()
      maxA( cb: Callback<any>): void;
      max(): any;
      maxP(): Promise<any>;
      // public abstract java.util.OptionalLong java.util.stream.LongStream.min()
      minA( cb: Callback<any>): void;
      min(): any;
      minP(): Promise<any>;
      // public abstract boolean java.util.stream.LongStream.noneMatch(java.util.function.LongPredicate)
      noneMatchA(arg0: any, cb: Callback<any>): void;
      noneMatch(arg0: any): any;
      noneMatchP(arg0: any): Promise<any>;
      // public abstract S java.util.stream.BaseStream.onClose(java.lang.Runnable)
      onCloseA(arg0: any, cb: Callback<any>): void;
      onClose(arg0: any): any;
      onCloseP(arg0: any): Promise<any>;
      // public abstract java.util.stream.LongStream java.util.stream.LongStream.parallel()
      parallelA( cb: Callback<Java.LongStream>): void;
      parallel(): Java.LongStream;
      parallelP(): Promise<Java.LongStream>;
      // public abstract S java.util.stream.BaseStream.parallel()
      parallelA( cb: Callback<any>): void;
      parallel(): any;
      parallelP(): Promise<any>;
      // public abstract java.util.stream.LongStream java.util.stream.LongStream.peek(java.util.function.LongConsumer)
      peekA(arg0: Java.LongConsumer, cb: Callback<Java.LongStream>): void;
      peek(arg0: Java.LongConsumer): Java.LongStream;
      peekP(arg0: Java.LongConsumer): Promise<Java.LongStream>;
      // public abstract long java.util.stream.LongStream.reduce(long,java.util.function.LongBinaryOperator)
      reduceA(arg0: any, arg1: any, cb: Callback<any>): void;
      reduce(arg0: any, arg1: any): any;
      reduceP(arg0: any, arg1: any): Promise<any>;
      // public abstract java.util.OptionalLong java.util.stream.LongStream.reduce(java.util.function.LongBinaryOperator)
      reduceA(arg0: any, cb: Callback<any>): void;
      reduce(arg0: any): any;
      reduceP(arg0: any): Promise<any>;
      // public abstract java.util.stream.LongStream java.util.stream.LongStream.sequential()
      sequentialA( cb: Callback<Java.LongStream>): void;
      sequential(): Java.LongStream;
      sequentialP(): Promise<Java.LongStream>;
      // public abstract S java.util.stream.BaseStream.sequential()
      sequentialA( cb: Callback<any>): void;
      sequential(): any;
      sequentialP(): Promise<any>;
      // public abstract java.util.stream.LongStream java.util.stream.LongStream.skip(long)
      skipA(arg0: any, cb: Callback<Java.LongStream>): void;
      skip(arg0: any): Java.LongStream;
      skipP(arg0: any): Promise<Java.LongStream>;
      // public abstract java.util.stream.LongStream java.util.stream.LongStream.sorted()
      sortedA( cb: Callback<Java.LongStream>): void;
      sorted(): Java.LongStream;
      sortedP(): Promise<Java.LongStream>;
      // public abstract java.util.Spliterator$OfLong java.util.stream.LongStream.spliterator()
      spliteratorA( cb: Callback<any>): void;
      spliterator(): any;
      spliteratorP(): Promise<any>;
      // public abstract java.util.Spliterator<T> java.util.stream.BaseStream.spliterator()
      spliteratorA( cb: Callback<any>): void;
      spliterator(): any;
      spliteratorP(): Promise<any>;
      // public abstract long java.util.stream.LongStream.sum()
      sumA( cb: Callback<any>): void;
      sum(): any;
      sumP(): Promise<any>;
      // public abstract java.util.LongSummaryStatistics java.util.stream.LongStream.summaryStatistics()
      summaryStatisticsA( cb: Callback<any>): void;
      summaryStatistics(): any;
      summaryStatisticsP(): Promise<any>;
      // public abstract long[] java.util.stream.LongStream.toArray()
      toArrayA( cb: Callback<any>): void;
      toArray(): any;
      toArrayP(): Promise<any>;
      // public abstract S java.util.stream.BaseStream.unordered()
      unorderedA( cb: Callback<any>): void;
      unordered(): any;
      unorderedP(): Promise<any>;
    }
    export module LongStream {
      export interface Static {
        class: Java.Class;
        // public static java.util.stream.LongStream$Builder java.util.stream.LongStream.builder()
        builderA( cb: Callback<Java.LongStream$Builder>): void;
        builder(): Java.LongStream$Builder;
        builderP(): Promise<Java.LongStream$Builder>;
        // public static java.util.stream.LongStream java.util.stream.LongStream.concat(java.util.stream.LongStream,java.util.stream.LongStream)
        concatA(arg0: Java.LongStream, arg1: Java.LongStream, cb: Callback<Java.LongStream>): void;
        concat(arg0: Java.LongStream, arg1: Java.LongStream): Java.LongStream;
        concatP(arg0: Java.LongStream, arg1: Java.LongStream): Promise<Java.LongStream>;
        // public static java.util.stream.LongStream java.util.stream.LongStream.empty()
        emptyA( cb: Callback<Java.LongStream>): void;
        empty(): Java.LongStream;
        emptyP(): Promise<Java.LongStream>;
        // public static java.util.stream.LongStream java.util.stream.LongStream.generate(java.util.function.LongSupplier)
        generateA(arg0: any, cb: Callback<Java.LongStream>): void;
        generate(arg0: any): Java.LongStream;
        generateP(arg0: any): Promise<Java.LongStream>;
        // public static java.util.stream.LongStream java.util.stream.LongStream.iterate(long,java.util.function.LongUnaryOperator)
        iterateA(arg0: any, arg1: any, cb: Callback<Java.LongStream>): void;
        iterate(arg0: any, arg1: any): Java.LongStream;
        iterateP(arg0: any, arg1: any): Promise<Java.LongStream>;
        // public static java.util.stream.LongStream java.util.stream.LongStream.of(long...)
        ofA(arg0: any, cb: Callback<Java.LongStream>): void;
        of(...arg0: any): Java.LongStream;
        of(arg0: any): Java.LongStream;
        ofP(...arg0: any): Promise<Java.LongStream>;
        ofP(arg0: any): Promise<Java.LongStream>;
        // public static java.util.stream.LongStream java.util.stream.LongStream.of(long)
        ofA(arg0: any, cb: Callback<Java.LongStream>): void;
        of(arg0: any): Java.LongStream;
        ofP(arg0: any): Promise<Java.LongStream>;
        // public static java.util.stream.LongStream java.util.stream.LongStream.range(long,long)
        rangeA(arg0: any, arg1: any, cb: Callback<Java.LongStream>): void;
        range(arg0: any, arg1: any): Java.LongStream;
        rangeP(arg0: any, arg1: any): Promise<Java.LongStream>;
        // public static java.util.stream.LongStream java.util.stream.LongStream.rangeClosed(long,long)
        rangeClosedA(arg0: any, arg1: any, cb: Callback<Java.LongStream>): void;
        rangeClosed(arg0: any, arg1: any): Java.LongStream;
        rangeClosedP(arg0: any, arg1: any): Promise<Java.LongStream>;
      }
    }
  }

  export module java.util.stream {
    export interface LongStream$Builder extends Java.java.util.function_.LongConsumer {
      // public abstract void java.util.function.LongConsumer.accept(long)
      acceptA(arg0: any, cb: Callback<any>): void;
      accept(arg0: any): any;
      acceptP(arg0: any): Promise<any>;
      // public default java.util.stream.LongStream$Builder java.util.stream.LongStream$Builder.add(long)
      addA(arg0: any, cb: Callback<Java.LongStream$Builder>): void;
      add(arg0: any): Java.LongStream$Builder;
      addP(arg0: any): Promise<Java.LongStream$Builder>;
      // public default java.util.function.LongConsumer java.util.function.LongConsumer.andThen(java.util.function.LongConsumer)
      andThenA(arg0: Java.LongConsumer, cb: Callback<Java.LongConsumer>): void;
      andThen(arg0: Java.LongConsumer): Java.LongConsumer;
      andThenP(arg0: Java.LongConsumer): Promise<Java.LongConsumer>;
      // public abstract java.util.stream.LongStream java.util.stream.LongStream$Builder.build()
      buildA( cb: Callback<Java.LongStream>): void;
      build(): Java.LongStream;
      buildP(): Promise<Java.LongStream>;
    }
    export module LongStream$Builder {
      export interface Static {
        class: Java.Class;
      }
    }
  }

  export module java.util.stream {
    export interface Stream<T> extends Java.java.util.stream.BaseStream {
      // public abstract boolean java.util.stream.Stream.allMatch(java.util.function.Predicate<? super T>)
      allMatchA(arg0: any, cb: Callback<any>): void;
      allMatch(arg0: any): any;
      allMatchP(arg0: any): Promise<any>;
      // public abstract boolean java.util.stream.Stream.anyMatch(java.util.function.Predicate<? super T>)
      anyMatchA(arg0: any, cb: Callback<any>): void;
      anyMatch(arg0: any): any;
      anyMatchP(arg0: any): Promise<any>;
      // public abstract void java.util.stream.BaseStream.close()
      closeA( cb: Callback<any>): void;
      close(): any;
      closeP(): Promise<any>;
      // public abstract <R> R java.util.stream.Stream.collect(java.util.function.Supplier<R>,java.util.function.BiConsumer<R, ? super T>,java.util.function.BiConsumer<R, R>)
      collectA(arg0: any, arg1: any, arg2: any, cb: Callback<any>): void;
      collect(arg0: any, arg1: any, arg2: any): any;
      collectP(arg0: any, arg1: any, arg2: any): Promise<any>;
      // public abstract <R,A> R java.util.stream.Stream.collect(java.util.stream.Collector<? super T, A, R>)
      collectA(arg0: any, cb: Callback<any>): void;
      collect(arg0: any): any;
      collectP(arg0: any): Promise<any>;
      // public abstract long java.util.stream.Stream.count()
      countA( cb: Callback<any>): void;
      count(): any;
      countP(): Promise<any>;
      // public abstract java.util.stream.Stream<T> java.util.stream.Stream.distinct()
      distinctA( cb: Callback<any>): void;
      distinct(): any;
      distinctP(): Promise<any>;
      // public abstract java.util.stream.Stream<T> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
      filterA(arg0: any, cb: Callback<any>): void;
      filter(arg0: any): any;
      filterP(arg0: any): Promise<any>;
      // public abstract java.util.Optional<T> java.util.stream.Stream.findAny()
      findAnyA( cb: Callback<any>): void;
      findAny(): any;
      findAnyP(): Promise<any>;
      // public abstract java.util.Optional<T> java.util.stream.Stream.findFirst()
      findFirstA( cb: Callback<any>): void;
      findFirst(): any;
      findFirstP(): Promise<any>;
      // public abstract <R> java.util.stream.Stream<R> java.util.stream.Stream.flatMap(java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>)
      flatMapA(arg0: any, cb: Callback<any>): void;
      flatMap(arg0: any): any;
      flatMapP(arg0: any): Promise<any>;
      // public abstract java.util.stream.DoubleStream java.util.stream.Stream.flatMapToDouble(java.util.function.Function<? super T, ? extends java.util.stream.DoubleStream>)
      flatMapToDoubleA(arg0: any, cb: Callback<Java.DoubleStream>): void;
      flatMapToDouble(arg0: any): Java.DoubleStream;
      flatMapToDoubleP(arg0: any): Promise<Java.DoubleStream>;
      // public abstract java.util.stream.IntStream java.util.stream.Stream.flatMapToInt(java.util.function.Function<? super T, ? extends java.util.stream.IntStream>)
      flatMapToIntA(arg0: any, cb: Callback<Java.IntStream>): void;
      flatMapToInt(arg0: any): Java.IntStream;
      flatMapToIntP(arg0: any): Promise<Java.IntStream>;
      // public abstract java.util.stream.LongStream java.util.stream.Stream.flatMapToLong(java.util.function.Function<? super T, ? extends java.util.stream.LongStream>)
      flatMapToLongA(arg0: any, cb: Callback<Java.LongStream>): void;
      flatMapToLong(arg0: any): Java.LongStream;
      flatMapToLongP(arg0: any): Promise<Java.LongStream>;
      // public abstract void java.util.stream.Stream.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: any, cb: Callback<any>): void;
      forEach(arg0: any): any;
      forEachP(arg0: any): Promise<any>;
      // public abstract void java.util.stream.Stream.forEachOrdered(java.util.function.Consumer<? super T>)
      forEachOrderedA(arg0: any, cb: Callback<any>): void;
      forEachOrdered(arg0: any): any;
      forEachOrderedP(arg0: any): Promise<any>;
      // public abstract boolean java.util.stream.BaseStream.isParallel()
      isParallelA( cb: Callback<any>): void;
      isParallel(): any;
      isParallelP(): Promise<any>;
      // public abstract java.util.Iterator<T> java.util.stream.BaseStream.iterator()
      iteratorA( cb: Callback<any>): void;
      iterator(): any;
      iteratorP(): Promise<any>;
      // public abstract java.util.stream.Stream<T> java.util.stream.Stream.limit(long)
      limitA(arg0: any, cb: Callback<any>): void;
      limit(arg0: any): any;
      limitP(arg0: any): Promise<any>;
      // public abstract <R> java.util.stream.Stream<R> java.util.stream.Stream.map(java.util.function.Function<? super T, ? extends R>)
      mapA(arg0: any, cb: Callback<any>): void;
      map(arg0: any): any;
      mapP(arg0: any): Promise<any>;
      // public abstract java.util.stream.DoubleStream java.util.stream.Stream.mapToDouble(java.util.function.ToDoubleFunction<? super T>)
      mapToDoubleA(arg0: any, cb: Callback<Java.DoubleStream>): void;
      mapToDouble(arg0: any): Java.DoubleStream;
      mapToDoubleP(arg0: any): Promise<Java.DoubleStream>;
      // public abstract java.util.stream.IntStream java.util.stream.Stream.mapToInt(java.util.function.ToIntFunction<? super T>)
      mapToIntA(arg0: any, cb: Callback<Java.IntStream>): void;
      mapToInt(arg0: any): Java.IntStream;
      mapToIntP(arg0: any): Promise<Java.IntStream>;
      // public abstract java.util.stream.LongStream java.util.stream.Stream.mapToLong(java.util.function.ToLongFunction<? super T>)
      mapToLongA(arg0: any, cb: Callback<Java.LongStream>): void;
      mapToLong(arg0: any): Java.LongStream;
      mapToLongP(arg0: any): Promise<Java.LongStream>;
      // public abstract java.util.Optional<T> java.util.stream.Stream.max(java.util.Comparator<? super T>)
      maxA(arg0: any, cb: Callback<any>): void;
      max(arg0: any): any;
      maxP(arg0: any): Promise<any>;
      // public abstract java.util.Optional<T> java.util.stream.Stream.min(java.util.Comparator<? super T>)
      minA(arg0: any, cb: Callback<any>): void;
      min(arg0: any): any;
      minP(arg0: any): Promise<any>;
      // public abstract boolean java.util.stream.Stream.noneMatch(java.util.function.Predicate<? super T>)
      noneMatchA(arg0: any, cb: Callback<any>): void;
      noneMatch(arg0: any): any;
      noneMatchP(arg0: any): Promise<any>;
      // public abstract S java.util.stream.BaseStream.onClose(java.lang.Runnable)
      onCloseA(arg0: any, cb: Callback<any>): void;
      onClose(arg0: any): any;
      onCloseP(arg0: any): Promise<any>;
      // public abstract S java.util.stream.BaseStream.parallel()
      parallelA( cb: Callback<any>): void;
      parallel(): any;
      parallelP(): Promise<any>;
      // public abstract java.util.stream.Stream<T> java.util.stream.Stream.peek(java.util.function.Consumer<? super T>)
      peekA(arg0: any, cb: Callback<any>): void;
      peek(arg0: any): any;
      peekP(arg0: any): Promise<any>;
      // public abstract <U> U java.util.stream.Stream.reduce(U,java.util.function.BiFunction<U, ? super T, U>,java.util.function.BinaryOperator<U>)
      reduceA(arg0: any, arg1: any, arg2: any, cb: Callback<any>): void;
      reduce(arg0: any, arg1: any, arg2: any): any;
      reduceP(arg0: any, arg1: any, arg2: any): Promise<any>;
      // public abstract T java.util.stream.Stream.reduce(T,java.util.function.BinaryOperator<T>)
      reduceA(arg0: any, arg1: any, cb: Callback<any>): void;
      reduce(arg0: any, arg1: any): any;
      reduceP(arg0: any, arg1: any): Promise<any>;
      // public abstract java.util.Optional<T> java.util.stream.Stream.reduce(java.util.function.BinaryOperator<T>)
      reduceA(arg0: any, cb: Callback<any>): void;
      reduce(arg0: any): any;
      reduceP(arg0: any): Promise<any>;
      // public abstract S java.util.stream.BaseStream.sequential()
      sequentialA( cb: Callback<any>): void;
      sequential(): any;
      sequentialP(): Promise<any>;
      // public abstract java.util.stream.Stream<T> java.util.stream.Stream.skip(long)
      skipA(arg0: any, cb: Callback<any>): void;
      skip(arg0: any): any;
      skipP(arg0: any): Promise<any>;
      // public abstract java.util.stream.Stream<T> java.util.stream.Stream.sorted(java.util.Comparator<? super T>)
      sortedA(arg0: any, cb: Callback<any>): void;
      sorted(arg0: any): any;
      sortedP(arg0: any): Promise<any>;
      // public abstract java.util.stream.Stream<T> java.util.stream.Stream.sorted()
      sortedA( cb: Callback<any>): void;
      sorted(): any;
      sortedP(): Promise<any>;
      // public abstract java.util.Spliterator<T> java.util.stream.BaseStream.spliterator()
      spliteratorA( cb: Callback<any>): void;
      spliterator(): any;
      spliteratorP(): Promise<any>;
      // public abstract <A> A[] java.util.stream.Stream.toArray(java.util.function.IntFunction<A[]>)
      toArrayA(arg0: any, cb: Callback<any>): void;
      toArray(arg0: any): any;
      toArrayP(arg0: any): Promise<any>;
      // public abstract java.lang.Object[] java.util.stream.Stream.toArray()
      toArrayA( cb: Callback<Java.Object[]>): void;
      toArray(): Java.Object[];
      toArrayP(): Promise<Java.Object[]>;
      // public abstract S java.util.stream.BaseStream.unordered()
      unorderedA( cb: Callback<any>): void;
      unordered(): any;
      unorderedP(): Promise<any>;
    }
    export module Stream {
      export interface Static {
        class: Java.Class;
        // public static <T> java.util.stream.Stream.java.util.stream.Stream$Builder<T> java.util.stream.Stream.builder()
        builderA( cb: Callback<any>): void;
        builder(): any;
        builderP(): Promise<any>;
        // public static <T> java.util.stream.Stream<T> java.util.stream.Stream.concat(java.util.stream.Stream<? extends T>,java.util.stream.Stream<? extends T>)
        concatA(arg0: any, arg1: any, cb: Callback<any>): void;
        concat(arg0: any, arg1: any): any;
        concatP(arg0: any, arg1: any): Promise<any>;
        // public static <T> java.util.stream.Stream<T> java.util.stream.Stream.empty()
        emptyA( cb: Callback<any>): void;
        empty(): any;
        emptyP(): Promise<any>;
        // public static <T> java.util.stream.Stream<T> java.util.stream.Stream.generate(java.util.function.Supplier<T>)
        generateA(arg0: any, cb: Callback<any>): void;
        generate(arg0: any): any;
        generateP(arg0: any): Promise<any>;
        // public static <T> java.util.stream.Stream<T> java.util.stream.Stream.iterate(T,java.util.function.UnaryOperator<T>)
        iterateA(arg0: any, arg1: any, cb: Callback<any>): void;
        iterate(arg0: any, arg1: any): any;
        iterateP(arg0: any, arg1: any): Promise<any>;
        // public static <T> java.util.stream.Stream<T> java.util.stream.Stream.of(T...)
        ofA(arg0: any, cb: Callback<any>): void;
        of(...arg0: any): any;
        of(arg0: any): any;
        ofP(...arg0: any): Promise<any>;
        ofP(arg0: any): Promise<any>;
        // public static <T> java.util.stream.Stream<T> java.util.stream.Stream.of(T)
        ofA(arg0: any, cb: Callback<any>): void;
        of(arg0: any): any;
        ofP(arg0: any): Promise<any>;
      }
    }
  }

  export module java.util.stream {
    export interface Stream$Builder<T> extends Java.java.util.function_.Consumer {
      // public abstract void java.util.function.Consumer.accept(T)
      acceptA(arg0: any, cb: Callback<any>): void;
      accept(arg0: any): any;
      acceptP(arg0: any): Promise<any>;
      // public default java.util.stream.Stream.java.util.stream.Stream$Builder<T> java.util.stream.Stream$Builder.add(T)
      addA(arg0: any, cb: Callback<any>): void;
      add(arg0: any): any;
      addP(arg0: any): Promise<any>;
      // public default java.util.function.Consumer<T> java.util.function.Consumer.andThen(java.util.function.Consumer<? super T>)
      andThenA(arg0: any, cb: Callback<any>): void;
      andThen(arg0: any): any;
      andThenP(arg0: any): Promise<any>;
      // public abstract java.util.stream.Stream<T> java.util.stream.Stream$Builder.build()
      buildA( cb: Callback<any>): void;
      build(): any;
      buildP(): Promise<any>;
    }
    export module Stream$Builder {
      export interface Static {
        class: Java.Class;
      }
    }
  }

  export module java.util.stream {
    export interface StreamSupport extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: Java.Object, cb: Callback<any>): void;
      equals(arg0: Java.Object): any;
      equalsP(arg0: Java.Object): Promise<any>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class<any>>): void;
      getClass(): Java.Class<any>;
      getClassP(): Promise<Java.Class<any>>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<any>): void;
      hashCode(): any;
      hashCodeP(): Promise<any>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<any>): void;
      notify(): any;
      notifyP(): Promise<any>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<any>): void;
      notifyAll(): any;
      notifyAllP(): Promise<any>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<Java.String>): void;
      toString(): Java.String;
      toStringP(): Promise<Java.String>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: any, arg1: any, cb: Callback<any>): void;
      wait(arg0: any, arg1: any): any;
      waitP(arg0: any, arg1: any): Promise<any>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: any, cb: Callback<any>): void;
      wait(arg0: any): any;
      waitP(arg0: any): Promise<any>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<any>): void;
      wait(): any;
      waitP(): Promise<any>;
    }
    export module StreamSupport {
      export interface Static {
        class: Java.Class;
        // public static java.util.stream.DoubleStream java.util.stream.StreamSupport.doubleStream(java.util.function.Supplier<? extends java.util.Spliterator$OfDouble>,int,boolean)
        doubleStreamA(arg0: any, arg1: any, arg2: any, cb: Callback<Java.DoubleStream>): void;
        doubleStream(arg0: any, arg1: any, arg2: any): Java.DoubleStream;
        doubleStreamP(arg0: any, arg1: any, arg2: any): Promise<Java.DoubleStream>;
        // public static java.util.stream.DoubleStream java.util.stream.StreamSupport.doubleStream(java.util.Spliterator$OfDouble,boolean)
        doubleStreamA(arg0: any, arg1: any, cb: Callback<Java.DoubleStream>): void;
        doubleStream(arg0: any, arg1: any): Java.DoubleStream;
        doubleStreamP(arg0: any, arg1: any): Promise<Java.DoubleStream>;
        // public static java.util.stream.IntStream java.util.stream.StreamSupport.intStream(java.util.function.Supplier<? extends java.util.Spliterator$OfInt>,int,boolean)
        intStreamA(arg0: any, arg1: any, arg2: any, cb: Callback<Java.IntStream>): void;
        intStream(arg0: any, arg1: any, arg2: any): Java.IntStream;
        intStreamP(arg0: any, arg1: any, arg2: any): Promise<Java.IntStream>;
        // public static java.util.stream.IntStream java.util.stream.StreamSupport.intStream(java.util.Spliterator$OfInt,boolean)
        intStreamA(arg0: any, arg1: any, cb: Callback<Java.IntStream>): void;
        intStream(arg0: any, arg1: any): Java.IntStream;
        intStreamP(arg0: any, arg1: any): Promise<Java.IntStream>;
        // public static java.util.stream.LongStream java.util.stream.StreamSupport.longStream(java.util.function.Supplier<? extends java.util.Spliterator$OfLong>,int,boolean)
        longStreamA(arg0: any, arg1: any, arg2: any, cb: Callback<Java.LongStream>): void;
        longStream(arg0: any, arg1: any, arg2: any): Java.LongStream;
        longStreamP(arg0: any, arg1: any, arg2: any): Promise<Java.LongStream>;
        // public static java.util.stream.LongStream java.util.stream.StreamSupport.longStream(java.util.Spliterator$OfLong,boolean)
        longStreamA(arg0: any, arg1: any, cb: Callback<Java.LongStream>): void;
        longStream(arg0: any, arg1: any): Java.LongStream;
        longStreamP(arg0: any, arg1: any): Promise<Java.LongStream>;
        // public static <T> java.util.stream.Stream<T> java.util.stream.StreamSupport.stream(java.util.function.Supplier<? extends java.util.Spliterator<T>>,int,boolean)
        streamA(arg0: any, arg1: any, arg2: any, cb: Callback<any>): void;
        stream(arg0: any, arg1: any, arg2: any): any;
        streamP(arg0: any, arg1: any, arg2: any): Promise<any>;
        // public static <T> java.util.stream.Stream<T> java.util.stream.StreamSupport.stream(java.util.Spliterator<T>,boolean)
        streamA(arg0: any, arg1: any, cb: Callback<any>): void;
        stream(arg0: any, arg1: any): any;
        streamP(arg0: any, arg1: any): Promise<any>;
      }
    }
  }


  // ### `function L(n: number)`
  // Produce a longValue_t literal.
  export function L(n: number): Java.longValue_t {
    return Java.newLong(n).longValue();
  }

  // ### `function isLongValue(e: any)`
  // Checks whether an object is a longValue_t, which is the representation of Java long primitives.
  export function isLongValue(obj: any): boolean {
    return _.isObject(obj) && obj instanceof Number && 'longValue' in obj && _.keys(obj).length === 1;
  }

  // #### `function smellsLikeJavaObject(e: any)`
  // Returns true if the obj 'smells' like a Java object.
  // This is a light-weight test that will return false when `e` is clearly not a Java object,
  // but it may have false positives. To be certain, use `isJavaObject(e)` or `instanceOf(e, classname)` instead.
  function smellsLikeJavaObject(e: any): boolean {
    return _.isObject(e) && !_.isArray(e) && !isLongValue(e);
  }

  // #### `function isJavaObject(e: any)`
  // Returns true if the obj is a Java object.
  // Useful for determining the runtime type of object_t returned by many java methods.
  export function isJavaObject(e: any): boolean {
    return smellsLikeJavaObject(e) && _java.instanceOf(e, 'java.lang.Object');
  }

  // #### `interface ConsumeObject`
  // A function interface for Java Object consumer.
  // See `forEach` below.
  export interface ConsumeObject {
    (item: Java.object_t): any | BluePromise<any>;
  }

  // #### `forEach(javaIterator: Java.Iterator, consumer: ConsumeObject)`
  // Applies *consumer* to each Java.Object returned by the *javaIterator*.
  // *javaIterator* may be any type that implements java.util.Iterator, including a tinkerpop Traversal.
  // *consumer* is function that will do some work on a Java.Object asychronously, returning a Promise for its completion.
  // Returns a promise that is resolved when all objects have been consumed.
  export function forEach(javaIterator: Java.Iterator, consumer: ConsumeObject): BluePromise<void> {
    function _eachIterator(javaIterator: Java.Iterator, consumer: ConsumeObject): BluePromise<void> {
      return javaIterator.hasNextP()
        .then((hasNext: boolean): BluePromise<void> => {
          if (!hasNext) {
            return BluePromise.resolve();
          } else {
            return javaIterator.nextP()
              .then((obj: Java.object_t) => consumer(obj))
              .then(() => _eachIterator(javaIterator, consumer));
          }
        });
    }
    return _eachIterator(javaIterator, consumer);
  }

} // module Java
