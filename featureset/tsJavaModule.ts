// tsJavaModule.ts
// This file was generated by ts-java.
/// <reference path="../typings/java/java.d.ts" />
/// <reference path="../typings/debug/debug.d.ts" />

// Generated using the following tsjava options:
// tsJavaModulePath:
//   tsJavaModule.ts
// classpath:
//   target/featureset-1.0.0.jar
// classes:
//   not.a.class
//   java.lang.Boolean
//   java.lang.Class
//   java.lang.Double
//   java.lang.Float
//   java.lang.Integer
//   java.lang.Long
//   java.lang.reflect.Method
//   java.lang.Short
//   java.util.function.Function
// packages:
//   bogus.package.*
//   bogus.package.root.**
//   com.redseal.featureset.**
//   java.util.*

/* tslint:disable:max-line-length class-name */

declare function require(name: string): any;
require('source-map-support').install();

import _java = require('java');
import BluePromise = require('bluebird');
import path = require('path');
import debug = require('debug');
var dlog = debug(__filename);
dlog('imported');

_java.asyncOptions = {
    syncSuffix: '',
    asyncSuffix: 'A',
    promiseSuffix: 'P',
    promisify: BluePromise.promisify
};
dlog('asyncOptions:', _java.asyncOptions);

// JVM initialization callback which adds tsjava.classpath to the JVM classpath.
function beforeJvm(): BluePromise<void> {
  var moduleJars: string[] = ['target/featureset-1.0.0.jar'];
  moduleJars.forEach((jarPath: string) => {
    var fullJarPath: string = path.join(__dirname, '', jarPath);
    dlog('Adding to classpath:', fullJarPath);
    _java.classpath.push(fullJarPath);
  });
  return BluePromise.resolve();
}

_java.registerClientP(beforeJvm);

export module Java {
  'use strict';

  interface StringDict {
    [index: string]: string;
  }

  export type NodeJavaAPI = typeof _java;

  export function getJava(): NodeJavaAPI {
    return _java;
  }

  export function ensureJvm(): Promise<void> {
    return _java.ensureJvm();
  }


  // Return the fully qualified class path for a class name.
  // Returns undefined if the className is ambiguous or not present in the configured classes.
  export function fullyQualifiedName(className: string): string {
    var shortToLongMap: StringDict = {
      'Thing$Nested': 'com.redseal.featureset.ambiguous.Thing$Nested',
      'AnEnum': 'com.redseal.featureset.AnEnum',
      'AnonClassTest': 'com.redseal.featureset.AnonClassTest',
      'Overloading': 'com.redseal.featureset.overloading.Overloading',
      'Overloading$Bar': 'com.redseal.featureset.overloading.Overloading$Bar',
      'Overloading$Foo': 'com.redseal.featureset.overloading.Overloading$Foo',
      'Step': 'com.redseal.featureset.overloading.Step',
      'SomeAbstractClass': 'com.redseal.featureset.SomeAbstractClass',
      'SomeClass': 'com.redseal.featureset.SomeClass',
      'SomeInterface': 'com.redseal.featureset.SomeInterface',
      'TinyInterface': 'com.redseal.featureset.TinyInterface',
      'Boolean': 'java.lang.Boolean',
      'Class': 'java.lang.Class',
      'Double': 'java.lang.Double',
      'Float': 'java.lang.Float',
      'Integer': 'java.lang.Integer',
      'Long': 'java.lang.Long',
      'Object': 'java.lang.Object',
      'Method': 'java.lang.reflect.Method',
      'Short': 'java.lang.Short',
      'String': 'java.lang.String',
      'AbstractCollection': 'java.util.AbstractCollection',
      'AbstractList': 'java.util.AbstractList',
      'AbstractMap': 'java.util.AbstractMap',
      'AbstractMap$SimpleEntry': 'java.util.AbstractMap$SimpleEntry',
      'AbstractMap$SimpleImmutableEntry': 'java.util.AbstractMap$SimpleImmutableEntry',
      'AbstractQueue': 'java.util.AbstractQueue',
      'AbstractSequentialList': 'java.util.AbstractSequentialList',
      'AbstractSet': 'java.util.AbstractSet',
      'ArrayDeque': 'java.util.ArrayDeque',
      'ArrayList': 'java.util.ArrayList',
      'Arrays': 'java.util.Arrays',
      'Base64': 'java.util.Base64',
      'Base64$Decoder': 'java.util.Base64$Decoder',
      'Base64$Encoder': 'java.util.Base64$Encoder',
      'BitSet': 'java.util.BitSet',
      'Calendar': 'java.util.Calendar',
      'Calendar$Builder': 'java.util.Calendar$Builder',
      'Collection': 'java.util.Collection',
      'Collections': 'java.util.Collections',
      'Comparator': 'java.util.Comparator',
      'ConcurrentModificationException': 'java.util.ConcurrentModificationException',
      'Currency': 'java.util.Currency',
      'Date': 'java.util.Date',
      'Deque': 'java.util.Deque',
      'Dictionary': 'java.util.Dictionary',
      'DoubleSummaryStatistics': 'java.util.DoubleSummaryStatistics',
      'DuplicateFormatFlagsException': 'java.util.DuplicateFormatFlagsException',
      'EmptyStackException': 'java.util.EmptyStackException',
      'Enumeration': 'java.util.Enumeration',
      'EnumMap': 'java.util.EnumMap',
      'EnumSet': 'java.util.EnumSet',
      'EventListener': 'java.util.EventListener',
      'EventListenerProxy': 'java.util.EventListenerProxy',
      'EventObject': 'java.util.EventObject',
      'FormatFlagsConversionMismatchException': 'java.util.FormatFlagsConversionMismatchException',
      'Formattable': 'java.util.Formattable',
      'FormattableFlags': 'java.util.FormattableFlags',
      'Formatter': 'java.util.Formatter',
      'Formatter$BigDecimalLayoutForm': 'java.util.Formatter$BigDecimalLayoutForm',
      'FormatterClosedException': 'java.util.FormatterClosedException',
      'Function': 'java.util.function.Function',
      'GregorianCalendar': 'java.util.GregorianCalendar',
      'HashMap': 'java.util.HashMap',
      'HashSet': 'java.util.HashSet',
      'Hashtable': 'java.util.Hashtable',
      'IdentityHashMap': 'java.util.IdentityHashMap',
      'IllegalFormatCodePointException': 'java.util.IllegalFormatCodePointException',
      'IllegalFormatConversionException': 'java.util.IllegalFormatConversionException',
      'IllegalFormatException': 'java.util.IllegalFormatException',
      'IllegalFormatFlagsException': 'java.util.IllegalFormatFlagsException',
      'IllegalFormatPrecisionException': 'java.util.IllegalFormatPrecisionException',
      'IllegalFormatWidthException': 'java.util.IllegalFormatWidthException',
      'IllformedLocaleException': 'java.util.IllformedLocaleException',
      'InputMismatchException': 'java.util.InputMismatchException',
      'IntSummaryStatistics': 'java.util.IntSummaryStatistics',
      'InvalidPropertiesFormatException': 'java.util.InvalidPropertiesFormatException',
      'Iterator': 'java.util.Iterator',
      'LinkedHashMap': 'java.util.LinkedHashMap',
      'LinkedHashSet': 'java.util.LinkedHashSet',
      'LinkedList': 'java.util.LinkedList',
      'List': 'java.util.List',
      'ListIterator': 'java.util.ListIterator',
      'ListResourceBundle': 'java.util.ListResourceBundle',
      'Locale': 'java.util.Locale',
      'Locale$Builder': 'java.util.Locale$Builder',
      'Locale$Category': 'java.util.Locale$Category',
      'Locale$FilteringMode': 'java.util.Locale$FilteringMode',
      'Locale$LanguageRange': 'java.util.Locale$LanguageRange',
      'LongSummaryStatistics': 'java.util.LongSummaryStatistics',
      'Map': 'java.util.Map',
      'Map$Entry': 'java.util.Map$Entry',
      'MissingFormatArgumentException': 'java.util.MissingFormatArgumentException',
      'MissingFormatWidthException': 'java.util.MissingFormatWidthException',
      'MissingResourceException': 'java.util.MissingResourceException',
      'NavigableMap': 'java.util.NavigableMap',
      'NavigableSet': 'java.util.NavigableSet',
      'NoSuchElementException': 'java.util.NoSuchElementException',
      'Objects': 'java.util.Objects',
      'Observable': 'java.util.Observable',
      'Observer': 'java.util.Observer',
      'Optional': 'java.util.Optional',
      'OptionalDouble': 'java.util.OptionalDouble',
      'OptionalInt': 'java.util.OptionalInt',
      'OptionalLong': 'java.util.OptionalLong',
      'PrimitiveIterator': 'java.util.PrimitiveIterator',
      'PrimitiveIterator$OfDouble': 'java.util.PrimitiveIterator$OfDouble',
      'PrimitiveIterator$OfInt': 'java.util.PrimitiveIterator$OfInt',
      'PrimitiveIterator$OfLong': 'java.util.PrimitiveIterator$OfLong',
      'PriorityQueue': 'java.util.PriorityQueue',
      'Properties': 'java.util.Properties',
      'PropertyPermission': 'java.util.PropertyPermission',
      'PropertyResourceBundle': 'java.util.PropertyResourceBundle',
      'Queue': 'java.util.Queue',
      'Random': 'java.util.Random',
      'RandomAccess': 'java.util.RandomAccess',
      'ResourceBundle': 'java.util.ResourceBundle',
      'ResourceBundle$Control': 'java.util.ResourceBundle$Control',
      'Scanner': 'java.util.Scanner',
      'ServiceConfigurationError': 'java.util.ServiceConfigurationError',
      'ServiceLoader': 'java.util.ServiceLoader',
      'Set': 'java.util.Set',
      'SimpleTimeZone': 'java.util.SimpleTimeZone',
      'SortedMap': 'java.util.SortedMap',
      'SortedSet': 'java.util.SortedSet',
      'Spliterator': 'java.util.Spliterator',
      'Spliterator$OfDouble': 'java.util.Spliterator$OfDouble',
      'Spliterator$OfInt': 'java.util.Spliterator$OfInt',
      'Spliterator$OfLong': 'java.util.Spliterator$OfLong',
      'Spliterator$OfPrimitive': 'java.util.Spliterator$OfPrimitive',
      'Spliterators': 'java.util.Spliterators',
      'Spliterators$AbstractDoubleSpliterator': 'java.util.Spliterators$AbstractDoubleSpliterator',
      'Spliterators$AbstractIntSpliterator': 'java.util.Spliterators$AbstractIntSpliterator',
      'Spliterators$AbstractLongSpliterator': 'java.util.Spliterators$AbstractLongSpliterator',
      'Spliterators$AbstractSpliterator': 'java.util.Spliterators$AbstractSpliterator',
      'SplittableRandom': 'java.util.SplittableRandom',
      'Stack': 'java.util.Stack',
      'StringJoiner': 'java.util.StringJoiner',
      'StringTokenizer': 'java.util.StringTokenizer',
      'Timer': 'java.util.Timer',
      'TimerTask': 'java.util.TimerTask',
      'TimeZone': 'java.util.TimeZone',
      'TooManyListenersException': 'java.util.TooManyListenersException',
      'TreeMap': 'java.util.TreeMap',
      'TreeSet': 'java.util.TreeSet',
      'UnknownFormatConversionException': 'java.util.UnknownFormatConversionException',
      'UnknownFormatFlagsException': 'java.util.UnknownFormatFlagsException',
      'UUID': 'java.util.UUID',
      'Vector': 'java.util.Vector',
      'WeakHashMap': 'java.util.WeakHashMap'
    };
    return shortToLongMap[className];
  }

  export function importClass(className: 'Thing$Nested'): Java.com.redseal.featureset.ambiguous.Thing$Nested.Static;
  export function importClass(className: 'AnEnum'): Java.com.redseal.featureset.AnEnum.Static;
  export function importClass(className: 'AnonClassTest'): Java.com.redseal.featureset.AnonClassTest.Static;
  export function importClass(className: 'Overloading'): Java.com.redseal.featureset.overloading.Overloading.Static;
  export function importClass(className: 'Overloading$Bar'): Java.com.redseal.featureset.overloading.Overloading$Bar.Static;
  export function importClass(className: 'Overloading$Foo'): Java.com.redseal.featureset.overloading.Overloading$Foo.Static;
  export function importClass(className: 'Step'): Java.com.redseal.featureset.overloading.Step.Static;
  export function importClass(className: 'SomeAbstractClass'): Java.com.redseal.featureset.SomeAbstractClass.Static;
  export function importClass(className: 'SomeClass'): Java.com.redseal.featureset.SomeClass.Static;
  export function importClass(className: 'SomeInterface'): Java.com.redseal.featureset.SomeInterface.Static;
  export function importClass(className: 'TinyInterface'): Java.com.redseal.featureset.TinyInterface.Static;
  export function importClass(className: 'Boolean'): Java.java.lang.Boolean.Static;
  export function importClass(className: 'Class'): Java.java.lang.Class.Static;
  export function importClass(className: 'Double'): Java.java.lang.Double.Static;
  export function importClass(className: 'Float'): Java.java.lang.Float.Static;
  export function importClass(className: 'Integer'): Java.java.lang.Integer.Static;
  export function importClass(className: 'Long'): Java.java.lang.Long.Static;
  export function importClass(className: 'Object'): Java.java.lang.Object.Static;
  export function importClass(className: 'Method'): Java.java.lang.reflect.Method.Static;
  export function importClass(className: 'Short'): Java.java.lang.Short.Static;
  export function importClass(className: 'String'): Java.java.lang.String.Static;
  export function importClass(className: 'AbstractCollection'): Java.java.util.AbstractCollection.Static;
  export function importClass(className: 'AbstractList'): Java.java.util.AbstractList.Static;
  export function importClass(className: 'AbstractMap'): Java.java.util.AbstractMap.Static;
  export function importClass(className: 'AbstractMap$SimpleEntry'): Java.java.util.AbstractMap$SimpleEntry.Static;
  export function importClass(className: 'AbstractMap$SimpleImmutableEntry'): Java.java.util.AbstractMap$SimpleImmutableEntry.Static;
  export function importClass(className: 'AbstractQueue'): Java.java.util.AbstractQueue.Static;
  export function importClass(className: 'AbstractSequentialList'): Java.java.util.AbstractSequentialList.Static;
  export function importClass(className: 'AbstractSet'): Java.java.util.AbstractSet.Static;
  export function importClass(className: 'ArrayDeque'): Java.java.util.ArrayDeque.Static;
  export function importClass(className: 'ArrayList'): Java.java.util.ArrayList.Static;
  export function importClass(className: 'Arrays'): Java.java.util.Arrays.Static;
  export function importClass(className: 'Base64'): Java.java.util.Base64.Static;
  export function importClass(className: 'Base64$Decoder'): Java.java.util.Base64$Decoder.Static;
  export function importClass(className: 'Base64$Encoder'): Java.java.util.Base64$Encoder.Static;
  export function importClass(className: 'BitSet'): Java.java.util.BitSet.Static;
  export function importClass(className: 'Calendar'): Java.java.util.Calendar.Static;
  export function importClass(className: 'Calendar$Builder'): Java.java.util.Calendar$Builder.Static;
  export function importClass(className: 'Collection'): Java.java.util.Collection.Static;
  export function importClass(className: 'Collections'): Java.java.util.Collections.Static;
  export function importClass(className: 'Comparator'): Java.java.util.Comparator.Static;
  export function importClass(className: 'ConcurrentModificationException'): Java.java.util.ConcurrentModificationException.Static;
  export function importClass(className: 'Currency'): Java.java.util.Currency.Static;
  export function importClass(className: 'Date'): Java.java.util.Date.Static;
  export function importClass(className: 'Deque'): Java.java.util.Deque.Static;
  export function importClass(className: 'Dictionary'): Java.java.util.Dictionary.Static;
  export function importClass(className: 'DoubleSummaryStatistics'): Java.java.util.DoubleSummaryStatistics.Static;
  export function importClass(className: 'DuplicateFormatFlagsException'): Java.java.util.DuplicateFormatFlagsException.Static;
  export function importClass(className: 'EmptyStackException'): Java.java.util.EmptyStackException.Static;
  export function importClass(className: 'Enumeration'): Java.java.util.Enumeration.Static;
  export function importClass(className: 'EnumMap'): Java.java.util.EnumMap.Static;
  export function importClass(className: 'EnumSet'): Java.java.util.EnumSet.Static;
  export function importClass(className: 'EventListener'): Java.java.util.EventListener.Static;
  export function importClass(className: 'EventListenerProxy'): Java.java.util.EventListenerProxy.Static;
  export function importClass(className: 'EventObject'): Java.java.util.EventObject.Static;
  export function importClass(className: 'FormatFlagsConversionMismatchException'): Java.java.util.FormatFlagsConversionMismatchException.Static;
  export function importClass(className: 'Formattable'): Java.java.util.Formattable.Static;
  export function importClass(className: 'FormattableFlags'): Java.java.util.FormattableFlags.Static;
  export function importClass(className: 'Formatter'): Java.java.util.Formatter.Static;
  export function importClass(className: 'Formatter$BigDecimalLayoutForm'): Java.java.util.Formatter$BigDecimalLayoutForm.Static;
  export function importClass(className: 'FormatterClosedException'): Java.java.util.FormatterClosedException.Static;
  export function importClass(className: 'Function'): Java.java.util.function_.Function.Static;
  export function importClass(className: 'GregorianCalendar'): Java.java.util.GregorianCalendar.Static;
  export function importClass(className: 'HashMap'): Java.java.util.HashMap.Static;
  export function importClass(className: 'HashSet'): Java.java.util.HashSet.Static;
  export function importClass(className: 'Hashtable'): Java.java.util.Hashtable.Static;
  export function importClass(className: 'IdentityHashMap'): Java.java.util.IdentityHashMap.Static;
  export function importClass(className: 'IllegalFormatCodePointException'): Java.java.util.IllegalFormatCodePointException.Static;
  export function importClass(className: 'IllegalFormatConversionException'): Java.java.util.IllegalFormatConversionException.Static;
  export function importClass(className: 'IllegalFormatException'): Java.java.util.IllegalFormatException.Static;
  export function importClass(className: 'IllegalFormatFlagsException'): Java.java.util.IllegalFormatFlagsException.Static;
  export function importClass(className: 'IllegalFormatPrecisionException'): Java.java.util.IllegalFormatPrecisionException.Static;
  export function importClass(className: 'IllegalFormatWidthException'): Java.java.util.IllegalFormatWidthException.Static;
  export function importClass(className: 'IllformedLocaleException'): Java.java.util.IllformedLocaleException.Static;
  export function importClass(className: 'InputMismatchException'): Java.java.util.InputMismatchException.Static;
  export function importClass(className: 'IntSummaryStatistics'): Java.java.util.IntSummaryStatistics.Static;
  export function importClass(className: 'InvalidPropertiesFormatException'): Java.java.util.InvalidPropertiesFormatException.Static;
  export function importClass(className: 'Iterator'): Java.java.util.Iterator.Static;
  export function importClass(className: 'LinkedHashMap'): Java.java.util.LinkedHashMap.Static;
  export function importClass(className: 'LinkedHashSet'): Java.java.util.LinkedHashSet.Static;
  export function importClass(className: 'LinkedList'): Java.java.util.LinkedList.Static;
  export function importClass(className: 'List'): Java.java.util.List.Static;
  export function importClass(className: 'ListIterator'): Java.java.util.ListIterator.Static;
  export function importClass(className: 'ListResourceBundle'): Java.java.util.ListResourceBundle.Static;
  export function importClass(className: 'Locale'): Java.java.util.Locale.Static;
  export function importClass(className: 'Locale$Builder'): Java.java.util.Locale$Builder.Static;
  export function importClass(className: 'Locale$Category'): Java.java.util.Locale$Category.Static;
  export function importClass(className: 'Locale$FilteringMode'): Java.java.util.Locale$FilteringMode.Static;
  export function importClass(className: 'Locale$LanguageRange'): Java.java.util.Locale$LanguageRange.Static;
  export function importClass(className: 'LongSummaryStatistics'): Java.java.util.LongSummaryStatistics.Static;
  export function importClass(className: 'Map'): Java.java.util.Map.Static;
  export function importClass(className: 'Map$Entry'): Java.java.util.Map$Entry.Static;
  export function importClass(className: 'MissingFormatArgumentException'): Java.java.util.MissingFormatArgumentException.Static;
  export function importClass(className: 'MissingFormatWidthException'): Java.java.util.MissingFormatWidthException.Static;
  export function importClass(className: 'MissingResourceException'): Java.java.util.MissingResourceException.Static;
  export function importClass(className: 'NavigableMap'): Java.java.util.NavigableMap.Static;
  export function importClass(className: 'NavigableSet'): Java.java.util.NavigableSet.Static;
  export function importClass(className: 'NoSuchElementException'): Java.java.util.NoSuchElementException.Static;
  export function importClass(className: 'Objects'): Java.java.util.Objects.Static;
  export function importClass(className: 'Observable'): Java.java.util.Observable.Static;
  export function importClass(className: 'Observer'): Java.java.util.Observer.Static;
  export function importClass(className: 'Optional'): Java.java.util.Optional.Static;
  export function importClass(className: 'OptionalDouble'): Java.java.util.OptionalDouble.Static;
  export function importClass(className: 'OptionalInt'): Java.java.util.OptionalInt.Static;
  export function importClass(className: 'OptionalLong'): Java.java.util.OptionalLong.Static;
  export function importClass(className: 'PrimitiveIterator'): Java.java.util.PrimitiveIterator.Static;
  export function importClass(className: 'PrimitiveIterator$OfDouble'): Java.java.util.PrimitiveIterator$OfDouble.Static;
  export function importClass(className: 'PrimitiveIterator$OfInt'): Java.java.util.PrimitiveIterator$OfInt.Static;
  export function importClass(className: 'PrimitiveIterator$OfLong'): Java.java.util.PrimitiveIterator$OfLong.Static;
  export function importClass(className: 'PriorityQueue'): Java.java.util.PriorityQueue.Static;
  export function importClass(className: 'Properties'): Java.java.util.Properties.Static;
  export function importClass(className: 'PropertyPermission'): Java.java.util.PropertyPermission.Static;
  export function importClass(className: 'PropertyResourceBundle'): Java.java.util.PropertyResourceBundle.Static;
  export function importClass(className: 'Queue'): Java.java.util.Queue.Static;
  export function importClass(className: 'Random'): Java.java.util.Random.Static;
  export function importClass(className: 'RandomAccess'): Java.java.util.RandomAccess.Static;
  export function importClass(className: 'ResourceBundle'): Java.java.util.ResourceBundle.Static;
  export function importClass(className: 'ResourceBundle$Control'): Java.java.util.ResourceBundle$Control.Static;
  export function importClass(className: 'Scanner'): Java.java.util.Scanner.Static;
  export function importClass(className: 'ServiceConfigurationError'): Java.java.util.ServiceConfigurationError.Static;
  export function importClass(className: 'ServiceLoader'): Java.java.util.ServiceLoader.Static;
  export function importClass(className: 'Set'): Java.java.util.Set.Static;
  export function importClass(className: 'SimpleTimeZone'): Java.java.util.SimpleTimeZone.Static;
  export function importClass(className: 'SortedMap'): Java.java.util.SortedMap.Static;
  export function importClass(className: 'SortedSet'): Java.java.util.SortedSet.Static;
  export function importClass(className: 'Spliterator'): Java.java.util.Spliterator.Static;
  export function importClass(className: 'Spliterator$OfDouble'): Java.java.util.Spliterator$OfDouble.Static;
  export function importClass(className: 'Spliterator$OfInt'): Java.java.util.Spliterator$OfInt.Static;
  export function importClass(className: 'Spliterator$OfLong'): Java.java.util.Spliterator$OfLong.Static;
  export function importClass(className: 'Spliterator$OfPrimitive'): Java.java.util.Spliterator$OfPrimitive.Static;
  export function importClass(className: 'Spliterators'): Java.java.util.Spliterators.Static;
  export function importClass(className: 'Spliterators$AbstractDoubleSpliterator'): Java.java.util.Spliterators$AbstractDoubleSpliterator.Static;
  export function importClass(className: 'Spliterators$AbstractIntSpliterator'): Java.java.util.Spliterators$AbstractIntSpliterator.Static;
  export function importClass(className: 'Spliterators$AbstractLongSpliterator'): Java.java.util.Spliterators$AbstractLongSpliterator.Static;
  export function importClass(className: 'Spliterators$AbstractSpliterator'): Java.java.util.Spliterators$AbstractSpliterator.Static;
  export function importClass(className: 'SplittableRandom'): Java.java.util.SplittableRandom.Static;
  export function importClass(className: 'Stack'): Java.java.util.Stack.Static;
  export function importClass(className: 'StringJoiner'): Java.java.util.StringJoiner.Static;
  export function importClass(className: 'StringTokenizer'): Java.java.util.StringTokenizer.Static;
  export function importClass(className: 'Timer'): Java.java.util.Timer.Static;
  export function importClass(className: 'TimerTask'): Java.java.util.TimerTask.Static;
  export function importClass(className: 'TimeZone'): Java.java.util.TimeZone.Static;
  export function importClass(className: 'TooManyListenersException'): Java.java.util.TooManyListenersException.Static;
  export function importClass(className: 'TreeMap'): Java.java.util.TreeMap.Static;
  export function importClass(className: 'TreeSet'): Java.java.util.TreeSet.Static;
  export function importClass(className: 'UnknownFormatConversionException'): Java.java.util.UnknownFormatConversionException.Static;
  export function importClass(className: 'UnknownFormatFlagsException'): Java.java.util.UnknownFormatFlagsException.Static;
  export function importClass(className: 'UUID'): Java.java.util.UUID.Static;
  export function importClass(className: 'Vector'): Java.java.util.Vector.Static;
  export function importClass(className: 'WeakHashMap'): Java.java.util.WeakHashMap.Static;
  export function importClass(className: 'com.redseal.featureset.ambiguous.Thing'): Java.com.redseal.featureset.ambiguous.Thing.Static;
  export function importClass(className: 'com.redseal.featureset.ambiguous.Thing$Nested'): Java.com.redseal.featureset.ambiguous.Thing$Nested.Static;
  export function importClass(className: 'com.redseal.featureset.AnEnum'): Java.com.redseal.featureset.AnEnum.Static;
  export function importClass(className: 'com.redseal.featureset.AnonClassTest'): Java.com.redseal.featureset.AnonClassTest.Static;
  export function importClass(className: 'com.redseal.featureset.overloading.Overloading'): Java.com.redseal.featureset.overloading.Overloading.Static;
  export function importClass(className: 'com.redseal.featureset.overloading.Overloading$Bar'): Java.com.redseal.featureset.overloading.Overloading$Bar.Static;
  export function importClass(className: 'com.redseal.featureset.overloading.Overloading$Foo'): Java.com.redseal.featureset.overloading.Overloading$Foo.Static;
  export function importClass(className: 'com.redseal.featureset.overloading.Step'): Java.com.redseal.featureset.overloading.Step.Static;
  export function importClass(className: 'com.redseal.featureset.SomeAbstractClass'): Java.com.redseal.featureset.SomeAbstractClass.Static;
  export function importClass(className: 'com.redseal.featureset.SomeClass'): Java.com.redseal.featureset.SomeClass.Static;
  export function importClass(className: 'com.redseal.featureset.SomeInterface'): Java.com.redseal.featureset.SomeInterface.Static;
  export function importClass(className: 'com.redseal.featureset.Thing'): Java.com.redseal.featureset.Thing.Static;
  export function importClass(className: 'com.redseal.featureset.TinyInterface'): Java.com.redseal.featureset.TinyInterface.Static;
  export function importClass(className: 'java.lang.Boolean'): Java.java.lang.Boolean.Static;
  export function importClass(className: 'java.lang.Class'): Java.java.lang.Class.Static;
  export function importClass(className: 'java.lang.Double'): Java.java.lang.Double.Static;
  export function importClass(className: 'java.lang.Float'): Java.java.lang.Float.Static;
  export function importClass(className: 'java.lang.Integer'): Java.java.lang.Integer.Static;
  export function importClass(className: 'java.lang.Long'): Java.java.lang.Long.Static;
  export function importClass(className: 'java.lang.Object'): Java.java.lang.Object.Static;
  export function importClass(className: 'java.lang.reflect.Method'): Java.java.lang.reflect.Method.Static;
  export function importClass(className: 'java.lang.Short'): Java.java.lang.Short.Static;
  export function importClass(className: 'java.lang.String'): Java.java.lang.String.Static;
  export function importClass(className: 'java.util.AbstractCollection'): Java.java.util.AbstractCollection.Static;
  export function importClass(className: 'java.util.AbstractList'): Java.java.util.AbstractList.Static;
  export function importClass(className: 'java.util.AbstractMap'): Java.java.util.AbstractMap.Static;
  export function importClass(className: 'java.util.AbstractMap$SimpleEntry'): Java.java.util.AbstractMap$SimpleEntry.Static;
  export function importClass(className: 'java.util.AbstractMap$SimpleImmutableEntry'): Java.java.util.AbstractMap$SimpleImmutableEntry.Static;
  export function importClass(className: 'java.util.AbstractQueue'): Java.java.util.AbstractQueue.Static;
  export function importClass(className: 'java.util.AbstractSequentialList'): Java.java.util.AbstractSequentialList.Static;
  export function importClass(className: 'java.util.AbstractSet'): Java.java.util.AbstractSet.Static;
  export function importClass(className: 'java.util.ArrayDeque'): Java.java.util.ArrayDeque.Static;
  export function importClass(className: 'java.util.ArrayList'): Java.java.util.ArrayList.Static;
  export function importClass(className: 'java.util.Arrays'): Java.java.util.Arrays.Static;
  export function importClass(className: 'java.util.Base64'): Java.java.util.Base64.Static;
  export function importClass(className: 'java.util.Base64$Decoder'): Java.java.util.Base64$Decoder.Static;
  export function importClass(className: 'java.util.Base64$Encoder'): Java.java.util.Base64$Encoder.Static;
  export function importClass(className: 'java.util.BitSet'): Java.java.util.BitSet.Static;
  export function importClass(className: 'java.util.Calendar'): Java.java.util.Calendar.Static;
  export function importClass(className: 'java.util.Calendar$Builder'): Java.java.util.Calendar$Builder.Static;
  export function importClass(className: 'java.util.Collection'): Java.java.util.Collection.Static;
  export function importClass(className: 'java.util.Collections'): Java.java.util.Collections.Static;
  export function importClass(className: 'java.util.Comparator'): Java.java.util.Comparator.Static;
  export function importClass(className: 'java.util.ConcurrentModificationException'): Java.java.util.ConcurrentModificationException.Static;
  export function importClass(className: 'java.util.Currency'): Java.java.util.Currency.Static;
  export function importClass(className: 'java.util.Date'): Java.java.util.Date.Static;
  export function importClass(className: 'java.util.Deque'): Java.java.util.Deque.Static;
  export function importClass(className: 'java.util.Dictionary'): Java.java.util.Dictionary.Static;
  export function importClass(className: 'java.util.DoubleSummaryStatistics'): Java.java.util.DoubleSummaryStatistics.Static;
  export function importClass(className: 'java.util.DuplicateFormatFlagsException'): Java.java.util.DuplicateFormatFlagsException.Static;
  export function importClass(className: 'java.util.EmptyStackException'): Java.java.util.EmptyStackException.Static;
  export function importClass(className: 'java.util.Enumeration'): Java.java.util.Enumeration.Static;
  export function importClass(className: 'java.util.EnumMap'): Java.java.util.EnumMap.Static;
  export function importClass(className: 'java.util.EnumSet'): Java.java.util.EnumSet.Static;
  export function importClass(className: 'java.util.EventListener'): Java.java.util.EventListener.Static;
  export function importClass(className: 'java.util.EventListenerProxy'): Java.java.util.EventListenerProxy.Static;
  export function importClass(className: 'java.util.EventObject'): Java.java.util.EventObject.Static;
  export function importClass(className: 'java.util.FormatFlagsConversionMismatchException'): Java.java.util.FormatFlagsConversionMismatchException.Static;
  export function importClass(className: 'java.util.Formattable'): Java.java.util.Formattable.Static;
  export function importClass(className: 'java.util.FormattableFlags'): Java.java.util.FormattableFlags.Static;
  export function importClass(className: 'java.util.Formatter'): Java.java.util.Formatter.Static;
  export function importClass(className: 'java.util.Formatter$BigDecimalLayoutForm'): Java.java.util.Formatter$BigDecimalLayoutForm.Static;
  export function importClass(className: 'java.util.FormatterClosedException'): Java.java.util.FormatterClosedException.Static;
  export function importClass(className: 'java.util.function.Function'): Java.java.util.function_.Function.Static;
  export function importClass(className: 'java.util.GregorianCalendar'): Java.java.util.GregorianCalendar.Static;
  export function importClass(className: 'java.util.HashMap'): Java.java.util.HashMap.Static;
  export function importClass(className: 'java.util.HashSet'): Java.java.util.HashSet.Static;
  export function importClass(className: 'java.util.Hashtable'): Java.java.util.Hashtable.Static;
  export function importClass(className: 'java.util.IdentityHashMap'): Java.java.util.IdentityHashMap.Static;
  export function importClass(className: 'java.util.IllegalFormatCodePointException'): Java.java.util.IllegalFormatCodePointException.Static;
  export function importClass(className: 'java.util.IllegalFormatConversionException'): Java.java.util.IllegalFormatConversionException.Static;
  export function importClass(className: 'java.util.IllegalFormatException'): Java.java.util.IllegalFormatException.Static;
  export function importClass(className: 'java.util.IllegalFormatFlagsException'): Java.java.util.IllegalFormatFlagsException.Static;
  export function importClass(className: 'java.util.IllegalFormatPrecisionException'): Java.java.util.IllegalFormatPrecisionException.Static;
  export function importClass(className: 'java.util.IllegalFormatWidthException'): Java.java.util.IllegalFormatWidthException.Static;
  export function importClass(className: 'java.util.IllformedLocaleException'): Java.java.util.IllformedLocaleException.Static;
  export function importClass(className: 'java.util.InputMismatchException'): Java.java.util.InputMismatchException.Static;
  export function importClass(className: 'java.util.IntSummaryStatistics'): Java.java.util.IntSummaryStatistics.Static;
  export function importClass(className: 'java.util.InvalidPropertiesFormatException'): Java.java.util.InvalidPropertiesFormatException.Static;
  export function importClass(className: 'java.util.Iterator'): Java.java.util.Iterator.Static;
  export function importClass(className: 'java.util.LinkedHashMap'): Java.java.util.LinkedHashMap.Static;
  export function importClass(className: 'java.util.LinkedHashSet'): Java.java.util.LinkedHashSet.Static;
  export function importClass(className: 'java.util.LinkedList'): Java.java.util.LinkedList.Static;
  export function importClass(className: 'java.util.List'): Java.java.util.List.Static;
  export function importClass(className: 'java.util.ListIterator'): Java.java.util.ListIterator.Static;
  export function importClass(className: 'java.util.ListResourceBundle'): Java.java.util.ListResourceBundle.Static;
  export function importClass(className: 'java.util.Locale'): Java.java.util.Locale.Static;
  export function importClass(className: 'java.util.Locale$Builder'): Java.java.util.Locale$Builder.Static;
  export function importClass(className: 'java.util.Locale$Category'): Java.java.util.Locale$Category.Static;
  export function importClass(className: 'java.util.Locale$FilteringMode'): Java.java.util.Locale$FilteringMode.Static;
  export function importClass(className: 'java.util.Locale$LanguageRange'): Java.java.util.Locale$LanguageRange.Static;
  export function importClass(className: 'java.util.LongSummaryStatistics'): Java.java.util.LongSummaryStatistics.Static;
  export function importClass(className: 'java.util.Map'): Java.java.util.Map.Static;
  export function importClass(className: 'java.util.Map$Entry'): Java.java.util.Map$Entry.Static;
  export function importClass(className: 'java.util.MissingFormatArgumentException'): Java.java.util.MissingFormatArgumentException.Static;
  export function importClass(className: 'java.util.MissingFormatWidthException'): Java.java.util.MissingFormatWidthException.Static;
  export function importClass(className: 'java.util.MissingResourceException'): Java.java.util.MissingResourceException.Static;
  export function importClass(className: 'java.util.NavigableMap'): Java.java.util.NavigableMap.Static;
  export function importClass(className: 'java.util.NavigableSet'): Java.java.util.NavigableSet.Static;
  export function importClass(className: 'java.util.NoSuchElementException'): Java.java.util.NoSuchElementException.Static;
  export function importClass(className: 'java.util.Objects'): Java.java.util.Objects.Static;
  export function importClass(className: 'java.util.Observable'): Java.java.util.Observable.Static;
  export function importClass(className: 'java.util.Observer'): Java.java.util.Observer.Static;
  export function importClass(className: 'java.util.Optional'): Java.java.util.Optional.Static;
  export function importClass(className: 'java.util.OptionalDouble'): Java.java.util.OptionalDouble.Static;
  export function importClass(className: 'java.util.OptionalInt'): Java.java.util.OptionalInt.Static;
  export function importClass(className: 'java.util.OptionalLong'): Java.java.util.OptionalLong.Static;
  export function importClass(className: 'java.util.PrimitiveIterator'): Java.java.util.PrimitiveIterator.Static;
  export function importClass(className: 'java.util.PrimitiveIterator$OfDouble'): Java.java.util.PrimitiveIterator$OfDouble.Static;
  export function importClass(className: 'java.util.PrimitiveIterator$OfInt'): Java.java.util.PrimitiveIterator$OfInt.Static;
  export function importClass(className: 'java.util.PrimitiveIterator$OfLong'): Java.java.util.PrimitiveIterator$OfLong.Static;
  export function importClass(className: 'java.util.PriorityQueue'): Java.java.util.PriorityQueue.Static;
  export function importClass(className: 'java.util.Properties'): Java.java.util.Properties.Static;
  export function importClass(className: 'java.util.PropertyPermission'): Java.java.util.PropertyPermission.Static;
  export function importClass(className: 'java.util.PropertyResourceBundle'): Java.java.util.PropertyResourceBundle.Static;
  export function importClass(className: 'java.util.Queue'): Java.java.util.Queue.Static;
  export function importClass(className: 'java.util.Random'): Java.java.util.Random.Static;
  export function importClass(className: 'java.util.RandomAccess'): Java.java.util.RandomAccess.Static;
  export function importClass(className: 'java.util.ResourceBundle'): Java.java.util.ResourceBundle.Static;
  export function importClass(className: 'java.util.ResourceBundle$Control'): Java.java.util.ResourceBundle$Control.Static;
  export function importClass(className: 'java.util.Scanner'): Java.java.util.Scanner.Static;
  export function importClass(className: 'java.util.ServiceConfigurationError'): Java.java.util.ServiceConfigurationError.Static;
  export function importClass(className: 'java.util.ServiceLoader'): Java.java.util.ServiceLoader.Static;
  export function importClass(className: 'java.util.Set'): Java.java.util.Set.Static;
  export function importClass(className: 'java.util.SimpleTimeZone'): Java.java.util.SimpleTimeZone.Static;
  export function importClass(className: 'java.util.SortedMap'): Java.java.util.SortedMap.Static;
  export function importClass(className: 'java.util.SortedSet'): Java.java.util.SortedSet.Static;
  export function importClass(className: 'java.util.Spliterator'): Java.java.util.Spliterator.Static;
  export function importClass(className: 'java.util.Spliterator$OfDouble'): Java.java.util.Spliterator$OfDouble.Static;
  export function importClass(className: 'java.util.Spliterator$OfInt'): Java.java.util.Spliterator$OfInt.Static;
  export function importClass(className: 'java.util.Spliterator$OfLong'): Java.java.util.Spliterator$OfLong.Static;
  export function importClass(className: 'java.util.Spliterator$OfPrimitive'): Java.java.util.Spliterator$OfPrimitive.Static;
  export function importClass(className: 'java.util.Spliterators'): Java.java.util.Spliterators.Static;
  export function importClass(className: 'java.util.Spliterators$AbstractDoubleSpliterator'): Java.java.util.Spliterators$AbstractDoubleSpliterator.Static;
  export function importClass(className: 'java.util.Spliterators$AbstractIntSpliterator'): Java.java.util.Spliterators$AbstractIntSpliterator.Static;
  export function importClass(className: 'java.util.Spliterators$AbstractLongSpliterator'): Java.java.util.Spliterators$AbstractLongSpliterator.Static;
  export function importClass(className: 'java.util.Spliterators$AbstractSpliterator'): Java.java.util.Spliterators$AbstractSpliterator.Static;
  export function importClass(className: 'java.util.SplittableRandom'): Java.java.util.SplittableRandom.Static;
  export function importClass(className: 'java.util.Stack'): Java.java.util.Stack.Static;
  export function importClass(className: 'java.util.StringJoiner'): Java.java.util.StringJoiner.Static;
  export function importClass(className: 'java.util.StringTokenizer'): Java.java.util.StringTokenizer.Static;
  export function importClass(className: 'java.util.Timer'): Java.java.util.Timer.Static;
  export function importClass(className: 'java.util.TimerTask'): Java.java.util.TimerTask.Static;
  export function importClass(className: 'java.util.TimeZone'): Java.java.util.TimeZone.Static;
  export function importClass(className: 'java.util.TooManyListenersException'): Java.java.util.TooManyListenersException.Static;
  export function importClass(className: 'java.util.TreeMap'): Java.java.util.TreeMap.Static;
  export function importClass(className: 'java.util.TreeSet'): Java.java.util.TreeSet.Static;
  export function importClass(className: 'java.util.UnknownFormatConversionException'): Java.java.util.UnknownFormatConversionException.Static;
  export function importClass(className: 'java.util.UnknownFormatFlagsException'): Java.java.util.UnknownFormatFlagsException.Static;
  export function importClass(className: 'java.util.UUID'): Java.java.util.UUID.Static;
  export function importClass(className: 'java.util.Vector'): Java.java.util.Vector.Static;
  export function importClass(className: 'java.util.WeakHashMap'): Java.java.util.WeakHashMap.Static;
  export function importClass(className: string): any;
  export function importClass(className: string): any {
    var fullName: string = fullyQualifiedName(className) || className;
    return _java.import(fullName);
  }

  export interface Callback<T> {
    (err?: Error, result?: T): void;
  }

  // Returns true if javaObject is an instance of the named class, which may be a short className.
  // Returns false if javaObject is not an instance of the named class.
  // Throws an exception if the named class does not exist, or is an ambiguous short name.
  export function instanceOf(javaObject: any, className: string): boolean {
    var fullName: string = fullyQualifiedName(className) || className;
    return _java.instanceOf(javaObject, fullName);
  }

  export function newShort(val: number): Java.java.lang.Short { return _java.newShort(val); }
  export function newLong(val: number): Java.java.lang.Long { return _java.newLong(val); }
  export function newFloat(val: number): Java.java.lang.Float { return _java.newFloat(val); }
  export function newDouble(val: number): Java.java.lang.Double { return _java.newDouble(val); }

  export function newInstanceA(className: 'com.redseal.featureset.ambiguous.Thing', arg0: string_t, cb: Callback<Java.com.redseal.featureset.ambiguous.Thing>): void;
  export function newInstanceA(className: 'com.redseal.featureset.AnonClassTest', cb: Callback<Java.AnonClassTest>): void;
  export function newInstanceA(className: 'com.redseal.featureset.overloading.Overloading', cb: Callback<Java.Overloading>): void;
  export function newInstanceA(className: 'com.redseal.featureset.overloading.Overloading$Bar', cb: Callback<Java.Overloading$Bar>): void;
  export function newInstanceA(className: 'com.redseal.featureset.overloading.Overloading$Foo', cb: Callback<Java.Overloading$Foo>): void;
  export function newInstanceA(className: 'com.redseal.featureset.SomeAbstractClass', cb: Callback<Java.SomeAbstractClass>): void;
  export function newInstanceA(className: 'com.redseal.featureset.SomeClass', arg0: integer_t, arg1: long_t, arg2: string_t, arg3: boolean_t, arg4: double_t, cb: Callback<Java.SomeClass>): void;
  export function newInstanceA(className: 'com.redseal.featureset.SomeClass', cb: Callback<Java.SomeClass>): void;
  export function newInstanceA(className: 'com.redseal.featureset.Thing', arg0: integer_t, cb: Callback<Java.com.redseal.featureset.Thing>): void;
  export function newInstanceA(className: 'java.lang.Boolean', arg0: string_t, cb: Callback<boolean>): void;
  export function newInstanceA(className: 'java.lang.Boolean', arg0: boolean_t, cb: Callback<boolean>): void;
  export function newInstanceA(className: 'java.lang.Double', arg0: string_t, cb: Callback<number>): void;
  export function newInstanceA(className: 'java.lang.Double', arg0: double_t, cb: Callback<number>): void;
  export function newInstanceA(className: 'java.lang.Float', arg0: string_t, cb: Callback<number>): void;
  export function newInstanceA(className: 'java.lang.Float', arg0: float_t, cb: Callback<number>): void;
  export function newInstanceA(className: 'java.lang.Float', arg0: double_t, cb: Callback<number>): void;
  export function newInstanceA(className: 'java.lang.Integer', arg0: string_t, cb: Callback<number>): void;
  export function newInstanceA(className: 'java.lang.Integer', arg0: integer_t, cb: Callback<number>): void;
  export function newInstanceA(className: 'java.lang.Long', arg0: string_t, cb: Callback<longValue_t>): void;
  export function newInstanceA(className: 'java.lang.Long', arg0: long_t, cb: Callback<longValue_t>): void;
  export function newInstanceA(className: 'java.lang.Object', cb: Callback<object_t>): void;
  export function newInstanceA(className: 'java.lang.Short', arg0: string_t, cb: Callback<number>): void;
  export function newInstanceA(className: 'java.lang.Short', arg0: short_t, cb: Callback<number>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t, cb: Callback<string>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t, cb: Callback<string>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<string>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: object_t, cb: Callback<string>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: string_t, cb: Callback<string>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, cb: Callback<string>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: object_t, cb: Callback<string>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: object_t, cb: Callback<string>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: string_t, cb: Callback<string>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: object_array_t, cb: Callback<string>): void;
  export function newInstanceA(className: 'java.lang.String', arg0: object_array_t, cb: Callback<string>): void;
  export function newInstanceA(className: 'java.lang.String', cb: Callback<string>): void;
  export function newInstanceA(className: 'java.util.AbstractMap$SimpleEntry', arg0: object_t, arg1: object_t, cb: Callback<Java.AbstractMap$SimpleEntry>): void;
  export function newInstanceA(className: 'java.util.AbstractMap$SimpleEntry', arg0: Java.Map$Entry, cb: Callback<Java.AbstractMap$SimpleEntry>): void;
  export function newInstanceA(className: 'java.util.AbstractMap$SimpleImmutableEntry', arg0: object_t, arg1: object_t, cb: Callback<Java.AbstractMap$SimpleImmutableEntry>): void;
  export function newInstanceA(className: 'java.util.AbstractMap$SimpleImmutableEntry', arg0: Java.Map$Entry, cb: Callback<Java.AbstractMap$SimpleImmutableEntry>): void;
  export function newInstanceA(className: 'java.util.ArrayDeque', arg0: Java.Collection, cb: Callback<Java.ArrayDeque>): void;
  export function newInstanceA(className: 'java.util.ArrayDeque', arg0: integer_t, cb: Callback<Java.ArrayDeque>): void;
  export function newInstanceA(className: 'java.util.ArrayDeque', cb: Callback<Java.ArrayDeque>): void;
  export function newInstanceA(className: 'java.util.ArrayList', arg0: Java.Collection, cb: Callback<Java.ArrayList>): void;
  export function newInstanceA(className: 'java.util.ArrayList', arg0: integer_t, cb: Callback<Java.ArrayList>): void;
  export function newInstanceA(className: 'java.util.ArrayList', cb: Callback<Java.ArrayList>): void;
  export function newInstanceA(className: 'java.util.BitSet', arg0: integer_t, cb: Callback<Java.BitSet>): void;
  export function newInstanceA(className: 'java.util.BitSet', cb: Callback<Java.BitSet>): void;
  export function newInstanceA(className: 'java.util.Calendar$Builder', cb: Callback<Java.Calendar$Builder>): void;
  export function newInstanceA(className: 'java.util.ConcurrentModificationException', arg0: string_t, arg1: object_t, cb: Callback<Java.ConcurrentModificationException>): void;
  export function newInstanceA(className: 'java.util.ConcurrentModificationException', arg0: object_t, cb: Callback<Java.ConcurrentModificationException>): void;
  export function newInstanceA(className: 'java.util.ConcurrentModificationException', arg0: string_t, cb: Callback<Java.ConcurrentModificationException>): void;
  export function newInstanceA(className: 'java.util.ConcurrentModificationException', cb: Callback<Java.ConcurrentModificationException>): void;
  export function newInstanceA(className: 'java.util.Date', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, cb: Callback<Java.Date>): void;
  export function newInstanceA(className: 'java.util.Date', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, cb: Callback<Java.Date>): void;
  export function newInstanceA(className: 'java.util.Date', arg0: integer_t, arg1: integer_t, arg2: integer_t, cb: Callback<Java.Date>): void;
  export function newInstanceA(className: 'java.util.Date', arg0: string_t, cb: Callback<Java.Date>): void;
  export function newInstanceA(className: 'java.util.Date', arg0: long_t, cb: Callback<Java.Date>): void;
  export function newInstanceA(className: 'java.util.Date', cb: Callback<Java.Date>): void;
  export function newInstanceA(className: 'java.util.Dictionary', cb: Callback<Java.Dictionary>): void;
  export function newInstanceA(className: 'java.util.DoubleSummaryStatistics', cb: Callback<Java.DoubleSummaryStatistics>): void;
  export function newInstanceA(className: 'java.util.DuplicateFormatFlagsException', arg0: string_t, cb: Callback<Java.DuplicateFormatFlagsException>): void;
  export function newInstanceA(className: 'java.util.EmptyStackException', cb: Callback<Java.EmptyStackException>): void;
  export function newInstanceA(className: 'java.util.EnumMap', arg0: Java.EnumMap, cb: Callback<Java.EnumMap>): void;
  export function newInstanceA(className: 'java.util.EnumMap', arg0: Java.Class, cb: Callback<Java.EnumMap>): void;
  export function newInstanceA(className: 'java.util.EnumMap', arg0: Java.Map, cb: Callback<Java.EnumMap>): void;
  export function newInstanceA(className: 'java.util.EventListenerProxy', arg0: Java.EventListener, cb: Callback<Java.EventListenerProxy>): void;
  export function newInstanceA(className: 'java.util.EventObject', arg0: object_t, cb: Callback<Java.EventObject>): void;
  export function newInstanceA(className: 'java.util.FormatFlagsConversionMismatchException', arg0: string_t, arg1: object_t, cb: Callback<Java.FormatFlagsConversionMismatchException>): void;
  export function newInstanceA(className: 'java.util.Formatter', arg0: object_t, arg1: string_t, arg2: Java.Locale, cb: Callback<Java.Formatter>): void;
  export function newInstanceA(className: 'java.util.Formatter', arg0: string_t, arg1: string_t, arg2: Java.Locale, cb: Callback<Java.Formatter>): void;
  export function newInstanceA(className: 'java.util.Formatter', arg0: object_t, arg1: string_t, arg2: Java.Locale, cb: Callback<Java.Formatter>): void;
  export function newInstanceA(className: 'java.util.Formatter', arg0: object_t, arg1: Java.Locale, cb: Callback<Java.Formatter>): void;
  export function newInstanceA(className: 'java.util.Formatter', arg0: object_t, arg1: string_t, cb: Callback<Java.Formatter>): void;
  export function newInstanceA(className: 'java.util.Formatter', arg0: string_t, arg1: string_t, cb: Callback<Java.Formatter>): void;
  export function newInstanceA(className: 'java.util.Formatter', arg0: object_t, arg1: string_t, cb: Callback<Java.Formatter>): void;
  export function newInstanceA(className: 'java.util.Formatter', arg0: object_t, cb: Callback<Java.Formatter>): void;
  export function newInstanceA(className: 'java.util.Formatter', arg0: object_t, cb: Callback<Java.Formatter>): void;
  export function newInstanceA(className: 'java.util.Formatter', arg0: object_t, cb: Callback<Java.Formatter>): void;
  export function newInstanceA(className: 'java.util.Formatter', arg0: Java.Locale, cb: Callback<Java.Formatter>): void;
  export function newInstanceA(className: 'java.util.Formatter', arg0: string_t, cb: Callback<Java.Formatter>): void;
  export function newInstanceA(className: 'java.util.Formatter', arg0: object_t, cb: Callback<Java.Formatter>): void;
  export function newInstanceA(className: 'java.util.Formatter', cb: Callback<Java.Formatter>): void;
  export function newInstanceA(className: 'java.util.FormatterClosedException', cb: Callback<Java.FormatterClosedException>): void;
  export function newInstanceA(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, cb: Callback<Java.GregorianCalendar>): void;
  export function newInstanceA(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, cb: Callback<Java.GregorianCalendar>): void;
  export function newInstanceA(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, cb: Callback<Java.GregorianCalendar>): void;
  export function newInstanceA(className: 'java.util.GregorianCalendar', arg0: Java.TimeZone, arg1: Java.Locale, cb: Callback<Java.GregorianCalendar>): void;
  export function newInstanceA(className: 'java.util.GregorianCalendar', arg0: Java.TimeZone, cb: Callback<Java.GregorianCalendar>): void;
  export function newInstanceA(className: 'java.util.GregorianCalendar', arg0: Java.Locale, cb: Callback<Java.GregorianCalendar>): void;
  export function newInstanceA(className: 'java.util.GregorianCalendar', cb: Callback<Java.GregorianCalendar>): void;
  export function newInstanceA(className: 'java.util.HashMap', arg0: integer_t, arg1: float_t, cb: Callback<Java.HashMap>): void;
  export function newInstanceA(className: 'java.util.HashMap', arg0: Java.Map, cb: Callback<Java.HashMap>): void;
  export function newInstanceA(className: 'java.util.HashMap', arg0: integer_t, cb: Callback<Java.HashMap>): void;
  export function newInstanceA(className: 'java.util.HashMap', cb: Callback<Java.HashMap>): void;
  export function newInstanceA(className: 'java.util.HashSet', arg0: integer_t, arg1: float_t, cb: Callback<Java.HashSet>): void;
  export function newInstanceA(className: 'java.util.HashSet', arg0: Java.Collection, cb: Callback<Java.HashSet>): void;
  export function newInstanceA(className: 'java.util.HashSet', arg0: integer_t, cb: Callback<Java.HashSet>): void;
  export function newInstanceA(className: 'java.util.HashSet', cb: Callback<Java.HashSet>): void;
  export function newInstanceA(className: 'java.util.Hashtable', arg0: integer_t, arg1: float_t, cb: Callback<Java.Hashtable>): void;
  export function newInstanceA(className: 'java.util.Hashtable', arg0: Java.Map, cb: Callback<Java.Hashtable>): void;
  export function newInstanceA(className: 'java.util.Hashtable', arg0: integer_t, cb: Callback<Java.Hashtable>): void;
  export function newInstanceA(className: 'java.util.Hashtable', cb: Callback<Java.Hashtable>): void;
  export function newInstanceA(className: 'java.util.IdentityHashMap', arg0: Java.Map, cb: Callback<Java.IdentityHashMap>): void;
  export function newInstanceA(className: 'java.util.IdentityHashMap', arg0: integer_t, cb: Callback<Java.IdentityHashMap>): void;
  export function newInstanceA(className: 'java.util.IdentityHashMap', cb: Callback<Java.IdentityHashMap>): void;
  export function newInstanceA(className: 'java.util.IllegalFormatCodePointException', arg0: integer_t, cb: Callback<Java.IllegalFormatCodePointException>): void;
  export function newInstanceA(className: 'java.util.IllegalFormatConversionException', arg0: object_t, arg1: Java.Class, cb: Callback<Java.IllegalFormatConversionException>): void;
  export function newInstanceA(className: 'java.util.IllegalFormatFlagsException', arg0: string_t, cb: Callback<Java.IllegalFormatFlagsException>): void;
  export function newInstanceA(className: 'java.util.IllegalFormatPrecisionException', arg0: integer_t, cb: Callback<Java.IllegalFormatPrecisionException>): void;
  export function newInstanceA(className: 'java.util.IllegalFormatWidthException', arg0: integer_t, cb: Callback<Java.IllegalFormatWidthException>): void;
  export function newInstanceA(className: 'java.util.IllformedLocaleException', arg0: string_t, arg1: integer_t, cb: Callback<Java.IllformedLocaleException>): void;
  export function newInstanceA(className: 'java.util.IllformedLocaleException', arg0: string_t, cb: Callback<Java.IllformedLocaleException>): void;
  export function newInstanceA(className: 'java.util.IllformedLocaleException', cb: Callback<Java.IllformedLocaleException>): void;
  export function newInstanceA(className: 'java.util.InputMismatchException', arg0: string_t, cb: Callback<Java.InputMismatchException>): void;
  export function newInstanceA(className: 'java.util.InputMismatchException', cb: Callback<Java.InputMismatchException>): void;
  export function newInstanceA(className: 'java.util.IntSummaryStatistics', cb: Callback<Java.IntSummaryStatistics>): void;
  export function newInstanceA(className: 'java.util.InvalidPropertiesFormatException', arg0: object_t, cb: Callback<Java.InvalidPropertiesFormatException>): void;
  export function newInstanceA(className: 'java.util.InvalidPropertiesFormatException', arg0: string_t, cb: Callback<Java.InvalidPropertiesFormatException>): void;
  export function newInstanceA(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t, arg2: boolean_t, cb: Callback<Java.LinkedHashMap>): void;
  export function newInstanceA(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t, cb: Callback<Java.LinkedHashMap>): void;
  export function newInstanceA(className: 'java.util.LinkedHashMap', arg0: Java.Map, cb: Callback<Java.LinkedHashMap>): void;
  export function newInstanceA(className: 'java.util.LinkedHashMap', arg0: integer_t, cb: Callback<Java.LinkedHashMap>): void;
  export function newInstanceA(className: 'java.util.LinkedHashMap', cb: Callback<Java.LinkedHashMap>): void;
  export function newInstanceA(className: 'java.util.LinkedHashSet', arg0: integer_t, arg1: float_t, cb: Callback<Java.LinkedHashSet>): void;
  export function newInstanceA(className: 'java.util.LinkedHashSet', arg0: Java.Collection, cb: Callback<Java.LinkedHashSet>): void;
  export function newInstanceA(className: 'java.util.LinkedHashSet', arg0: integer_t, cb: Callback<Java.LinkedHashSet>): void;
  export function newInstanceA(className: 'java.util.LinkedHashSet', cb: Callback<Java.LinkedHashSet>): void;
  export function newInstanceA(className: 'java.util.LinkedList', arg0: Java.Collection, cb: Callback<Java.LinkedList>): void;
  export function newInstanceA(className: 'java.util.LinkedList', cb: Callback<Java.LinkedList>): void;
  export function newInstanceA(className: 'java.util.ListResourceBundle', cb: Callback<Java.ListResourceBundle>): void;
  export function newInstanceA(className: 'java.util.Locale', arg0: string_t, arg1: string_t, arg2: string_t, cb: Callback<Java.Locale>): void;
  export function newInstanceA(className: 'java.util.Locale', arg0: string_t, arg1: string_t, cb: Callback<Java.Locale>): void;
  export function newInstanceA(className: 'java.util.Locale', arg0: string_t, cb: Callback<Java.Locale>): void;
  export function newInstanceA(className: 'java.util.Locale$Builder', cb: Callback<Java.Locale$Builder>): void;
  export function newInstanceA(className: 'java.util.Locale$LanguageRange', arg0: string_t, arg1: double_t, cb: Callback<Java.Locale$LanguageRange>): void;
  export function newInstanceA(className: 'java.util.Locale$LanguageRange', arg0: string_t, cb: Callback<Java.Locale$LanguageRange>): void;
  export function newInstanceA(className: 'java.util.LongSummaryStatistics', cb: Callback<Java.LongSummaryStatistics>): void;
  export function newInstanceA(className: 'java.util.MissingFormatArgumentException', arg0: string_t, cb: Callback<Java.MissingFormatArgumentException>): void;
  export function newInstanceA(className: 'java.util.MissingFormatWidthException', arg0: string_t, cb: Callback<Java.MissingFormatWidthException>): void;
  export function newInstanceA(className: 'java.util.MissingResourceException', arg0: string_t, arg1: string_t, arg2: string_t, cb: Callback<Java.MissingResourceException>): void;
  export function newInstanceA(className: 'java.util.NoSuchElementException', arg0: string_t, cb: Callback<Java.NoSuchElementException>): void;
  export function newInstanceA(className: 'java.util.NoSuchElementException', cb: Callback<Java.NoSuchElementException>): void;
  export function newInstanceA(className: 'java.util.Observable', cb: Callback<Java.Observable>): void;
  export function newInstanceA(className: 'java.util.PriorityQueue', arg0: integer_t, arg1: Java.Comparator, cb: Callback<Java.PriorityQueue>): void;
  export function newInstanceA(className: 'java.util.PriorityQueue', arg0: Java.PriorityQueue, cb: Callback<Java.PriorityQueue>): void;
  export function newInstanceA(className: 'java.util.PriorityQueue', arg0: Java.Comparator, cb: Callback<Java.PriorityQueue>): void;
  export function newInstanceA(className: 'java.util.PriorityQueue', arg0: Java.Collection, cb: Callback<Java.PriorityQueue>): void;
  export function newInstanceA(className: 'java.util.PriorityQueue', arg0: Java.SortedSet, cb: Callback<Java.PriorityQueue>): void;
  export function newInstanceA(className: 'java.util.PriorityQueue', arg0: integer_t, cb: Callback<Java.PriorityQueue>): void;
  export function newInstanceA(className: 'java.util.PriorityQueue', cb: Callback<Java.PriorityQueue>): void;
  export function newInstanceA(className: 'java.util.Properties', arg0: Java.Properties, cb: Callback<Java.Properties>): void;
  export function newInstanceA(className: 'java.util.Properties', cb: Callback<Java.Properties>): void;
  export function newInstanceA(className: 'java.util.PropertyPermission', arg0: string_t, arg1: string_t, cb: Callback<Java.PropertyPermission>): void;
  export function newInstanceA(className: 'java.util.PropertyResourceBundle', arg0: object_t, cb: Callback<Java.PropertyResourceBundle>): void;
  export function newInstanceA(className: 'java.util.PropertyResourceBundle', arg0: object_t, cb: Callback<Java.PropertyResourceBundle>): void;
  export function newInstanceA(className: 'java.util.Random', arg0: long_t, cb: Callback<Java.Random>): void;
  export function newInstanceA(className: 'java.util.Random', cb: Callback<Java.Random>): void;
  export function newInstanceA(className: 'java.util.ResourceBundle', cb: Callback<Java.ResourceBundle>): void;
  export function newInstanceA(className: 'java.util.Scanner', arg0: object_t, arg1: string_t, cb: Callback<Java.Scanner>): void;
  export function newInstanceA(className: 'java.util.Scanner', arg0: object_t, arg1: string_t, cb: Callback<Java.Scanner>): void;
  export function newInstanceA(className: 'java.util.Scanner', arg0: object_t, arg1: string_t, cb: Callback<Java.Scanner>): void;
  export function newInstanceA(className: 'java.util.Scanner', arg0: object_t, arg1: string_t, cb: Callback<Java.Scanner>): void;
  export function newInstanceA(className: 'java.util.Scanner', arg0: object_t, cb: Callback<Java.Scanner>): void;
  export function newInstanceA(className: 'java.util.Scanner', arg0: object_t, cb: Callback<Java.Scanner>): void;
  export function newInstanceA(className: 'java.util.Scanner', arg0: object_t, cb: Callback<Java.Scanner>): void;
  export function newInstanceA(className: 'java.util.Scanner', arg0: object_t, cb: Callback<Java.Scanner>): void;
  export function newInstanceA(className: 'java.util.Scanner', arg0: string_t, cb: Callback<Java.Scanner>): void;
  export function newInstanceA(className: 'java.util.Scanner', arg0: object_t, cb: Callback<Java.Scanner>): void;
  export function newInstanceA(className: 'java.util.ServiceConfigurationError', arg0: string_t, arg1: object_t, cb: Callback<Java.ServiceConfigurationError>): void;
  export function newInstanceA(className: 'java.util.ServiceConfigurationError', arg0: string_t, cb: Callback<Java.ServiceConfigurationError>): void;
  export function newInstanceA(className: 'java.util.SimpleTimeZone', arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, arg6: integer_t, arg7: integer_t, arg8: integer_t, arg9: integer_t, arg10: integer_t, arg11: integer_t, arg12: integer_t, cb: Callback<Java.SimpleTimeZone>): void;
  export function newInstanceA(className: 'java.util.SimpleTimeZone', arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, arg6: integer_t, arg7: integer_t, arg8: integer_t, arg9: integer_t, arg10: integer_t, cb: Callback<Java.SimpleTimeZone>): void;
  export function newInstanceA(className: 'java.util.SimpleTimeZone', arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, arg6: integer_t, arg7: integer_t, arg8: integer_t, arg9: integer_t, cb: Callback<Java.SimpleTimeZone>): void;
  export function newInstanceA(className: 'java.util.SimpleTimeZone', arg0: integer_t, arg1: string_t, cb: Callback<Java.SimpleTimeZone>): void;
  export function newInstanceA(className: 'java.util.SplittableRandom', arg0: long_t, cb: Callback<Java.SplittableRandom>): void;
  export function newInstanceA(className: 'java.util.SplittableRandom', cb: Callback<Java.SplittableRandom>): void;
  export function newInstanceA(className: 'java.util.Stack', cb: Callback<Java.Stack>): void;
  export function newInstanceA(className: 'java.util.StringJoiner', arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<Java.StringJoiner>): void;
  export function newInstanceA(className: 'java.util.StringJoiner', arg0: object_t, cb: Callback<Java.StringJoiner>): void;
  export function newInstanceA(className: 'java.util.StringTokenizer', arg0: string_t, arg1: string_t, arg2: boolean_t, cb: Callback<Java.StringTokenizer>): void;
  export function newInstanceA(className: 'java.util.StringTokenizer', arg0: string_t, arg1: string_t, cb: Callback<Java.StringTokenizer>): void;
  export function newInstanceA(className: 'java.util.StringTokenizer', arg0: string_t, cb: Callback<Java.StringTokenizer>): void;
  export function newInstanceA(className: 'java.util.Timer', arg0: string_t, arg1: boolean_t, cb: Callback<Java.Timer>): void;
  export function newInstanceA(className: 'java.util.Timer', arg0: string_t, cb: Callback<Java.Timer>): void;
  export function newInstanceA(className: 'java.util.Timer', arg0: boolean_t, cb: Callback<Java.Timer>): void;
  export function newInstanceA(className: 'java.util.Timer', cb: Callback<Java.Timer>): void;
  export function newInstanceA(className: 'java.util.TimeZone', cb: Callback<Java.TimeZone>): void;
  export function newInstanceA(className: 'java.util.TooManyListenersException', arg0: string_t, cb: Callback<Java.TooManyListenersException>): void;
  export function newInstanceA(className: 'java.util.TooManyListenersException', cb: Callback<Java.TooManyListenersException>): void;
  export function newInstanceA(className: 'java.util.TreeMap', arg0: Java.Comparator, cb: Callback<Java.TreeMap>): void;
  export function newInstanceA(className: 'java.util.TreeMap', arg0: Java.SortedMap, cb: Callback<Java.TreeMap>): void;
  export function newInstanceA(className: 'java.util.TreeMap', arg0: Java.Map, cb: Callback<Java.TreeMap>): void;
  export function newInstanceA(className: 'java.util.TreeMap', cb: Callback<Java.TreeMap>): void;
  export function newInstanceA(className: 'java.util.TreeSet', arg0: Java.Comparator, cb: Callback<Java.TreeSet>): void;
  export function newInstanceA(className: 'java.util.TreeSet', arg0: Java.Collection, cb: Callback<Java.TreeSet>): void;
  export function newInstanceA(className: 'java.util.TreeSet', arg0: Java.SortedSet, cb: Callback<Java.TreeSet>): void;
  export function newInstanceA(className: 'java.util.TreeSet', cb: Callback<Java.TreeSet>): void;
  export function newInstanceA(className: 'java.util.UnknownFormatConversionException', arg0: string_t, cb: Callback<Java.UnknownFormatConversionException>): void;
  export function newInstanceA(className: 'java.util.UnknownFormatFlagsException', arg0: string_t, cb: Callback<Java.UnknownFormatFlagsException>): void;
  export function newInstanceA(className: 'java.util.UUID', arg0: long_t, arg1: long_t, cb: Callback<Java.UUID>): void;
  export function newInstanceA(className: 'java.util.Vector', arg0: integer_t, arg1: integer_t, cb: Callback<Java.Vector>): void;
  export function newInstanceA(className: 'java.util.Vector', arg0: Java.Collection, cb: Callback<Java.Vector>): void;
  export function newInstanceA(className: 'java.util.Vector', arg0: integer_t, cb: Callback<Java.Vector>): void;
  export function newInstanceA(className: 'java.util.Vector', cb: Callback<Java.Vector>): void;
  export function newInstanceA(className: 'java.util.WeakHashMap', arg0: integer_t, arg1: float_t, cb: Callback<Java.WeakHashMap>): void;
  export function newInstanceA(className: 'java.util.WeakHashMap', arg0: Java.Map, cb: Callback<Java.WeakHashMap>): void;
  export function newInstanceA(className: 'java.util.WeakHashMap', arg0: integer_t, cb: Callback<Java.WeakHashMap>): void;
  export function newInstanceA(className: 'java.util.WeakHashMap', cb: Callback<Java.WeakHashMap>): void;
  export function newInstanceA(className: string, ...args: any[]): void;
  export function newInstanceA(className: string, ...args: any[]): any {
    args.unshift(className);
    return _java.newInstance.apply(_java, args);
  }

  export function newInstance(className: 'com.redseal.featureset.ambiguous.Thing', arg0: string_t): Java.com.redseal.featureset.ambiguous.Thing;
  export function newInstance(className: 'com.redseal.featureset.AnonClassTest'): Java.AnonClassTest;
  export function newInstance(className: 'com.redseal.featureset.overloading.Overloading'): Java.Overloading;
  export function newInstance(className: 'com.redseal.featureset.overloading.Overloading$Bar'): Java.Overloading$Bar;
  export function newInstance(className: 'com.redseal.featureset.overloading.Overloading$Foo'): Java.Overloading$Foo;
  export function newInstance(className: 'com.redseal.featureset.SomeAbstractClass'): Java.SomeAbstractClass;
  export function newInstance(className: 'com.redseal.featureset.SomeClass', arg0: integer_t, arg1: long_t, arg2: string_t, arg3: boolean_t, arg4: double_t): Java.SomeClass;
  export function newInstance(className: 'com.redseal.featureset.SomeClass'): Java.SomeClass;
  export function newInstance(className: 'com.redseal.featureset.Thing', arg0: integer_t): Java.com.redseal.featureset.Thing;
  export function newInstance(className: 'java.lang.Boolean', arg0: string_t): boolean;
  export function newInstance(className: 'java.lang.Boolean', arg0: boolean_t): boolean;
  export function newInstance(className: 'java.lang.Double', arg0: string_t): number;
  export function newInstance(className: 'java.lang.Double', arg0: double_t): number;
  export function newInstance(className: 'java.lang.Float', arg0: string_t): number;
  export function newInstance(className: 'java.lang.Float', arg0: float_t): number;
  export function newInstance(className: 'java.lang.Float', arg0: double_t): number;
  export function newInstance(className: 'java.lang.Integer', arg0: string_t): number;
  export function newInstance(className: 'java.lang.Integer', arg0: integer_t): number;
  export function newInstance(className: 'java.lang.Long', arg0: string_t): longValue_t;
  export function newInstance(className: 'java.lang.Long', arg0: long_t): longValue_t;
  export function newInstance(className: 'java.lang.Object'): object_t;
  export function newInstance(className: 'java.lang.Short', arg0: string_t): number;
  export function newInstance(className: 'java.lang.Short', arg0: short_t): number;
  export function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): string;
  export function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): string;
  export function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): string;
  export function newInstance(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): string;
  export function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
  export function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
  export function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: object_t): string;
  export function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: string_t): string;
  export function newInstance(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t): string;
  export function newInstance(className: 'java.lang.String', arg0: object_t): string;
  export function newInstance(className: 'java.lang.String', arg0: object_t): string;
  export function newInstance(className: 'java.lang.String', arg0: string_t): string;
  export function newInstance(className: 'java.lang.String', arg0: object_array_t): string;
  export function newInstance(className: 'java.lang.String', arg0: object_array_t): string;
  export function newInstance(className: 'java.lang.String'): string;
  export function newInstance(className: 'java.util.AbstractMap$SimpleEntry', arg0: object_t, arg1: object_t): Java.AbstractMap$SimpleEntry;
  export function newInstance(className: 'java.util.AbstractMap$SimpleEntry', arg0: Java.Map$Entry): Java.AbstractMap$SimpleEntry;
  export function newInstance(className: 'java.util.AbstractMap$SimpleImmutableEntry', arg0: object_t, arg1: object_t): Java.AbstractMap$SimpleImmutableEntry;
  export function newInstance(className: 'java.util.AbstractMap$SimpleImmutableEntry', arg0: Java.Map$Entry): Java.AbstractMap$SimpleImmutableEntry;
  export function newInstance(className: 'java.util.ArrayDeque', arg0: Java.Collection): Java.ArrayDeque;
  export function newInstance(className: 'java.util.ArrayDeque', arg0: integer_t): Java.ArrayDeque;
  export function newInstance(className: 'java.util.ArrayDeque'): Java.ArrayDeque;
  export function newInstance(className: 'java.util.ArrayList', arg0: Java.Collection): Java.ArrayList;
  export function newInstance(className: 'java.util.ArrayList', arg0: integer_t): Java.ArrayList;
  export function newInstance(className: 'java.util.ArrayList'): Java.ArrayList;
  export function newInstance(className: 'java.util.BitSet', arg0: integer_t): Java.BitSet;
  export function newInstance(className: 'java.util.BitSet'): Java.BitSet;
  export function newInstance(className: 'java.util.Calendar$Builder'): Java.Calendar$Builder;
  export function newInstance(className: 'java.util.ConcurrentModificationException', arg0: string_t, arg1: object_t): Java.ConcurrentModificationException;
  export function newInstance(className: 'java.util.ConcurrentModificationException', arg0: object_t): Java.ConcurrentModificationException;
  export function newInstance(className: 'java.util.ConcurrentModificationException', arg0: string_t): Java.ConcurrentModificationException;
  export function newInstance(className: 'java.util.ConcurrentModificationException'): Java.ConcurrentModificationException;
  export function newInstance(className: 'java.util.Date', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): Java.Date;
  export function newInstance(className: 'java.util.Date', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): Java.Date;
  export function newInstance(className: 'java.util.Date', arg0: integer_t, arg1: integer_t, arg2: integer_t): Java.Date;
  export function newInstance(className: 'java.util.Date', arg0: string_t): Java.Date;
  export function newInstance(className: 'java.util.Date', arg0: long_t): Java.Date;
  export function newInstance(className: 'java.util.Date'): Java.Date;
  export function newInstance(className: 'java.util.Dictionary'): Java.Dictionary;
  export function newInstance(className: 'java.util.DoubleSummaryStatistics'): Java.DoubleSummaryStatistics;
  export function newInstance(className: 'java.util.DuplicateFormatFlagsException', arg0: string_t): Java.DuplicateFormatFlagsException;
  export function newInstance(className: 'java.util.EmptyStackException'): Java.EmptyStackException;
  export function newInstance(className: 'java.util.EnumMap', arg0: Java.EnumMap): Java.EnumMap;
  export function newInstance(className: 'java.util.EnumMap', arg0: Java.Class): Java.EnumMap;
  export function newInstance(className: 'java.util.EnumMap', arg0: Java.Map): Java.EnumMap;
  export function newInstance(className: 'java.util.EventListenerProxy', arg0: Java.EventListener): Java.EventListenerProxy;
  export function newInstance(className: 'java.util.EventObject', arg0: object_t): Java.EventObject;
  export function newInstance(className: 'java.util.FormatFlagsConversionMismatchException', arg0: string_t, arg1: object_t): Java.FormatFlagsConversionMismatchException;
  export function newInstance(className: 'java.util.Formatter', arg0: object_t, arg1: string_t, arg2: Java.Locale): Java.Formatter;
  export function newInstance(className: 'java.util.Formatter', arg0: string_t, arg1: string_t, arg2: Java.Locale): Java.Formatter;
  export function newInstance(className: 'java.util.Formatter', arg0: object_t, arg1: string_t, arg2: Java.Locale): Java.Formatter;
  export function newInstance(className: 'java.util.Formatter', arg0: object_t, arg1: Java.Locale): Java.Formatter;
  export function newInstance(className: 'java.util.Formatter', arg0: object_t, arg1: string_t): Java.Formatter;
  export function newInstance(className: 'java.util.Formatter', arg0: string_t, arg1: string_t): Java.Formatter;
  export function newInstance(className: 'java.util.Formatter', arg0: object_t, arg1: string_t): Java.Formatter;
  export function newInstance(className: 'java.util.Formatter', arg0: object_t): Java.Formatter;
  export function newInstance(className: 'java.util.Formatter', arg0: object_t): Java.Formatter;
  export function newInstance(className: 'java.util.Formatter', arg0: object_t): Java.Formatter;
  export function newInstance(className: 'java.util.Formatter', arg0: Java.Locale): Java.Formatter;
  export function newInstance(className: 'java.util.Formatter', arg0: string_t): Java.Formatter;
  export function newInstance(className: 'java.util.Formatter', arg0: object_t): Java.Formatter;
  export function newInstance(className: 'java.util.Formatter'): Java.Formatter;
  export function newInstance(className: 'java.util.FormatterClosedException'): Java.FormatterClosedException;
  export function newInstance(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): Java.GregorianCalendar;
  export function newInstance(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): Java.GregorianCalendar;
  export function newInstance(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t): Java.GregorianCalendar;
  export function newInstance(className: 'java.util.GregorianCalendar', arg0: Java.TimeZone, arg1: Java.Locale): Java.GregorianCalendar;
  export function newInstance(className: 'java.util.GregorianCalendar', arg0: Java.TimeZone): Java.GregorianCalendar;
  export function newInstance(className: 'java.util.GregorianCalendar', arg0: Java.Locale): Java.GregorianCalendar;
  export function newInstance(className: 'java.util.GregorianCalendar'): Java.GregorianCalendar;
  export function newInstance(className: 'java.util.HashMap', arg0: integer_t, arg1: float_t): Java.HashMap;
  export function newInstance(className: 'java.util.HashMap', arg0: Java.Map): Java.HashMap;
  export function newInstance(className: 'java.util.HashMap', arg0: integer_t): Java.HashMap;
  export function newInstance(className: 'java.util.HashMap'): Java.HashMap;
  export function newInstance(className: 'java.util.HashSet', arg0: integer_t, arg1: float_t): Java.HashSet;
  export function newInstance(className: 'java.util.HashSet', arg0: Java.Collection): Java.HashSet;
  export function newInstance(className: 'java.util.HashSet', arg0: integer_t): Java.HashSet;
  export function newInstance(className: 'java.util.HashSet'): Java.HashSet;
  export function newInstance(className: 'java.util.Hashtable', arg0: integer_t, arg1: float_t): Java.Hashtable;
  export function newInstance(className: 'java.util.Hashtable', arg0: Java.Map): Java.Hashtable;
  export function newInstance(className: 'java.util.Hashtable', arg0: integer_t): Java.Hashtable;
  export function newInstance(className: 'java.util.Hashtable'): Java.Hashtable;
  export function newInstance(className: 'java.util.IdentityHashMap', arg0: Java.Map): Java.IdentityHashMap;
  export function newInstance(className: 'java.util.IdentityHashMap', arg0: integer_t): Java.IdentityHashMap;
  export function newInstance(className: 'java.util.IdentityHashMap'): Java.IdentityHashMap;
  export function newInstance(className: 'java.util.IllegalFormatCodePointException', arg0: integer_t): Java.IllegalFormatCodePointException;
  export function newInstance(className: 'java.util.IllegalFormatConversionException', arg0: object_t, arg1: Java.Class): Java.IllegalFormatConversionException;
  export function newInstance(className: 'java.util.IllegalFormatFlagsException', arg0: string_t): Java.IllegalFormatFlagsException;
  export function newInstance(className: 'java.util.IllegalFormatPrecisionException', arg0: integer_t): Java.IllegalFormatPrecisionException;
  export function newInstance(className: 'java.util.IllegalFormatWidthException', arg0: integer_t): Java.IllegalFormatWidthException;
  export function newInstance(className: 'java.util.IllformedLocaleException', arg0: string_t, arg1: integer_t): Java.IllformedLocaleException;
  export function newInstance(className: 'java.util.IllformedLocaleException', arg0: string_t): Java.IllformedLocaleException;
  export function newInstance(className: 'java.util.IllformedLocaleException'): Java.IllformedLocaleException;
  export function newInstance(className: 'java.util.InputMismatchException', arg0: string_t): Java.InputMismatchException;
  export function newInstance(className: 'java.util.InputMismatchException'): Java.InputMismatchException;
  export function newInstance(className: 'java.util.IntSummaryStatistics'): Java.IntSummaryStatistics;
  export function newInstance(className: 'java.util.InvalidPropertiesFormatException', arg0: object_t): Java.InvalidPropertiesFormatException;
  export function newInstance(className: 'java.util.InvalidPropertiesFormatException', arg0: string_t): Java.InvalidPropertiesFormatException;
  export function newInstance(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t, arg2: boolean_t): Java.LinkedHashMap;
  export function newInstance(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t): Java.LinkedHashMap;
  export function newInstance(className: 'java.util.LinkedHashMap', arg0: Java.Map): Java.LinkedHashMap;
  export function newInstance(className: 'java.util.LinkedHashMap', arg0: integer_t): Java.LinkedHashMap;
  export function newInstance(className: 'java.util.LinkedHashMap'): Java.LinkedHashMap;
  export function newInstance(className: 'java.util.LinkedHashSet', arg0: integer_t, arg1: float_t): Java.LinkedHashSet;
  export function newInstance(className: 'java.util.LinkedHashSet', arg0: Java.Collection): Java.LinkedHashSet;
  export function newInstance(className: 'java.util.LinkedHashSet', arg0: integer_t): Java.LinkedHashSet;
  export function newInstance(className: 'java.util.LinkedHashSet'): Java.LinkedHashSet;
  export function newInstance(className: 'java.util.LinkedList', arg0: Java.Collection): Java.LinkedList;
  export function newInstance(className: 'java.util.LinkedList'): Java.LinkedList;
  export function newInstance(className: 'java.util.ListResourceBundle'): Java.ListResourceBundle;
  export function newInstance(className: 'java.util.Locale', arg0: string_t, arg1: string_t, arg2: string_t): Java.Locale;
  export function newInstance(className: 'java.util.Locale', arg0: string_t, arg1: string_t): Java.Locale;
  export function newInstance(className: 'java.util.Locale', arg0: string_t): Java.Locale;
  export function newInstance(className: 'java.util.Locale$Builder'): Java.Locale$Builder;
  export function newInstance(className: 'java.util.Locale$LanguageRange', arg0: string_t, arg1: double_t): Java.Locale$LanguageRange;
  export function newInstance(className: 'java.util.Locale$LanguageRange', arg0: string_t): Java.Locale$LanguageRange;
  export function newInstance(className: 'java.util.LongSummaryStatistics'): Java.LongSummaryStatistics;
  export function newInstance(className: 'java.util.MissingFormatArgumentException', arg0: string_t): Java.MissingFormatArgumentException;
  export function newInstance(className: 'java.util.MissingFormatWidthException', arg0: string_t): Java.MissingFormatWidthException;
  export function newInstance(className: 'java.util.MissingResourceException', arg0: string_t, arg1: string_t, arg2: string_t): Java.MissingResourceException;
  export function newInstance(className: 'java.util.NoSuchElementException', arg0: string_t): Java.NoSuchElementException;
  export function newInstance(className: 'java.util.NoSuchElementException'): Java.NoSuchElementException;
  export function newInstance(className: 'java.util.Observable'): Java.Observable;
  export function newInstance(className: 'java.util.PriorityQueue', arg0: integer_t, arg1: Java.Comparator): Java.PriorityQueue;
  export function newInstance(className: 'java.util.PriorityQueue', arg0: Java.PriorityQueue): Java.PriorityQueue;
  export function newInstance(className: 'java.util.PriorityQueue', arg0: Java.Comparator): Java.PriorityQueue;
  export function newInstance(className: 'java.util.PriorityQueue', arg0: Java.Collection): Java.PriorityQueue;
  export function newInstance(className: 'java.util.PriorityQueue', arg0: Java.SortedSet): Java.PriorityQueue;
  export function newInstance(className: 'java.util.PriorityQueue', arg0: integer_t): Java.PriorityQueue;
  export function newInstance(className: 'java.util.PriorityQueue'): Java.PriorityQueue;
  export function newInstance(className: 'java.util.Properties', arg0: Java.Properties): Java.Properties;
  export function newInstance(className: 'java.util.Properties'): Java.Properties;
  export function newInstance(className: 'java.util.PropertyPermission', arg0: string_t, arg1: string_t): Java.PropertyPermission;
  export function newInstance(className: 'java.util.PropertyResourceBundle', arg0: object_t): Java.PropertyResourceBundle;
  export function newInstance(className: 'java.util.PropertyResourceBundle', arg0: object_t): Java.PropertyResourceBundle;
  export function newInstance(className: 'java.util.Random', arg0: long_t): Java.Random;
  export function newInstance(className: 'java.util.Random'): Java.Random;
  export function newInstance(className: 'java.util.ResourceBundle'): Java.ResourceBundle;
  export function newInstance(className: 'java.util.Scanner', arg0: object_t, arg1: string_t): Java.Scanner;
  export function newInstance(className: 'java.util.Scanner', arg0: object_t, arg1: string_t): Java.Scanner;
  export function newInstance(className: 'java.util.Scanner', arg0: object_t, arg1: string_t): Java.Scanner;
  export function newInstance(className: 'java.util.Scanner', arg0: object_t, arg1: string_t): Java.Scanner;
  export function newInstance(className: 'java.util.Scanner', arg0: object_t): Java.Scanner;
  export function newInstance(className: 'java.util.Scanner', arg0: object_t): Java.Scanner;
  export function newInstance(className: 'java.util.Scanner', arg0: object_t): Java.Scanner;
  export function newInstance(className: 'java.util.Scanner', arg0: object_t): Java.Scanner;
  export function newInstance(className: 'java.util.Scanner', arg0: string_t): Java.Scanner;
  export function newInstance(className: 'java.util.Scanner', arg0: object_t): Java.Scanner;
  export function newInstance(className: 'java.util.ServiceConfigurationError', arg0: string_t, arg1: object_t): Java.ServiceConfigurationError;
  export function newInstance(className: 'java.util.ServiceConfigurationError', arg0: string_t): Java.ServiceConfigurationError;
  export function newInstance(className: 'java.util.SimpleTimeZone', arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, arg6: integer_t, arg7: integer_t, arg8: integer_t, arg9: integer_t, arg10: integer_t, arg11: integer_t, arg12: integer_t): Java.SimpleTimeZone;
  export function newInstance(className: 'java.util.SimpleTimeZone', arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, arg6: integer_t, arg7: integer_t, arg8: integer_t, arg9: integer_t, arg10: integer_t): Java.SimpleTimeZone;
  export function newInstance(className: 'java.util.SimpleTimeZone', arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, arg6: integer_t, arg7: integer_t, arg8: integer_t, arg9: integer_t): Java.SimpleTimeZone;
  export function newInstance(className: 'java.util.SimpleTimeZone', arg0: integer_t, arg1: string_t): Java.SimpleTimeZone;
  export function newInstance(className: 'java.util.SplittableRandom', arg0: long_t): Java.SplittableRandom;
  export function newInstance(className: 'java.util.SplittableRandom'): Java.SplittableRandom;
  export function newInstance(className: 'java.util.Stack'): Java.Stack;
  export function newInstance(className: 'java.util.StringJoiner', arg0: object_t, arg1: object_t, arg2: object_t): Java.StringJoiner;
  export function newInstance(className: 'java.util.StringJoiner', arg0: object_t): Java.StringJoiner;
  export function newInstance(className: 'java.util.StringTokenizer', arg0: string_t, arg1: string_t, arg2: boolean_t): Java.StringTokenizer;
  export function newInstance(className: 'java.util.StringTokenizer', arg0: string_t, arg1: string_t): Java.StringTokenizer;
  export function newInstance(className: 'java.util.StringTokenizer', arg0: string_t): Java.StringTokenizer;
  export function newInstance(className: 'java.util.Timer', arg0: string_t, arg1: boolean_t): Java.Timer;
  export function newInstance(className: 'java.util.Timer', arg0: string_t): Java.Timer;
  export function newInstance(className: 'java.util.Timer', arg0: boolean_t): Java.Timer;
  export function newInstance(className: 'java.util.Timer'): Java.Timer;
  export function newInstance(className: 'java.util.TimeZone'): Java.TimeZone;
  export function newInstance(className: 'java.util.TooManyListenersException', arg0: string_t): Java.TooManyListenersException;
  export function newInstance(className: 'java.util.TooManyListenersException'): Java.TooManyListenersException;
  export function newInstance(className: 'java.util.TreeMap', arg0: Java.Comparator): Java.TreeMap;
  export function newInstance(className: 'java.util.TreeMap', arg0: Java.SortedMap): Java.TreeMap;
  export function newInstance(className: 'java.util.TreeMap', arg0: Java.Map): Java.TreeMap;
  export function newInstance(className: 'java.util.TreeMap'): Java.TreeMap;
  export function newInstance(className: 'java.util.TreeSet', arg0: Java.Comparator): Java.TreeSet;
  export function newInstance(className: 'java.util.TreeSet', arg0: Java.Collection): Java.TreeSet;
  export function newInstance(className: 'java.util.TreeSet', arg0: Java.SortedSet): Java.TreeSet;
  export function newInstance(className: 'java.util.TreeSet'): Java.TreeSet;
  export function newInstance(className: 'java.util.UnknownFormatConversionException', arg0: string_t): Java.UnknownFormatConversionException;
  export function newInstance(className: 'java.util.UnknownFormatFlagsException', arg0: string_t): Java.UnknownFormatFlagsException;
  export function newInstance(className: 'java.util.UUID', arg0: long_t, arg1: long_t): Java.UUID;
  export function newInstance(className: 'java.util.Vector', arg0: integer_t, arg1: integer_t): Java.Vector;
  export function newInstance(className: 'java.util.Vector', arg0: Java.Collection): Java.Vector;
  export function newInstance(className: 'java.util.Vector', arg0: integer_t): Java.Vector;
  export function newInstance(className: 'java.util.Vector'): Java.Vector;
  export function newInstance(className: 'java.util.WeakHashMap', arg0: integer_t, arg1: float_t): Java.WeakHashMap;
  export function newInstance(className: 'java.util.WeakHashMap', arg0: Java.Map): Java.WeakHashMap;
  export function newInstance(className: 'java.util.WeakHashMap', arg0: integer_t): Java.WeakHashMap;
  export function newInstance(className: 'java.util.WeakHashMap'): Java.WeakHashMap;
  export function newInstance(className: string, ...args: any[]): any;
  export function newInstance(className: string, ...args: any[]): any {
    args.unshift(className);
    return _java.newInstanceSync.apply(_java, args);
  }

  export function newInstanceP(className: 'com.redseal.featureset.ambiguous.Thing', arg0: string_t): Promise<Java.com.redseal.featureset.ambiguous.Thing>;
  export function newInstanceP(className: 'com.redseal.featureset.AnonClassTest'): Promise<Java.AnonClassTest>;
  export function newInstanceP(className: 'com.redseal.featureset.overloading.Overloading'): Promise<Java.Overloading>;
  export function newInstanceP(className: 'com.redseal.featureset.overloading.Overloading$Bar'): Promise<Java.Overloading$Bar>;
  export function newInstanceP(className: 'com.redseal.featureset.overloading.Overloading$Foo'): Promise<Java.Overloading$Foo>;
  export function newInstanceP(className: 'com.redseal.featureset.SomeAbstractClass'): Promise<Java.SomeAbstractClass>;
  export function newInstanceP(className: 'com.redseal.featureset.SomeClass', arg0: integer_t, arg1: long_t, arg2: string_t, arg3: boolean_t, arg4: double_t): Promise<Java.SomeClass>;
  export function newInstanceP(className: 'com.redseal.featureset.SomeClass'): Promise<Java.SomeClass>;
  export function newInstanceP(className: 'com.redseal.featureset.Thing', arg0: integer_t): Promise<Java.com.redseal.featureset.Thing>;
  export function newInstanceP(className: 'java.lang.Boolean', arg0: string_t): Promise<boolean>;
  export function newInstanceP(className: 'java.lang.Boolean', arg0: boolean_t): Promise<boolean>;
  export function newInstanceP(className: 'java.lang.Double', arg0: string_t): Promise<number>;
  export function newInstanceP(className: 'java.lang.Double', arg0: double_t): Promise<number>;
  export function newInstanceP(className: 'java.lang.Float', arg0: string_t): Promise<number>;
  export function newInstanceP(className: 'java.lang.Float', arg0: float_t): Promise<number>;
  export function newInstanceP(className: 'java.lang.Float', arg0: double_t): Promise<number>;
  export function newInstanceP(className: 'java.lang.Integer', arg0: string_t): Promise<number>;
  export function newInstanceP(className: 'java.lang.Integer', arg0: integer_t): Promise<number>;
  export function newInstanceP(className: 'java.lang.Long', arg0: string_t): Promise<longValue_t>;
  export function newInstanceP(className: 'java.lang.Long', arg0: long_t): Promise<longValue_t>;
  export function newInstanceP(className: 'java.lang.Object'): Promise<object_t>;
  export function newInstanceP(className: 'java.lang.Short', arg0: string_t): Promise<number>;
  export function newInstanceP(className: 'java.lang.Short', arg0: short_t): Promise<number>;
  export function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<string>;
  export function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): Promise<string>;
  export function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<string>;
  export function newInstanceP(className: 'java.lang.String', arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<string>;
  export function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
  export function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
  export function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: object_t): Promise<string>;
  export function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: string_t): Promise<string>;
  export function newInstanceP(className: 'java.lang.String', arg0: object_array_t, arg1: integer_t): Promise<string>;
  export function newInstanceP(className: 'java.lang.String', arg0: object_t): Promise<string>;
  export function newInstanceP(className: 'java.lang.String', arg0: object_t): Promise<string>;
  export function newInstanceP(className: 'java.lang.String', arg0: string_t): Promise<string>;
  export function newInstanceP(className: 'java.lang.String', arg0: object_array_t): Promise<string>;
  export function newInstanceP(className: 'java.lang.String', arg0: object_array_t): Promise<string>;
  export function newInstanceP(className: 'java.lang.String'): Promise<string>;
  export function newInstanceP(className: 'java.util.AbstractMap$SimpleEntry', arg0: object_t, arg1: object_t): Promise<Java.AbstractMap$SimpleEntry>;
  export function newInstanceP(className: 'java.util.AbstractMap$SimpleEntry', arg0: Java.Map$Entry): Promise<Java.AbstractMap$SimpleEntry>;
  export function newInstanceP(className: 'java.util.AbstractMap$SimpleImmutableEntry', arg0: object_t, arg1: object_t): Promise<Java.AbstractMap$SimpleImmutableEntry>;
  export function newInstanceP(className: 'java.util.AbstractMap$SimpleImmutableEntry', arg0: Java.Map$Entry): Promise<Java.AbstractMap$SimpleImmutableEntry>;
  export function newInstanceP(className: 'java.util.ArrayDeque', arg0: Java.Collection): Promise<Java.ArrayDeque>;
  export function newInstanceP(className: 'java.util.ArrayDeque', arg0: integer_t): Promise<Java.ArrayDeque>;
  export function newInstanceP(className: 'java.util.ArrayDeque'): Promise<Java.ArrayDeque>;
  export function newInstanceP(className: 'java.util.ArrayList', arg0: Java.Collection): Promise<Java.ArrayList>;
  export function newInstanceP(className: 'java.util.ArrayList', arg0: integer_t): Promise<Java.ArrayList>;
  export function newInstanceP(className: 'java.util.ArrayList'): Promise<Java.ArrayList>;
  export function newInstanceP(className: 'java.util.BitSet', arg0: integer_t): Promise<Java.BitSet>;
  export function newInstanceP(className: 'java.util.BitSet'): Promise<Java.BitSet>;
  export function newInstanceP(className: 'java.util.Calendar$Builder'): Promise<Java.Calendar$Builder>;
  export function newInstanceP(className: 'java.util.ConcurrentModificationException', arg0: string_t, arg1: object_t): Promise<Java.ConcurrentModificationException>;
  export function newInstanceP(className: 'java.util.ConcurrentModificationException', arg0: object_t): Promise<Java.ConcurrentModificationException>;
  export function newInstanceP(className: 'java.util.ConcurrentModificationException', arg0: string_t): Promise<Java.ConcurrentModificationException>;
  export function newInstanceP(className: 'java.util.ConcurrentModificationException'): Promise<Java.ConcurrentModificationException>;
  export function newInstanceP(className: 'java.util.Date', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): Promise<Java.Date>;
  export function newInstanceP(className: 'java.util.Date', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): Promise<Java.Date>;
  export function newInstanceP(className: 'java.util.Date', arg0: integer_t, arg1: integer_t, arg2: integer_t): Promise<Java.Date>;
  export function newInstanceP(className: 'java.util.Date', arg0: string_t): Promise<Java.Date>;
  export function newInstanceP(className: 'java.util.Date', arg0: long_t): Promise<Java.Date>;
  export function newInstanceP(className: 'java.util.Date'): Promise<Java.Date>;
  export function newInstanceP(className: 'java.util.Dictionary'): Promise<Java.Dictionary>;
  export function newInstanceP(className: 'java.util.DoubleSummaryStatistics'): Promise<Java.DoubleSummaryStatistics>;
  export function newInstanceP(className: 'java.util.DuplicateFormatFlagsException', arg0: string_t): Promise<Java.DuplicateFormatFlagsException>;
  export function newInstanceP(className: 'java.util.EmptyStackException'): Promise<Java.EmptyStackException>;
  export function newInstanceP(className: 'java.util.EnumMap', arg0: Java.EnumMap): Promise<Java.EnumMap>;
  export function newInstanceP(className: 'java.util.EnumMap', arg0: Java.Class): Promise<Java.EnumMap>;
  export function newInstanceP(className: 'java.util.EnumMap', arg0: Java.Map): Promise<Java.EnumMap>;
  export function newInstanceP(className: 'java.util.EventListenerProxy', arg0: Java.EventListener): Promise<Java.EventListenerProxy>;
  export function newInstanceP(className: 'java.util.EventObject', arg0: object_t): Promise<Java.EventObject>;
  export function newInstanceP(className: 'java.util.FormatFlagsConversionMismatchException', arg0: string_t, arg1: object_t): Promise<Java.FormatFlagsConversionMismatchException>;
  export function newInstanceP(className: 'java.util.Formatter', arg0: object_t, arg1: string_t, arg2: Java.Locale): Promise<Java.Formatter>;
  export function newInstanceP(className: 'java.util.Formatter', arg0: string_t, arg1: string_t, arg2: Java.Locale): Promise<Java.Formatter>;
  export function newInstanceP(className: 'java.util.Formatter', arg0: object_t, arg1: string_t, arg2: Java.Locale): Promise<Java.Formatter>;
  export function newInstanceP(className: 'java.util.Formatter', arg0: object_t, arg1: Java.Locale): Promise<Java.Formatter>;
  export function newInstanceP(className: 'java.util.Formatter', arg0: object_t, arg1: string_t): Promise<Java.Formatter>;
  export function newInstanceP(className: 'java.util.Formatter', arg0: string_t, arg1: string_t): Promise<Java.Formatter>;
  export function newInstanceP(className: 'java.util.Formatter', arg0: object_t, arg1: string_t): Promise<Java.Formatter>;
  export function newInstanceP(className: 'java.util.Formatter', arg0: object_t): Promise<Java.Formatter>;
  export function newInstanceP(className: 'java.util.Formatter', arg0: object_t): Promise<Java.Formatter>;
  export function newInstanceP(className: 'java.util.Formatter', arg0: object_t): Promise<Java.Formatter>;
  export function newInstanceP(className: 'java.util.Formatter', arg0: Java.Locale): Promise<Java.Formatter>;
  export function newInstanceP(className: 'java.util.Formatter', arg0: string_t): Promise<Java.Formatter>;
  export function newInstanceP(className: 'java.util.Formatter', arg0: object_t): Promise<Java.Formatter>;
  export function newInstanceP(className: 'java.util.Formatter'): Promise<Java.Formatter>;
  export function newInstanceP(className: 'java.util.FormatterClosedException'): Promise<Java.FormatterClosedException>;
  export function newInstanceP(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): Promise<Java.GregorianCalendar>;
  export function newInstanceP(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): Promise<Java.GregorianCalendar>;
  export function newInstanceP(className: 'java.util.GregorianCalendar', arg0: integer_t, arg1: integer_t, arg2: integer_t): Promise<Java.GregorianCalendar>;
  export function newInstanceP(className: 'java.util.GregorianCalendar', arg0: Java.TimeZone, arg1: Java.Locale): Promise<Java.GregorianCalendar>;
  export function newInstanceP(className: 'java.util.GregorianCalendar', arg0: Java.TimeZone): Promise<Java.GregorianCalendar>;
  export function newInstanceP(className: 'java.util.GregorianCalendar', arg0: Java.Locale): Promise<Java.GregorianCalendar>;
  export function newInstanceP(className: 'java.util.GregorianCalendar'): Promise<Java.GregorianCalendar>;
  export function newInstanceP(className: 'java.util.HashMap', arg0: integer_t, arg1: float_t): Promise<Java.HashMap>;
  export function newInstanceP(className: 'java.util.HashMap', arg0: Java.Map): Promise<Java.HashMap>;
  export function newInstanceP(className: 'java.util.HashMap', arg0: integer_t): Promise<Java.HashMap>;
  export function newInstanceP(className: 'java.util.HashMap'): Promise<Java.HashMap>;
  export function newInstanceP(className: 'java.util.HashSet', arg0: integer_t, arg1: float_t): Promise<Java.HashSet>;
  export function newInstanceP(className: 'java.util.HashSet', arg0: Java.Collection): Promise<Java.HashSet>;
  export function newInstanceP(className: 'java.util.HashSet', arg0: integer_t): Promise<Java.HashSet>;
  export function newInstanceP(className: 'java.util.HashSet'): Promise<Java.HashSet>;
  export function newInstanceP(className: 'java.util.Hashtable', arg0: integer_t, arg1: float_t): Promise<Java.Hashtable>;
  export function newInstanceP(className: 'java.util.Hashtable', arg0: Java.Map): Promise<Java.Hashtable>;
  export function newInstanceP(className: 'java.util.Hashtable', arg0: integer_t): Promise<Java.Hashtable>;
  export function newInstanceP(className: 'java.util.Hashtable'): Promise<Java.Hashtable>;
  export function newInstanceP(className: 'java.util.IdentityHashMap', arg0: Java.Map): Promise<Java.IdentityHashMap>;
  export function newInstanceP(className: 'java.util.IdentityHashMap', arg0: integer_t): Promise<Java.IdentityHashMap>;
  export function newInstanceP(className: 'java.util.IdentityHashMap'): Promise<Java.IdentityHashMap>;
  export function newInstanceP(className: 'java.util.IllegalFormatCodePointException', arg0: integer_t): Promise<Java.IllegalFormatCodePointException>;
  export function newInstanceP(className: 'java.util.IllegalFormatConversionException', arg0: object_t, arg1: Java.Class): Promise<Java.IllegalFormatConversionException>;
  export function newInstanceP(className: 'java.util.IllegalFormatFlagsException', arg0: string_t): Promise<Java.IllegalFormatFlagsException>;
  export function newInstanceP(className: 'java.util.IllegalFormatPrecisionException', arg0: integer_t): Promise<Java.IllegalFormatPrecisionException>;
  export function newInstanceP(className: 'java.util.IllegalFormatWidthException', arg0: integer_t): Promise<Java.IllegalFormatWidthException>;
  export function newInstanceP(className: 'java.util.IllformedLocaleException', arg0: string_t, arg1: integer_t): Promise<Java.IllformedLocaleException>;
  export function newInstanceP(className: 'java.util.IllformedLocaleException', arg0: string_t): Promise<Java.IllformedLocaleException>;
  export function newInstanceP(className: 'java.util.IllformedLocaleException'): Promise<Java.IllformedLocaleException>;
  export function newInstanceP(className: 'java.util.InputMismatchException', arg0: string_t): Promise<Java.InputMismatchException>;
  export function newInstanceP(className: 'java.util.InputMismatchException'): Promise<Java.InputMismatchException>;
  export function newInstanceP(className: 'java.util.IntSummaryStatistics'): Promise<Java.IntSummaryStatistics>;
  export function newInstanceP(className: 'java.util.InvalidPropertiesFormatException', arg0: object_t): Promise<Java.InvalidPropertiesFormatException>;
  export function newInstanceP(className: 'java.util.InvalidPropertiesFormatException', arg0: string_t): Promise<Java.InvalidPropertiesFormatException>;
  export function newInstanceP(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t, arg2: boolean_t): Promise<Java.LinkedHashMap>;
  export function newInstanceP(className: 'java.util.LinkedHashMap', arg0: integer_t, arg1: float_t): Promise<Java.LinkedHashMap>;
  export function newInstanceP(className: 'java.util.LinkedHashMap', arg0: Java.Map): Promise<Java.LinkedHashMap>;
  export function newInstanceP(className: 'java.util.LinkedHashMap', arg0: integer_t): Promise<Java.LinkedHashMap>;
  export function newInstanceP(className: 'java.util.LinkedHashMap'): Promise<Java.LinkedHashMap>;
  export function newInstanceP(className: 'java.util.LinkedHashSet', arg0: integer_t, arg1: float_t): Promise<Java.LinkedHashSet>;
  export function newInstanceP(className: 'java.util.LinkedHashSet', arg0: Java.Collection): Promise<Java.LinkedHashSet>;
  export function newInstanceP(className: 'java.util.LinkedHashSet', arg0: integer_t): Promise<Java.LinkedHashSet>;
  export function newInstanceP(className: 'java.util.LinkedHashSet'): Promise<Java.LinkedHashSet>;
  export function newInstanceP(className: 'java.util.LinkedList', arg0: Java.Collection): Promise<Java.LinkedList>;
  export function newInstanceP(className: 'java.util.LinkedList'): Promise<Java.LinkedList>;
  export function newInstanceP(className: 'java.util.ListResourceBundle'): Promise<Java.ListResourceBundle>;
  export function newInstanceP(className: 'java.util.Locale', arg0: string_t, arg1: string_t, arg2: string_t): Promise<Java.Locale>;
  export function newInstanceP(className: 'java.util.Locale', arg0: string_t, arg1: string_t): Promise<Java.Locale>;
  export function newInstanceP(className: 'java.util.Locale', arg0: string_t): Promise<Java.Locale>;
  export function newInstanceP(className: 'java.util.Locale$Builder'): Promise<Java.Locale$Builder>;
  export function newInstanceP(className: 'java.util.Locale$LanguageRange', arg0: string_t, arg1: double_t): Promise<Java.Locale$LanguageRange>;
  export function newInstanceP(className: 'java.util.Locale$LanguageRange', arg0: string_t): Promise<Java.Locale$LanguageRange>;
  export function newInstanceP(className: 'java.util.LongSummaryStatistics'): Promise<Java.LongSummaryStatistics>;
  export function newInstanceP(className: 'java.util.MissingFormatArgumentException', arg0: string_t): Promise<Java.MissingFormatArgumentException>;
  export function newInstanceP(className: 'java.util.MissingFormatWidthException', arg0: string_t): Promise<Java.MissingFormatWidthException>;
  export function newInstanceP(className: 'java.util.MissingResourceException', arg0: string_t, arg1: string_t, arg2: string_t): Promise<Java.MissingResourceException>;
  export function newInstanceP(className: 'java.util.NoSuchElementException', arg0: string_t): Promise<Java.NoSuchElementException>;
  export function newInstanceP(className: 'java.util.NoSuchElementException'): Promise<Java.NoSuchElementException>;
  export function newInstanceP(className: 'java.util.Observable'): Promise<Java.Observable>;
  export function newInstanceP(className: 'java.util.PriorityQueue', arg0: integer_t, arg1: Java.Comparator): Promise<Java.PriorityQueue>;
  export function newInstanceP(className: 'java.util.PriorityQueue', arg0: Java.PriorityQueue): Promise<Java.PriorityQueue>;
  export function newInstanceP(className: 'java.util.PriorityQueue', arg0: Java.Comparator): Promise<Java.PriorityQueue>;
  export function newInstanceP(className: 'java.util.PriorityQueue', arg0: Java.Collection): Promise<Java.PriorityQueue>;
  export function newInstanceP(className: 'java.util.PriorityQueue', arg0: Java.SortedSet): Promise<Java.PriorityQueue>;
  export function newInstanceP(className: 'java.util.PriorityQueue', arg0: integer_t): Promise<Java.PriorityQueue>;
  export function newInstanceP(className: 'java.util.PriorityQueue'): Promise<Java.PriorityQueue>;
  export function newInstanceP(className: 'java.util.Properties', arg0: Java.Properties): Promise<Java.Properties>;
  export function newInstanceP(className: 'java.util.Properties'): Promise<Java.Properties>;
  export function newInstanceP(className: 'java.util.PropertyPermission', arg0: string_t, arg1: string_t): Promise<Java.PropertyPermission>;
  export function newInstanceP(className: 'java.util.PropertyResourceBundle', arg0: object_t): Promise<Java.PropertyResourceBundle>;
  export function newInstanceP(className: 'java.util.PropertyResourceBundle', arg0: object_t): Promise<Java.PropertyResourceBundle>;
  export function newInstanceP(className: 'java.util.Random', arg0: long_t): Promise<Java.Random>;
  export function newInstanceP(className: 'java.util.Random'): Promise<Java.Random>;
  export function newInstanceP(className: 'java.util.ResourceBundle'): Promise<Java.ResourceBundle>;
  export function newInstanceP(className: 'java.util.Scanner', arg0: object_t, arg1: string_t): Promise<Java.Scanner>;
  export function newInstanceP(className: 'java.util.Scanner', arg0: object_t, arg1: string_t): Promise<Java.Scanner>;
  export function newInstanceP(className: 'java.util.Scanner', arg0: object_t, arg1: string_t): Promise<Java.Scanner>;
  export function newInstanceP(className: 'java.util.Scanner', arg0: object_t, arg1: string_t): Promise<Java.Scanner>;
  export function newInstanceP(className: 'java.util.Scanner', arg0: object_t): Promise<Java.Scanner>;
  export function newInstanceP(className: 'java.util.Scanner', arg0: object_t): Promise<Java.Scanner>;
  export function newInstanceP(className: 'java.util.Scanner', arg0: object_t): Promise<Java.Scanner>;
  export function newInstanceP(className: 'java.util.Scanner', arg0: object_t): Promise<Java.Scanner>;
  export function newInstanceP(className: 'java.util.Scanner', arg0: string_t): Promise<Java.Scanner>;
  export function newInstanceP(className: 'java.util.Scanner', arg0: object_t): Promise<Java.Scanner>;
  export function newInstanceP(className: 'java.util.ServiceConfigurationError', arg0: string_t, arg1: object_t): Promise<Java.ServiceConfigurationError>;
  export function newInstanceP(className: 'java.util.ServiceConfigurationError', arg0: string_t): Promise<Java.ServiceConfigurationError>;
  export function newInstanceP(className: 'java.util.SimpleTimeZone', arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, arg6: integer_t, arg7: integer_t, arg8: integer_t, arg9: integer_t, arg10: integer_t, arg11: integer_t, arg12: integer_t): Promise<Java.SimpleTimeZone>;
  export function newInstanceP(className: 'java.util.SimpleTimeZone', arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, arg6: integer_t, arg7: integer_t, arg8: integer_t, arg9: integer_t, arg10: integer_t): Promise<Java.SimpleTimeZone>;
  export function newInstanceP(className: 'java.util.SimpleTimeZone', arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, arg6: integer_t, arg7: integer_t, arg8: integer_t, arg9: integer_t): Promise<Java.SimpleTimeZone>;
  export function newInstanceP(className: 'java.util.SimpleTimeZone', arg0: integer_t, arg1: string_t): Promise<Java.SimpleTimeZone>;
  export function newInstanceP(className: 'java.util.SplittableRandom', arg0: long_t): Promise<Java.SplittableRandom>;
  export function newInstanceP(className: 'java.util.SplittableRandom'): Promise<Java.SplittableRandom>;
  export function newInstanceP(className: 'java.util.Stack'): Promise<Java.Stack>;
  export function newInstanceP(className: 'java.util.StringJoiner', arg0: object_t, arg1: object_t, arg2: object_t): Promise<Java.StringJoiner>;
  export function newInstanceP(className: 'java.util.StringJoiner', arg0: object_t): Promise<Java.StringJoiner>;
  export function newInstanceP(className: 'java.util.StringTokenizer', arg0: string_t, arg1: string_t, arg2: boolean_t): Promise<Java.StringTokenizer>;
  export function newInstanceP(className: 'java.util.StringTokenizer', arg0: string_t, arg1: string_t): Promise<Java.StringTokenizer>;
  export function newInstanceP(className: 'java.util.StringTokenizer', arg0: string_t): Promise<Java.StringTokenizer>;
  export function newInstanceP(className: 'java.util.Timer', arg0: string_t, arg1: boolean_t): Promise<Java.Timer>;
  export function newInstanceP(className: 'java.util.Timer', arg0: string_t): Promise<Java.Timer>;
  export function newInstanceP(className: 'java.util.Timer', arg0: boolean_t): Promise<Java.Timer>;
  export function newInstanceP(className: 'java.util.Timer'): Promise<Java.Timer>;
  export function newInstanceP(className: 'java.util.TimeZone'): Promise<Java.TimeZone>;
  export function newInstanceP(className: 'java.util.TooManyListenersException', arg0: string_t): Promise<Java.TooManyListenersException>;
  export function newInstanceP(className: 'java.util.TooManyListenersException'): Promise<Java.TooManyListenersException>;
  export function newInstanceP(className: 'java.util.TreeMap', arg0: Java.Comparator): Promise<Java.TreeMap>;
  export function newInstanceP(className: 'java.util.TreeMap', arg0: Java.SortedMap): Promise<Java.TreeMap>;
  export function newInstanceP(className: 'java.util.TreeMap', arg0: Java.Map): Promise<Java.TreeMap>;
  export function newInstanceP(className: 'java.util.TreeMap'): Promise<Java.TreeMap>;
  export function newInstanceP(className: 'java.util.TreeSet', arg0: Java.Comparator): Promise<Java.TreeSet>;
  export function newInstanceP(className: 'java.util.TreeSet', arg0: Java.Collection): Promise<Java.TreeSet>;
  export function newInstanceP(className: 'java.util.TreeSet', arg0: Java.SortedSet): Promise<Java.TreeSet>;
  export function newInstanceP(className: 'java.util.TreeSet'): Promise<Java.TreeSet>;
  export function newInstanceP(className: 'java.util.UnknownFormatConversionException', arg0: string_t): Promise<Java.UnknownFormatConversionException>;
  export function newInstanceP(className: 'java.util.UnknownFormatFlagsException', arg0: string_t): Promise<Java.UnknownFormatFlagsException>;
  export function newInstanceP(className: 'java.util.UUID', arg0: long_t, arg1: long_t): Promise<Java.UUID>;
  export function newInstanceP(className: 'java.util.Vector', arg0: integer_t, arg1: integer_t): Promise<Java.Vector>;
  export function newInstanceP(className: 'java.util.Vector', arg0: Java.Collection): Promise<Java.Vector>;
  export function newInstanceP(className: 'java.util.Vector', arg0: integer_t): Promise<Java.Vector>;
  export function newInstanceP(className: 'java.util.Vector'): Promise<Java.Vector>;
  export function newInstanceP(className: 'java.util.WeakHashMap', arg0: integer_t, arg1: float_t): Promise<Java.WeakHashMap>;
  export function newInstanceP(className: 'java.util.WeakHashMap', arg0: Java.Map): Promise<Java.WeakHashMap>;
  export function newInstanceP(className: 'java.util.WeakHashMap', arg0: integer_t): Promise<Java.WeakHashMap>;
  export function newInstanceP(className: 'java.util.WeakHashMap'): Promise<Java.WeakHashMap>;
  export function newInstanceP(className: string, ...args: any[]): Promise<any>;
  export function newInstanceP(className: string, ...args: any[]): Promise<any> {
    args.unshift(className);
    return _java.newInstanceP.apply(_java, args);
  }

  export function newArray(className: 'com.redseal.featureset.ambiguous.Thing', arg: Java.com.redseal.featureset.ambiguous.Thing[]): array_t<com.redseal.featureset.ambiguous.Thing>;
  export function newArray(className: 'com.redseal.featureset.ambiguous.Thing$Nested', arg: Java.Thing$Nested[]): array_t<com.redseal.featureset.ambiguous.Thing$Nested>;
  export function newArray(className: 'com.redseal.featureset.AnEnum', arg: Java.AnEnum[]): array_t<com.redseal.featureset.AnEnum>;
  export function newArray(className: 'com.redseal.featureset.AnonClassTest', arg: Java.AnonClassTest[]): array_t<com.redseal.featureset.AnonClassTest>;
  export function newArray(className: 'com.redseal.featureset.overloading.Overloading', arg: Java.Overloading[]): array_t<com.redseal.featureset.overloading.Overloading>;
  export function newArray(className: 'com.redseal.featureset.overloading.Overloading$Bar', arg: Java.Overloading$Bar[]): array_t<com.redseal.featureset.overloading.Overloading$Bar>;
  export function newArray(className: 'com.redseal.featureset.overloading.Overloading$Foo', arg: Java.Overloading$Foo[]): array_t<com.redseal.featureset.overloading.Overloading$Foo>;
  export function newArray(className: 'com.redseal.featureset.overloading.Step', arg: Java.Step[]): array_t<com.redseal.featureset.overloading.Step>;
  export function newArray(className: 'com.redseal.featureset.SomeAbstractClass', arg: Java.SomeAbstractClass[]): array_t<com.redseal.featureset.SomeAbstractClass>;
  export function newArray(className: 'com.redseal.featureset.SomeClass', arg: Java.SomeClass[]): array_t<com.redseal.featureset.SomeClass>;
  export function newArray(className: 'com.redseal.featureset.SomeInterface', arg: Java.SomeInterface[]): array_t<com.redseal.featureset.SomeInterface>;
  export function newArray(className: 'com.redseal.featureset.Thing', arg: Java.com.redseal.featureset.Thing[]): array_t<com.redseal.featureset.Thing>;
  export function newArray(className: 'com.redseal.featureset.TinyInterface', arg: Java.TinyInterface[]): array_t<com.redseal.featureset.TinyInterface>;
  export function newArray(className: 'java.lang.Boolean', arg: boolean_t[]): array_t<java.lang.Boolean>;
  export function newArray(className: 'java.lang.Class', arg: Java.Class[]): array_t<java.lang.Class>;
  export function newArray(className: 'java.lang.Double', arg: double_t[]): array_t<java.lang.Double>;
  export function newArray(className: 'java.lang.Float', arg: float_t[]): array_t<java.lang.Float>;
  export function newArray(className: 'java.lang.Integer', arg: integer_t[]): array_t<java.lang.Integer>;
  export function newArray(className: 'java.lang.Long', arg: long_t[]): array_t<java.lang.Long>;
  export function newArray(className: 'java.lang.Object', arg: object_t[]): array_t<java.lang.Object>;
  export function newArray(className: 'java.lang.reflect.Method', arg: Java.Method[]): array_t<java.lang.reflect.Method>;
  export function newArray(className: 'java.lang.Short', arg: short_t[]): array_t<java.lang.Short>;
  export function newArray(className: 'java.lang.String', arg: string_t[]): array_t<java.lang.String>;
  export function newArray(className: 'java.util.AbstractCollection', arg: Java.AbstractCollection[]): array_t<java.util.AbstractCollection>;
  export function newArray(className: 'java.util.AbstractList', arg: Java.AbstractList[]): array_t<java.util.AbstractList>;
  export function newArray(className: 'java.util.AbstractMap', arg: Java.AbstractMap[]): array_t<java.util.AbstractMap>;
  export function newArray(className: 'java.util.AbstractMap$SimpleEntry', arg: Java.AbstractMap$SimpleEntry[]): array_t<java.util.AbstractMap$SimpleEntry>;
  export function newArray(className: 'java.util.AbstractMap$SimpleImmutableEntry', arg: Java.AbstractMap$SimpleImmutableEntry[]): array_t<java.util.AbstractMap$SimpleImmutableEntry>;
  export function newArray(className: 'java.util.AbstractQueue', arg: Java.AbstractQueue[]): array_t<java.util.AbstractQueue>;
  export function newArray(className: 'java.util.AbstractSequentialList', arg: Java.AbstractSequentialList[]): array_t<java.util.AbstractSequentialList>;
  export function newArray(className: 'java.util.AbstractSet', arg: Java.AbstractSet[]): array_t<java.util.AbstractSet>;
  export function newArray(className: 'java.util.ArrayDeque', arg: Java.ArrayDeque[]): array_t<java.util.ArrayDeque>;
  export function newArray(className: 'java.util.ArrayList', arg: Java.ArrayList[]): array_t<java.util.ArrayList>;
  export function newArray(className: 'java.util.Arrays', arg: Java.Arrays[]): array_t<java.util.Arrays>;
  export function newArray(className: 'java.util.Base64', arg: Java.Base64[]): array_t<java.util.Base64>;
  export function newArray(className: 'java.util.Base64$Decoder', arg: Java.Base64$Decoder[]): array_t<java.util.Base64$Decoder>;
  export function newArray(className: 'java.util.Base64$Encoder', arg: Java.Base64$Encoder[]): array_t<java.util.Base64$Encoder>;
  export function newArray(className: 'java.util.BitSet', arg: Java.BitSet[]): array_t<java.util.BitSet>;
  export function newArray(className: 'java.util.Calendar', arg: Java.Calendar[]): array_t<java.util.Calendar>;
  export function newArray(className: 'java.util.Calendar$Builder', arg: Java.Calendar$Builder[]): array_t<java.util.Calendar$Builder>;
  export function newArray(className: 'java.util.Collection', arg: Java.Collection[]): array_t<java.util.Collection>;
  export function newArray(className: 'java.util.Collections', arg: Java.Collections[]): array_t<java.util.Collections>;
  export function newArray(className: 'java.util.Comparator', arg: Java.Comparator[]): array_t<java.util.Comparator>;
  export function newArray(className: 'java.util.ConcurrentModificationException', arg: Java.ConcurrentModificationException[]): array_t<java.util.ConcurrentModificationException>;
  export function newArray(className: 'java.util.Currency', arg: Java.Currency[]): array_t<java.util.Currency>;
  export function newArray(className: 'java.util.Date', arg: Java.Date[]): array_t<java.util.Date>;
  export function newArray(className: 'java.util.Deque', arg: Java.Deque[]): array_t<java.util.Deque>;
  export function newArray(className: 'java.util.Dictionary', arg: Java.Dictionary[]): array_t<java.util.Dictionary>;
  export function newArray(className: 'java.util.DoubleSummaryStatistics', arg: Java.DoubleSummaryStatistics[]): array_t<java.util.DoubleSummaryStatistics>;
  export function newArray(className: 'java.util.DuplicateFormatFlagsException', arg: Java.DuplicateFormatFlagsException[]): array_t<java.util.DuplicateFormatFlagsException>;
  export function newArray(className: 'java.util.EmptyStackException', arg: Java.EmptyStackException[]): array_t<java.util.EmptyStackException>;
  export function newArray(className: 'java.util.Enumeration', arg: Java.Enumeration[]): array_t<java.util.Enumeration>;
  export function newArray(className: 'java.util.EnumMap', arg: Java.EnumMap[]): array_t<java.util.EnumMap>;
  export function newArray(className: 'java.util.EnumSet', arg: Java.EnumSet[]): array_t<java.util.EnumSet>;
  export function newArray(className: 'java.util.EventListener', arg: Java.EventListener[]): array_t<java.util.EventListener>;
  export function newArray(className: 'java.util.EventListenerProxy', arg: Java.EventListenerProxy[]): array_t<java.util.EventListenerProxy>;
  export function newArray(className: 'java.util.EventObject', arg: Java.EventObject[]): array_t<java.util.EventObject>;
  export function newArray(className: 'java.util.FormatFlagsConversionMismatchException', arg: Java.FormatFlagsConversionMismatchException[]): array_t<java.util.FormatFlagsConversionMismatchException>;
  export function newArray(className: 'java.util.Formattable', arg: Java.Formattable[]): array_t<java.util.Formattable>;
  export function newArray(className: 'java.util.FormattableFlags', arg: Java.FormattableFlags[]): array_t<java.util.FormattableFlags>;
  export function newArray(className: 'java.util.Formatter', arg: Java.Formatter[]): array_t<java.util.Formatter>;
  export function newArray(className: 'java.util.Formatter$BigDecimalLayoutForm', arg: Java.Formatter$BigDecimalLayoutForm[]): array_t<java.util.Formatter$BigDecimalLayoutForm>;
  export function newArray(className: 'java.util.FormatterClosedException', arg: Java.FormatterClosedException[]): array_t<java.util.FormatterClosedException>;
  export function newArray(className: 'java.util.function.Function', arg: Java.Function[]): array_t<java.util.function_.Function>;
  export function newArray(className: 'java.util.GregorianCalendar', arg: Java.GregorianCalendar[]): array_t<java.util.GregorianCalendar>;
  export function newArray(className: 'java.util.HashMap', arg: Java.HashMap[]): array_t<java.util.HashMap>;
  export function newArray(className: 'java.util.HashSet', arg: Java.HashSet[]): array_t<java.util.HashSet>;
  export function newArray(className: 'java.util.Hashtable', arg: Java.Hashtable[]): array_t<java.util.Hashtable>;
  export function newArray(className: 'java.util.IdentityHashMap', arg: Java.IdentityHashMap[]): array_t<java.util.IdentityHashMap>;
  export function newArray(className: 'java.util.IllegalFormatCodePointException', arg: Java.IllegalFormatCodePointException[]): array_t<java.util.IllegalFormatCodePointException>;
  export function newArray(className: 'java.util.IllegalFormatConversionException', arg: Java.IllegalFormatConversionException[]): array_t<java.util.IllegalFormatConversionException>;
  export function newArray(className: 'java.util.IllegalFormatException', arg: Java.IllegalFormatException[]): array_t<java.util.IllegalFormatException>;
  export function newArray(className: 'java.util.IllegalFormatFlagsException', arg: Java.IllegalFormatFlagsException[]): array_t<java.util.IllegalFormatFlagsException>;
  export function newArray(className: 'java.util.IllegalFormatPrecisionException', arg: Java.IllegalFormatPrecisionException[]): array_t<java.util.IllegalFormatPrecisionException>;
  export function newArray(className: 'java.util.IllegalFormatWidthException', arg: Java.IllegalFormatWidthException[]): array_t<java.util.IllegalFormatWidthException>;
  export function newArray(className: 'java.util.IllformedLocaleException', arg: Java.IllformedLocaleException[]): array_t<java.util.IllformedLocaleException>;
  export function newArray(className: 'java.util.InputMismatchException', arg: Java.InputMismatchException[]): array_t<java.util.InputMismatchException>;
  export function newArray(className: 'java.util.IntSummaryStatistics', arg: Java.IntSummaryStatistics[]): array_t<java.util.IntSummaryStatistics>;
  export function newArray(className: 'java.util.InvalidPropertiesFormatException', arg: Java.InvalidPropertiesFormatException[]): array_t<java.util.InvalidPropertiesFormatException>;
  export function newArray(className: 'java.util.Iterator', arg: Java.Iterator[]): array_t<java.util.Iterator>;
  export function newArray(className: 'java.util.LinkedHashMap', arg: Java.LinkedHashMap[]): array_t<java.util.LinkedHashMap>;
  export function newArray(className: 'java.util.LinkedHashSet', arg: Java.LinkedHashSet[]): array_t<java.util.LinkedHashSet>;
  export function newArray(className: 'java.util.LinkedList', arg: Java.LinkedList[]): array_t<java.util.LinkedList>;
  export function newArray(className: 'java.util.List', arg: Java.List[]): array_t<java.util.List>;
  export function newArray(className: 'java.util.ListIterator', arg: Java.ListIterator[]): array_t<java.util.ListIterator>;
  export function newArray(className: 'java.util.ListResourceBundle', arg: Java.ListResourceBundle[]): array_t<java.util.ListResourceBundle>;
  export function newArray(className: 'java.util.Locale', arg: Java.Locale[]): array_t<java.util.Locale>;
  export function newArray(className: 'java.util.Locale$Builder', arg: Java.Locale$Builder[]): array_t<java.util.Locale$Builder>;
  export function newArray(className: 'java.util.Locale$Category', arg: Java.Locale$Category[]): array_t<java.util.Locale$Category>;
  export function newArray(className: 'java.util.Locale$FilteringMode', arg: Java.Locale$FilteringMode[]): array_t<java.util.Locale$FilteringMode>;
  export function newArray(className: 'java.util.Locale$LanguageRange', arg: Java.Locale$LanguageRange[]): array_t<java.util.Locale$LanguageRange>;
  export function newArray(className: 'java.util.LongSummaryStatistics', arg: Java.LongSummaryStatistics[]): array_t<java.util.LongSummaryStatistics>;
  export function newArray(className: 'java.util.Map', arg: Java.Map[]): array_t<java.util.Map>;
  export function newArray(className: 'java.util.Map$Entry', arg: Java.Map$Entry[]): array_t<java.util.Map$Entry>;
  export function newArray(className: 'java.util.MissingFormatArgumentException', arg: Java.MissingFormatArgumentException[]): array_t<java.util.MissingFormatArgumentException>;
  export function newArray(className: 'java.util.MissingFormatWidthException', arg: Java.MissingFormatWidthException[]): array_t<java.util.MissingFormatWidthException>;
  export function newArray(className: 'java.util.MissingResourceException', arg: Java.MissingResourceException[]): array_t<java.util.MissingResourceException>;
  export function newArray(className: 'java.util.NavigableMap', arg: Java.NavigableMap[]): array_t<java.util.NavigableMap>;
  export function newArray(className: 'java.util.NavigableSet', arg: Java.NavigableSet[]): array_t<java.util.NavigableSet>;
  export function newArray(className: 'java.util.NoSuchElementException', arg: Java.NoSuchElementException[]): array_t<java.util.NoSuchElementException>;
  export function newArray(className: 'java.util.Objects', arg: Java.Objects[]): array_t<java.util.Objects>;
  export function newArray(className: 'java.util.Observable', arg: Java.Observable[]): array_t<java.util.Observable>;
  export function newArray(className: 'java.util.Observer', arg: Java.Observer[]): array_t<java.util.Observer>;
  export function newArray(className: 'java.util.Optional', arg: Java.Optional[]): array_t<java.util.Optional>;
  export function newArray(className: 'java.util.OptionalDouble', arg: Java.OptionalDouble[]): array_t<java.util.OptionalDouble>;
  export function newArray(className: 'java.util.OptionalInt', arg: Java.OptionalInt[]): array_t<java.util.OptionalInt>;
  export function newArray(className: 'java.util.OptionalLong', arg: Java.OptionalLong[]): array_t<java.util.OptionalLong>;
  export function newArray(className: 'java.util.PrimitiveIterator', arg: Java.PrimitiveIterator[]): array_t<java.util.PrimitiveIterator>;
  export function newArray(className: 'java.util.PrimitiveIterator$OfDouble', arg: Java.PrimitiveIterator$OfDouble[]): array_t<java.util.PrimitiveIterator$OfDouble>;
  export function newArray(className: 'java.util.PrimitiveIterator$OfInt', arg: Java.PrimitiveIterator$OfInt[]): array_t<java.util.PrimitiveIterator$OfInt>;
  export function newArray(className: 'java.util.PrimitiveIterator$OfLong', arg: Java.PrimitiveIterator$OfLong[]): array_t<java.util.PrimitiveIterator$OfLong>;
  export function newArray(className: 'java.util.PriorityQueue', arg: Java.PriorityQueue[]): array_t<java.util.PriorityQueue>;
  export function newArray(className: 'java.util.Properties', arg: Java.Properties[]): array_t<java.util.Properties>;
  export function newArray(className: 'java.util.PropertyPermission', arg: Java.PropertyPermission[]): array_t<java.util.PropertyPermission>;
  export function newArray(className: 'java.util.PropertyResourceBundle', arg: Java.PropertyResourceBundle[]): array_t<java.util.PropertyResourceBundle>;
  export function newArray(className: 'java.util.Queue', arg: Java.Queue[]): array_t<java.util.Queue>;
  export function newArray(className: 'java.util.Random', arg: Java.Random[]): array_t<java.util.Random>;
  export function newArray(className: 'java.util.RandomAccess', arg: Java.RandomAccess[]): array_t<java.util.RandomAccess>;
  export function newArray(className: 'java.util.ResourceBundle', arg: Java.ResourceBundle[]): array_t<java.util.ResourceBundle>;
  export function newArray(className: 'java.util.ResourceBundle$Control', arg: Java.ResourceBundle$Control[]): array_t<java.util.ResourceBundle$Control>;
  export function newArray(className: 'java.util.Scanner', arg: Java.Scanner[]): array_t<java.util.Scanner>;
  export function newArray(className: 'java.util.ServiceConfigurationError', arg: Java.ServiceConfigurationError[]): array_t<java.util.ServiceConfigurationError>;
  export function newArray(className: 'java.util.ServiceLoader', arg: Java.ServiceLoader[]): array_t<java.util.ServiceLoader>;
  export function newArray(className: 'java.util.Set', arg: Java.Set[]): array_t<java.util.Set>;
  export function newArray(className: 'java.util.SimpleTimeZone', arg: Java.SimpleTimeZone[]): array_t<java.util.SimpleTimeZone>;
  export function newArray(className: 'java.util.SortedMap', arg: Java.SortedMap[]): array_t<java.util.SortedMap>;
  export function newArray(className: 'java.util.SortedSet', arg: Java.SortedSet[]): array_t<java.util.SortedSet>;
  export function newArray(className: 'java.util.Spliterator', arg: Java.Spliterator[]): array_t<java.util.Spliterator>;
  export function newArray(className: 'java.util.Spliterator$OfDouble', arg: Java.Spliterator$OfDouble[]): array_t<java.util.Spliterator$OfDouble>;
  export function newArray(className: 'java.util.Spliterator$OfInt', arg: Java.Spliterator$OfInt[]): array_t<java.util.Spliterator$OfInt>;
  export function newArray(className: 'java.util.Spliterator$OfLong', arg: Java.Spliterator$OfLong[]): array_t<java.util.Spliterator$OfLong>;
  export function newArray(className: 'java.util.Spliterator$OfPrimitive', arg: Java.Spliterator$OfPrimitive[]): array_t<java.util.Spliterator$OfPrimitive>;
  export function newArray(className: 'java.util.Spliterators', arg: Java.Spliterators[]): array_t<java.util.Spliterators>;
  export function newArray(className: 'java.util.Spliterators$AbstractDoubleSpliterator', arg: Java.Spliterators$AbstractDoubleSpliterator[]): array_t<java.util.Spliterators$AbstractDoubleSpliterator>;
  export function newArray(className: 'java.util.Spliterators$AbstractIntSpliterator', arg: Java.Spliterators$AbstractIntSpliterator[]): array_t<java.util.Spliterators$AbstractIntSpliterator>;
  export function newArray(className: 'java.util.Spliterators$AbstractLongSpliterator', arg: Java.Spliterators$AbstractLongSpliterator[]): array_t<java.util.Spliterators$AbstractLongSpliterator>;
  export function newArray(className: 'java.util.Spliterators$AbstractSpliterator', arg: Java.Spliterators$AbstractSpliterator[]): array_t<java.util.Spliterators$AbstractSpliterator>;
  export function newArray(className: 'java.util.SplittableRandom', arg: Java.SplittableRandom[]): array_t<java.util.SplittableRandom>;
  export function newArray(className: 'java.util.Stack', arg: Java.Stack[]): array_t<java.util.Stack>;
  export function newArray(className: 'java.util.StringJoiner', arg: Java.StringJoiner[]): array_t<java.util.StringJoiner>;
  export function newArray(className: 'java.util.StringTokenizer', arg: Java.StringTokenizer[]): array_t<java.util.StringTokenizer>;
  export function newArray(className: 'java.util.Timer', arg: Java.Timer[]): array_t<java.util.Timer>;
  export function newArray(className: 'java.util.TimerTask', arg: Java.TimerTask[]): array_t<java.util.TimerTask>;
  export function newArray(className: 'java.util.TimeZone', arg: Java.TimeZone[]): array_t<java.util.TimeZone>;
  export function newArray(className: 'java.util.TooManyListenersException', arg: Java.TooManyListenersException[]): array_t<java.util.TooManyListenersException>;
  export function newArray(className: 'java.util.TreeMap', arg: Java.TreeMap[]): array_t<java.util.TreeMap>;
  export function newArray(className: 'java.util.TreeSet', arg: Java.TreeSet[]): array_t<java.util.TreeSet>;
  export function newArray(className: 'java.util.UnknownFormatConversionException', arg: Java.UnknownFormatConversionException[]): array_t<java.util.UnknownFormatConversionException>;
  export function newArray(className: 'java.util.UnknownFormatFlagsException', arg: Java.UnknownFormatFlagsException[]): array_t<java.util.UnknownFormatFlagsException>;
  export function newArray(className: 'java.util.UUID', arg: Java.UUID[]): array_t<java.util.UUID>;
  export function newArray(className: 'java.util.Vector', arg: Java.Vector[]): array_t<java.util.Vector>;
  export function newArray(className: 'java.util.WeakHashMap', arg: Java.WeakHashMap[]): array_t<java.util.WeakHashMap>;
  export function newArray<T>(className: string, arg: any[]): array_t<T>;
  export function newArray<T>(className: string, arg: any[]): array_t<T> {
    return _java.newArray(className, arg);
  }

  // export module Java {

  // Node-java has special handling for methods that return long or java.lang.Long,
  // returning a Javascript Number but with an additional property longValue.
  export interface longValue_t extends Number {
    longValue: string;
  }

  // Node-java can automatically coerce a javascript string into a java.lang.String.
  // This special type alias allows to declare that possiblity to Typescript.
  export type string_t = string | Java.java.lang.String;

  // Java methods that take java.lang.Object parameters implicitly will take a java.lang.String.
  // But string_t is not sufficient for this case, we need object_t.
  export type object_t = Java.java.lang.Object | string | boolean | number | longValue_t;

  // Java methods that take long or java.lang.Long parameters may take javascript numbers,
  // longValue_t (see above) or java.lang.Long.
  // This special type alias allows to declare that possiblity to Typescript.
  export type long_t = number | longValue_t | Java.java.lang.Long;

  // Handling of other primitive numeric types is simpler, as there is no loss of precision.
  export type boolean_t = boolean | Java.java.lang.Boolean;
  export type short_t = number | Java.java.lang.Short;
  export type integer_t = number | Java.java.lang.Integer;
  export type double_t = number | Java.java.lang.Double;
  export type float_t = number | Java.java.lang.Float;
  export type number_t = number ;

  export interface array_t<T> extends Java.java.lang.Object {
    // This is an opaque type for a java array_t T[];
    // Use Java.newArray<T>(className, [...]) to create wherever a Java method expects a T[],
    // most notably for vararg parameteters.
    __dummy: T;
  }

  export type object_array_t = array_t<Java.java.lang.Object> | object_t[];

  export import Thing$Nested = com.redseal.featureset.ambiguous.Thing$Nested;
  export import AnEnum = com.redseal.featureset.AnEnum;
  export import AnonClassTest = com.redseal.featureset.AnonClassTest;
  export import Overloading = com.redseal.featureset.overloading.Overloading;
  export import Overloading$Bar = com.redseal.featureset.overloading.Overloading$Bar;
  export import Overloading$Foo = com.redseal.featureset.overloading.Overloading$Foo;
  export import Step = com.redseal.featureset.overloading.Step;
  export import SomeAbstractClass = com.redseal.featureset.SomeAbstractClass;
  export import SomeClass = com.redseal.featureset.SomeClass;
  export import SomeInterface = com.redseal.featureset.SomeInterface;
  export import TinyInterface = com.redseal.featureset.TinyInterface;
  export import Boolean = java.lang.Boolean;
  export import Class = java.lang.Class;
  export import Double = java.lang.Double;
  export import Float = java.lang.Float;
  export import Integer = java.lang.Integer;
  export import Long = java.lang.Long;
  export import Object = java.lang.Object;
  export import Method = java.lang.reflect.Method;
  export import Short = java.lang.Short;
  export import String = java.lang.String;
  export import AbstractCollection = java.util.AbstractCollection;
  export import AbstractList = java.util.AbstractList;
  export import AbstractMap = java.util.AbstractMap;
  export import AbstractMap$SimpleEntry = java.util.AbstractMap$SimpleEntry;
  export import AbstractMap$SimpleImmutableEntry = java.util.AbstractMap$SimpleImmutableEntry;
  export import AbstractQueue = java.util.AbstractQueue;
  export import AbstractSequentialList = java.util.AbstractSequentialList;
  export import AbstractSet = java.util.AbstractSet;
  export import ArrayDeque = java.util.ArrayDeque;
  export import ArrayList = java.util.ArrayList;
  export import Arrays = java.util.Arrays;
  export import Base64 = java.util.Base64;
  export import Base64$Decoder = java.util.Base64$Decoder;
  export import Base64$Encoder = java.util.Base64$Encoder;
  export import BitSet = java.util.BitSet;
  export import Calendar = java.util.Calendar;
  export import Calendar$Builder = java.util.Calendar$Builder;
  export import Collection = java.util.Collection;
  export import Collections = java.util.Collections;
  export import Comparator = java.util.Comparator;
  export import ConcurrentModificationException = java.util.ConcurrentModificationException;
  export import Currency = java.util.Currency;
  export import Date = java.util.Date;
  export import Deque = java.util.Deque;
  export import Dictionary = java.util.Dictionary;
  export import DoubleSummaryStatistics = java.util.DoubleSummaryStatistics;
  export import DuplicateFormatFlagsException = java.util.DuplicateFormatFlagsException;
  export import EmptyStackException = java.util.EmptyStackException;
  export import Enumeration = java.util.Enumeration;
  export import EnumMap = java.util.EnumMap;
  export import EnumSet = java.util.EnumSet;
  export import EventListener = java.util.EventListener;
  export import EventListenerProxy = java.util.EventListenerProxy;
  export import EventObject = java.util.EventObject;
  export import FormatFlagsConversionMismatchException = java.util.FormatFlagsConversionMismatchException;
  export import Formattable = java.util.Formattable;
  export import FormattableFlags = java.util.FormattableFlags;
  export import Formatter = java.util.Formatter;
  export import Formatter$BigDecimalLayoutForm = java.util.Formatter$BigDecimalLayoutForm;
  export import FormatterClosedException = java.util.FormatterClosedException;
  export import Function = java.util.function_.Function;
  export import GregorianCalendar = java.util.GregorianCalendar;
  export import HashMap = java.util.HashMap;
  export import HashSet = java.util.HashSet;
  export import Hashtable = java.util.Hashtable;
  export import IdentityHashMap = java.util.IdentityHashMap;
  export import IllegalFormatCodePointException = java.util.IllegalFormatCodePointException;
  export import IllegalFormatConversionException = java.util.IllegalFormatConversionException;
  export import IllegalFormatException = java.util.IllegalFormatException;
  export import IllegalFormatFlagsException = java.util.IllegalFormatFlagsException;
  export import IllegalFormatPrecisionException = java.util.IllegalFormatPrecisionException;
  export import IllegalFormatWidthException = java.util.IllegalFormatWidthException;
  export import IllformedLocaleException = java.util.IllformedLocaleException;
  export import InputMismatchException = java.util.InputMismatchException;
  export import IntSummaryStatistics = java.util.IntSummaryStatistics;
  export import InvalidPropertiesFormatException = java.util.InvalidPropertiesFormatException;
  export import Iterator = java.util.Iterator;
  export import LinkedHashMap = java.util.LinkedHashMap;
  export import LinkedHashSet = java.util.LinkedHashSet;
  export import LinkedList = java.util.LinkedList;
  export import List = java.util.List;
  export import ListIterator = java.util.ListIterator;
  export import ListResourceBundle = java.util.ListResourceBundle;
  export import Locale = java.util.Locale;
  export import Locale$Builder = java.util.Locale$Builder;
  export import Locale$Category = java.util.Locale$Category;
  export import Locale$FilteringMode = java.util.Locale$FilteringMode;
  export import Locale$LanguageRange = java.util.Locale$LanguageRange;
  export import LongSummaryStatistics = java.util.LongSummaryStatistics;
  export import Map = java.util.Map;
  export import Map$Entry = java.util.Map$Entry;
  export import MissingFormatArgumentException = java.util.MissingFormatArgumentException;
  export import MissingFormatWidthException = java.util.MissingFormatWidthException;
  export import MissingResourceException = java.util.MissingResourceException;
  export import NavigableMap = java.util.NavigableMap;
  export import NavigableSet = java.util.NavigableSet;
  export import NoSuchElementException = java.util.NoSuchElementException;
  export import Objects = java.util.Objects;
  export import Observable = java.util.Observable;
  export import Observer = java.util.Observer;
  export import Optional = java.util.Optional;
  export import OptionalDouble = java.util.OptionalDouble;
  export import OptionalInt = java.util.OptionalInt;
  export import OptionalLong = java.util.OptionalLong;
  export import PrimitiveIterator = java.util.PrimitiveIterator;
  export import PrimitiveIterator$OfDouble = java.util.PrimitiveIterator$OfDouble;
  export import PrimitiveIterator$OfInt = java.util.PrimitiveIterator$OfInt;
  export import PrimitiveIterator$OfLong = java.util.PrimitiveIterator$OfLong;
  export import PriorityQueue = java.util.PriorityQueue;
  export import Properties = java.util.Properties;
  export import PropertyPermission = java.util.PropertyPermission;
  export import PropertyResourceBundle = java.util.PropertyResourceBundle;
  export import Queue = java.util.Queue;
  export import Random = java.util.Random;
  export import RandomAccess = java.util.RandomAccess;
  export import ResourceBundle = java.util.ResourceBundle;
  export import ResourceBundle$Control = java.util.ResourceBundle$Control;
  export import Scanner = java.util.Scanner;
  export import ServiceConfigurationError = java.util.ServiceConfigurationError;
  export import ServiceLoader = java.util.ServiceLoader;
  export import Set = java.util.Set;
  export import SimpleTimeZone = java.util.SimpleTimeZone;
  export import SortedMap = java.util.SortedMap;
  export import SortedSet = java.util.SortedSet;
  export import Spliterator = java.util.Spliterator;
  export import Spliterator$OfDouble = java.util.Spliterator$OfDouble;
  export import Spliterator$OfInt = java.util.Spliterator$OfInt;
  export import Spliterator$OfLong = java.util.Spliterator$OfLong;
  export import Spliterator$OfPrimitive = java.util.Spliterator$OfPrimitive;
  export import Spliterators = java.util.Spliterators;
  export import Spliterators$AbstractDoubleSpliterator = java.util.Spliterators$AbstractDoubleSpliterator;
  export import Spliterators$AbstractIntSpliterator = java.util.Spliterators$AbstractIntSpliterator;
  export import Spliterators$AbstractLongSpliterator = java.util.Spliterators$AbstractLongSpliterator;
  export import Spliterators$AbstractSpliterator = java.util.Spliterators$AbstractSpliterator;
  export import SplittableRandom = java.util.SplittableRandom;
  export import Stack = java.util.Stack;
  export import StringJoiner = java.util.StringJoiner;
  export import StringTokenizer = java.util.StringTokenizer;
  export import Timer = java.util.Timer;
  export import TimerTask = java.util.TimerTask;
  export import TimeZone = java.util.TimeZone;
  export import TooManyListenersException = java.util.TooManyListenersException;
  export import TreeMap = java.util.TreeMap;
  export import TreeSet = java.util.TreeSet;
  export import UnknownFormatConversionException = java.util.UnknownFormatConversionException;
  export import UnknownFormatFlagsException = java.util.UnknownFormatFlagsException;
  export import UUID = java.util.UUID;
  export import Vector = java.util.Vector;
  export import WeakHashMap = java.util.WeakHashMap;

  export module com.redseal.featureset.ambiguous {
    export interface Thing extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public com.redseal.featureset.ambiguous.Thing$Nested com.redseal.featureset.ambiguous.Thing.newNested(int)
      newNestedA(arg0: integer_t, cb: Callback<Java.Thing$Nested>): void;
      newNested(arg0: integer_t): Java.Thing$Nested;
      newNestedP(arg0: integer_t): Promise<Java.Thing$Nested>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void com.redseal.featureset.ambiguous.Thing.set(java.lang.String)
      setA(arg0: string_t, cb: Callback<void>): void;
      set(arg0: string_t): void;
      setP(arg0: string_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Thing {
      export interface Static {
        new (arg0: string_t): com.redseal.featureset.ambiguous.Thing;
      }
    }
  }

  export module com.redseal.featureset.ambiguous {
    export interface Thing$Nested extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Thing$Nested {
      export interface Static {
      }
    }
  }

  export module com.redseal.featureset {
    export interface AnEnum extends Java.java.lang.Object {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClassA( cb: Callback<Java.Class>): void;
      getDeclaringClass(): Java.Class;
      getDeclaringClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      nameA( cb: Callback<string>): void;
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinalA( cb: Callback<number>): void;
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AnEnum {
      export interface Static {
        mingus: Java.AnEnum;
        monk: Java.AnEnum;
        miles: Java.AnEnum;
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOfA(arg0: Java.Class, arg1: string_t, cb: Callback<object_t>): void;
        valueOf(arg0: Java.Class, arg1: string_t): object_t;
        valueOfP(arg0: Java.Class, arg1: string_t): Promise<object_t>;
        // public static com.redseal.featureset.AnEnum com.redseal.featureset.AnEnum.valueOf(java.lang.String)
        valueOfA(arg0: string_t, cb: Callback<Java.AnEnum>): void;
        valueOf(arg0: string_t): Java.AnEnum;
        valueOfP(arg0: string_t): Promise<Java.AnEnum>;
        // public static com.redseal.featureset.AnEnum[] com.redseal.featureset.AnEnum.values()
        valuesA( cb: Callback<Java.AnEnum[]>): void;
        values(): Java.AnEnum[];
        valuesP(): Promise<Java.AnEnum[]>;
      }
    }
  }

  export module com.redseal.featureset {
    export interface AnonClassTest extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AnonClassTest {
      export interface Static {
        new (): com.redseal.featureset.AnonClassTest;
        // public static java.lang.String com.redseal.featureset.AnonClassTest.test()
        testA( cb: Callback<string>): void;
        test(): string;
        testP(): Promise<string>;
      }
    }
  }

  export module com.redseal.featureset.overloading {
    export interface Overloading extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Overloading {
      export interface Static {
        new (): com.redseal.featureset.overloading.Overloading;
      }
    }
  }

  export module com.redseal.featureset.overloading {
    export interface Overloading$Bar extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Overloading$Bar {
      export interface Static {
        new (): com.redseal.featureset.overloading.Overloading$Bar;
      }
    }
  }

  export module com.redseal.featureset.overloading {
    export interface Overloading$Foo extends Java.com.redseal.featureset.overloading.Overloading$Bar {
      // public boolean com.redseal.featureset.overloading.Overloading$Foo.equals(com.redseal.featureset.overloading.Overloading$Foo,boolean)
      equalsA(arg0: Java.Overloading$Foo, arg1: boolean_t, cb: Callback<boolean>): void;
      equals(arg0: Java.Overloading$Foo, arg1: boolean_t): boolean;
      equalsP(arg0: Java.Overloading$Foo, arg1: boolean_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public void com.redseal.featureset.overloading.Overloading$Foo.wait(java.lang.Double) throws java.lang.InterruptedException
      waitA(arg0: double_t, cb: Callback<void>): void;
      wait(arg0: double_t): void;
      waitP(arg0: double_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Overloading$Foo {
      export interface Static {
        new (): com.redseal.featureset.overloading.Overloading$Foo;
      }
    }
  }

  export module com.redseal.featureset.overloading {
    export interface Step extends Java.java.util.Iterator {
      // public abstract boolean com.redseal.featureset.overloading.Step.equals(com.redseal.featureset.overloading.Step,boolean)
      equalsA(arg0: Java.Step, arg1: boolean_t, cb: Callback<boolean>): void;
      equals(arg0: Java.Step, arg1: boolean_t): boolean;
      equalsP(arg0: Java.Step, arg1: boolean_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNextA( cb: Callback<boolean>): void;
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public abstract E java.util.Iterator.next()
      nextA( cb: Callback<object_t>): void;
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default void java.util.Iterator.remove()
      removeA( cb: Callback<void>): void;
      remove(): void;
      removeP(): Promise<void>;
    }
    export module Step {
      export interface Static {
      }
    }
  }

  export module com.redseal.featureset {
    export interface SomeAbstractClass extends Java.java.lang.Object, Java.com.redseal.featureset.SomeInterface {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract int[][] com.redseal.featureset.SomeInterface.getArray()
      getArrayA( cb: Callback<number[][]>): void;
      getArray(): number[][];
      getArrayP(): Promise<number[][]>;
      // public abstract boolean com.redseal.featureset.SomeInterface.getBoolean()
      getBooleanA( cb: Callback<boolean>): void;
      getBoolean(): boolean;
      getBooleanP(): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public abstract double com.redseal.featureset.SomeInterface.getDouble()
      getDoubleA( cb: Callback<number>): void;
      getDouble(): number;
      getDoubleP(): Promise<number>;
      // public abstract java.lang.Object com.redseal.featureset.SomeInterface.getDoubleObject()
      getDoubleObjectA( cb: Callback<object_t>): void;
      getDoubleObject(): object_t;
      getDoubleObjectP(): Promise<object_t>;
      // public abstract int com.redseal.featureset.SomeInterface.getInt()
      getIntA( cb: Callback<number>): void;
      getInt(): number;
      getIntP(): Promise<number>;
      // public abstract java.lang.String[] com.redseal.featureset.SomeInterface.getList()
      getListA( cb: Callback<string[]>): void;
      getList(): string[];
      getListP(): Promise<string[]>;
      // public abstract long com.redseal.featureset.SomeInterface.getLong()
      getLongA( cb: Callback<longValue_t>): void;
      getLong(): longValue_t;
      getLongP(): Promise<longValue_t>;
      // public abstract java.lang.Object com.redseal.featureset.SomeInterface.getLongObject()
      getLongObjectA( cb: Callback<object_t>): void;
      getLongObject(): object_t;
      getLongObjectP(): Promise<object_t>;
      // public abstract java.lang.Object com.redseal.featureset.SomeInterface.getShortObject()
      getShortObjectA( cb: Callback<object_t>): void;
      getShortObject(): object_t;
      getShortObjectP(): Promise<object_t>;
      // public abstract java.lang.String com.redseal.featureset.SomeInterface.getString()
      getStringA( cb: Callback<string>): void;
      getString(): string;
      getStringP(): Promise<string>;
      // public abstract java.lang.Object com.redseal.featureset.SomeInterface.getStringObject()
      getStringObjectA( cb: Callback<object_t>): void;
      getStringObject(): object_t;
      getStringObjectP(): Promise<object_t>;
      // public abstract com.redseal.featureset.Thing[][] com.redseal.featureset.SomeInterface.getThings()
      getThingsA( cb: Callback<Java.com.redseal.featureset.Thing[][]>): void;
      getThings(): Java.com.redseal.featureset.Thing[][];
      getThingsP(): Promise<Java.com.redseal.featureset.Thing[][]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.lang.String com.redseal.featureset.SomeInterface.joinList(java.lang.String)
      joinListA(arg0: string_t, cb: Callback<string>): void;
      joinList(arg0: string_t): string;
      joinListP(arg0: string_t): Promise<string>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setArray(int[][])
      setArrayA(arg0: void, cb: Callback<void>): void;
      setArray(arg0: void): void;
      setArrayP(arg0: void): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setBoolean(boolean)
      setBooleanA(arg0: boolean_t, cb: Callback<void>): void;
      setBoolean(arg0: boolean_t): void;
      setBooleanP(arg0: boolean_t): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setDouble(double)
      setDoubleA(arg0: double_t, cb: Callback<void>): void;
      setDouble(arg0: double_t): void;
      setDoubleP(arg0: double_t): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setInt(int)
      setIntA(arg0: integer_t, cb: Callback<void>): void;
      setInt(arg0: integer_t): void;
      setIntP(arg0: integer_t): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setList(java.lang.String[])
      setListA(arg0: array_t<string_t>, cb: Callback<void>): void;
      setList(arg0: array_t<string_t>): void;
      setListP(arg0: array_t<string_t>): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setListVarArgs(java.lang.String...)
      setListVarArgsA(arg0: array_t<string_t>, cb: Callback<void>): void;
      setListVarArgs(...arg0: string_t[]): void;
      setListVarArgs(arg0: array_t<string_t>): void;
      setListVarArgsP(...arg0: string_t[]): Promise<void>;
      setListVarArgsP(arg0: array_t<string_t>): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setLong(long)
      setLongA(arg0: long_t, cb: Callback<void>): void;
      setLong(arg0: long_t): void;
      setLongP(arg0: long_t): Promise<void>;
      // public abstract java.lang.String com.redseal.featureset.SomeInterface.setObjects(java.lang.Object[])
      setObjectsA(arg0: object_array_t, cb: Callback<string>): void;
      setObjects(arg0: object_array_t): string;
      setObjectsP(arg0: object_array_t): Promise<string>;
      // public abstract java.lang.String com.redseal.featureset.SomeInterface.setObjectsVarArgs(java.lang.Object...)
      setObjectsVarArgsA(arg0: object_array_t, cb: Callback<string>): void;
      setObjectsVarArgs(...arg0: object_t[]): string;
      setObjectsVarArgs(arg0: object_array_t): string;
      setObjectsVarArgsP(...arg0: object_t[]): Promise<string>;
      setObjectsVarArgsP(arg0: object_array_t): Promise<string>;
      // public abstract void com.redseal.featureset.SomeInterface.setString(java.lang.String)
      setStringA(arg0: string_t, cb: Callback<void>): void;
      setString(arg0: string_t): void;
      setStringP(arg0: string_t): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setThings(com.redseal.featureset.Thing[][])
      setThingsA(arg0: void, cb: Callback<void>): void;
      setThings(arg0: void): void;
      setThingsP(arg0: void): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module SomeAbstractClass {
      export interface Static {
        mField: number;
        new (): com.redseal.featureset.SomeAbstractClass;
      }
    }
  }

  export module com.redseal.featureset {
    export interface SomeClass extends Java.com.redseal.featureset.SomeAbstractClass {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract int[][] com.redseal.featureset.SomeInterface.getArray()
      getArrayA( cb: Callback<number[][]>): void;
      getArray(): number[][];
      getArrayP(): Promise<number[][]>;
      // public abstract boolean com.redseal.featureset.SomeInterface.getBoolean()
      getBooleanA( cb: Callback<boolean>): void;
      getBoolean(): boolean;
      getBooleanP(): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public abstract double com.redseal.featureset.SomeInterface.getDouble()
      getDoubleA( cb: Callback<number>): void;
      getDouble(): number;
      getDoubleP(): Promise<number>;
      // public abstract java.lang.Object com.redseal.featureset.SomeInterface.getDoubleObject()
      getDoubleObjectA( cb: Callback<object_t>): void;
      getDoubleObject(): object_t;
      getDoubleObjectP(): Promise<object_t>;
      // public abstract int com.redseal.featureset.SomeInterface.getInt()
      getIntA( cb: Callback<number>): void;
      getInt(): number;
      getIntP(): Promise<number>;
      // public abstract java.lang.String[] com.redseal.featureset.SomeInterface.getList()
      getListA( cb: Callback<string[]>): void;
      getList(): string[];
      getListP(): Promise<string[]>;
      // public abstract long com.redseal.featureset.SomeInterface.getLong()
      getLongA( cb: Callback<longValue_t>): void;
      getLong(): longValue_t;
      getLongP(): Promise<longValue_t>;
      // public abstract java.lang.Object com.redseal.featureset.SomeInterface.getLongObject()
      getLongObjectA( cb: Callback<object_t>): void;
      getLongObject(): object_t;
      getLongObjectP(): Promise<object_t>;
      // public abstract java.lang.Object com.redseal.featureset.SomeInterface.getShortObject()
      getShortObjectA( cb: Callback<object_t>): void;
      getShortObject(): object_t;
      getShortObjectP(): Promise<object_t>;
      // public abstract java.lang.String com.redseal.featureset.SomeInterface.getString()
      getStringA( cb: Callback<string>): void;
      getString(): string;
      getStringP(): Promise<string>;
      // public abstract java.lang.Object com.redseal.featureset.SomeInterface.getStringObject()
      getStringObjectA( cb: Callback<object_t>): void;
      getStringObject(): object_t;
      getStringObjectP(): Promise<object_t>;
      // public abstract com.redseal.featureset.Thing[][] com.redseal.featureset.SomeInterface.getThings()
      getThingsA( cb: Callback<Java.com.redseal.featureset.Thing[][]>): void;
      getThings(): Java.com.redseal.featureset.Thing[][];
      getThingsP(): Promise<Java.com.redseal.featureset.Thing[][]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.lang.String com.redseal.featureset.SomeInterface.joinList(java.lang.String)
      joinListA(arg0: string_t, cb: Callback<string>): void;
      joinList(arg0: string_t): string;
      joinListP(arg0: string_t): Promise<string>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setArray(int[][])
      setArrayA(arg0: void, cb: Callback<void>): void;
      setArray(arg0: void): void;
      setArrayP(arg0: void): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setBoolean(boolean)
      setBooleanA(arg0: boolean_t, cb: Callback<void>): void;
      setBoolean(arg0: boolean_t): void;
      setBooleanP(arg0: boolean_t): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setDouble(double)
      setDoubleA(arg0: double_t, cb: Callback<void>): void;
      setDouble(arg0: double_t): void;
      setDoubleP(arg0: double_t): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setInt(int)
      setIntA(arg0: integer_t, cb: Callback<void>): void;
      setInt(arg0: integer_t): void;
      setIntP(arg0: integer_t): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setList(java.lang.String[])
      setListA(arg0: array_t<string_t>, cb: Callback<void>): void;
      setList(arg0: array_t<string_t>): void;
      setListP(arg0: array_t<string_t>): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setListVarArgs(java.lang.String...)
      setListVarArgsA(arg0: array_t<string_t>, cb: Callback<void>): void;
      setListVarArgs(...arg0: string_t[]): void;
      setListVarArgs(arg0: array_t<string_t>): void;
      setListVarArgsP(...arg0: string_t[]): Promise<void>;
      setListVarArgsP(arg0: array_t<string_t>): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setLong(long)
      setLongA(arg0: long_t, cb: Callback<void>): void;
      setLong(arg0: long_t): void;
      setLongP(arg0: long_t): Promise<void>;
      // public abstract java.lang.String com.redseal.featureset.SomeInterface.setObjects(java.lang.Object[])
      setObjectsA(arg0: object_array_t, cb: Callback<string>): void;
      setObjects(arg0: object_array_t): string;
      setObjectsP(arg0: object_array_t): Promise<string>;
      // public abstract java.lang.String com.redseal.featureset.SomeInterface.setObjectsVarArgs(java.lang.Object...)
      setObjectsVarArgsA(arg0: object_array_t, cb: Callback<string>): void;
      setObjectsVarArgs(...arg0: object_t[]): string;
      setObjectsVarArgs(arg0: object_array_t): string;
      setObjectsVarArgsP(...arg0: object_t[]): Promise<string>;
      setObjectsVarArgsP(arg0: object_array_t): Promise<string>;
      // public abstract void com.redseal.featureset.SomeInterface.setString(java.lang.String)
      setStringA(arg0: string_t, cb: Callback<void>): void;
      setString(arg0: string_t): void;
      setStringP(arg0: string_t): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setThings(com.redseal.featureset.Thing[][])
      setThingsA(arg0: void, cb: Callback<void>): void;
      setThings(arg0: void): void;
      setThingsP(arg0: void): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module SomeClass {
      export interface Static {
        mField: number;
        new (arg0: integer_t, arg1: long_t, arg2: string_t, arg3: boolean_t, arg4: double_t): com.redseal.featureset.SomeClass;
        new (): com.redseal.featureset.SomeClass;
      }
    }
  }

  export module com.redseal.featureset {
    export interface SomeInterface extends Java.java.lang.Object {
      // public abstract int[][] com.redseal.featureset.SomeInterface.getArray()
      getArrayA( cb: Callback<number[][]>): void;
      getArray(): number[][];
      getArrayP(): Promise<number[][]>;
      // public abstract boolean com.redseal.featureset.SomeInterface.getBoolean()
      getBooleanA( cb: Callback<boolean>): void;
      getBoolean(): boolean;
      getBooleanP(): Promise<boolean>;
      // public abstract double com.redseal.featureset.SomeInterface.getDouble()
      getDoubleA( cb: Callback<number>): void;
      getDouble(): number;
      getDoubleP(): Promise<number>;
      // public abstract java.lang.Object com.redseal.featureset.SomeInterface.getDoubleObject()
      getDoubleObjectA( cb: Callback<object_t>): void;
      getDoubleObject(): object_t;
      getDoubleObjectP(): Promise<object_t>;
      // public abstract int com.redseal.featureset.SomeInterface.getInt()
      getIntA( cb: Callback<number>): void;
      getInt(): number;
      getIntP(): Promise<number>;
      // public abstract java.lang.String[] com.redseal.featureset.SomeInterface.getList()
      getListA( cb: Callback<string[]>): void;
      getList(): string[];
      getListP(): Promise<string[]>;
      // public abstract long com.redseal.featureset.SomeInterface.getLong()
      getLongA( cb: Callback<longValue_t>): void;
      getLong(): longValue_t;
      getLongP(): Promise<longValue_t>;
      // public abstract java.lang.Object com.redseal.featureset.SomeInterface.getLongObject()
      getLongObjectA( cb: Callback<object_t>): void;
      getLongObject(): object_t;
      getLongObjectP(): Promise<object_t>;
      // public abstract java.lang.Object com.redseal.featureset.SomeInterface.getShortObject()
      getShortObjectA( cb: Callback<object_t>): void;
      getShortObject(): object_t;
      getShortObjectP(): Promise<object_t>;
      // public abstract java.lang.String com.redseal.featureset.SomeInterface.getString()
      getStringA( cb: Callback<string>): void;
      getString(): string;
      getStringP(): Promise<string>;
      // public abstract java.lang.Object com.redseal.featureset.SomeInterface.getStringObject()
      getStringObjectA( cb: Callback<object_t>): void;
      getStringObject(): object_t;
      getStringObjectP(): Promise<object_t>;
      // public abstract com.redseal.featureset.Thing[][] com.redseal.featureset.SomeInterface.getThings()
      getThingsA( cb: Callback<Java.com.redseal.featureset.Thing[][]>): void;
      getThings(): Java.com.redseal.featureset.Thing[][];
      getThingsP(): Promise<Java.com.redseal.featureset.Thing[][]>;
      // public abstract java.lang.String com.redseal.featureset.SomeInterface.joinList(java.lang.String)
      joinListA(arg0: string_t, cb: Callback<string>): void;
      joinList(arg0: string_t): string;
      joinListP(arg0: string_t): Promise<string>;
      // public abstract void com.redseal.featureset.SomeInterface.setArray(int[][])
      setArrayA(arg0: void, cb: Callback<void>): void;
      setArray(arg0: void): void;
      setArrayP(arg0: void): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setBoolean(boolean)
      setBooleanA(arg0: boolean_t, cb: Callback<void>): void;
      setBoolean(arg0: boolean_t): void;
      setBooleanP(arg0: boolean_t): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setDouble(double)
      setDoubleA(arg0: double_t, cb: Callback<void>): void;
      setDouble(arg0: double_t): void;
      setDoubleP(arg0: double_t): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setInt(int)
      setIntA(arg0: integer_t, cb: Callback<void>): void;
      setInt(arg0: integer_t): void;
      setIntP(arg0: integer_t): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setList(java.lang.String[])
      setListA(arg0: array_t<string_t>, cb: Callback<void>): void;
      setList(arg0: array_t<string_t>): void;
      setListP(arg0: array_t<string_t>): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setListVarArgs(java.lang.String...)
      setListVarArgsA(arg0: array_t<string_t>, cb: Callback<void>): void;
      setListVarArgs(...arg0: string_t[]): void;
      setListVarArgs(arg0: array_t<string_t>): void;
      setListVarArgsP(...arg0: string_t[]): Promise<void>;
      setListVarArgsP(arg0: array_t<string_t>): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setLong(long)
      setLongA(arg0: long_t, cb: Callback<void>): void;
      setLong(arg0: long_t): void;
      setLongP(arg0: long_t): Promise<void>;
      // public abstract java.lang.String com.redseal.featureset.SomeInterface.setObjects(java.lang.Object[])
      setObjectsA(arg0: object_array_t, cb: Callback<string>): void;
      setObjects(arg0: object_array_t): string;
      setObjectsP(arg0: object_array_t): Promise<string>;
      // public abstract java.lang.String com.redseal.featureset.SomeInterface.setObjectsVarArgs(java.lang.Object...)
      setObjectsVarArgsA(arg0: object_array_t, cb: Callback<string>): void;
      setObjectsVarArgs(...arg0: object_t[]): string;
      setObjectsVarArgs(arg0: object_array_t): string;
      setObjectsVarArgsP(...arg0: object_t[]): Promise<string>;
      setObjectsVarArgsP(arg0: object_array_t): Promise<string>;
      // public abstract void com.redseal.featureset.SomeInterface.setString(java.lang.String)
      setStringA(arg0: string_t, cb: Callback<void>): void;
      setString(arg0: string_t): void;
      setStringP(arg0: string_t): Promise<void>;
      // public abstract void com.redseal.featureset.SomeInterface.setThings(com.redseal.featureset.Thing[][])
      setThingsA(arg0: void, cb: Callback<void>): void;
      setThings(arg0: void): void;
      setThingsP(arg0: void): Promise<void>;
    }
    export module SomeInterface {
      export interface Static {
      }
    }
  }

  export module com.redseal.featureset {
    export interface Thing extends Java.java.lang.Object {
      theInstanceField: string;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void com.redseal.featureset.Thing.set(int)
      setA(arg0: integer_t, cb: Callback<void>): void;
      set(arg0: integer_t): void;
      setP(arg0: integer_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Thing {
      export interface Static {
        theStaticField: string;
        new (arg0: integer_t): com.redseal.featureset.Thing;
      }
    }
  }

  export module com.redseal.featureset {
    export interface TinyInterface extends Java.java.lang.Object {
      // public abstract java.lang.String com.redseal.featureset.TinyInterface.who()
      whoA( cb: Callback<string>): void;
      who(): string;
      whoP(): Promise<string>;
    }
    export module TinyInterface {
      export interface Static {
      }
    }
  }

  export module java.lang {
    export interface Boolean extends Java.java.lang.Object {
      // public boolean java.lang.Boolean.booleanValue()
      booleanValueA( cb: Callback<boolean>): void;
      booleanValue(): boolean;
      booleanValueP(): Promise<boolean>;
      // public int java.lang.Boolean.compareTo(java.lang.Boolean)
      compareToA(arg0: boolean_t, cb: Callback<number>): void;
      compareTo(arg0: boolean_t): number;
      compareToP(arg0: boolean_t): Promise<number>;
      // public int java.lang.Boolean.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Boolean {
      export interface Static {
        TRUE: boolean;
        FALSE: boolean;
        TYPE: Java.Class;
        new (arg0: string_t): java.lang.Boolean;
        new (arg0: boolean_t): java.lang.Boolean;
        // public static int java.lang.Boolean.compare(boolean,boolean)
        compareA(arg0: boolean_t, arg1: boolean_t, cb: Callback<number>): void;
        compare(arg0: boolean_t, arg1: boolean_t): number;
        compareP(arg0: boolean_t, arg1: boolean_t): Promise<number>;
        // public static boolean java.lang.Boolean.getBoolean(java.lang.String)
        getBooleanA(arg0: string_t, cb: Callback<boolean>): void;
        getBoolean(arg0: string_t): boolean;
        getBooleanP(arg0: string_t): Promise<boolean>;
        // public static int java.lang.Boolean.hashCode(boolean)
        hashCodeA(arg0: boolean_t, cb: Callback<number>): void;
        hashCode(arg0: boolean_t): number;
        hashCodeP(arg0: boolean_t): Promise<number>;
        // public static boolean java.lang.Boolean.logicalAnd(boolean,boolean)
        logicalAndA(arg0: boolean_t, arg1: boolean_t, cb: Callback<boolean>): void;
        logicalAnd(arg0: boolean_t, arg1: boolean_t): boolean;
        logicalAndP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
        // public static boolean java.lang.Boolean.logicalOr(boolean,boolean)
        logicalOrA(arg0: boolean_t, arg1: boolean_t, cb: Callback<boolean>): void;
        logicalOr(arg0: boolean_t, arg1: boolean_t): boolean;
        logicalOrP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
        // public static boolean java.lang.Boolean.logicalXor(boolean,boolean)
        logicalXorA(arg0: boolean_t, arg1: boolean_t, cb: Callback<boolean>): void;
        logicalXor(arg0: boolean_t, arg1: boolean_t): boolean;
        logicalXorP(arg0: boolean_t, arg1: boolean_t): Promise<boolean>;
        // public static boolean java.lang.Boolean.parseBoolean(java.lang.String)
        parseBooleanA(arg0: string_t, cb: Callback<boolean>): void;
        parseBoolean(arg0: string_t): boolean;
        parseBooleanP(arg0: string_t): Promise<boolean>;
        // public static java.lang.String java.lang.Boolean.toString(boolean)
        toStringA(arg0: boolean_t, cb: Callback<string>): void;
        toString(arg0: boolean_t): string;
        toStringP(arg0: boolean_t): Promise<string>;
        // public static java.lang.Boolean java.lang.Boolean.valueOf(java.lang.String)
        valueOfA(arg0: string_t, cb: Callback<boolean>): void;
        valueOf(arg0: string_t): boolean;
        valueOfP(arg0: string_t): Promise<boolean>;
        // public static java.lang.Boolean java.lang.Boolean.valueOf(boolean)
        valueOfA(arg0: boolean_t, cb: Callback<boolean>): void;
        valueOf(arg0: boolean_t): boolean;
        valueOfP(arg0: boolean_t): Promise<boolean>;
      }
    }
  }

  export module java.lang {
    export interface Class extends Java.java.lang.Object {
      // public <U> java.lang.Class<? extends U> java.lang.Class.asSubclass(java.lang.Class<U>)
      asSubclassA(arg0: Java.Class, cb: Callback<Java.Class>): void;
      asSubclass(arg0: Java.Class): Java.Class;
      asSubclassP(arg0: Java.Class): Promise<Java.Class>;
      // public T java.lang.Class.cast(java.lang.Object)
      castA(arg0: object_t, cb: Callback<object_t>): void;
      cast(arg0: object_t): object_t;
      castP(arg0: object_t): Promise<object_t>;
      // public boolean java.lang.Class.desiredAssertionStatus()
      desiredAssertionStatusA( cb: Callback<boolean>): void;
      desiredAssertionStatus(): boolean;
      desiredAssertionStatusP(): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.reflect.AnnotatedType[] java.lang.Class.getAnnotatedInterfaces()
      getAnnotatedInterfacesA( cb: Callback<object_t[]>): void;
      getAnnotatedInterfaces(): object_t[];
      getAnnotatedInterfacesP(): Promise<object_t[]>;
      // public java.lang.reflect.AnnotatedType java.lang.Class.getAnnotatedSuperclass()
      getAnnotatedSuperclassA( cb: Callback<object_t>): void;
      getAnnotatedSuperclass(): object_t;
      getAnnotatedSuperclassP(): Promise<object_t>;
      // public <A> A java.lang.Class.getAnnotation(java.lang.Class<A>)
      getAnnotationA(arg0: Java.Class, cb: Callback<object_t>): void;
      getAnnotation(arg0: Java.Class): object_t;
      getAnnotationP(arg0: Java.Class): Promise<object_t>;
      // public java.lang.annotation.Annotation[] java.lang.Class.getAnnotations()
      getAnnotationsA( cb: Callback<object_t[]>): void;
      getAnnotations(): object_t[];
      getAnnotationsP(): Promise<object_t[]>;
      // public <A> A[] java.lang.Class.getAnnotationsByType(java.lang.Class<A>)
      getAnnotationsByTypeA(arg0: Java.Class, cb: Callback<object_t[]>): void;
      getAnnotationsByType(arg0: Java.Class): object_t[];
      getAnnotationsByTypeP(arg0: Java.Class): Promise<object_t[]>;
      // public java.lang.String java.lang.Class.getCanonicalName()
      getCanonicalNameA( cb: Callback<string>): void;
      getCanonicalName(): string;
      getCanonicalNameP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.Class<?>[] java.lang.Class.getClasses()
      getClassesA( cb: Callback<Java.Class[]>): void;
      getClasses(): Java.Class[];
      getClassesP(): Promise<Java.Class[]>;
      // public java.lang.ClassLoader java.lang.Class.getClassLoader()
      getClassLoaderA( cb: Callback<object_t>): void;
      getClassLoader(): object_t;
      getClassLoaderP(): Promise<object_t>;
      // public native java.lang.Class<?> java.lang.Class.getComponentType()
      getComponentTypeA( cb: Callback<Java.Class>): void;
      getComponentType(): Java.Class;
      getComponentTypeP(): Promise<Java.Class>;
      // public java.lang.reflect.Constructor<T> java.lang.Class.getConstructor(java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getConstructorA(arg0: array_t<Java.Class>, cb: Callback<object_t>): void;
      getConstructor(...arg0: Java.Class[]): object_t;
      getConstructor(arg0: array_t<Java.Class>): object_t;
      getConstructorP(...arg0: Java.Class[]): Promise<object_t>;
      getConstructorP(arg0: array_t<Java.Class>): Promise<object_t>;
      // public java.lang.reflect.Constructor<?>[] java.lang.Class.getConstructors() throws java.lang.SecurityException
      getConstructorsA( cb: Callback<object_t[]>): void;
      getConstructors(): object_t[];
      getConstructorsP(): Promise<object_t[]>;
      // public <A> A java.lang.Class.getDeclaredAnnotation(java.lang.Class<A>)
      getDeclaredAnnotationA(arg0: Java.Class, cb: Callback<object_t>): void;
      getDeclaredAnnotation(arg0: Java.Class): object_t;
      getDeclaredAnnotationP(arg0: Java.Class): Promise<object_t>;
      // public java.lang.annotation.Annotation[] java.lang.Class.getDeclaredAnnotations()
      getDeclaredAnnotationsA( cb: Callback<object_t[]>): void;
      getDeclaredAnnotations(): object_t[];
      getDeclaredAnnotationsP(): Promise<object_t[]>;
      // public <A> A[] java.lang.Class.getDeclaredAnnotationsByType(java.lang.Class<A>)
      getDeclaredAnnotationsByTypeA(arg0: Java.Class, cb: Callback<object_t[]>): void;
      getDeclaredAnnotationsByType(arg0: Java.Class): object_t[];
      getDeclaredAnnotationsByTypeP(arg0: Java.Class): Promise<object_t[]>;
      // public java.lang.Class<?>[] java.lang.Class.getDeclaredClasses() throws java.lang.SecurityException
      getDeclaredClassesA( cb: Callback<Java.Class[]>): void;
      getDeclaredClasses(): Java.Class[];
      getDeclaredClassesP(): Promise<Java.Class[]>;
      // public java.lang.reflect.Constructor<T> java.lang.Class.getDeclaredConstructor(java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getDeclaredConstructorA(arg0: array_t<Java.Class>, cb: Callback<object_t>): void;
      getDeclaredConstructor(...arg0: Java.Class[]): object_t;
      getDeclaredConstructor(arg0: array_t<Java.Class>): object_t;
      getDeclaredConstructorP(...arg0: Java.Class[]): Promise<object_t>;
      getDeclaredConstructorP(arg0: array_t<Java.Class>): Promise<object_t>;
      // public java.lang.reflect.Constructor<?>[] java.lang.Class.getDeclaredConstructors() throws java.lang.SecurityException
      getDeclaredConstructorsA( cb: Callback<object_t[]>): void;
      getDeclaredConstructors(): object_t[];
      getDeclaredConstructorsP(): Promise<object_t[]>;
      // public java.lang.reflect.Field java.lang.Class.getDeclaredField(java.lang.String) throws java.lang.NoSuchFieldException,java.lang.SecurityException
      getDeclaredFieldA(arg0: string_t, cb: Callback<object_t>): void;
      getDeclaredField(arg0: string_t): object_t;
      getDeclaredFieldP(arg0: string_t): Promise<object_t>;
      // public java.lang.reflect.Field[] java.lang.Class.getDeclaredFields() throws java.lang.SecurityException
      getDeclaredFieldsA( cb: Callback<object_t[]>): void;
      getDeclaredFields(): object_t[];
      getDeclaredFieldsP(): Promise<object_t[]>;
      // public java.lang.reflect.Method java.lang.Class.getDeclaredMethod(java.lang.String,java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getDeclaredMethodA(arg0: string_t, arg1: array_t<Java.Class>, cb: Callback<Java.Method>): void;
      getDeclaredMethod(arg0: string_t, ...arg1: Java.Class[]): Java.Method;
      getDeclaredMethod(arg0: string_t, arg1: array_t<Java.Class>): Java.Method;
      getDeclaredMethodP(arg0: string_t, ...arg1: Java.Class[]): Promise<Java.Method>;
      getDeclaredMethodP(arg0: string_t, arg1: array_t<Java.Class>): Promise<Java.Method>;
      // public java.lang.reflect.Method[] java.lang.Class.getDeclaredMethods() throws java.lang.SecurityException
      getDeclaredMethodsA( cb: Callback<Java.Method[]>): void;
      getDeclaredMethods(): Java.Method[];
      getDeclaredMethodsP(): Promise<Java.Method[]>;
      // public java.lang.Class<?> java.lang.Class.getDeclaringClass() throws java.lang.SecurityException
      getDeclaringClassA( cb: Callback<Java.Class>): void;
      getDeclaringClass(): Java.Class;
      getDeclaringClassP(): Promise<Java.Class>;
      // public java.lang.Class<?> java.lang.Class.getEnclosingClass() throws java.lang.SecurityException
      getEnclosingClassA( cb: Callback<Java.Class>): void;
      getEnclosingClass(): Java.Class;
      getEnclosingClassP(): Promise<Java.Class>;
      // public java.lang.reflect.Constructor<?> java.lang.Class.getEnclosingConstructor() throws java.lang.SecurityException
      getEnclosingConstructorA( cb: Callback<object_t>): void;
      getEnclosingConstructor(): object_t;
      getEnclosingConstructorP(): Promise<object_t>;
      // public java.lang.reflect.Method java.lang.Class.getEnclosingMethod() throws java.lang.SecurityException
      getEnclosingMethodA( cb: Callback<Java.Method>): void;
      getEnclosingMethod(): Java.Method;
      getEnclosingMethodP(): Promise<Java.Method>;
      // public T[] java.lang.Class.getEnumConstants()
      getEnumConstantsA( cb: Callback<object_t[]>): void;
      getEnumConstants(): object_t[];
      getEnumConstantsP(): Promise<object_t[]>;
      // public java.lang.reflect.Field java.lang.Class.getField(java.lang.String) throws java.lang.NoSuchFieldException,java.lang.SecurityException
      getFieldA(arg0: string_t, cb: Callback<object_t>): void;
      getField(arg0: string_t): object_t;
      getFieldP(arg0: string_t): Promise<object_t>;
      // public java.lang.reflect.Field[] java.lang.Class.getFields() throws java.lang.SecurityException
      getFieldsA( cb: Callback<object_t[]>): void;
      getFields(): object_t[];
      getFieldsP(): Promise<object_t[]>;
      // public java.lang.reflect.Type[] java.lang.Class.getGenericInterfaces()
      getGenericInterfacesA( cb: Callback<object_t[]>): void;
      getGenericInterfaces(): object_t[];
      getGenericInterfacesP(): Promise<object_t[]>;
      // public java.lang.reflect.Type java.lang.Class.getGenericSuperclass()
      getGenericSuperclassA( cb: Callback<object_t>): void;
      getGenericSuperclass(): object_t;
      getGenericSuperclassP(): Promise<object_t>;
      // public java.lang.Class<?>[] java.lang.Class.getInterfaces()
      getInterfacesA( cb: Callback<Java.Class[]>): void;
      getInterfaces(): Java.Class[];
      getInterfacesP(): Promise<Java.Class[]>;
      // public java.lang.reflect.Method java.lang.Class.getMethod(java.lang.String,java.lang.Class<?>...) throws java.lang.NoSuchMethodException,java.lang.SecurityException
      getMethodA(arg0: string_t, arg1: array_t<Java.Class>, cb: Callback<Java.Method>): void;
      getMethod(arg0: string_t, ...arg1: Java.Class[]): Java.Method;
      getMethod(arg0: string_t, arg1: array_t<Java.Class>): Java.Method;
      getMethodP(arg0: string_t, ...arg1: Java.Class[]): Promise<Java.Method>;
      getMethodP(arg0: string_t, arg1: array_t<Java.Class>): Promise<Java.Method>;
      // public java.lang.reflect.Method[] java.lang.Class.getMethods() throws java.lang.SecurityException
      getMethodsA( cb: Callback<Java.Method[]>): void;
      getMethods(): Java.Method[];
      getMethodsP(): Promise<Java.Method[]>;
      // public native int java.lang.Class.getModifiers()
      getModifiersA( cb: Callback<number>): void;
      getModifiers(): number;
      getModifiersP(): Promise<number>;
      // public java.lang.String java.lang.Class.getName()
      getNameA( cb: Callback<string>): void;
      getName(): string;
      getNameP(): Promise<string>;
      // public java.lang.Package java.lang.Class.getPackage()
      getPackageA( cb: Callback<object_t>): void;
      getPackage(): object_t;
      getPackageP(): Promise<object_t>;
      // public java.security.ProtectionDomain java.lang.Class.getProtectionDomain()
      getProtectionDomainA( cb: Callback<object_t>): void;
      getProtectionDomain(): object_t;
      getProtectionDomainP(): Promise<object_t>;
      // public java.net.URL java.lang.Class.getResource(java.lang.String)
      getResourceA(arg0: string_t, cb: Callback<object_t>): void;
      getResource(arg0: string_t): object_t;
      getResourceP(arg0: string_t): Promise<object_t>;
      // public java.io.InputStream java.lang.Class.getResourceAsStream(java.lang.String)
      getResourceAsStreamA(arg0: string_t, cb: Callback<object_t>): void;
      getResourceAsStream(arg0: string_t): object_t;
      getResourceAsStreamP(arg0: string_t): Promise<object_t>;
      // public native java.lang.Object[] java.lang.Class.getSigners()
      getSignersA( cb: Callback<object_t[]>): void;
      getSigners(): object_t[];
      getSignersP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Class.getSimpleName()
      getSimpleNameA( cb: Callback<string>): void;
      getSimpleName(): string;
      getSimpleNameP(): Promise<string>;
      // public native java.lang.Class<? super T> java.lang.Class.getSuperclass()
      getSuperclassA( cb: Callback<Java.Class>): void;
      getSuperclass(): Java.Class;
      getSuperclassP(): Promise<Java.Class>;
      // public java.lang.String java.lang.Class.getTypeName()
      getTypeNameA( cb: Callback<string>): void;
      getTypeName(): string;
      getTypeNameP(): Promise<string>;
      // public java.lang.reflect.TypeVariable<java.lang.Class<T>>[] java.lang.Class.getTypeParameters()
      getTypeParametersA( cb: Callback<object_t[]>): void;
      getTypeParameters(): object_t[];
      getTypeParametersP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean java.lang.Class.isAnnotation()
      isAnnotationA( cb: Callback<boolean>): void;
      isAnnotation(): boolean;
      isAnnotationP(): Promise<boolean>;
      // public boolean java.lang.Class.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresentA(arg0: Java.Class, cb: Callback<boolean>): void;
      isAnnotationPresent(arg0: Java.Class): boolean;
      isAnnotationPresentP(arg0: Java.Class): Promise<boolean>;
      // public boolean java.lang.Class.isAnonymousClass()
      isAnonymousClassA( cb: Callback<boolean>): void;
      isAnonymousClass(): boolean;
      isAnonymousClassP(): Promise<boolean>;
      // public native boolean java.lang.Class.isArray()
      isArrayA( cb: Callback<boolean>): void;
      isArray(): boolean;
      isArrayP(): Promise<boolean>;
      // public native boolean java.lang.Class.isAssignableFrom(java.lang.Class<?>)
      isAssignableFromA(arg0: Java.Class, cb: Callback<boolean>): void;
      isAssignableFrom(arg0: Java.Class): boolean;
      isAssignableFromP(arg0: Java.Class): Promise<boolean>;
      // public boolean java.lang.Class.isEnum()
      isEnumA( cb: Callback<boolean>): void;
      isEnum(): boolean;
      isEnumP(): Promise<boolean>;
      // public native boolean java.lang.Class.isInstance(java.lang.Object)
      isInstanceA(arg0: object_t, cb: Callback<boolean>): void;
      isInstance(arg0: object_t): boolean;
      isInstanceP(arg0: object_t): Promise<boolean>;
      // public native boolean java.lang.Class.isInterface()
      isInterfaceA( cb: Callback<boolean>): void;
      isInterface(): boolean;
      isInterfaceP(): Promise<boolean>;
      // public boolean java.lang.Class.isLocalClass()
      isLocalClassA( cb: Callback<boolean>): void;
      isLocalClass(): boolean;
      isLocalClassP(): Promise<boolean>;
      // public boolean java.lang.Class.isMemberClass()
      isMemberClassA( cb: Callback<boolean>): void;
      isMemberClass(): boolean;
      isMemberClassP(): Promise<boolean>;
      // public native boolean java.lang.Class.isPrimitive()
      isPrimitiveA( cb: Callback<boolean>): void;
      isPrimitive(): boolean;
      isPrimitiveP(): Promise<boolean>;
      // public boolean java.lang.Class.isSynthetic()
      isSyntheticA( cb: Callback<boolean>): void;
      isSynthetic(): boolean;
      isSyntheticP(): Promise<boolean>;
      // public T java.lang.Class.newInstance() throws java.lang.InstantiationException,java.lang.IllegalAccessException
      newInstanceA( cb: Callback<object_t>): void;
      newInstance(): object_t;
      newInstanceP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Class.toGenericString()
      toGenericStringA( cb: Callback<string>): void;
      toGenericString(): string;
      toGenericStringP(): Promise<string>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Class {
      export interface Static {
        // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader) throws java.lang.ClassNotFoundException
        forNameA(arg0: string_t, arg1: boolean_t, arg2: object_t, cb: Callback<Java.Class>): void;
        forName(arg0: string_t, arg1: boolean_t, arg2: object_t): Java.Class;
        forNameP(arg0: string_t, arg1: boolean_t, arg2: object_t): Promise<Java.Class>;
        // public static java.lang.Class<?> java.lang.Class.forName(java.lang.String) throws java.lang.ClassNotFoundException
        forNameA(arg0: string_t, cb: Callback<Java.Class>): void;
        forName(arg0: string_t): Java.Class;
        forNameP(arg0: string_t): Promise<Java.Class>;
      }
    }
  }

  export module java.lang {
    export interface Double extends Java.java.lang.Object {
      // public byte java.lang.Double.byteValue()
      byteValueA( cb: Callback<object_t>): void;
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public int java.lang.Double.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.Double.compareTo(java.lang.Double)
      compareToA(arg0: double_t, cb: Callback<number>): void;
      compareTo(arg0: double_t): number;
      compareToP(arg0: double_t): Promise<number>;
      // public double java.lang.Double.doubleValue()
      doubleValueA( cb: Callback<number>): void;
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public float java.lang.Double.floatValue()
      floatValueA( cb: Callback<number>): void;
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.lang.Double.intValue()
      intValueA( cb: Callback<number>): void;
      intValue(): number;
      intValueP(): Promise<number>;
      // public boolean java.lang.Double.isInfinite()
      isInfiniteA( cb: Callback<boolean>): void;
      isInfinite(): boolean;
      isInfiniteP(): Promise<boolean>;
      // public boolean java.lang.Double.isNaN()
      isNaNA( cb: Callback<boolean>): void;
      isNaN(): boolean;
      isNaNP(): Promise<boolean>;
      // public long java.lang.Double.longValue()
      longValueA( cb: Callback<longValue_t>): void;
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Double.shortValue()
      shortValueA( cb: Callback<number>): void;
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Double {
      export interface Static {
        POSITIVE_INFINITY: number;
        NEGATIVE_INFINITY: number;
        NaN: number;
        MAX_VALUE: number;
        MIN_NORMAL: number;
        MIN_VALUE: number;
        MAX_EXPONENT: number;
        MIN_EXPONENT: number;
        SIZE: number;
        BYTES: number;
        TYPE: Java.Class;
        new (arg0: string_t): java.lang.Double;
        new (arg0: double_t): java.lang.Double;
        // public static int java.lang.Double.compare(double,double)
        compareA(arg0: double_t, arg1: double_t, cb: Callback<number>): void;
        compare(arg0: double_t, arg1: double_t): number;
        compareP(arg0: double_t, arg1: double_t): Promise<number>;
        // public static long java.lang.Double.doubleToLongBits(double)
        doubleToLongBitsA(arg0: double_t, cb: Callback<longValue_t>): void;
        doubleToLongBits(arg0: double_t): longValue_t;
        doubleToLongBitsP(arg0: double_t): Promise<longValue_t>;
        // public static native long java.lang.Double.doubleToRawLongBits(double)
        doubleToRawLongBitsA(arg0: double_t, cb: Callback<longValue_t>): void;
        doubleToRawLongBits(arg0: double_t): longValue_t;
        doubleToRawLongBitsP(arg0: double_t): Promise<longValue_t>;
        // public static int java.lang.Double.hashCode(double)
        hashCodeA(arg0: double_t, cb: Callback<number>): void;
        hashCode(arg0: double_t): number;
        hashCodeP(arg0: double_t): Promise<number>;
        // public static boolean java.lang.Double.isFinite(double)
        isFiniteA(arg0: double_t, cb: Callback<boolean>): void;
        isFinite(arg0: double_t): boolean;
        isFiniteP(arg0: double_t): Promise<boolean>;
        // public static boolean java.lang.Double.isInfinite(double)
        isInfiniteA(arg0: double_t, cb: Callback<boolean>): void;
        isInfinite(arg0: double_t): boolean;
        isInfiniteP(arg0: double_t): Promise<boolean>;
        // public static boolean java.lang.Double.isNaN(double)
        isNaNA(arg0: double_t, cb: Callback<boolean>): void;
        isNaN(arg0: double_t): boolean;
        isNaNP(arg0: double_t): Promise<boolean>;
        // public static native double java.lang.Double.longBitsToDouble(long)
        longBitsToDoubleA(arg0: long_t, cb: Callback<number>): void;
        longBitsToDouble(arg0: long_t): number;
        longBitsToDoubleP(arg0: long_t): Promise<number>;
        // public static double java.lang.Double.max(double,double)
        maxA(arg0: double_t, arg1: double_t, cb: Callback<number>): void;
        max(arg0: double_t, arg1: double_t): number;
        maxP(arg0: double_t, arg1: double_t): Promise<number>;
        // public static double java.lang.Double.min(double,double)
        minA(arg0: double_t, arg1: double_t, cb: Callback<number>): void;
        min(arg0: double_t, arg1: double_t): number;
        minP(arg0: double_t, arg1: double_t): Promise<number>;
        // public static double java.lang.Double.parseDouble(java.lang.String) throws java.lang.NumberFormatException
        parseDoubleA(arg0: string_t, cb: Callback<number>): void;
        parseDouble(arg0: string_t): number;
        parseDoubleP(arg0: string_t): Promise<number>;
        // public static double java.lang.Double.sum(double,double)
        sumA(arg0: double_t, arg1: double_t, cb: Callback<number>): void;
        sum(arg0: double_t, arg1: double_t): number;
        sumP(arg0: double_t, arg1: double_t): Promise<number>;
        // public static java.lang.String java.lang.Double.toHexString(double)
        toHexStringA(arg0: double_t, cb: Callback<string>): void;
        toHexString(arg0: double_t): string;
        toHexStringP(arg0: double_t): Promise<string>;
        // public static java.lang.String java.lang.Double.toString(double)
        toStringA(arg0: double_t, cb: Callback<string>): void;
        toString(arg0: double_t): string;
        toStringP(arg0: double_t): Promise<string>;
        // public static java.lang.Double java.lang.Double.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOfA(arg0: string_t, cb: Callback<number>): void;
        valueOf(arg0: string_t): number;
        valueOfP(arg0: string_t): Promise<number>;
        // public static java.lang.Double java.lang.Double.valueOf(double)
        valueOfA(arg0: double_t, cb: Callback<number>): void;
        valueOf(arg0: double_t): number;
        valueOfP(arg0: double_t): Promise<number>;
      }
    }
  }

  export module java.lang {
    export interface Float extends Java.java.lang.Object {
      // public byte java.lang.Float.byteValue()
      byteValueA( cb: Callback<object_t>): void;
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public int java.lang.Float.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.Float.compareTo(java.lang.Float)
      compareToA(arg0: float_t, cb: Callback<number>): void;
      compareTo(arg0: float_t): number;
      compareToP(arg0: float_t): Promise<number>;
      // public double java.lang.Float.doubleValue()
      doubleValueA( cb: Callback<number>): void;
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public float java.lang.Float.floatValue()
      floatValueA( cb: Callback<number>): void;
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.lang.Float.intValue()
      intValueA( cb: Callback<number>): void;
      intValue(): number;
      intValueP(): Promise<number>;
      // public boolean java.lang.Float.isInfinite()
      isInfiniteA( cb: Callback<boolean>): void;
      isInfinite(): boolean;
      isInfiniteP(): Promise<boolean>;
      // public boolean java.lang.Float.isNaN()
      isNaNA( cb: Callback<boolean>): void;
      isNaN(): boolean;
      isNaNP(): Promise<boolean>;
      // public long java.lang.Float.longValue()
      longValueA( cb: Callback<longValue_t>): void;
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Float.shortValue()
      shortValueA( cb: Callback<number>): void;
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Float {
      export interface Static {
        POSITIVE_INFINITY: number;
        NEGATIVE_INFINITY: number;
        NaN: number;
        MAX_VALUE: number;
        MIN_NORMAL: number;
        MIN_VALUE: number;
        MAX_EXPONENT: number;
        MIN_EXPONENT: number;
        SIZE: number;
        BYTES: number;
        TYPE: Java.Class;
        new (arg0: string_t): java.lang.Float;
        new (arg0: float_t): java.lang.Float;
        new (arg0: double_t): java.lang.Float;
        // public static int java.lang.Float.compare(float,float)
        compareA(arg0: float_t, arg1: float_t, cb: Callback<number>): void;
        compare(arg0: float_t, arg1: float_t): number;
        compareP(arg0: float_t, arg1: float_t): Promise<number>;
        // public static int java.lang.Float.floatToIntBits(float)
        floatToIntBitsA(arg0: float_t, cb: Callback<number>): void;
        floatToIntBits(arg0: float_t): number;
        floatToIntBitsP(arg0: float_t): Promise<number>;
        // public static native int java.lang.Float.floatToRawIntBits(float)
        floatToRawIntBitsA(arg0: float_t, cb: Callback<number>): void;
        floatToRawIntBits(arg0: float_t): number;
        floatToRawIntBitsP(arg0: float_t): Promise<number>;
        // public static int java.lang.Float.hashCode(float)
        hashCodeA(arg0: float_t, cb: Callback<number>): void;
        hashCode(arg0: float_t): number;
        hashCodeP(arg0: float_t): Promise<number>;
        // public static native float java.lang.Float.intBitsToFloat(int)
        intBitsToFloatA(arg0: integer_t, cb: Callback<number>): void;
        intBitsToFloat(arg0: integer_t): number;
        intBitsToFloatP(arg0: integer_t): Promise<number>;
        // public static boolean java.lang.Float.isFinite(float)
        isFiniteA(arg0: float_t, cb: Callback<boolean>): void;
        isFinite(arg0: float_t): boolean;
        isFiniteP(arg0: float_t): Promise<boolean>;
        // public static boolean java.lang.Float.isInfinite(float)
        isInfiniteA(arg0: float_t, cb: Callback<boolean>): void;
        isInfinite(arg0: float_t): boolean;
        isInfiniteP(arg0: float_t): Promise<boolean>;
        // public static boolean java.lang.Float.isNaN(float)
        isNaNA(arg0: float_t, cb: Callback<boolean>): void;
        isNaN(arg0: float_t): boolean;
        isNaNP(arg0: float_t): Promise<boolean>;
        // public static float java.lang.Float.max(float,float)
        maxA(arg0: float_t, arg1: float_t, cb: Callback<number>): void;
        max(arg0: float_t, arg1: float_t): number;
        maxP(arg0: float_t, arg1: float_t): Promise<number>;
        // public static float java.lang.Float.min(float,float)
        minA(arg0: float_t, arg1: float_t, cb: Callback<number>): void;
        min(arg0: float_t, arg1: float_t): number;
        minP(arg0: float_t, arg1: float_t): Promise<number>;
        // public static float java.lang.Float.parseFloat(java.lang.String) throws java.lang.NumberFormatException
        parseFloatA(arg0: string_t, cb: Callback<number>): void;
        parseFloat(arg0: string_t): number;
        parseFloatP(arg0: string_t): Promise<number>;
        // public static float java.lang.Float.sum(float,float)
        sumA(arg0: float_t, arg1: float_t, cb: Callback<number>): void;
        sum(arg0: float_t, arg1: float_t): number;
        sumP(arg0: float_t, arg1: float_t): Promise<number>;
        // public static java.lang.String java.lang.Float.toHexString(float)
        toHexStringA(arg0: float_t, cb: Callback<string>): void;
        toHexString(arg0: float_t): string;
        toHexStringP(arg0: float_t): Promise<string>;
        // public static java.lang.String java.lang.Float.toString(float)
        toStringA(arg0: float_t, cb: Callback<string>): void;
        toString(arg0: float_t): string;
        toStringP(arg0: float_t): Promise<string>;
        // public static java.lang.Float java.lang.Float.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOfA(arg0: string_t, cb: Callback<number>): void;
        valueOf(arg0: string_t): number;
        valueOfP(arg0: string_t): Promise<number>;
        // public static java.lang.Float java.lang.Float.valueOf(float)
        valueOfA(arg0: float_t, cb: Callback<number>): void;
        valueOf(arg0: float_t): number;
        valueOfP(arg0: float_t): Promise<number>;
      }
    }
  }

  export module java.lang {
    export interface Integer extends Java.java.lang.Object {
      // public byte java.lang.Integer.byteValue()
      byteValueA( cb: Callback<object_t>): void;
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public int java.lang.Integer.compareTo(java.lang.Integer)
      compareToA(arg0: integer_t, cb: Callback<number>): void;
      compareTo(arg0: integer_t): number;
      compareToP(arg0: integer_t): Promise<number>;
      // public int java.lang.Integer.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public double java.lang.Integer.doubleValue()
      doubleValueA( cb: Callback<number>): void;
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public float java.lang.Integer.floatValue()
      floatValueA( cb: Callback<number>): void;
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.lang.Integer.intValue()
      intValueA( cb: Callback<number>): void;
      intValue(): number;
      intValueP(): Promise<number>;
      // public long java.lang.Integer.longValue()
      longValueA( cb: Callback<longValue_t>): void;
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Integer.shortValue()
      shortValueA( cb: Callback<number>): void;
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Integer {
      export interface Static {
        MIN_VALUE: number;
        MAX_VALUE: number;
        TYPE: Java.Class;
        SIZE: number;
        BYTES: number;
        new (arg0: string_t): java.lang.Integer;
        new (arg0: integer_t): java.lang.Integer;
        // public static int java.lang.Integer.bitCount(int)
        bitCountA(arg0: integer_t, cb: Callback<number>): void;
        bitCount(arg0: integer_t): number;
        bitCountP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.compare(int,int)
        compareA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        compare(arg0: integer_t, arg1: integer_t): number;
        compareP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.compareUnsigned(int,int)
        compareUnsignedA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        compareUnsigned(arg0: integer_t, arg1: integer_t): number;
        compareUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.decode(java.lang.String) throws java.lang.NumberFormatException
        decodeA(arg0: string_t, cb: Callback<number>): void;
        decode(arg0: string_t): number;
        decodeP(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.divideUnsigned(int,int)
        divideUnsignedA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        divideUnsigned(arg0: integer_t, arg1: integer_t): number;
        divideUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,java.lang.Integer)
        getIntegerA(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
        getInteger(arg0: string_t, arg1: integer_t): number;
        getIntegerP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String,int)
        getIntegerA(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
        getInteger(arg0: string_t, arg1: integer_t): number;
        getIntegerP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.getInteger(java.lang.String)
        getIntegerA(arg0: string_t, cb: Callback<number>): void;
        getInteger(arg0: string_t): number;
        getIntegerP(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.hashCode(int)
        hashCodeA(arg0: integer_t, cb: Callback<number>): void;
        hashCode(arg0: integer_t): number;
        hashCodeP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.highestOneBit(int)
        highestOneBitA(arg0: integer_t, cb: Callback<number>): void;
        highestOneBit(arg0: integer_t): number;
        highestOneBitP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.lowestOneBit(int)
        lowestOneBitA(arg0: integer_t, cb: Callback<number>): void;
        lowestOneBit(arg0: integer_t): number;
        lowestOneBitP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.max(int,int)
        maxA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        max(arg0: integer_t, arg1: integer_t): number;
        maxP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.min(int,int)
        minA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        min(arg0: integer_t, arg1: integer_t): number;
        minP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.numberOfLeadingZeros(int)
        numberOfLeadingZerosA(arg0: integer_t, cb: Callback<number>): void;
        numberOfLeadingZeros(arg0: integer_t): number;
        numberOfLeadingZerosP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.numberOfTrailingZeros(int)
        numberOfTrailingZerosA(arg0: integer_t, cb: Callback<number>): void;
        numberOfTrailingZeros(arg0: integer_t): number;
        numberOfTrailingZerosP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.parseInt(java.lang.String,int) throws java.lang.NumberFormatException
        parseIntA(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
        parseInt(arg0: string_t, arg1: integer_t): number;
        parseIntP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.parseInt(java.lang.String) throws java.lang.NumberFormatException
        parseIntA(arg0: string_t, cb: Callback<number>): void;
        parseInt(arg0: string_t): number;
        parseIntP(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.parseUnsignedInt(java.lang.String,int) throws java.lang.NumberFormatException
        parseUnsignedIntA(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
        parseUnsignedInt(arg0: string_t, arg1: integer_t): number;
        parseUnsignedIntP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.parseUnsignedInt(java.lang.String) throws java.lang.NumberFormatException
        parseUnsignedIntA(arg0: string_t, cb: Callback<number>): void;
        parseUnsignedInt(arg0: string_t): number;
        parseUnsignedIntP(arg0: string_t): Promise<number>;
        // public static int java.lang.Integer.remainderUnsigned(int,int)
        remainderUnsignedA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        remainderUnsigned(arg0: integer_t, arg1: integer_t): number;
        remainderUnsignedP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.reverse(int)
        reverseA(arg0: integer_t, cb: Callback<number>): void;
        reverse(arg0: integer_t): number;
        reverseP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.reverseBytes(int)
        reverseBytesA(arg0: integer_t, cb: Callback<number>): void;
        reverseBytes(arg0: integer_t): number;
        reverseBytesP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.rotateLeft(int,int)
        rotateLeftA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        rotateLeft(arg0: integer_t, arg1: integer_t): number;
        rotateLeftP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.rotateRight(int,int)
        rotateRightA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        rotateRight(arg0: integer_t, arg1: integer_t): number;
        rotateRightP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static int java.lang.Integer.signum(int)
        signumA(arg0: integer_t, cb: Callback<number>): void;
        signum(arg0: integer_t): number;
        signumP(arg0: integer_t): Promise<number>;
        // public static int java.lang.Integer.sum(int,int)
        sumA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
        sum(arg0: integer_t, arg1: integer_t): number;
        sumP(arg0: integer_t, arg1: integer_t): Promise<number>;
        // public static java.lang.String java.lang.Integer.toBinaryString(int)
        toBinaryStringA(arg0: integer_t, cb: Callback<string>): void;
        toBinaryString(arg0: integer_t): string;
        toBinaryStringP(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toHexString(int)
        toHexStringA(arg0: integer_t, cb: Callback<string>): void;
        toHexString(arg0: integer_t): string;
        toHexStringP(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toOctalString(int)
        toOctalStringA(arg0: integer_t, cb: Callback<string>): void;
        toOctalString(arg0: integer_t): string;
        toOctalStringP(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toString(int,int)
        toStringA(arg0: integer_t, arg1: integer_t, cb: Callback<string>): void;
        toString(arg0: integer_t, arg1: integer_t): string;
        toStringP(arg0: integer_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toString(int)
        toStringA(arg0: integer_t, cb: Callback<string>): void;
        toString(arg0: integer_t): string;
        toStringP(arg0: integer_t): Promise<string>;
        // public static long java.lang.Integer.toUnsignedLong(int)
        toUnsignedLongA(arg0: integer_t, cb: Callback<longValue_t>): void;
        toUnsignedLong(arg0: integer_t): longValue_t;
        toUnsignedLongP(arg0: integer_t): Promise<longValue_t>;
        // public static java.lang.String java.lang.Integer.toUnsignedString(int,int)
        toUnsignedStringA(arg0: integer_t, arg1: integer_t, cb: Callback<string>): void;
        toUnsignedString(arg0: integer_t, arg1: integer_t): string;
        toUnsignedStringP(arg0: integer_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Integer.toUnsignedString(int)
        toUnsignedStringA(arg0: integer_t, cb: Callback<string>): void;
        toUnsignedString(arg0: integer_t): string;
        toUnsignedStringP(arg0: integer_t): Promise<string>;
        // public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
        valueOfA(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
        valueOf(arg0: string_t, arg1: integer_t): number;
        valueOfP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOfA(arg0: string_t, cb: Callback<number>): void;
        valueOf(arg0: string_t): number;
        valueOfP(arg0: string_t): Promise<number>;
        // public static java.lang.Integer java.lang.Integer.valueOf(int)
        valueOfA(arg0: integer_t, cb: Callback<number>): void;
        valueOf(arg0: integer_t): number;
        valueOfP(arg0: integer_t): Promise<number>;
      }
    }
  }

  export module java.lang {
    export interface Long extends Java.java.lang.Object {
      // public byte java.lang.Long.byteValue()
      byteValueA( cb: Callback<object_t>): void;
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public int java.lang.Long.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.Long.compareTo(java.lang.Long)
      compareToA(arg0: long_t, cb: Callback<number>): void;
      compareTo(arg0: long_t): number;
      compareToP(arg0: long_t): Promise<number>;
      // public double java.lang.Long.doubleValue()
      doubleValueA( cb: Callback<number>): void;
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public float java.lang.Long.floatValue()
      floatValueA( cb: Callback<number>): void;
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.lang.Long.intValue()
      intValueA( cb: Callback<number>): void;
      intValue(): number;
      intValueP(): Promise<number>;
      // public long java.lang.Long.longValue()
      longValueA( cb: Callback<longValue_t>): void;
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Long.shortValue()
      shortValueA( cb: Callback<number>): void;
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Long {
      export interface Static {
        MIN_VALUE: longValue_t;
        MAX_VALUE: longValue_t;
        TYPE: Java.Class;
        SIZE: number;
        BYTES: number;
        new (arg0: string_t): java.lang.Long;
        new (arg0: long_t): java.lang.Long;
        // public static int java.lang.Long.bitCount(long)
        bitCountA(arg0: long_t, cb: Callback<number>): void;
        bitCount(arg0: long_t): number;
        bitCountP(arg0: long_t): Promise<number>;
        // public static int java.lang.Long.compare(long,long)
        compareA(arg0: long_t, arg1: long_t, cb: Callback<number>): void;
        compare(arg0: long_t, arg1: long_t): number;
        compareP(arg0: long_t, arg1: long_t): Promise<number>;
        // public static int java.lang.Long.compareUnsigned(long,long)
        compareUnsignedA(arg0: long_t, arg1: long_t, cb: Callback<number>): void;
        compareUnsigned(arg0: long_t, arg1: long_t): number;
        compareUnsignedP(arg0: long_t, arg1: long_t): Promise<number>;
        // public static java.lang.Long java.lang.Long.decode(java.lang.String) throws java.lang.NumberFormatException
        decodeA(arg0: string_t, cb: Callback<longValue_t>): void;
        decode(arg0: string_t): longValue_t;
        decodeP(arg0: string_t): Promise<longValue_t>;
        // public static long java.lang.Long.divideUnsigned(long,long)
        divideUnsignedA(arg0: long_t, arg1: long_t, cb: Callback<longValue_t>): void;
        divideUnsigned(arg0: long_t, arg1: long_t): longValue_t;
        divideUnsignedP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.getLong(java.lang.String,java.lang.Long)
        getLongA(arg0: string_t, arg1: long_t, cb: Callback<longValue_t>): void;
        getLong(arg0: string_t, arg1: long_t): longValue_t;
        getLongP(arg0: string_t, arg1: long_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.getLong(java.lang.String,long)
        getLongA(arg0: string_t, arg1: long_t, cb: Callback<longValue_t>): void;
        getLong(arg0: string_t, arg1: long_t): longValue_t;
        getLongP(arg0: string_t, arg1: long_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.getLong(java.lang.String)
        getLongA(arg0: string_t, cb: Callback<longValue_t>): void;
        getLong(arg0: string_t): longValue_t;
        getLongP(arg0: string_t): Promise<longValue_t>;
        // public static int java.lang.Long.hashCode(long)
        hashCodeA(arg0: long_t, cb: Callback<number>): void;
        hashCode(arg0: long_t): number;
        hashCodeP(arg0: long_t): Promise<number>;
        // public static long java.lang.Long.highestOneBit(long)
        highestOneBitA(arg0: long_t, cb: Callback<longValue_t>): void;
        highestOneBit(arg0: long_t): longValue_t;
        highestOneBitP(arg0: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.lowestOneBit(long)
        lowestOneBitA(arg0: long_t, cb: Callback<longValue_t>): void;
        lowestOneBit(arg0: long_t): longValue_t;
        lowestOneBitP(arg0: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.max(long,long)
        maxA(arg0: long_t, arg1: long_t, cb: Callback<longValue_t>): void;
        max(arg0: long_t, arg1: long_t): longValue_t;
        maxP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.min(long,long)
        minA(arg0: long_t, arg1: long_t, cb: Callback<longValue_t>): void;
        min(arg0: long_t, arg1: long_t): longValue_t;
        minP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static int java.lang.Long.numberOfLeadingZeros(long)
        numberOfLeadingZerosA(arg0: long_t, cb: Callback<number>): void;
        numberOfLeadingZeros(arg0: long_t): number;
        numberOfLeadingZerosP(arg0: long_t): Promise<number>;
        // public static int java.lang.Long.numberOfTrailingZeros(long)
        numberOfTrailingZerosA(arg0: long_t, cb: Callback<number>): void;
        numberOfTrailingZeros(arg0: long_t): number;
        numberOfTrailingZerosP(arg0: long_t): Promise<number>;
        // public static long java.lang.Long.parseLong(java.lang.String,int) throws java.lang.NumberFormatException
        parseLongA(arg0: string_t, arg1: integer_t, cb: Callback<longValue_t>): void;
        parseLong(arg0: string_t, arg1: integer_t): longValue_t;
        parseLongP(arg0: string_t, arg1: integer_t): Promise<longValue_t>;
        // public static long java.lang.Long.parseLong(java.lang.String) throws java.lang.NumberFormatException
        parseLongA(arg0: string_t, cb: Callback<longValue_t>): void;
        parseLong(arg0: string_t): longValue_t;
        parseLongP(arg0: string_t): Promise<longValue_t>;
        // public static long java.lang.Long.parseUnsignedLong(java.lang.String,int) throws java.lang.NumberFormatException
        parseUnsignedLongA(arg0: string_t, arg1: integer_t, cb: Callback<longValue_t>): void;
        parseUnsignedLong(arg0: string_t, arg1: integer_t): longValue_t;
        parseUnsignedLongP(arg0: string_t, arg1: integer_t): Promise<longValue_t>;
        // public static long java.lang.Long.parseUnsignedLong(java.lang.String) throws java.lang.NumberFormatException
        parseUnsignedLongA(arg0: string_t, cb: Callback<longValue_t>): void;
        parseUnsignedLong(arg0: string_t): longValue_t;
        parseUnsignedLongP(arg0: string_t): Promise<longValue_t>;
        // public static long java.lang.Long.remainderUnsigned(long,long)
        remainderUnsignedA(arg0: long_t, arg1: long_t, cb: Callback<longValue_t>): void;
        remainderUnsigned(arg0: long_t, arg1: long_t): longValue_t;
        remainderUnsignedP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.reverse(long)
        reverseA(arg0: long_t, cb: Callback<longValue_t>): void;
        reverse(arg0: long_t): longValue_t;
        reverseP(arg0: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.reverseBytes(long)
        reverseBytesA(arg0: long_t, cb: Callback<longValue_t>): void;
        reverseBytes(arg0: long_t): longValue_t;
        reverseBytesP(arg0: long_t): Promise<longValue_t>;
        // public static long java.lang.Long.rotateLeft(long,int)
        rotateLeftA(arg0: long_t, arg1: integer_t, cb: Callback<longValue_t>): void;
        rotateLeft(arg0: long_t, arg1: integer_t): longValue_t;
        rotateLeftP(arg0: long_t, arg1: integer_t): Promise<longValue_t>;
        // public static long java.lang.Long.rotateRight(long,int)
        rotateRightA(arg0: long_t, arg1: integer_t, cb: Callback<longValue_t>): void;
        rotateRight(arg0: long_t, arg1: integer_t): longValue_t;
        rotateRightP(arg0: long_t, arg1: integer_t): Promise<longValue_t>;
        // public static int java.lang.Long.signum(long)
        signumA(arg0: long_t, cb: Callback<number>): void;
        signum(arg0: long_t): number;
        signumP(arg0: long_t): Promise<number>;
        // public static long java.lang.Long.sum(long,long)
        sumA(arg0: long_t, arg1: long_t, cb: Callback<longValue_t>): void;
        sum(arg0: long_t, arg1: long_t): longValue_t;
        sumP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
        // public static java.lang.String java.lang.Long.toBinaryString(long)
        toBinaryStringA(arg0: long_t, cb: Callback<string>): void;
        toBinaryString(arg0: long_t): string;
        toBinaryStringP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toHexString(long)
        toHexStringA(arg0: long_t, cb: Callback<string>): void;
        toHexString(arg0: long_t): string;
        toHexStringP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toOctalString(long)
        toOctalStringA(arg0: long_t, cb: Callback<string>): void;
        toOctalString(arg0: long_t): string;
        toOctalStringP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toString(long,int)
        toStringA(arg0: long_t, arg1: integer_t, cb: Callback<string>): void;
        toString(arg0: long_t, arg1: integer_t): string;
        toStringP(arg0: long_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toString(long)
        toStringA(arg0: long_t, cb: Callback<string>): void;
        toString(arg0: long_t): string;
        toStringP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toUnsignedString(long,int)
        toUnsignedStringA(arg0: long_t, arg1: integer_t, cb: Callback<string>): void;
        toUnsignedString(arg0: long_t, arg1: integer_t): string;
        toUnsignedStringP(arg0: long_t, arg1: integer_t): Promise<string>;
        // public static java.lang.String java.lang.Long.toUnsignedString(long)
        toUnsignedStringA(arg0: long_t, cb: Callback<string>): void;
        toUnsignedString(arg0: long_t): string;
        toUnsignedStringP(arg0: long_t): Promise<string>;
        // public static java.lang.Long java.lang.Long.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
        valueOfA(arg0: string_t, arg1: integer_t, cb: Callback<longValue_t>): void;
        valueOf(arg0: string_t, arg1: integer_t): longValue_t;
        valueOfP(arg0: string_t, arg1: integer_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOfA(arg0: string_t, cb: Callback<longValue_t>): void;
        valueOf(arg0: string_t): longValue_t;
        valueOfP(arg0: string_t): Promise<longValue_t>;
        // public static java.lang.Long java.lang.Long.valueOf(long)
        valueOfA(arg0: long_t, cb: Callback<longValue_t>): void;
        valueOf(arg0: long_t): longValue_t;
        valueOfP(arg0: long_t): Promise<longValue_t>;
      }
    }
  }

  export module java.lang {
    export interface Object  {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Object {
      export interface Static {
        new (): java.lang.Object;
      }
    }
  }

  export module java.lang.reflect {
    export interface Method extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedExceptionTypes()
      getAnnotatedExceptionTypesA( cb: Callback<object_t[]>): void;
      getAnnotatedExceptionTypes(): object_t[];
      getAnnotatedExceptionTypesP(): Promise<object_t[]>;
      // public java.lang.reflect.AnnotatedType[] java.lang.reflect.Executable.getAnnotatedParameterTypes()
      getAnnotatedParameterTypesA( cb: Callback<object_t[]>): void;
      getAnnotatedParameterTypes(): object_t[];
      getAnnotatedParameterTypesP(): Promise<object_t[]>;
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Executable.getAnnotatedReceiverType()
      getAnnotatedReceiverTypeA( cb: Callback<object_t>): void;
      getAnnotatedReceiverType(): object_t;
      getAnnotatedReceiverTypeP(): Promise<object_t>;
      // public java.lang.reflect.AnnotatedType java.lang.reflect.Method.getAnnotatedReturnType()
      getAnnotatedReturnTypeA( cb: Callback<object_t>): void;
      getAnnotatedReturnType(): object_t;
      getAnnotatedReturnTypeP(): Promise<object_t>;
      // public <T> T java.lang.reflect.Method.getAnnotation(java.lang.Class<T>)
      getAnnotationA(arg0: Java.Class, cb: Callback<object_t>): void;
      getAnnotation(arg0: Java.Class): object_t;
      getAnnotationP(arg0: Java.Class): Promise<object_t>;
      // public java.lang.annotation.Annotation[] java.lang.reflect.AccessibleObject.getAnnotations()
      getAnnotationsA( cb: Callback<object_t[]>): void;
      getAnnotations(): object_t[];
      getAnnotationsP(): Promise<object_t[]>;
      // public <T> T[] java.lang.reflect.Executable.getAnnotationsByType(java.lang.Class<T>)
      getAnnotationsByTypeA(arg0: Java.Class, cb: Callback<object_t[]>): void;
      getAnnotationsByType(arg0: Java.Class): object_t[];
      getAnnotationsByTypeP(arg0: Java.Class): Promise<object_t[]>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public <T> T java.lang.reflect.AccessibleObject.getDeclaredAnnotation(java.lang.Class<T>)
      getDeclaredAnnotationA(arg0: Java.Class, cb: Callback<object_t>): void;
      getDeclaredAnnotation(arg0: Java.Class): object_t;
      getDeclaredAnnotationP(arg0: Java.Class): Promise<object_t>;
      // public java.lang.annotation.Annotation[] java.lang.reflect.Method.getDeclaredAnnotations()
      getDeclaredAnnotationsA( cb: Callback<object_t[]>): void;
      getDeclaredAnnotations(): object_t[];
      getDeclaredAnnotationsP(): Promise<object_t[]>;
      // public <T> T[] java.lang.reflect.AccessibleObject.getDeclaredAnnotationsByType(java.lang.Class<T>)
      getDeclaredAnnotationsByTypeA(arg0: Java.Class, cb: Callback<object_t[]>): void;
      getDeclaredAnnotationsByType(arg0: Java.Class): object_t[];
      getDeclaredAnnotationsByTypeP(arg0: Java.Class): Promise<object_t[]>;
      // public java.lang.Class<?> java.lang.reflect.Method.getDeclaringClass()
      getDeclaringClassA( cb: Callback<Java.Class>): void;
      getDeclaringClass(): Java.Class;
      getDeclaringClassP(): Promise<Java.Class>;
      // public java.lang.Object java.lang.reflect.Method.getDefaultValue()
      getDefaultValueA( cb: Callback<object_t>): void;
      getDefaultValue(): object_t;
      getDefaultValueP(): Promise<object_t>;
      // public java.lang.Class<?>[] java.lang.reflect.Method.getExceptionTypes()
      getExceptionTypesA( cb: Callback<Java.Class[]>): void;
      getExceptionTypes(): Java.Class[];
      getExceptionTypesP(): Promise<Java.Class[]>;
      // public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericExceptionTypes()
      getGenericExceptionTypesA( cb: Callback<object_t[]>): void;
      getGenericExceptionTypes(): object_t[];
      getGenericExceptionTypesP(): Promise<object_t[]>;
      // public java.lang.reflect.Type[] java.lang.reflect.Method.getGenericParameterTypes()
      getGenericParameterTypesA( cb: Callback<object_t[]>): void;
      getGenericParameterTypes(): object_t[];
      getGenericParameterTypesP(): Promise<object_t[]>;
      // public java.lang.reflect.Type java.lang.reflect.Method.getGenericReturnType()
      getGenericReturnTypeA( cb: Callback<object_t>): void;
      getGenericReturnType(): object_t;
      getGenericReturnTypeP(): Promise<object_t>;
      // public int java.lang.reflect.Method.getModifiers()
      getModifiersA( cb: Callback<number>): void;
      getModifiers(): number;
      getModifiersP(): Promise<number>;
      // public java.lang.String java.lang.reflect.Method.getName()
      getNameA( cb: Callback<string>): void;
      getName(): string;
      getNameP(): Promise<string>;
      // public java.lang.annotation.Annotation[][] java.lang.reflect.Method.getParameterAnnotations()
      getParameterAnnotationsA( cb: Callback<object_t[][]>): void;
      getParameterAnnotations(): object_t[][];
      getParameterAnnotationsP(): Promise<object_t[][]>;
      // public int java.lang.reflect.Method.getParameterCount()
      getParameterCountA( cb: Callback<number>): void;
      getParameterCount(): number;
      getParameterCountP(): Promise<number>;
      // public java.lang.reflect.Parameter[] java.lang.reflect.Executable.getParameters()
      getParametersA( cb: Callback<object_t[]>): void;
      getParameters(): object_t[];
      getParametersP(): Promise<object_t[]>;
      // public java.lang.Class<?>[] java.lang.reflect.Method.getParameterTypes()
      getParameterTypesA( cb: Callback<Java.Class[]>): void;
      getParameterTypes(): Java.Class[];
      getParameterTypesP(): Promise<Java.Class[]>;
      // public java.lang.Class<?> java.lang.reflect.Method.getReturnType()
      getReturnTypeA( cb: Callback<Java.Class>): void;
      getReturnType(): Java.Class;
      getReturnTypeP(): Promise<Java.Class>;
      // public java.lang.reflect.TypeVariable<java.lang.reflect.Method>[] java.lang.reflect.Method.getTypeParameters()
      getTypeParametersA( cb: Callback<object_t[]>): void;
      getTypeParameters(): object_t[];
      getTypeParametersP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.lang.Object java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object...) throws java.lang.IllegalAccessException,java.lang.IllegalArgumentException,java.lang.reflect.InvocationTargetException
      invokeA(arg0: object_t, arg1: object_array_t, cb: Callback<object_t>): void;
      invoke(arg0: object_t, ...arg1: object_t[]): object_t;
      invoke(arg0: object_t, arg1: object_array_t): object_t;
      invokeP(arg0: object_t, ...arg1: object_t[]): Promise<object_t>;
      invokeP(arg0: object_t, arg1: object_array_t): Promise<object_t>;
      // public boolean java.lang.reflect.AccessibleObject.isAccessible()
      isAccessibleA( cb: Callback<boolean>): void;
      isAccessible(): boolean;
      isAccessibleP(): Promise<boolean>;
      // public boolean java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)
      isAnnotationPresentA(arg0: Java.Class, cb: Callback<boolean>): void;
      isAnnotationPresent(arg0: Java.Class): boolean;
      isAnnotationPresentP(arg0: Java.Class): Promise<boolean>;
      // public boolean java.lang.reflect.Method.isBridge()
      isBridgeA( cb: Callback<boolean>): void;
      isBridge(): boolean;
      isBridgeP(): Promise<boolean>;
      // public boolean java.lang.reflect.Method.isDefault()
      isDefaultA( cb: Callback<boolean>): void;
      isDefault(): boolean;
      isDefaultP(): Promise<boolean>;
      // public boolean java.lang.reflect.Method.isSynthetic()
      isSyntheticA( cb: Callback<boolean>): void;
      isSynthetic(): boolean;
      isSyntheticP(): Promise<boolean>;
      // public boolean java.lang.reflect.Method.isVarArgs()
      isVarArgsA( cb: Callback<boolean>): void;
      isVarArgs(): boolean;
      isVarArgsP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.reflect.AccessibleObject.setAccessible(boolean) throws java.lang.SecurityException
      setAccessibleA(arg0: boolean_t, cb: Callback<void>): void;
      setAccessible(arg0: boolean_t): void;
      setAccessibleP(arg0: boolean_t): Promise<void>;
      // public java.lang.String java.lang.reflect.Method.toGenericString()
      toGenericStringA( cb: Callback<string>): void;
      toGenericString(): string;
      toGenericStringP(): Promise<string>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Method {
      export interface Static {
        PUBLIC: number;
        DECLARED: number;
        // public static void java.lang.reflect.AccessibleObject.setAccessible(java.lang.reflect.AccessibleObject[],boolean) throws java.lang.SecurityException
        setAccessibleA(arg0: object_array_t, arg1: boolean_t, cb: Callback<void>): void;
        setAccessible(arg0: object_array_t, arg1: boolean_t): void;
        setAccessibleP(arg0: object_array_t, arg1: boolean_t): Promise<void>;
      }
    }
  }

  export module java.lang {
    export interface Short extends Java.java.lang.Object {
      // public byte java.lang.Short.byteValue()
      byteValueA( cb: Callback<object_t>): void;
      byteValue(): object_t;
      byteValueP(): Promise<object_t>;
      // public int java.lang.Short.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.Short.compareTo(java.lang.Short)
      compareToA(arg0: short_t, cb: Callback<number>): void;
      compareTo(arg0: short_t): number;
      compareToP(arg0: short_t): Promise<number>;
      // public double java.lang.Short.doubleValue()
      doubleValueA( cb: Callback<number>): void;
      doubleValue(): number;
      doubleValueP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public float java.lang.Short.floatValue()
      floatValueA( cb: Callback<number>): void;
      floatValue(): number;
      floatValueP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.lang.Short.intValue()
      intValueA( cb: Callback<number>): void;
      intValue(): number;
      intValueP(): Promise<number>;
      // public long java.lang.Short.longValue()
      longValueA( cb: Callback<longValue_t>): void;
      longValue(): longValue_t;
      longValueP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public short java.lang.Short.shortValue()
      shortValueA( cb: Callback<number>): void;
      shortValue(): number;
      shortValueP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Short {
      export interface Static {
        MIN_VALUE: number;
        MAX_VALUE: number;
        TYPE: Java.Class;
        SIZE: number;
        BYTES: number;
        new (arg0: string_t): java.lang.Short;
        new (arg0: short_t): java.lang.Short;
        // public static int java.lang.Short.compare(short,short)
        compareA(arg0: short_t, arg1: short_t, cb: Callback<number>): void;
        compare(arg0: short_t, arg1: short_t): number;
        compareP(arg0: short_t, arg1: short_t): Promise<number>;
        // public static java.lang.Short java.lang.Short.decode(java.lang.String) throws java.lang.NumberFormatException
        decodeA(arg0: string_t, cb: Callback<number>): void;
        decode(arg0: string_t): number;
        decodeP(arg0: string_t): Promise<number>;
        // public static int java.lang.Short.hashCode(short)
        hashCodeA(arg0: short_t, cb: Callback<number>): void;
        hashCode(arg0: short_t): number;
        hashCodeP(arg0: short_t): Promise<number>;
        // public static short java.lang.Short.parseShort(java.lang.String,int) throws java.lang.NumberFormatException
        parseShortA(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
        parseShort(arg0: string_t, arg1: integer_t): number;
        parseShortP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static short java.lang.Short.parseShort(java.lang.String) throws java.lang.NumberFormatException
        parseShortA(arg0: string_t, cb: Callback<number>): void;
        parseShort(arg0: string_t): number;
        parseShortP(arg0: string_t): Promise<number>;
        // public static short java.lang.Short.reverseBytes(short)
        reverseBytesA(arg0: short_t, cb: Callback<number>): void;
        reverseBytes(arg0: short_t): number;
        reverseBytesP(arg0: short_t): Promise<number>;
        // public static java.lang.String java.lang.Short.toString(short)
        toStringA(arg0: short_t, cb: Callback<string>): void;
        toString(arg0: short_t): string;
        toStringP(arg0: short_t): Promise<string>;
        // public static int java.lang.Short.toUnsignedInt(short)
        toUnsignedIntA(arg0: short_t, cb: Callback<number>): void;
        toUnsignedInt(arg0: short_t): number;
        toUnsignedIntP(arg0: short_t): Promise<number>;
        // public static long java.lang.Short.toUnsignedLong(short)
        toUnsignedLongA(arg0: short_t, cb: Callback<longValue_t>): void;
        toUnsignedLong(arg0: short_t): longValue_t;
        toUnsignedLongP(arg0: short_t): Promise<longValue_t>;
        // public static java.lang.Short java.lang.Short.valueOf(java.lang.String,int) throws java.lang.NumberFormatException
        valueOfA(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
        valueOf(arg0: string_t, arg1: integer_t): number;
        valueOfP(arg0: string_t, arg1: integer_t): Promise<number>;
        // public static java.lang.Short java.lang.Short.valueOf(java.lang.String) throws java.lang.NumberFormatException
        valueOfA(arg0: string_t, cb: Callback<number>): void;
        valueOf(arg0: string_t): number;
        valueOfP(arg0: string_t): Promise<number>;
        // public static java.lang.Short java.lang.Short.valueOf(short)
        valueOfA(arg0: short_t, cb: Callback<number>): void;
        valueOf(arg0: short_t): number;
        valueOfP(arg0: short_t): Promise<number>;
      }
    }
  }

  export module java.lang {
    export interface String extends Java.java.lang.Object {
      // public char java.lang.String.charAt(int)
      charAtA(arg0: integer_t, cb: Callback<object_t>): void;
      charAt(arg0: integer_t): object_t;
      charAtP(arg0: integer_t): Promise<object_t>;
      // public default java.util.stream.IntStream java.lang.CharSequence.chars()
      charsA( cb: Callback<object_t>): void;
      chars(): object_t;
      charsP(): Promise<object_t>;
      // public int java.lang.String.codePointAt(int)
      codePointAtA(arg0: integer_t, cb: Callback<number>): void;
      codePointAt(arg0: integer_t): number;
      codePointAtP(arg0: integer_t): Promise<number>;
      // public int java.lang.String.codePointBefore(int)
      codePointBeforeA(arg0: integer_t, cb: Callback<number>): void;
      codePointBefore(arg0: integer_t): number;
      codePointBeforeP(arg0: integer_t): Promise<number>;
      // public int java.lang.String.codePointCount(int,int)
      codePointCountA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
      codePointCount(arg0: integer_t, arg1: integer_t): number;
      codePointCountP(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public default java.util.stream.IntStream java.lang.CharSequence.codePoints()
      codePointsA( cb: Callback<object_t>): void;
      codePoints(): object_t;
      codePointsP(): Promise<object_t>;
      // public int java.lang.String.compareTo(java.lang.String)
      compareToA(arg0: string_t, cb: Callback<number>): void;
      compareTo(arg0: string_t): number;
      compareToP(arg0: string_t): Promise<number>;
      // public int java.lang.String.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.lang.String.compareToIgnoreCase(java.lang.String)
      compareToIgnoreCaseA(arg0: string_t, cb: Callback<number>): void;
      compareToIgnoreCase(arg0: string_t): number;
      compareToIgnoreCaseP(arg0: string_t): Promise<number>;
      // public java.lang.String java.lang.String.concat(java.lang.String)
      concatA(arg0: string_t, cb: Callback<string>): void;
      concat(arg0: string_t): string;
      concatP(arg0: string_t): Promise<string>;
      // public boolean java.lang.String.contains(java.lang.CharSequence)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.String.contentEquals(java.lang.StringBuffer)
      contentEqualsA(arg0: object_t, cb: Callback<boolean>): void;
      contentEquals(arg0: object_t): boolean;
      contentEqualsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.String.contentEquals(java.lang.CharSequence)
      contentEqualsA(arg0: object_t, cb: Callback<boolean>): void;
      contentEquals(arg0: object_t): boolean;
      contentEqualsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.String.endsWith(java.lang.String)
      endsWithA(arg0: string_t, cb: Callback<boolean>): void;
      endsWith(arg0: string_t): boolean;
      endsWithP(arg0: string_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public boolean java.lang.String.equalsIgnoreCase(java.lang.String)
      equalsIgnoreCaseA(arg0: string_t, cb: Callback<boolean>): void;
      equalsIgnoreCase(arg0: string_t): boolean;
      equalsIgnoreCaseP(arg0: string_t): Promise<boolean>;
      // public void java.lang.String.getBytes(int,int,byte[],int)
      getBytesA(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t, cb: Callback<void>): void;
      getBytes(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): void;
      getBytesP(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): Promise<void>;
      // public byte[] java.lang.String.getBytes(java.nio.charset.Charset)
      getBytesA(arg0: object_t, cb: Callback<object_t[]>): void;
      getBytes(arg0: object_t): object_t[];
      getBytesP(arg0: object_t): Promise<object_t[]>;
      // public byte[] java.lang.String.getBytes(java.lang.String) throws java.io.UnsupportedEncodingException
      getBytesA(arg0: string_t, cb: Callback<object_t[]>): void;
      getBytes(arg0: string_t): object_t[];
      getBytesP(arg0: string_t): Promise<object_t[]>;
      // public byte[] java.lang.String.getBytes()
      getBytesA( cb: Callback<object_t[]>): void;
      getBytes(): object_t[];
      getBytesP(): Promise<object_t[]>;
      // public void java.lang.String.getChars(int,int,char[],int)
      getCharsA(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t, cb: Callback<void>): void;
      getChars(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): void;
      getCharsP(arg0: integer_t, arg1: integer_t, arg2: object_array_t, arg3: integer_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.lang.String.indexOf(java.lang.String,int)
      indexOfA(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
      indexOf(arg0: string_t, arg1: integer_t): number;
      indexOfP(arg0: string_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.indexOf(int,int)
      indexOfA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
      indexOf(arg0: integer_t, arg1: integer_t): number;
      indexOfP(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.indexOf(java.lang.String)
      indexOfA(arg0: string_t, cb: Callback<number>): void;
      indexOf(arg0: string_t): number;
      indexOfP(arg0: string_t): Promise<number>;
      // public int java.lang.String.indexOf(int)
      indexOfA(arg0: integer_t, cb: Callback<number>): void;
      indexOf(arg0: integer_t): number;
      indexOfP(arg0: integer_t): Promise<number>;
      // public native java.lang.String java.lang.String.intern()
      internA( cb: Callback<string>): void;
      intern(): string;
      internP(): Promise<string>;
      // public boolean java.lang.String.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public int java.lang.String.lastIndexOf(java.lang.String,int)
      lastIndexOfA(arg0: string_t, arg1: integer_t, cb: Callback<number>): void;
      lastIndexOf(arg0: string_t, arg1: integer_t): number;
      lastIndexOfP(arg0: string_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.lastIndexOf(int,int)
      lastIndexOfA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
      lastIndexOf(arg0: integer_t, arg1: integer_t): number;
      lastIndexOfP(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public int java.lang.String.lastIndexOf(java.lang.String)
      lastIndexOfA(arg0: string_t, cb: Callback<number>): void;
      lastIndexOf(arg0: string_t): number;
      lastIndexOfP(arg0: string_t): Promise<number>;
      // public int java.lang.String.lastIndexOf(int)
      lastIndexOfA(arg0: integer_t, cb: Callback<number>): void;
      lastIndexOf(arg0: integer_t): number;
      lastIndexOfP(arg0: integer_t): Promise<number>;
      // public int java.lang.String.length()
      lengthA( cb: Callback<number>): void;
      length(): number;
      lengthP(): Promise<number>;
      // public boolean java.lang.String.matches(java.lang.String)
      matchesA(arg0: string_t, cb: Callback<boolean>): void;
      matches(arg0: string_t): boolean;
      matchesP(arg0: string_t): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public int java.lang.String.offsetByCodePoints(int,int)
      offsetByCodePointsA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
      offsetByCodePoints(arg0: integer_t, arg1: integer_t): number;
      offsetByCodePointsP(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public boolean java.lang.String.regionMatches(boolean,int,java.lang.String,int,int)
      regionMatchesA(arg0: boolean_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t, cb: Callback<boolean>): void;
      regionMatches(arg0: boolean_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t): boolean;
      regionMatchesP(arg0: boolean_t, arg1: integer_t, arg2: string_t, arg3: integer_t, arg4: integer_t): Promise<boolean>;
      // public boolean java.lang.String.regionMatches(int,java.lang.String,int,int)
      regionMatchesA(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t, cb: Callback<boolean>): void;
      regionMatches(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t): boolean;
      regionMatchesP(arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t): Promise<boolean>;
      // public java.lang.String java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)
      replaceA(arg0: object_t, arg1: object_t, cb: Callback<string>): void;
      replace(arg0: object_t, arg1: object_t): string;
      replaceP(arg0: object_t, arg1: object_t): Promise<string>;
      // public java.lang.String java.lang.String.replace(char,char)
      replaceA(arg0: object_t, arg1: object_t, cb: Callback<string>): void;
      replace(arg0: object_t, arg1: object_t): string;
      replaceP(arg0: object_t, arg1: object_t): Promise<string>;
      // public java.lang.String java.lang.String.replaceAll(java.lang.String,java.lang.String)
      replaceAllA(arg0: string_t, arg1: string_t, cb: Callback<string>): void;
      replaceAll(arg0: string_t, arg1: string_t): string;
      replaceAllP(arg0: string_t, arg1: string_t): Promise<string>;
      // public java.lang.String java.lang.String.replaceFirst(java.lang.String,java.lang.String)
      replaceFirstA(arg0: string_t, arg1: string_t, cb: Callback<string>): void;
      replaceFirst(arg0: string_t, arg1: string_t): string;
      replaceFirstP(arg0: string_t, arg1: string_t): Promise<string>;
      // public java.lang.String[] java.lang.String.split(java.lang.String,int)
      splitA(arg0: string_t, arg1: integer_t, cb: Callback<string[]>): void;
      split(arg0: string_t, arg1: integer_t): string[];
      splitP(arg0: string_t, arg1: integer_t): Promise<string[]>;
      // public java.lang.String[] java.lang.String.split(java.lang.String)
      splitA(arg0: string_t, cb: Callback<string[]>): void;
      split(arg0: string_t): string[];
      splitP(arg0: string_t): Promise<string[]>;
      // public boolean java.lang.String.startsWith(java.lang.String,int)
      startsWithA(arg0: string_t, arg1: integer_t, cb: Callback<boolean>): void;
      startsWith(arg0: string_t, arg1: integer_t): boolean;
      startsWithP(arg0: string_t, arg1: integer_t): Promise<boolean>;
      // public boolean java.lang.String.startsWith(java.lang.String)
      startsWithA(arg0: string_t, cb: Callback<boolean>): void;
      startsWith(arg0: string_t): boolean;
      startsWithP(arg0: string_t): Promise<boolean>;
      // public java.lang.CharSequence java.lang.String.subSequence(int,int)
      subSequenceA(arg0: integer_t, arg1: integer_t, cb: Callback<object_t>): void;
      subSequence(arg0: integer_t, arg1: integer_t): object_t;
      subSequenceP(arg0: integer_t, arg1: integer_t): Promise<object_t>;
      // public java.lang.String java.lang.String.substring(int,int)
      substringA(arg0: integer_t, arg1: integer_t, cb: Callback<string>): void;
      substring(arg0: integer_t, arg1: integer_t): string;
      substringP(arg0: integer_t, arg1: integer_t): Promise<string>;
      // public java.lang.String java.lang.String.substring(int)
      substringA(arg0: integer_t, cb: Callback<string>): void;
      substring(arg0: integer_t): string;
      substringP(arg0: integer_t): Promise<string>;
      // public char[] java.lang.String.toCharArray()
      toCharArrayA( cb: Callback<object_t[]>): void;
      toCharArray(): object_t[];
      toCharArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.String.toLowerCase(java.util.Locale)
      toLowerCaseA(arg0: Java.Locale, cb: Callback<string>): void;
      toLowerCase(arg0: Java.Locale): string;
      toLowerCaseP(arg0: Java.Locale): Promise<string>;
      // public java.lang.String java.lang.String.toLowerCase()
      toLowerCaseA( cb: Callback<string>): void;
      toLowerCase(): string;
      toLowerCaseP(): Promise<string>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public java.lang.String java.lang.String.toUpperCase(java.util.Locale)
      toUpperCaseA(arg0: Java.Locale, cb: Callback<string>): void;
      toUpperCase(arg0: Java.Locale): string;
      toUpperCaseP(arg0: Java.Locale): Promise<string>;
      // public java.lang.String java.lang.String.toUpperCase()
      toUpperCaseA( cb: Callback<string>): void;
      toUpperCase(): string;
      toUpperCaseP(): Promise<string>;
      // public java.lang.String java.lang.String.trim()
      trimA( cb: Callback<string>): void;
      trim(): string;
      trimP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module String {
      export interface Static {
        CASE_INSENSITIVE_ORDER: Java.Comparator;
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: string_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): java.lang.String;
        new (arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t, arg2: integer_t): java.lang.String;
        new (arg0: object_array_t, arg1: object_t): java.lang.String;
        new (arg0: object_array_t, arg1: string_t): java.lang.String;
        new (arg0: object_array_t, arg1: integer_t): java.lang.String;
        new (arg0: object_t): java.lang.String;
        new (arg0: object_t): java.lang.String;
        new (arg0: string_t): java.lang.String;
        new (arg0: object_array_t): java.lang.String;
        new (arg0: object_array_t): java.lang.String;
        new (): java.lang.String;
        // public static java.lang.String java.lang.String.copyValueOf(char[],int,int)
        copyValueOfA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
        copyValueOf(arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
        copyValueOfP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
        // public static java.lang.String java.lang.String.copyValueOf(char[])
        copyValueOfA(arg0: object_array_t, cb: Callback<string>): void;
        copyValueOf(arg0: object_array_t): string;
        copyValueOfP(arg0: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object...)
        formatA(arg0: Java.Locale, arg1: string_t, arg2: object_array_t, cb: Callback<string>): void;
        format(arg0: Java.Locale, arg1: string_t, ...arg2: object_t[]): string;
        format(arg0: Java.Locale, arg1: string_t, arg2: object_array_t): string;
        formatP(arg0: Java.Locale, arg1: string_t, ...arg2: object_t[]): Promise<string>;
        formatP(arg0: Java.Locale, arg1: string_t, arg2: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.format(java.lang.String,java.lang.Object...)
        formatA(arg0: string_t, arg1: object_array_t, cb: Callback<string>): void;
        format(arg0: string_t, ...arg1: object_t[]): string;
        format(arg0: string_t, arg1: object_array_t): string;
        formatP(arg0: string_t, ...arg1: object_t[]): Promise<string>;
        formatP(arg0: string_t, arg1: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.CharSequence...)
        joinA(arg0: object_t, arg1: object_array_t, cb: Callback<string>): void;
        join(arg0: object_t, ...arg1: object_t[]): string;
        join(arg0: object_t, arg1: object_array_t): string;
        joinP(arg0: object_t, ...arg1: object_t[]): Promise<string>;
        joinP(arg0: object_t, arg1: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.join(java.lang.CharSequence,java.lang.Iterable<? extends java.lang.CharSequence>)
        joinA(arg0: object_t, arg1: object_t, cb: Callback<string>): void;
        join(arg0: object_t, arg1: object_t): string;
        joinP(arg0: object_t, arg1: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char[],int,int)
        valueOfA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<string>): void;
        valueOf(arg0: object_array_t, arg1: integer_t, arg2: integer_t): string;
        valueOfP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(java.lang.Object)
        valueOfA(arg0: object_t, cb: Callback<string>): void;
        valueOf(arg0: object_t): string;
        valueOfP(arg0: object_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char[])
        valueOfA(arg0: object_array_t, cb: Callback<string>): void;
        valueOf(arg0: object_array_t): string;
        valueOfP(arg0: object_array_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(boolean)
        valueOfA(arg0: boolean_t, cb: Callback<string>): void;
        valueOf(arg0: boolean_t): string;
        valueOfP(arg0: boolean_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(long)
        valueOfA(arg0: long_t, cb: Callback<string>): void;
        valueOf(arg0: long_t): string;
        valueOfP(arg0: long_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(int)
        valueOfA(arg0: integer_t, cb: Callback<string>): void;
        valueOf(arg0: integer_t): string;
        valueOfP(arg0: integer_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(float)
        valueOfA(arg0: float_t, cb: Callback<string>): void;
        valueOf(arg0: float_t): string;
        valueOfP(arg0: float_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(double)
        valueOfA(arg0: double_t, cb: Callback<string>): void;
        valueOf(arg0: double_t): string;
        valueOfP(arg0: double_t): Promise<string>;
        // public static java.lang.String java.lang.String.valueOf(char)
        valueOfA(arg0: object_t, cb: Callback<string>): void;
        valueOf(arg0: object_t): string;
        valueOfP(arg0: object_t): Promise<string>;
      }
    }
  }

  export module java.util {
    export interface AbstractCollection extends Java.java.lang.Object, Java.java.util.Collection {
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractCollection {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface AbstractList extends Java.java.util.AbstractCollection, Java.java.util.List {
      // public abstract void java.util.List.add(int,E)
      addA(arg0: integer_t, arg1: object_t, cb: Callback<void>): void;
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAllA(arg0: integer_t, arg1: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: integer_t, arg1: Java.Collection): boolean;
      addAllP(arg0: integer_t, arg1: Java.Collection): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract E java.util.List.get(int)
      getA(arg0: integer_t, cb: Callback<object_t>): void;
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOfA(arg0: object_t, cb: Callback<number>): void;
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOfA(arg0: object_t, cb: Callback<number>): void;
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIteratorA(arg0: integer_t, cb: Callback<Java.ListIterator>): void;
      listIterator(arg0: integer_t): Java.ListIterator;
      listIteratorP(arg0: integer_t): Promise<Java.ListIterator>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIteratorA( cb: Callback<Java.ListIterator>): void;
      listIterator(): Java.ListIterator;
      listIteratorP(): Promise<Java.ListIterator>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.List.remove(int)
      removeA(arg0: integer_t, cb: Callback<object_t>): void;
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract E java.util.List.set(int,E)
      setA(arg0: integer_t, arg1: object_t, cb: Callback<object_t>): void;
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sortA(arg0: Java.Comparator, cb: Callback<void>): void;
      sort(arg0: Java.Comparator): void;
      sortP(arg0: Java.Comparator): Promise<void>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subListA(arg0: integer_t, arg1: integer_t, cb: Callback<Java.List>): void;
      subList(arg0: integer_t, arg1: integer_t): Java.List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<Java.List>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractList {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface AbstractMap extends Java.java.lang.Object, Java.java.util.Map {
      // public abstract void java.util.Map.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      compute(arg0: object_t, arg1: object_t): object_t;
      computeP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsentA(arg0: object_t, arg1: Java.Function, cb: Callback<object_t>): void;
      computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      computeIfPresent(arg0: object_t, arg1: object_t): object_t;
      computeIfPresentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKeyA(arg0: object_t, cb: Callback<boolean>): void;
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValueA(arg0: object_t, cb: Callback<boolean>): void;
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySetA( cb: Callback<Java.Set>): void;
      entrySet(): Java.Set;
      entrySetP(): Promise<Java.Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      getA(arg0: object_t, cb: Callback<object_t>): void;
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefaultA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySetA( cb: Callback<Java.Set>): void;
      keySet(): Java.Set;
      keySetP(): Promise<Java.Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      mergeA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<object_t>): void;
      merge(arg0: object_t, arg1: object_t, arg2: object_t): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract V java.util.Map.put(K,V)
      putA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAllA(arg0: Java.Map, cb: Callback<void>): void;
      putAll(arg0: Java.Map): void;
      putAllP(arg0: Java.Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      removeA(arg0: object_t, arg1: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<object_t>): void;
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replaceA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<boolean>): void;
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replaceA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract int java.util.Map.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      valuesA( cb: Callback<Java.Collection>): void;
      values(): Java.Collection;
      valuesP(): Promise<Java.Collection>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractMap {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface AbstractMap$SimpleEntry extends Java.java.lang.Object, Java.java.util.Map$Entry {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public abstract K java.util.Map$Entry.getKey()
      getKeyA( cb: Callback<object_t>): void;
      getKey(): object_t;
      getKeyP(): Promise<object_t>;
      // public abstract V java.util.Map$Entry.getValue()
      getValueA( cb: Callback<object_t>): void;
      getValue(): object_t;
      getValueP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract V java.util.Map$Entry.setValue(V)
      setValueA(arg0: object_t, cb: Callback<object_t>): void;
      setValue(arg0: object_t): object_t;
      setValueP(arg0: object_t): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractMap$SimpleEntry {
      export interface Static {
        new (arg0: object_t, arg1: object_t): java.util.AbstractMap$SimpleEntry;
        new (arg0: Java.Map$Entry): java.util.AbstractMap$SimpleEntry;
      }
    }
  }

  export module java.util {
    export interface AbstractMap$SimpleImmutableEntry extends Java.java.lang.Object, Java.java.util.Map$Entry {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public abstract K java.util.Map$Entry.getKey()
      getKeyA( cb: Callback<object_t>): void;
      getKey(): object_t;
      getKeyP(): Promise<object_t>;
      // public abstract V java.util.Map$Entry.getValue()
      getValueA( cb: Callback<object_t>): void;
      getValue(): object_t;
      getValueP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract V java.util.Map$Entry.setValue(V)
      setValueA(arg0: object_t, cb: Callback<object_t>): void;
      setValue(arg0: object_t): object_t;
      setValueP(arg0: object_t): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractMap$SimpleImmutableEntry {
      export interface Static {
        new (arg0: object_t, arg1: object_t): java.util.AbstractMap$SimpleImmutableEntry;
        new (arg0: Java.Map$Entry): java.util.AbstractMap$SimpleImmutableEntry;
      }
    }
  }

  export module java.util {
    export interface AbstractQueue extends Java.java.util.AbstractCollection, Java.java.util.Queue {
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract E java.util.Queue.element()
      elementA( cb: Callback<object_t>): void;
      element(): object_t;
      elementP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract boolean java.util.Queue.offer(E)
      offerA(arg0: object_t, cb: Callback<boolean>): void;
      offer(arg0: object_t): boolean;
      offerP(arg0: object_t): Promise<boolean>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract E java.util.Queue.peek()
      peekA( cb: Callback<object_t>): void;
      peek(): object_t;
      peekP(): Promise<object_t>;
      // public abstract E java.util.Queue.poll()
      pollA( cb: Callback<object_t>): void;
      poll(): object_t;
      pollP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.Queue.remove()
      removeA( cb: Callback<object_t>): void;
      remove(): object_t;
      removeP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractQueue {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface AbstractSequentialList extends Java.java.util.AbstractList {
      // public abstract void java.util.List.add(int,E)
      addA(arg0: integer_t, arg1: object_t, cb: Callback<void>): void;
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAllA(arg0: integer_t, arg1: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: integer_t, arg1: Java.Collection): boolean;
      addAllP(arg0: integer_t, arg1: Java.Collection): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract E java.util.List.get(int)
      getA(arg0: integer_t, cb: Callback<object_t>): void;
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOfA(arg0: object_t, cb: Callback<number>): void;
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOfA(arg0: object_t, cb: Callback<number>): void;
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIteratorA(arg0: integer_t, cb: Callback<Java.ListIterator>): void;
      listIterator(arg0: integer_t): Java.ListIterator;
      listIteratorP(arg0: integer_t): Promise<Java.ListIterator>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIteratorA( cb: Callback<Java.ListIterator>): void;
      listIterator(): Java.ListIterator;
      listIteratorP(): Promise<Java.ListIterator>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.List.remove(int)
      removeA(arg0: integer_t, cb: Callback<object_t>): void;
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract E java.util.List.set(int,E)
      setA(arg0: integer_t, arg1: object_t, cb: Callback<object_t>): void;
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sortA(arg0: Java.Comparator, cb: Callback<void>): void;
      sort(arg0: Java.Comparator): void;
      sortP(arg0: Java.Comparator): Promise<void>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subListA(arg0: integer_t, arg1: integer_t, cb: Callback<Java.List>): void;
      subList(arg0: integer_t, arg1: integer_t): Java.List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<Java.List>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractSequentialList {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface AbstractSet extends Java.java.util.AbstractCollection, Java.java.util.Set {
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module AbstractSet {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface ArrayDeque extends Java.java.util.AbstractCollection, Java.java.util.Deque {
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Deque.addFirst(E)
      addFirstA(arg0: object_t, cb: Callback<void>): void;
      addFirst(arg0: object_t): void;
      addFirstP(arg0: object_t): Promise<void>;
      // public abstract void java.util.Deque.addLast(E)
      addLastA(arg0: object_t, cb: Callback<void>): void;
      addLast(arg0: object_t): void;
      addLastP(arg0: object_t): Promise<void>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public java.util.ArrayDeque<E> java.util.ArrayDeque.clone()
      cloneA( cb: Callback<Java.ArrayDeque>): void;
      clone(): Java.ArrayDeque;
      cloneP(): Promise<Java.ArrayDeque>;
      // public java.lang.Object java.util.ArrayDeque.clone() throws java.lang.CloneNotSupportedException
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Deque.descendingIterator()
      descendingIteratorA( cb: Callback<Java.Iterator>): void;
      descendingIterator(): Java.Iterator;
      descendingIteratorP(): Promise<Java.Iterator>;
      // public abstract E java.util.Queue.element()
      elementA( cb: Callback<object_t>): void;
      element(): object_t;
      elementP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public abstract E java.util.Deque.getFirst()
      getFirstA( cb: Callback<object_t>): void;
      getFirst(): object_t;
      getFirstP(): Promise<object_t>;
      // public abstract E java.util.Deque.getLast()
      getLastA( cb: Callback<object_t>): void;
      getLast(): object_t;
      getLastP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract boolean java.util.Queue.offer(E)
      offerA(arg0: object_t, cb: Callback<boolean>): void;
      offer(arg0: object_t): boolean;
      offerP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Deque.offerFirst(E)
      offerFirstA(arg0: object_t, cb: Callback<boolean>): void;
      offerFirst(arg0: object_t): boolean;
      offerFirstP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Deque.offerLast(E)
      offerLastA(arg0: object_t, cb: Callback<boolean>): void;
      offerLast(arg0: object_t): boolean;
      offerLastP(arg0: object_t): Promise<boolean>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract E java.util.Queue.peek()
      peekA( cb: Callback<object_t>): void;
      peek(): object_t;
      peekP(): Promise<object_t>;
      // public abstract E java.util.Deque.peekFirst()
      peekFirstA( cb: Callback<object_t>): void;
      peekFirst(): object_t;
      peekFirstP(): Promise<object_t>;
      // public abstract E java.util.Deque.peekLast()
      peekLastA( cb: Callback<object_t>): void;
      peekLast(): object_t;
      peekLastP(): Promise<object_t>;
      // public abstract E java.util.Queue.poll()
      pollA( cb: Callback<object_t>): void;
      poll(): object_t;
      pollP(): Promise<object_t>;
      // public abstract E java.util.Deque.pollFirst()
      pollFirstA( cb: Callback<object_t>): void;
      pollFirst(): object_t;
      pollFirstP(): Promise<object_t>;
      // public abstract E java.util.Deque.pollLast()
      pollLastA( cb: Callback<object_t>): void;
      pollLast(): object_t;
      pollLastP(): Promise<object_t>;
      // public abstract E java.util.Deque.pop()
      popA( cb: Callback<object_t>): void;
      pop(): object_t;
      popP(): Promise<object_t>;
      // public abstract void java.util.Deque.push(E)
      pushA(arg0: object_t, cb: Callback<void>): void;
      push(arg0: object_t): void;
      pushP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.Queue.remove()
      removeA( cb: Callback<object_t>): void;
      remove(): object_t;
      removeP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract E java.util.Deque.removeFirst()
      removeFirstA( cb: Callback<object_t>): void;
      removeFirst(): object_t;
      removeFirstP(): Promise<object_t>;
      // public abstract boolean java.util.Deque.removeFirstOccurrence(java.lang.Object)
      removeFirstOccurrenceA(arg0: object_t, cb: Callback<boolean>): void;
      removeFirstOccurrence(arg0: object_t): boolean;
      removeFirstOccurrenceP(arg0: object_t): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.Deque.removeLast()
      removeLastA( cb: Callback<object_t>): void;
      removeLast(): object_t;
      removeLastP(): Promise<object_t>;
      // public abstract boolean java.util.Deque.removeLastOccurrence(java.lang.Object)
      removeLastOccurrenceA(arg0: object_t, cb: Callback<boolean>): void;
      removeLastOccurrence(arg0: object_t): boolean;
      removeLastOccurrenceP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ArrayDeque {
      export interface Static {
        new (arg0: Java.Collection): java.util.ArrayDeque;
        new (arg0: integer_t): java.util.ArrayDeque;
        new (): java.util.ArrayDeque;
      }
    }
  }

  export module java.util {
    export interface ArrayList extends Java.java.util.AbstractList, Java.java.util.List, Java.java.util.RandomAccess {
      // public abstract void java.util.List.add(int,E)
      addA(arg0: integer_t, arg1: object_t, cb: Callback<void>): void;
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAllA(arg0: integer_t, arg1: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: integer_t, arg1: Java.Collection): boolean;
      addAllP(arg0: integer_t, arg1: Java.Collection): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.ArrayList.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public void java.util.ArrayList.ensureCapacity(int)
      ensureCapacityA(arg0: integer_t, cb: Callback<void>): void;
      ensureCapacity(arg0: integer_t): void;
      ensureCapacityP(arg0: integer_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract E java.util.List.get(int)
      getA(arg0: integer_t, cb: Callback<object_t>): void;
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOfA(arg0: object_t, cb: Callback<number>): void;
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOfA(arg0: object_t, cb: Callback<number>): void;
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIteratorA(arg0: integer_t, cb: Callback<Java.ListIterator>): void;
      listIterator(arg0: integer_t): Java.ListIterator;
      listIteratorP(arg0: integer_t): Promise<Java.ListIterator>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIteratorA( cb: Callback<Java.ListIterator>): void;
      listIterator(): Java.ListIterator;
      listIteratorP(): Promise<Java.ListIterator>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.List.remove(int)
      removeA(arg0: integer_t, cb: Callback<object_t>): void;
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract E java.util.List.set(int,E)
      setA(arg0: integer_t, arg1: object_t, cb: Callback<object_t>): void;
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sortA(arg0: Java.Comparator, cb: Callback<void>): void;
      sort(arg0: Java.Comparator): void;
      sortP(arg0: Java.Comparator): Promise<void>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subListA(arg0: integer_t, arg1: integer_t, cb: Callback<Java.List>): void;
      subList(arg0: integer_t, arg1: integer_t): Java.List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<Java.List>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public void java.util.ArrayList.trimToSize()
      trimToSizeA( cb: Callback<void>): void;
      trimToSize(): void;
      trimToSizeP(): Promise<void>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ArrayList {
      export interface Static {
        new (arg0: Java.Collection): java.util.ArrayList;
        new (arg0: integer_t): java.util.ArrayList;
        new (): java.util.ArrayList;
      }
    }
  }

  export module java.util {
    export interface Arrays extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Arrays {
      export interface Static {
        // public static <T> java.util.List<T> java.util.Arrays.asList(T...)
        asListA(arg0: object_array_t, cb: Callback<Java.List>): void;
        asList(...arg0: object_t[]): Java.List;
        asList(arg0: object_array_t): Java.List;
        asListP(...arg0: object_t[]): Promise<Java.List>;
        asListP(arg0: object_array_t): Promise<Java.List>;
        // public static <T> int java.util.Arrays.binarySearch(T[],int,int,T,java.util.Comparator<? super T>)
        binarySearchA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t, arg4: Java.Comparator, cb: Callback<number>): void;
        binarySearch(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t, arg4: Java.Comparator): number;
        binarySearchP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t, arg4: Java.Comparator): Promise<number>;
        // public static int java.util.Arrays.binarySearch(java.lang.Object[],int,int,java.lang.Object)
        binarySearchA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t, cb: Callback<number>): void;
        binarySearch(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): number;
        binarySearchP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(short[],int,int,short)
        binarySearchA(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t, arg3: short_t, cb: Callback<number>): void;
        binarySearch(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t, arg3: short_t): number;
        binarySearchP(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t, arg3: short_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(long[],int,int,long)
        binarySearchA(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: long_t, cb: Callback<number>): void;
        binarySearch(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: long_t): number;
        binarySearchP(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: long_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(int[],int,int,int)
        binarySearchA(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<number>): void;
        binarySearch(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t): number;
        binarySearchP(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(float[],int,int,float)
        binarySearchA(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t, arg3: float_t, cb: Callback<number>): void;
        binarySearch(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t, arg3: float_t): number;
        binarySearchP(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t, arg3: float_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(double[],int,int,double)
        binarySearchA(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: double_t, cb: Callback<number>): void;
        binarySearch(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: double_t): number;
        binarySearchP(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: double_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(char[],int,int,char)
        binarySearchA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t, cb: Callback<number>): void;
        binarySearch(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): number;
        binarySearchP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(byte[],int,int,byte)
        binarySearchA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t, cb: Callback<number>): void;
        binarySearch(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): number;
        binarySearchP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<number>;
        // public static <T> int java.util.Arrays.binarySearch(T[],T,java.util.Comparator<? super T>)
        binarySearchA(arg0: object_array_t, arg1: object_t, arg2: Java.Comparator, cb: Callback<number>): void;
        binarySearch(arg0: object_array_t, arg1: object_t, arg2: Java.Comparator): number;
        binarySearchP(arg0: object_array_t, arg1: object_t, arg2: Java.Comparator): Promise<number>;
        // public static int java.util.Arrays.binarySearch(java.lang.Object[],java.lang.Object)
        binarySearchA(arg0: object_array_t, arg1: object_t, cb: Callback<number>): void;
        binarySearch(arg0: object_array_t, arg1: object_t): number;
        binarySearchP(arg0: object_array_t, arg1: object_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(short[],short)
        binarySearchA(arg0: array_t<short_t>, arg1: short_t, cb: Callback<number>): void;
        binarySearch(arg0: array_t<short_t>, arg1: short_t): number;
        binarySearchP(arg0: array_t<short_t>, arg1: short_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(long[],long)
        binarySearchA(arg0: array_t<long_t>, arg1: long_t, cb: Callback<number>): void;
        binarySearch(arg0: array_t<long_t>, arg1: long_t): number;
        binarySearchP(arg0: array_t<long_t>, arg1: long_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(int[],int)
        binarySearchA(arg0: array_t<integer_t>, arg1: integer_t, cb: Callback<number>): void;
        binarySearch(arg0: array_t<integer_t>, arg1: integer_t): number;
        binarySearchP(arg0: array_t<integer_t>, arg1: integer_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(float[],float)
        binarySearchA(arg0: array_t<float_t>, arg1: float_t, cb: Callback<number>): void;
        binarySearch(arg0: array_t<float_t>, arg1: float_t): number;
        binarySearchP(arg0: array_t<float_t>, arg1: float_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(double[],double)
        binarySearchA(arg0: array_t<double_t>, arg1: double_t, cb: Callback<number>): void;
        binarySearch(arg0: array_t<double_t>, arg1: double_t): number;
        binarySearchP(arg0: array_t<double_t>, arg1: double_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(char[],char)
        binarySearchA(arg0: object_array_t, arg1: object_t, cb: Callback<number>): void;
        binarySearch(arg0: object_array_t, arg1: object_t): number;
        binarySearchP(arg0: object_array_t, arg1: object_t): Promise<number>;
        // public static int java.util.Arrays.binarySearch(byte[],byte)
        binarySearchA(arg0: object_array_t, arg1: object_t, cb: Callback<number>): void;
        binarySearch(arg0: object_array_t, arg1: object_t): number;
        binarySearchP(arg0: object_array_t, arg1: object_t): Promise<number>;
        // public static <T,U> T[] java.util.Arrays.copyOf(U[],int,java.lang.Class<? extends T[]>)
        copyOfA(arg0: object_array_t, arg1: integer_t, arg2: Java.Class, cb: Callback<object_t[]>): void;
        copyOf(arg0: object_array_t, arg1: integer_t, arg2: Java.Class): object_t[];
        copyOfP(arg0: object_array_t, arg1: integer_t, arg2: Java.Class): Promise<object_t[]>;
        // public static <T> T[] java.util.Arrays.copyOf(T[],int)
        copyOfA(arg0: object_array_t, arg1: integer_t, cb: Callback<object_t[]>): void;
        copyOf(arg0: object_array_t, arg1: integer_t): object_t[];
        copyOfP(arg0: object_array_t, arg1: integer_t): Promise<object_t[]>;
        // public static boolean[] java.util.Arrays.copyOf(boolean[],int)
        copyOfA(arg0: array_t<boolean_t>, arg1: integer_t, cb: Callback<boolean[]>): void;
        copyOf(arg0: array_t<boolean_t>, arg1: integer_t): boolean[];
        copyOfP(arg0: array_t<boolean_t>, arg1: integer_t): Promise<boolean[]>;
        // public static short[] java.util.Arrays.copyOf(short[],int)
        copyOfA(arg0: array_t<short_t>, arg1: integer_t, cb: Callback<number[]>): void;
        copyOf(arg0: array_t<short_t>, arg1: integer_t): number[];
        copyOfP(arg0: array_t<short_t>, arg1: integer_t): Promise<number[]>;
        // public static long[] java.util.Arrays.copyOf(long[],int)
        copyOfA(arg0: array_t<long_t>, arg1: integer_t, cb: Callback<longValue_t[]>): void;
        copyOf(arg0: array_t<long_t>, arg1: integer_t): longValue_t[];
        copyOfP(arg0: array_t<long_t>, arg1: integer_t): Promise<longValue_t[]>;
        // public static int[] java.util.Arrays.copyOf(int[],int)
        copyOfA(arg0: array_t<integer_t>, arg1: integer_t, cb: Callback<number[]>): void;
        copyOf(arg0: array_t<integer_t>, arg1: integer_t): number[];
        copyOfP(arg0: array_t<integer_t>, arg1: integer_t): Promise<number[]>;
        // public static float[] java.util.Arrays.copyOf(float[],int)
        copyOfA(arg0: array_t<float_t>, arg1: integer_t, cb: Callback<number[]>): void;
        copyOf(arg0: array_t<float_t>, arg1: integer_t): number[];
        copyOfP(arg0: array_t<float_t>, arg1: integer_t): Promise<number[]>;
        // public static double[] java.util.Arrays.copyOf(double[],int)
        copyOfA(arg0: array_t<double_t>, arg1: integer_t, cb: Callback<number[]>): void;
        copyOf(arg0: array_t<double_t>, arg1: integer_t): number[];
        copyOfP(arg0: array_t<double_t>, arg1: integer_t): Promise<number[]>;
        // public static char[] java.util.Arrays.copyOf(char[],int)
        copyOfA(arg0: object_array_t, arg1: integer_t, cb: Callback<object_t[]>): void;
        copyOf(arg0: object_array_t, arg1: integer_t): object_t[];
        copyOfP(arg0: object_array_t, arg1: integer_t): Promise<object_t[]>;
        // public static byte[] java.util.Arrays.copyOf(byte[],int)
        copyOfA(arg0: object_array_t, arg1: integer_t, cb: Callback<object_t[]>): void;
        copyOf(arg0: object_array_t, arg1: integer_t): object_t[];
        copyOfP(arg0: object_array_t, arg1: integer_t): Promise<object_t[]>;
        // public static <T,U> T[] java.util.Arrays.copyOfRange(U[],int,int,java.lang.Class<? extends T[]>)
        copyOfRangeA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Java.Class, cb: Callback<object_t[]>): void;
        copyOfRange(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Java.Class): object_t[];
        copyOfRangeP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Java.Class): Promise<object_t[]>;
        // public static <T> T[] java.util.Arrays.copyOfRange(T[],int,int)
        copyOfRangeA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<object_t[]>): void;
        copyOfRange(arg0: object_array_t, arg1: integer_t, arg2: integer_t): object_t[];
        copyOfRangeP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<object_t[]>;
        // public static boolean[] java.util.Arrays.copyOfRange(boolean[],int,int)
        copyOfRangeA(arg0: array_t<boolean_t>, arg1: integer_t, arg2: integer_t, cb: Callback<boolean[]>): void;
        copyOfRange(arg0: array_t<boolean_t>, arg1: integer_t, arg2: integer_t): boolean[];
        copyOfRangeP(arg0: array_t<boolean_t>, arg1: integer_t, arg2: integer_t): Promise<boolean[]>;
        // public static short[] java.util.Arrays.copyOfRange(short[],int,int)
        copyOfRangeA(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t, cb: Callback<number[]>): void;
        copyOfRange(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t): number[];
        copyOfRangeP(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t): Promise<number[]>;
        // public static long[] java.util.Arrays.copyOfRange(long[],int,int)
        copyOfRangeA(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, cb: Callback<longValue_t[]>): void;
        copyOfRange(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): longValue_t[];
        copyOfRangeP(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): Promise<longValue_t[]>;
        // public static int[] java.util.Arrays.copyOfRange(int[],int,int)
        copyOfRangeA(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, cb: Callback<number[]>): void;
        copyOfRange(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): number[];
        copyOfRangeP(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<number[]>;
        // public static float[] java.util.Arrays.copyOfRange(float[],int,int)
        copyOfRangeA(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t, cb: Callback<number[]>): void;
        copyOfRange(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t): number[];
        copyOfRangeP(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t): Promise<number[]>;
        // public static double[] java.util.Arrays.copyOfRange(double[],int,int)
        copyOfRangeA(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, cb: Callback<number[]>): void;
        copyOfRange(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): number[];
        copyOfRangeP(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): Promise<number[]>;
        // public static char[] java.util.Arrays.copyOfRange(char[],int,int)
        copyOfRangeA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<object_t[]>): void;
        copyOfRange(arg0: object_array_t, arg1: integer_t, arg2: integer_t): object_t[];
        copyOfRangeP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<object_t[]>;
        // public static byte[] java.util.Arrays.copyOfRange(byte[],int,int)
        copyOfRangeA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<object_t[]>): void;
        copyOfRange(arg0: object_array_t, arg1: integer_t, arg2: integer_t): object_t[];
        copyOfRangeP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<object_t[]>;
        // public static boolean java.util.Arrays.deepEquals(java.lang.Object[],java.lang.Object[])
        deepEqualsA(arg0: object_array_t, arg1: object_array_t, cb: Callback<boolean>): void;
        deepEquals(arg0: object_array_t, arg1: object_array_t): boolean;
        deepEqualsP(arg0: object_array_t, arg1: object_array_t): Promise<boolean>;
        // public static int java.util.Arrays.deepHashCode(java.lang.Object[])
        deepHashCodeA(arg0: object_array_t, cb: Callback<number>): void;
        deepHashCode(arg0: object_array_t): number;
        deepHashCodeP(arg0: object_array_t): Promise<number>;
        // public static java.lang.String java.util.Arrays.deepToString(java.lang.Object[])
        deepToStringA(arg0: object_array_t, cb: Callback<string>): void;
        deepToString(arg0: object_array_t): string;
        deepToStringP(arg0: object_array_t): Promise<string>;
        // public static boolean java.util.Arrays.equals(java.lang.Object[],java.lang.Object[])
        equalsA(arg0: object_array_t, arg1: object_array_t, cb: Callback<boolean>): void;
        equals(arg0: object_array_t, arg1: object_array_t): boolean;
        equalsP(arg0: object_array_t, arg1: object_array_t): Promise<boolean>;
        // public static boolean java.util.Arrays.equals(boolean[],boolean[])
        equalsA(arg0: array_t<boolean_t>, arg1: array_t<boolean_t>, cb: Callback<boolean>): void;
        equals(arg0: array_t<boolean_t>, arg1: array_t<boolean_t>): boolean;
        equalsP(arg0: array_t<boolean_t>, arg1: array_t<boolean_t>): Promise<boolean>;
        // public static boolean java.util.Arrays.equals(short[],short[])
        equalsA(arg0: array_t<short_t>, arg1: array_t<short_t>, cb: Callback<boolean>): void;
        equals(arg0: array_t<short_t>, arg1: array_t<short_t>): boolean;
        equalsP(arg0: array_t<short_t>, arg1: array_t<short_t>): Promise<boolean>;
        // public static boolean java.util.Arrays.equals(long[],long[])
        equalsA(arg0: array_t<long_t>, arg1: array_t<long_t>, cb: Callback<boolean>): void;
        equals(arg0: array_t<long_t>, arg1: array_t<long_t>): boolean;
        equalsP(arg0: array_t<long_t>, arg1: array_t<long_t>): Promise<boolean>;
        // public static boolean java.util.Arrays.equals(int[],int[])
        equalsA(arg0: array_t<integer_t>, arg1: array_t<integer_t>, cb: Callback<boolean>): void;
        equals(arg0: array_t<integer_t>, arg1: array_t<integer_t>): boolean;
        equalsP(arg0: array_t<integer_t>, arg1: array_t<integer_t>): Promise<boolean>;
        // public static boolean java.util.Arrays.equals(float[],float[])
        equalsA(arg0: array_t<float_t>, arg1: array_t<float_t>, cb: Callback<boolean>): void;
        equals(arg0: array_t<float_t>, arg1: array_t<float_t>): boolean;
        equalsP(arg0: array_t<float_t>, arg1: array_t<float_t>): Promise<boolean>;
        // public static boolean java.util.Arrays.equals(double[],double[])
        equalsA(arg0: array_t<double_t>, arg1: array_t<double_t>, cb: Callback<boolean>): void;
        equals(arg0: array_t<double_t>, arg1: array_t<double_t>): boolean;
        equalsP(arg0: array_t<double_t>, arg1: array_t<double_t>): Promise<boolean>;
        // public static boolean java.util.Arrays.equals(char[],char[])
        equalsA(arg0: object_array_t, arg1: object_array_t, cb: Callback<boolean>): void;
        equals(arg0: object_array_t, arg1: object_array_t): boolean;
        equalsP(arg0: object_array_t, arg1: object_array_t): Promise<boolean>;
        // public static boolean java.util.Arrays.equals(byte[],byte[])
        equalsA(arg0: object_array_t, arg1: object_array_t, cb: Callback<boolean>): void;
        equals(arg0: object_array_t, arg1: object_array_t): boolean;
        equalsP(arg0: object_array_t, arg1: object_array_t): Promise<boolean>;
        // public static void java.util.Arrays.fill(java.lang.Object[],int,int,java.lang.Object)
        fillA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t, cb: Callback<void>): void;
        fill(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): void;
        fillP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<void>;
        // public static void java.util.Arrays.fill(boolean[],int,int,boolean)
        fillA(arg0: array_t<boolean_t>, arg1: integer_t, arg2: integer_t, arg3: boolean_t, cb: Callback<void>): void;
        fill(arg0: array_t<boolean_t>, arg1: integer_t, arg2: integer_t, arg3: boolean_t): void;
        fillP(arg0: array_t<boolean_t>, arg1: integer_t, arg2: integer_t, arg3: boolean_t): Promise<void>;
        // public static void java.util.Arrays.fill(short[],int,int,short)
        fillA(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t, arg3: short_t, cb: Callback<void>): void;
        fill(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t, arg3: short_t): void;
        fillP(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t, arg3: short_t): Promise<void>;
        // public static void java.util.Arrays.fill(long[],int,int,long)
        fillA(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: long_t, cb: Callback<void>): void;
        fill(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: long_t): void;
        fillP(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: long_t): Promise<void>;
        // public static void java.util.Arrays.fill(int[],int,int,int)
        fillA(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<void>): void;
        fill(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t): void;
        fillP(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<void>;
        // public static void java.util.Arrays.fill(float[],int,int,float)
        fillA(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t, arg3: float_t, cb: Callback<void>): void;
        fill(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t, arg3: float_t): void;
        fillP(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t, arg3: float_t): Promise<void>;
        // public static void java.util.Arrays.fill(double[],int,int,double)
        fillA(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: double_t, cb: Callback<void>): void;
        fill(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: double_t): void;
        fillP(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: double_t): Promise<void>;
        // public static void java.util.Arrays.fill(char[],int,int,char)
        fillA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t, cb: Callback<void>): void;
        fill(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): void;
        fillP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<void>;
        // public static void java.util.Arrays.fill(byte[],int,int,byte)
        fillA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t, cb: Callback<void>): void;
        fill(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): void;
        fillP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<void>;
        // public static void java.util.Arrays.fill(java.lang.Object[],java.lang.Object)
        fillA(arg0: object_array_t, arg1: object_t, cb: Callback<void>): void;
        fill(arg0: object_array_t, arg1: object_t): void;
        fillP(arg0: object_array_t, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.fill(boolean[],boolean)
        fillA(arg0: array_t<boolean_t>, arg1: boolean_t, cb: Callback<void>): void;
        fill(arg0: array_t<boolean_t>, arg1: boolean_t): void;
        fillP(arg0: array_t<boolean_t>, arg1: boolean_t): Promise<void>;
        // public static void java.util.Arrays.fill(short[],short)
        fillA(arg0: array_t<short_t>, arg1: short_t, cb: Callback<void>): void;
        fill(arg0: array_t<short_t>, arg1: short_t): void;
        fillP(arg0: array_t<short_t>, arg1: short_t): Promise<void>;
        // public static void java.util.Arrays.fill(long[],long)
        fillA(arg0: array_t<long_t>, arg1: long_t, cb: Callback<void>): void;
        fill(arg0: array_t<long_t>, arg1: long_t): void;
        fillP(arg0: array_t<long_t>, arg1: long_t): Promise<void>;
        // public static void java.util.Arrays.fill(int[],int)
        fillA(arg0: array_t<integer_t>, arg1: integer_t, cb: Callback<void>): void;
        fill(arg0: array_t<integer_t>, arg1: integer_t): void;
        fillP(arg0: array_t<integer_t>, arg1: integer_t): Promise<void>;
        // public static void java.util.Arrays.fill(float[],float)
        fillA(arg0: array_t<float_t>, arg1: float_t, cb: Callback<void>): void;
        fill(arg0: array_t<float_t>, arg1: float_t): void;
        fillP(arg0: array_t<float_t>, arg1: float_t): Promise<void>;
        // public static void java.util.Arrays.fill(double[],double)
        fillA(arg0: array_t<double_t>, arg1: double_t, cb: Callback<void>): void;
        fill(arg0: array_t<double_t>, arg1: double_t): void;
        fillP(arg0: array_t<double_t>, arg1: double_t): Promise<void>;
        // public static void java.util.Arrays.fill(char[],char)
        fillA(arg0: object_array_t, arg1: object_t, cb: Callback<void>): void;
        fill(arg0: object_array_t, arg1: object_t): void;
        fillP(arg0: object_array_t, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.fill(byte[],byte)
        fillA(arg0: object_array_t, arg1: object_t, cb: Callback<void>): void;
        fill(arg0: object_array_t, arg1: object_t): void;
        fillP(arg0: object_array_t, arg1: object_t): Promise<void>;
        // public static int java.util.Arrays.hashCode(java.lang.Object[])
        hashCodeA(arg0: object_array_t, cb: Callback<number>): void;
        hashCode(arg0: object_array_t): number;
        hashCodeP(arg0: object_array_t): Promise<number>;
        // public static int java.util.Arrays.hashCode(boolean[])
        hashCodeA(arg0: array_t<boolean_t>, cb: Callback<number>): void;
        hashCode(arg0: array_t<boolean_t>): number;
        hashCodeP(arg0: array_t<boolean_t>): Promise<number>;
        // public static int java.util.Arrays.hashCode(short[])
        hashCodeA(arg0: array_t<short_t>, cb: Callback<number>): void;
        hashCode(arg0: array_t<short_t>): number;
        hashCodeP(arg0: array_t<short_t>): Promise<number>;
        // public static int java.util.Arrays.hashCode(long[])
        hashCodeA(arg0: array_t<long_t>, cb: Callback<number>): void;
        hashCode(arg0: array_t<long_t>): number;
        hashCodeP(arg0: array_t<long_t>): Promise<number>;
        // public static int java.util.Arrays.hashCode(int[])
        hashCodeA(arg0: array_t<integer_t>, cb: Callback<number>): void;
        hashCode(arg0: array_t<integer_t>): number;
        hashCodeP(arg0: array_t<integer_t>): Promise<number>;
        // public static int java.util.Arrays.hashCode(float[])
        hashCodeA(arg0: array_t<float_t>, cb: Callback<number>): void;
        hashCode(arg0: array_t<float_t>): number;
        hashCodeP(arg0: array_t<float_t>): Promise<number>;
        // public static int java.util.Arrays.hashCode(double[])
        hashCodeA(arg0: array_t<double_t>, cb: Callback<number>): void;
        hashCode(arg0: array_t<double_t>): number;
        hashCodeP(arg0: array_t<double_t>): Promise<number>;
        // public static int java.util.Arrays.hashCode(char[])
        hashCodeA(arg0: object_array_t, cb: Callback<number>): void;
        hashCode(arg0: object_array_t): number;
        hashCodeP(arg0: object_array_t): Promise<number>;
        // public static int java.util.Arrays.hashCode(byte[])
        hashCodeA(arg0: object_array_t, cb: Callback<number>): void;
        hashCode(arg0: object_array_t): number;
        hashCodeP(arg0: object_array_t): Promise<number>;
        // public static <T> void java.util.Arrays.parallelPrefix(T[],int,int,java.util.function.BinaryOperator<T>)
        parallelPrefixA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t, cb: Callback<void>): void;
        parallelPrefix(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): void;
        parallelPrefixP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<void>;
        // public static void java.util.Arrays.parallelPrefix(double[],int,int,java.util.function.DoubleBinaryOperator)
        parallelPrefixA(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: object_t, cb: Callback<void>): void;
        parallelPrefix(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: object_t): void;
        parallelPrefixP(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<void>;
        // public static void java.util.Arrays.parallelPrefix(long[],int,int,java.util.function.LongBinaryOperator)
        parallelPrefixA(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: object_t, cb: Callback<void>): void;
        parallelPrefix(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: object_t): void;
        parallelPrefixP(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<void>;
        // public static void java.util.Arrays.parallelPrefix(int[],int,int,java.util.function.IntBinaryOperator)
        parallelPrefixA(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: object_t, cb: Callback<void>): void;
        parallelPrefix(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: object_t): void;
        parallelPrefixP(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: object_t): Promise<void>;
        // public static <T> void java.util.Arrays.parallelPrefix(T[],java.util.function.BinaryOperator<T>)
        parallelPrefixA(arg0: object_array_t, arg1: object_t, cb: Callback<void>): void;
        parallelPrefix(arg0: object_array_t, arg1: object_t): void;
        parallelPrefixP(arg0: object_array_t, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.parallelPrefix(double[],java.util.function.DoubleBinaryOperator)
        parallelPrefixA(arg0: array_t<double_t>, arg1: object_t, cb: Callback<void>): void;
        parallelPrefix(arg0: array_t<double_t>, arg1: object_t): void;
        parallelPrefixP(arg0: array_t<double_t>, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.parallelPrefix(long[],java.util.function.LongBinaryOperator)
        parallelPrefixA(arg0: array_t<long_t>, arg1: object_t, cb: Callback<void>): void;
        parallelPrefix(arg0: array_t<long_t>, arg1: object_t): void;
        parallelPrefixP(arg0: array_t<long_t>, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.parallelPrefix(int[],java.util.function.IntBinaryOperator)
        parallelPrefixA(arg0: array_t<integer_t>, arg1: object_t, cb: Callback<void>): void;
        parallelPrefix(arg0: array_t<integer_t>, arg1: object_t): void;
        parallelPrefixP(arg0: array_t<integer_t>, arg1: object_t): Promise<void>;
        // public static <T> void java.util.Arrays.parallelSetAll(T[],java.util.function.IntFunction<? extends T>)
        parallelSetAllA(arg0: object_array_t, arg1: object_t, cb: Callback<void>): void;
        parallelSetAll(arg0: object_array_t, arg1: object_t): void;
        parallelSetAllP(arg0: object_array_t, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.parallelSetAll(double[],java.util.function.IntToDoubleFunction)
        parallelSetAllA(arg0: array_t<double_t>, arg1: object_t, cb: Callback<void>): void;
        parallelSetAll(arg0: array_t<double_t>, arg1: object_t): void;
        parallelSetAllP(arg0: array_t<double_t>, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.parallelSetAll(long[],java.util.function.IntToLongFunction)
        parallelSetAllA(arg0: array_t<long_t>, arg1: object_t, cb: Callback<void>): void;
        parallelSetAll(arg0: array_t<long_t>, arg1: object_t): void;
        parallelSetAllP(arg0: array_t<long_t>, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.parallelSetAll(int[],java.util.function.IntUnaryOperator)
        parallelSetAllA(arg0: array_t<integer_t>, arg1: object_t, cb: Callback<void>): void;
        parallelSetAll(arg0: array_t<integer_t>, arg1: object_t): void;
        parallelSetAllP(arg0: array_t<integer_t>, arg1: object_t): Promise<void>;
        // public static <T> void java.util.Arrays.parallelSort(T[],int,int,java.util.Comparator<? super T>)
        parallelSortA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Java.Comparator, cb: Callback<void>): void;
        parallelSort(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Java.Comparator): void;
        parallelSortP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Java.Comparator): Promise<void>;
        // public static <T> void java.util.Arrays.parallelSort(T[],int,int)
        parallelSortA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
        parallelSort(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
        parallelSortP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.parallelSort(short[],int,int)
        parallelSortA(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
        parallelSort(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t): void;
        parallelSortP(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.parallelSort(long[],int,int)
        parallelSortA(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
        parallelSort(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): void;
        parallelSortP(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.parallelSort(int[],int,int)
        parallelSortA(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
        parallelSort(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): void;
        parallelSortP(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.parallelSort(float[],int,int)
        parallelSortA(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
        parallelSort(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t): void;
        parallelSortP(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.parallelSort(double[],int,int)
        parallelSortA(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
        parallelSort(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): void;
        parallelSortP(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.parallelSort(char[],int,int)
        parallelSortA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
        parallelSort(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
        parallelSortP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.parallelSort(byte[],int,int)
        parallelSortA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
        parallelSort(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
        parallelSortP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static <T> void java.util.Arrays.parallelSort(T[],java.util.Comparator<? super T>)
        parallelSortA(arg0: object_array_t, arg1: Java.Comparator, cb: Callback<void>): void;
        parallelSort(arg0: object_array_t, arg1: Java.Comparator): void;
        parallelSortP(arg0: object_array_t, arg1: Java.Comparator): Promise<void>;
        // public static <T> void java.util.Arrays.parallelSort(T[])
        parallelSortA(arg0: object_array_t, cb: Callback<void>): void;
        parallelSort(arg0: object_array_t): void;
        parallelSortP(arg0: object_array_t): Promise<void>;
        // public static void java.util.Arrays.parallelSort(short[])
        parallelSortA(arg0: array_t<short_t>, cb: Callback<void>): void;
        parallelSort(arg0: array_t<short_t>): void;
        parallelSortP(arg0: array_t<short_t>): Promise<void>;
        // public static void java.util.Arrays.parallelSort(long[])
        parallelSortA(arg0: array_t<long_t>, cb: Callback<void>): void;
        parallelSort(arg0: array_t<long_t>): void;
        parallelSortP(arg0: array_t<long_t>): Promise<void>;
        // public static void java.util.Arrays.parallelSort(int[])
        parallelSortA(arg0: array_t<integer_t>, cb: Callback<void>): void;
        parallelSort(arg0: array_t<integer_t>): void;
        parallelSortP(arg0: array_t<integer_t>): Promise<void>;
        // public static void java.util.Arrays.parallelSort(float[])
        parallelSortA(arg0: array_t<float_t>, cb: Callback<void>): void;
        parallelSort(arg0: array_t<float_t>): void;
        parallelSortP(arg0: array_t<float_t>): Promise<void>;
        // public static void java.util.Arrays.parallelSort(double[])
        parallelSortA(arg0: array_t<double_t>, cb: Callback<void>): void;
        parallelSort(arg0: array_t<double_t>): void;
        parallelSortP(arg0: array_t<double_t>): Promise<void>;
        // public static void java.util.Arrays.parallelSort(char[])
        parallelSortA(arg0: object_array_t, cb: Callback<void>): void;
        parallelSort(arg0: object_array_t): void;
        parallelSortP(arg0: object_array_t): Promise<void>;
        // public static void java.util.Arrays.parallelSort(byte[])
        parallelSortA(arg0: object_array_t, cb: Callback<void>): void;
        parallelSort(arg0: object_array_t): void;
        parallelSortP(arg0: object_array_t): Promise<void>;
        // public static <T> void java.util.Arrays.setAll(T[],java.util.function.IntFunction<? extends T>)
        setAllA(arg0: object_array_t, arg1: object_t, cb: Callback<void>): void;
        setAll(arg0: object_array_t, arg1: object_t): void;
        setAllP(arg0: object_array_t, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.setAll(double[],java.util.function.IntToDoubleFunction)
        setAllA(arg0: array_t<double_t>, arg1: object_t, cb: Callback<void>): void;
        setAll(arg0: array_t<double_t>, arg1: object_t): void;
        setAllP(arg0: array_t<double_t>, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.setAll(long[],java.util.function.IntToLongFunction)
        setAllA(arg0: array_t<long_t>, arg1: object_t, cb: Callback<void>): void;
        setAll(arg0: array_t<long_t>, arg1: object_t): void;
        setAllP(arg0: array_t<long_t>, arg1: object_t): Promise<void>;
        // public static void java.util.Arrays.setAll(int[],java.util.function.IntUnaryOperator)
        setAllA(arg0: array_t<integer_t>, arg1: object_t, cb: Callback<void>): void;
        setAll(arg0: array_t<integer_t>, arg1: object_t): void;
        setAllP(arg0: array_t<integer_t>, arg1: object_t): Promise<void>;
        // public static <T> void java.util.Arrays.sort(T[],int,int,java.util.Comparator<? super T>)
        sortA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Java.Comparator, cb: Callback<void>): void;
        sort(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Java.Comparator): void;
        sortP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: Java.Comparator): Promise<void>;
        // public static void java.util.Arrays.sort(java.lang.Object[],int,int)
        sortA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
        sort(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
        sortP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.sort(short[],int,int)
        sortA(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
        sort(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t): void;
        sortP(arg0: array_t<short_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.sort(long[],int,int)
        sortA(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
        sort(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): void;
        sortP(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.sort(int[],int,int)
        sortA(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
        sort(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): void;
        sortP(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.sort(float[],int,int)
        sortA(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
        sort(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t): void;
        sortP(arg0: array_t<float_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.sort(double[],int,int)
        sortA(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
        sort(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): void;
        sortP(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.sort(char[],int,int)
        sortA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
        sort(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
        sortP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static void java.util.Arrays.sort(byte[],int,int)
        sortA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
        sort(arg0: object_array_t, arg1: integer_t, arg2: integer_t): void;
        sortP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static <T> void java.util.Arrays.sort(T[],java.util.Comparator<? super T>)
        sortA(arg0: object_array_t, arg1: Java.Comparator, cb: Callback<void>): void;
        sort(arg0: object_array_t, arg1: Java.Comparator): void;
        sortP(arg0: object_array_t, arg1: Java.Comparator): Promise<void>;
        // public static void java.util.Arrays.sort(java.lang.Object[])
        sortA(arg0: object_array_t, cb: Callback<void>): void;
        sort(arg0: object_array_t): void;
        sortP(arg0: object_array_t): Promise<void>;
        // public static void java.util.Arrays.sort(short[])
        sortA(arg0: array_t<short_t>, cb: Callback<void>): void;
        sort(arg0: array_t<short_t>): void;
        sortP(arg0: array_t<short_t>): Promise<void>;
        // public static void java.util.Arrays.sort(long[])
        sortA(arg0: array_t<long_t>, cb: Callback<void>): void;
        sort(arg0: array_t<long_t>): void;
        sortP(arg0: array_t<long_t>): Promise<void>;
        // public static void java.util.Arrays.sort(int[])
        sortA(arg0: array_t<integer_t>, cb: Callback<void>): void;
        sort(arg0: array_t<integer_t>): void;
        sortP(arg0: array_t<integer_t>): Promise<void>;
        // public static void java.util.Arrays.sort(float[])
        sortA(arg0: array_t<float_t>, cb: Callback<void>): void;
        sort(arg0: array_t<float_t>): void;
        sortP(arg0: array_t<float_t>): Promise<void>;
        // public static void java.util.Arrays.sort(double[])
        sortA(arg0: array_t<double_t>, cb: Callback<void>): void;
        sort(arg0: array_t<double_t>): void;
        sortP(arg0: array_t<double_t>): Promise<void>;
        // public static void java.util.Arrays.sort(char[])
        sortA(arg0: object_array_t, cb: Callback<void>): void;
        sort(arg0: object_array_t): void;
        sortP(arg0: object_array_t): Promise<void>;
        // public static void java.util.Arrays.sort(byte[])
        sortA(arg0: object_array_t, cb: Callback<void>): void;
        sort(arg0: object_array_t): void;
        sortP(arg0: object_array_t): Promise<void>;
        // public static <T> java.util.Spliterator<T> java.util.Arrays.spliterator(T[],int,int)
        spliteratorA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<Java.Spliterator>): void;
        spliterator(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Java.Spliterator;
        spliteratorP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<Java.Spliterator>;
        // public static java.util.Spliterator$OfDouble java.util.Arrays.spliterator(double[],int,int)
        spliteratorA(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, cb: Callback<Java.Spliterator$OfDouble>): void;
        spliterator(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): Java.Spliterator$OfDouble;
        spliteratorP(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): Promise<Java.Spliterator$OfDouble>;
        // public static java.util.Spliterator$OfLong java.util.Arrays.spliterator(long[],int,int)
        spliteratorA(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, cb: Callback<Java.Spliterator$OfLong>): void;
        spliterator(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): Java.Spliterator$OfLong;
        spliteratorP(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): Promise<Java.Spliterator$OfLong>;
        // public static java.util.Spliterator$OfInt java.util.Arrays.spliterator(int[],int,int)
        spliteratorA(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, cb: Callback<Java.Spliterator$OfInt>): void;
        spliterator(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Java.Spliterator$OfInt;
        spliteratorP(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<Java.Spliterator$OfInt>;
        // public static <T> java.util.Spliterator<T> java.util.Arrays.spliterator(T[])
        spliteratorA(arg0: object_array_t, cb: Callback<Java.Spliterator>): void;
        spliterator(arg0: object_array_t): Java.Spliterator;
        spliteratorP(arg0: object_array_t): Promise<Java.Spliterator>;
        // public static java.util.Spliterator$OfDouble java.util.Arrays.spliterator(double[])
        spliteratorA(arg0: array_t<double_t>, cb: Callback<Java.Spliterator$OfDouble>): void;
        spliterator(arg0: array_t<double_t>): Java.Spliterator$OfDouble;
        spliteratorP(arg0: array_t<double_t>): Promise<Java.Spliterator$OfDouble>;
        // public static java.util.Spliterator$OfLong java.util.Arrays.spliterator(long[])
        spliteratorA(arg0: array_t<long_t>, cb: Callback<Java.Spliterator$OfLong>): void;
        spliterator(arg0: array_t<long_t>): Java.Spliterator$OfLong;
        spliteratorP(arg0: array_t<long_t>): Promise<Java.Spliterator$OfLong>;
        // public static java.util.Spliterator$OfInt java.util.Arrays.spliterator(int[])
        spliteratorA(arg0: array_t<integer_t>, cb: Callback<Java.Spliterator$OfInt>): void;
        spliterator(arg0: array_t<integer_t>): Java.Spliterator$OfInt;
        spliteratorP(arg0: array_t<integer_t>): Promise<Java.Spliterator$OfInt>;
        // public static <T> java.util.stream.Stream<T> java.util.Arrays.stream(T[],int,int)
        streamA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, cb: Callback<object_t>): void;
        stream(arg0: object_array_t, arg1: integer_t, arg2: integer_t): object_t;
        streamP(arg0: object_array_t, arg1: integer_t, arg2: integer_t): Promise<object_t>;
        // public static java.util.stream.DoubleStream java.util.Arrays.stream(double[],int,int)
        streamA(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, cb: Callback<object_t>): void;
        stream(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): object_t;
        streamP(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t): Promise<object_t>;
        // public static java.util.stream.LongStream java.util.Arrays.stream(long[],int,int)
        streamA(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, cb: Callback<object_t>): void;
        stream(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): object_t;
        streamP(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t): Promise<object_t>;
        // public static java.util.stream.IntStream java.util.Arrays.stream(int[],int,int)
        streamA(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, cb: Callback<object_t>): void;
        stream(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): object_t;
        streamP(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t): Promise<object_t>;
        // public static <T> java.util.stream.Stream<T> java.util.Arrays.stream(T[])
        streamA(arg0: object_array_t, cb: Callback<object_t>): void;
        stream(arg0: object_array_t): object_t;
        streamP(arg0: object_array_t): Promise<object_t>;
        // public static java.util.stream.DoubleStream java.util.Arrays.stream(double[])
        streamA(arg0: array_t<double_t>, cb: Callback<object_t>): void;
        stream(arg0: array_t<double_t>): object_t;
        streamP(arg0: array_t<double_t>): Promise<object_t>;
        // public static java.util.stream.LongStream java.util.Arrays.stream(long[])
        streamA(arg0: array_t<long_t>, cb: Callback<object_t>): void;
        stream(arg0: array_t<long_t>): object_t;
        streamP(arg0: array_t<long_t>): Promise<object_t>;
        // public static java.util.stream.IntStream java.util.Arrays.stream(int[])
        streamA(arg0: array_t<integer_t>, cb: Callback<object_t>): void;
        stream(arg0: array_t<integer_t>): object_t;
        streamP(arg0: array_t<integer_t>): Promise<object_t>;
        // public static java.lang.String java.util.Arrays.toString(java.lang.Object[])
        toStringA(arg0: object_array_t, cb: Callback<string>): void;
        toString(arg0: object_array_t): string;
        toStringP(arg0: object_array_t): Promise<string>;
        // public static java.lang.String java.util.Arrays.toString(boolean[])
        toStringA(arg0: array_t<boolean_t>, cb: Callback<string>): void;
        toString(arg0: array_t<boolean_t>): string;
        toStringP(arg0: array_t<boolean_t>): Promise<string>;
        // public static java.lang.String java.util.Arrays.toString(short[])
        toStringA(arg0: array_t<short_t>, cb: Callback<string>): void;
        toString(arg0: array_t<short_t>): string;
        toStringP(arg0: array_t<short_t>): Promise<string>;
        // public static java.lang.String java.util.Arrays.toString(long[])
        toStringA(arg0: array_t<long_t>, cb: Callback<string>): void;
        toString(arg0: array_t<long_t>): string;
        toStringP(arg0: array_t<long_t>): Promise<string>;
        // public static java.lang.String java.util.Arrays.toString(int[])
        toStringA(arg0: array_t<integer_t>, cb: Callback<string>): void;
        toString(arg0: array_t<integer_t>): string;
        toStringP(arg0: array_t<integer_t>): Promise<string>;
        // public static java.lang.String java.util.Arrays.toString(float[])
        toStringA(arg0: array_t<float_t>, cb: Callback<string>): void;
        toString(arg0: array_t<float_t>): string;
        toStringP(arg0: array_t<float_t>): Promise<string>;
        // public static java.lang.String java.util.Arrays.toString(double[])
        toStringA(arg0: array_t<double_t>, cb: Callback<string>): void;
        toString(arg0: array_t<double_t>): string;
        toStringP(arg0: array_t<double_t>): Promise<string>;
        // public static java.lang.String java.util.Arrays.toString(char[])
        toStringA(arg0: object_array_t, cb: Callback<string>): void;
        toString(arg0: object_array_t): string;
        toStringP(arg0: object_array_t): Promise<string>;
        // public static java.lang.String java.util.Arrays.toString(byte[])
        toStringA(arg0: object_array_t, cb: Callback<string>): void;
        toString(arg0: object_array_t): string;
        toStringP(arg0: object_array_t): Promise<string>;
      }
    }
  }

  export module java.util {
    export interface Base64 extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Base64 {
      export interface Static {
        // public static java.util.Base64$Decoder java.util.Base64.getDecoder()
        getDecoderA( cb: Callback<Java.Base64$Decoder>): void;
        getDecoder(): Java.Base64$Decoder;
        getDecoderP(): Promise<Java.Base64$Decoder>;
        // public static java.util.Base64$Encoder java.util.Base64.getEncoder()
        getEncoderA( cb: Callback<Java.Base64$Encoder>): void;
        getEncoder(): Java.Base64$Encoder;
        getEncoderP(): Promise<Java.Base64$Encoder>;
        // public static java.util.Base64$Decoder java.util.Base64.getMimeDecoder()
        getMimeDecoderA( cb: Callback<Java.Base64$Decoder>): void;
        getMimeDecoder(): Java.Base64$Decoder;
        getMimeDecoderP(): Promise<Java.Base64$Decoder>;
        // public static java.util.Base64$Encoder java.util.Base64.getMimeEncoder(int,byte[])
        getMimeEncoderA(arg0: integer_t, arg1: object_array_t, cb: Callback<Java.Base64$Encoder>): void;
        getMimeEncoder(arg0: integer_t, arg1: object_array_t): Java.Base64$Encoder;
        getMimeEncoderP(arg0: integer_t, arg1: object_array_t): Promise<Java.Base64$Encoder>;
        // public static java.util.Base64$Encoder java.util.Base64.getMimeEncoder()
        getMimeEncoderA( cb: Callback<Java.Base64$Encoder>): void;
        getMimeEncoder(): Java.Base64$Encoder;
        getMimeEncoderP(): Promise<Java.Base64$Encoder>;
        // public static java.util.Base64$Decoder java.util.Base64.getUrlDecoder()
        getUrlDecoderA( cb: Callback<Java.Base64$Decoder>): void;
        getUrlDecoder(): Java.Base64$Decoder;
        getUrlDecoderP(): Promise<Java.Base64$Decoder>;
        // public static java.util.Base64$Encoder java.util.Base64.getUrlEncoder()
        getUrlEncoderA( cb: Callback<Java.Base64$Encoder>): void;
        getUrlEncoder(): Java.Base64$Encoder;
        getUrlEncoderP(): Promise<Java.Base64$Encoder>;
      }
    }
  }

  export module java.util {
    export interface Base64$Decoder extends Java.java.lang.Object {
      // public int java.util.Base64$Decoder.decode(byte[],byte[])
      decodeA(arg0: object_array_t, arg1: object_array_t, cb: Callback<number>): void;
      decode(arg0: object_array_t, arg1: object_array_t): number;
      decodeP(arg0: object_array_t, arg1: object_array_t): Promise<number>;
      // public java.nio.ByteBuffer java.util.Base64$Decoder.decode(java.nio.ByteBuffer)
      decodeA(arg0: object_t, cb: Callback<object_t>): void;
      decode(arg0: object_t): object_t;
      decodeP(arg0: object_t): Promise<object_t>;
      // public byte[] java.util.Base64$Decoder.decode(java.lang.String)
      decodeA(arg0: string_t, cb: Callback<object_t[]>): void;
      decode(arg0: string_t): object_t[];
      decodeP(arg0: string_t): Promise<object_t[]>;
      // public byte[] java.util.Base64$Decoder.decode(byte[])
      decodeA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      decode(arg0: object_array_t): object_t[];
      decodeP(arg0: object_array_t): Promise<object_t[]>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
      // public java.io.InputStream java.util.Base64$Decoder.wrap(java.io.InputStream)
      wrapA(arg0: object_t, cb: Callback<object_t>): void;
      wrap(arg0: object_t): object_t;
      wrapP(arg0: object_t): Promise<object_t>;
    }
    export module Base64$Decoder {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface Base64$Encoder extends Java.java.lang.Object {
      // public int java.util.Base64$Encoder.encode(byte[],byte[])
      encodeA(arg0: object_array_t, arg1: object_array_t, cb: Callback<number>): void;
      encode(arg0: object_array_t, arg1: object_array_t): number;
      encodeP(arg0: object_array_t, arg1: object_array_t): Promise<number>;
      // public java.nio.ByteBuffer java.util.Base64$Encoder.encode(java.nio.ByteBuffer)
      encodeA(arg0: object_t, cb: Callback<object_t>): void;
      encode(arg0: object_t): object_t;
      encodeP(arg0: object_t): Promise<object_t>;
      // public byte[] java.util.Base64$Encoder.encode(byte[])
      encodeA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      encode(arg0: object_array_t): object_t[];
      encodeP(arg0: object_array_t): Promise<object_t[]>;
      // public java.lang.String java.util.Base64$Encoder.encodeToString(byte[])
      encodeToStringA(arg0: object_array_t, cb: Callback<string>): void;
      encodeToString(arg0: object_array_t): string;
      encodeToStringP(arg0: object_array_t): Promise<string>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
      // public java.util.Base64$Encoder java.util.Base64$Encoder.withoutPadding()
      withoutPaddingA( cb: Callback<Java.Base64$Encoder>): void;
      withoutPadding(): Java.Base64$Encoder;
      withoutPaddingP(): Promise<Java.Base64$Encoder>;
      // public java.io.OutputStream java.util.Base64$Encoder.wrap(java.io.OutputStream)
      wrapA(arg0: object_t, cb: Callback<object_t>): void;
      wrap(arg0: object_t): object_t;
      wrapP(arg0: object_t): Promise<object_t>;
    }
    export module Base64$Encoder {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface BitSet extends Java.java.lang.Object {
      // public void java.util.BitSet.and(java.util.BitSet)
      andA(arg0: Java.BitSet, cb: Callback<void>): void;
      and(arg0: Java.BitSet): void;
      andP(arg0: Java.BitSet): Promise<void>;
      // public void java.util.BitSet.andNot(java.util.BitSet)
      andNotA(arg0: Java.BitSet, cb: Callback<void>): void;
      andNot(arg0: Java.BitSet): void;
      andNotP(arg0: Java.BitSet): Promise<void>;
      // public int java.util.BitSet.cardinality()
      cardinalityA( cb: Callback<number>): void;
      cardinality(): number;
      cardinalityP(): Promise<number>;
      // public void java.util.BitSet.clear(int,int)
      clearA(arg0: integer_t, arg1: integer_t, cb: Callback<void>): void;
      clear(arg0: integer_t, arg1: integer_t): void;
      clearP(arg0: integer_t, arg1: integer_t): Promise<void>;
      // public void java.util.BitSet.clear(int)
      clearA(arg0: integer_t, cb: Callback<void>): void;
      clear(arg0: integer_t): void;
      clearP(arg0: integer_t): Promise<void>;
      // public void java.util.BitSet.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.BitSet.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void java.util.BitSet.flip(int,int)
      flipA(arg0: integer_t, arg1: integer_t, cb: Callback<void>): void;
      flip(arg0: integer_t, arg1: integer_t): void;
      flipP(arg0: integer_t, arg1: integer_t): Promise<void>;
      // public void java.util.BitSet.flip(int)
      flipA(arg0: integer_t, cb: Callback<void>): void;
      flip(arg0: integer_t): void;
      flipP(arg0: integer_t): Promise<void>;
      // public java.util.BitSet java.util.BitSet.get(int,int)
      getA(arg0: integer_t, arg1: integer_t, cb: Callback<Java.BitSet>): void;
      get(arg0: integer_t, arg1: integer_t): Java.BitSet;
      getP(arg0: integer_t, arg1: integer_t): Promise<Java.BitSet>;
      // public boolean java.util.BitSet.get(int)
      getA(arg0: integer_t, cb: Callback<boolean>): void;
      get(arg0: integer_t): boolean;
      getP(arg0: integer_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean java.util.BitSet.intersects(java.util.BitSet)
      intersectsA(arg0: Java.BitSet, cb: Callback<boolean>): void;
      intersects(arg0: Java.BitSet): boolean;
      intersectsP(arg0: Java.BitSet): Promise<boolean>;
      // public boolean java.util.BitSet.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public int java.util.BitSet.length()
      lengthA( cb: Callback<number>): void;
      length(): number;
      lengthP(): Promise<number>;
      // public int java.util.BitSet.nextClearBit(int)
      nextClearBitA(arg0: integer_t, cb: Callback<number>): void;
      nextClearBit(arg0: integer_t): number;
      nextClearBitP(arg0: integer_t): Promise<number>;
      // public int java.util.BitSet.nextSetBit(int)
      nextSetBitA(arg0: integer_t, cb: Callback<number>): void;
      nextSetBit(arg0: integer_t): number;
      nextSetBitP(arg0: integer_t): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.util.BitSet.or(java.util.BitSet)
      orA(arg0: Java.BitSet, cb: Callback<void>): void;
      or(arg0: Java.BitSet): void;
      orP(arg0: Java.BitSet): Promise<void>;
      // public int java.util.BitSet.previousClearBit(int)
      previousClearBitA(arg0: integer_t, cb: Callback<number>): void;
      previousClearBit(arg0: integer_t): number;
      previousClearBitP(arg0: integer_t): Promise<number>;
      // public int java.util.BitSet.previousSetBit(int)
      previousSetBitA(arg0: integer_t, cb: Callback<number>): void;
      previousSetBit(arg0: integer_t): number;
      previousSetBitP(arg0: integer_t): Promise<number>;
      // public void java.util.BitSet.set(int,int,boolean)
      setA(arg0: integer_t, arg1: integer_t, arg2: boolean_t, cb: Callback<void>): void;
      set(arg0: integer_t, arg1: integer_t, arg2: boolean_t): void;
      setP(arg0: integer_t, arg1: integer_t, arg2: boolean_t): Promise<void>;
      // public void java.util.BitSet.set(int,boolean)
      setA(arg0: integer_t, arg1: boolean_t, cb: Callback<void>): void;
      set(arg0: integer_t, arg1: boolean_t): void;
      setP(arg0: integer_t, arg1: boolean_t): Promise<void>;
      // public void java.util.BitSet.set(int,int)
      setA(arg0: integer_t, arg1: integer_t, cb: Callback<void>): void;
      set(arg0: integer_t, arg1: integer_t): void;
      setP(arg0: integer_t, arg1: integer_t): Promise<void>;
      // public void java.util.BitSet.set(int)
      setA(arg0: integer_t, cb: Callback<void>): void;
      set(arg0: integer_t): void;
      setP(arg0: integer_t): Promise<void>;
      // public int java.util.BitSet.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public java.util.stream.IntStream java.util.BitSet.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public byte[] java.util.BitSet.toByteArray()
      toByteArrayA( cb: Callback<object_t[]>): void;
      toByteArray(): object_t[];
      toByteArrayP(): Promise<object_t[]>;
      // public long[] java.util.BitSet.toLongArray()
      toLongArrayA( cb: Callback<longValue_t[]>): void;
      toLongArray(): longValue_t[];
      toLongArrayP(): Promise<longValue_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
      // public void java.util.BitSet.xor(java.util.BitSet)
      xorA(arg0: Java.BitSet, cb: Callback<void>): void;
      xor(arg0: Java.BitSet): void;
      xorP(arg0: Java.BitSet): Promise<void>;
    }
    export module BitSet {
      export interface Static {
        new (arg0: integer_t): java.util.BitSet;
        new (): java.util.BitSet;
        // public static java.util.BitSet java.util.BitSet.valueOf(java.nio.LongBuffer)
        valueOfA(arg0: object_t, cb: Callback<Java.BitSet>): void;
        valueOf(arg0: object_t): Java.BitSet;
        valueOfP(arg0: object_t): Promise<Java.BitSet>;
        // public static java.util.BitSet java.util.BitSet.valueOf(java.nio.ByteBuffer)
        valueOfA(arg0: object_t, cb: Callback<Java.BitSet>): void;
        valueOf(arg0: object_t): Java.BitSet;
        valueOfP(arg0: object_t): Promise<Java.BitSet>;
        // public static java.util.BitSet java.util.BitSet.valueOf(long[])
        valueOfA(arg0: array_t<long_t>, cb: Callback<Java.BitSet>): void;
        valueOf(arg0: array_t<long_t>): Java.BitSet;
        valueOfP(arg0: array_t<long_t>): Promise<Java.BitSet>;
        // public static java.util.BitSet java.util.BitSet.valueOf(byte[])
        valueOfA(arg0: object_array_t, cb: Callback<Java.BitSet>): void;
        valueOf(arg0: object_array_t): Java.BitSet;
        valueOfP(arg0: object_array_t): Promise<Java.BitSet>;
      }
    }
  }

  export module java.util {
    export interface Calendar extends Java.java.lang.Object {
      // public abstract void java.util.Calendar.add(int,int)
      addA(arg0: integer_t, arg1: integer_t, cb: Callback<void>): void;
      add(arg0: integer_t, arg1: integer_t): void;
      addP(arg0: integer_t, arg1: integer_t): Promise<void>;
      // public boolean java.util.Calendar.after(java.lang.Object)
      afterA(arg0: object_t, cb: Callback<boolean>): void;
      after(arg0: object_t): boolean;
      afterP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.Calendar.before(java.lang.Object)
      beforeA(arg0: object_t, cb: Callback<boolean>): void;
      before(arg0: object_t): boolean;
      beforeP(arg0: object_t): Promise<boolean>;
      // public final void java.util.Calendar.clear(int)
      clearA(arg0: integer_t, cb: Callback<void>): void;
      clear(arg0: integer_t): void;
      clearP(arg0: integer_t): Promise<void>;
      // public final void java.util.Calendar.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.Calendar.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public int java.util.Calendar.compareTo(java.util.Calendar)
      compareToA(arg0: Java.Calendar, cb: Callback<number>): void;
      compareTo(arg0: Java.Calendar): number;
      compareToP(arg0: Java.Calendar): Promise<number>;
      // public int java.util.Calendar.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public int java.util.Calendar.get(int)
      getA(arg0: integer_t, cb: Callback<number>): void;
      get(arg0: integer_t): number;
      getP(arg0: integer_t): Promise<number>;
      // public int java.util.Calendar.getActualMaximum(int)
      getActualMaximumA(arg0: integer_t, cb: Callback<number>): void;
      getActualMaximum(arg0: integer_t): number;
      getActualMaximumP(arg0: integer_t): Promise<number>;
      // public int java.util.Calendar.getActualMinimum(int)
      getActualMinimumA(arg0: integer_t, cb: Callback<number>): void;
      getActualMinimum(arg0: integer_t): number;
      getActualMinimumP(arg0: integer_t): Promise<number>;
      // public java.lang.String java.util.Calendar.getCalendarType()
      getCalendarTypeA( cb: Callback<string>): void;
      getCalendarType(): string;
      getCalendarTypeP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.util.Calendar.getDisplayName(int,int,java.util.Locale)
      getDisplayNameA(arg0: integer_t, arg1: integer_t, arg2: Java.Locale, cb: Callback<string>): void;
      getDisplayName(arg0: integer_t, arg1: integer_t, arg2: Java.Locale): string;
      getDisplayNameP(arg0: integer_t, arg1: integer_t, arg2: Java.Locale): Promise<string>;
      // public java.util.Map<java.lang.String, java.lang.Integer> java.util.Calendar.getDisplayNames(int,int,java.util.Locale)
      getDisplayNamesA(arg0: integer_t, arg1: integer_t, arg2: Java.Locale, cb: Callback<Java.Map>): void;
      getDisplayNames(arg0: integer_t, arg1: integer_t, arg2: Java.Locale): Java.Map;
      getDisplayNamesP(arg0: integer_t, arg1: integer_t, arg2: Java.Locale): Promise<Java.Map>;
      // public int java.util.Calendar.getFirstDayOfWeek()
      getFirstDayOfWeekA( cb: Callback<number>): void;
      getFirstDayOfWeek(): number;
      getFirstDayOfWeekP(): Promise<number>;
      // public abstract int java.util.Calendar.getGreatestMinimum(int)
      getGreatestMinimumA(arg0: integer_t, cb: Callback<number>): void;
      getGreatestMinimum(arg0: integer_t): number;
      getGreatestMinimumP(arg0: integer_t): Promise<number>;
      // public abstract int java.util.Calendar.getLeastMaximum(int)
      getLeastMaximumA(arg0: integer_t, cb: Callback<number>): void;
      getLeastMaximum(arg0: integer_t): number;
      getLeastMaximumP(arg0: integer_t): Promise<number>;
      // public abstract int java.util.Calendar.getMaximum(int)
      getMaximumA(arg0: integer_t, cb: Callback<number>): void;
      getMaximum(arg0: integer_t): number;
      getMaximumP(arg0: integer_t): Promise<number>;
      // public int java.util.Calendar.getMinimalDaysInFirstWeek()
      getMinimalDaysInFirstWeekA( cb: Callback<number>): void;
      getMinimalDaysInFirstWeek(): number;
      getMinimalDaysInFirstWeekP(): Promise<number>;
      // public abstract int java.util.Calendar.getMinimum(int)
      getMinimumA(arg0: integer_t, cb: Callback<number>): void;
      getMinimum(arg0: integer_t): number;
      getMinimumP(arg0: integer_t): Promise<number>;
      // public final java.util.Date java.util.Calendar.getTime()
      getTimeA( cb: Callback<Java.Date>): void;
      getTime(): Java.Date;
      getTimeP(): Promise<Java.Date>;
      // public long java.util.Calendar.getTimeInMillis()
      getTimeInMillisA( cb: Callback<longValue_t>): void;
      getTimeInMillis(): longValue_t;
      getTimeInMillisP(): Promise<longValue_t>;
      // public java.util.TimeZone java.util.Calendar.getTimeZone()
      getTimeZoneA( cb: Callback<Java.TimeZone>): void;
      getTimeZone(): Java.TimeZone;
      getTimeZoneP(): Promise<Java.TimeZone>;
      // public int java.util.Calendar.getWeeksInWeekYear()
      getWeeksInWeekYearA( cb: Callback<number>): void;
      getWeeksInWeekYear(): number;
      getWeeksInWeekYearP(): Promise<number>;
      // public int java.util.Calendar.getWeekYear()
      getWeekYearA( cb: Callback<number>): void;
      getWeekYear(): number;
      getWeekYearP(): Promise<number>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean java.util.Calendar.isLenient()
      isLenientA( cb: Callback<boolean>): void;
      isLenient(): boolean;
      isLenientP(): Promise<boolean>;
      // public final boolean java.util.Calendar.isSet(int)
      isSetA(arg0: integer_t, cb: Callback<boolean>): void;
      isSet(arg0: integer_t): boolean;
      isSetP(arg0: integer_t): Promise<boolean>;
      // public boolean java.util.Calendar.isWeekDateSupported()
      isWeekDateSupportedA( cb: Callback<boolean>): void;
      isWeekDateSupported(): boolean;
      isWeekDateSupportedP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract void java.util.Calendar.roll(int,boolean)
      rollA(arg0: integer_t, arg1: boolean_t, cb: Callback<void>): void;
      roll(arg0: integer_t, arg1: boolean_t): void;
      rollP(arg0: integer_t, arg1: boolean_t): Promise<void>;
      // public void java.util.Calendar.roll(int,int)
      rollA(arg0: integer_t, arg1: integer_t, cb: Callback<void>): void;
      roll(arg0: integer_t, arg1: integer_t): void;
      rollP(arg0: integer_t, arg1: integer_t): Promise<void>;
      // public final void java.util.Calendar.set(int,int,int,int,int,int)
      setA(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, cb: Callback<void>): void;
      set(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): void;
      setP(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): Promise<void>;
      // public final void java.util.Calendar.set(int,int,int,int,int)
      setA(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, cb: Callback<void>): void;
      set(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): void;
      setP(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): Promise<void>;
      // public final void java.util.Calendar.set(int,int,int)
      setA(arg0: integer_t, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
      set(arg0: integer_t, arg1: integer_t, arg2: integer_t): void;
      setP(arg0: integer_t, arg1: integer_t, arg2: integer_t): Promise<void>;
      // public void java.util.Calendar.set(int,int)
      setA(arg0: integer_t, arg1: integer_t, cb: Callback<void>): void;
      set(arg0: integer_t, arg1: integer_t): void;
      setP(arg0: integer_t, arg1: integer_t): Promise<void>;
      // public void java.util.Calendar.setFirstDayOfWeek(int)
      setFirstDayOfWeekA(arg0: integer_t, cb: Callback<void>): void;
      setFirstDayOfWeek(arg0: integer_t): void;
      setFirstDayOfWeekP(arg0: integer_t): Promise<void>;
      // public void java.util.Calendar.setLenient(boolean)
      setLenientA(arg0: boolean_t, cb: Callback<void>): void;
      setLenient(arg0: boolean_t): void;
      setLenientP(arg0: boolean_t): Promise<void>;
      // public void java.util.Calendar.setMinimalDaysInFirstWeek(int)
      setMinimalDaysInFirstWeekA(arg0: integer_t, cb: Callback<void>): void;
      setMinimalDaysInFirstWeek(arg0: integer_t): void;
      setMinimalDaysInFirstWeekP(arg0: integer_t): Promise<void>;
      // public final void java.util.Calendar.setTime(java.util.Date)
      setTimeA(arg0: Java.Date, cb: Callback<void>): void;
      setTime(arg0: Java.Date): void;
      setTimeP(arg0: Java.Date): Promise<void>;
      // public void java.util.Calendar.setTimeInMillis(long)
      setTimeInMillisA(arg0: long_t, cb: Callback<void>): void;
      setTimeInMillis(arg0: long_t): void;
      setTimeInMillisP(arg0: long_t): Promise<void>;
      // public void java.util.Calendar.setTimeZone(java.util.TimeZone)
      setTimeZoneA(arg0: Java.TimeZone, cb: Callback<void>): void;
      setTimeZone(arg0: Java.TimeZone): void;
      setTimeZoneP(arg0: Java.TimeZone): Promise<void>;
      // public void java.util.Calendar.setWeekDate(int,int,int)
      setWeekDateA(arg0: integer_t, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
      setWeekDate(arg0: integer_t, arg1: integer_t, arg2: integer_t): void;
      setWeekDateP(arg0: integer_t, arg1: integer_t, arg2: integer_t): Promise<void>;
      // public final java.time.Instant java.util.Calendar.toInstant()
      toInstantA( cb: Callback<object_t>): void;
      toInstant(): object_t;
      toInstantP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Calendar {
      export interface Static {
        ERA: number;
        YEAR: number;
        MONTH: number;
        WEEK_OF_YEAR: number;
        WEEK_OF_MONTH: number;
        DATE: number;
        DAY_OF_MONTH: number;
        DAY_OF_YEAR: number;
        DAY_OF_WEEK: number;
        DAY_OF_WEEK_IN_MONTH: number;
        AM_PM: number;
        HOUR: number;
        HOUR_OF_DAY: number;
        MINUTE: number;
        SECOND: number;
        MILLISECOND: number;
        ZONE_OFFSET: number;
        DST_OFFSET: number;
        FIELD_COUNT: number;
        SUNDAY: number;
        MONDAY: number;
        TUESDAY: number;
        WEDNESDAY: number;
        THURSDAY: number;
        FRIDAY: number;
        SATURDAY: number;
        JANUARY: number;
        FEBRUARY: number;
        MARCH: number;
        APRIL: number;
        MAY: number;
        JUNE: number;
        JULY: number;
        AUGUST: number;
        SEPTEMBER: number;
        OCTOBER: number;
        NOVEMBER: number;
        DECEMBER: number;
        UNDECIMBER: number;
        AM: number;
        PM: number;
        ALL_STYLES: number;
        SHORT: number;
        LONG: number;
        NARROW_FORMAT: number;
        NARROW_STANDALONE: number;
        SHORT_FORMAT: number;
        LONG_FORMAT: number;
        SHORT_STANDALONE: number;
        LONG_STANDALONE: number;
        // public static java.util.Set<java.lang.String> java.util.Calendar.getAvailableCalendarTypes()
        getAvailableCalendarTypesA( cb: Callback<Java.Set>): void;
        getAvailableCalendarTypes(): Java.Set;
        getAvailableCalendarTypesP(): Promise<Java.Set>;
        // public static synchronized java.util.Locale[] java.util.Calendar.getAvailableLocales()
        getAvailableLocalesA( cb: Callback<Java.Locale[]>): void;
        getAvailableLocales(): Java.Locale[];
        getAvailableLocalesP(): Promise<Java.Locale[]>;
        // public static java.util.Calendar java.util.Calendar.getInstance(java.util.TimeZone,java.util.Locale)
        getInstanceA(arg0: Java.TimeZone, arg1: Java.Locale, cb: Callback<Java.Calendar>): void;
        getInstance(arg0: Java.TimeZone, arg1: Java.Locale): Java.Calendar;
        getInstanceP(arg0: Java.TimeZone, arg1: Java.Locale): Promise<Java.Calendar>;
        // public static java.util.Calendar java.util.Calendar.getInstance(java.util.TimeZone)
        getInstanceA(arg0: Java.TimeZone, cb: Callback<Java.Calendar>): void;
        getInstance(arg0: Java.TimeZone): Java.Calendar;
        getInstanceP(arg0: Java.TimeZone): Promise<Java.Calendar>;
        // public static java.util.Calendar java.util.Calendar.getInstance(java.util.Locale)
        getInstanceA(arg0: Java.Locale, cb: Callback<Java.Calendar>): void;
        getInstance(arg0: Java.Locale): Java.Calendar;
        getInstanceP(arg0: Java.Locale): Promise<Java.Calendar>;
        // public static java.util.Calendar java.util.Calendar.getInstance()
        getInstanceA( cb: Callback<Java.Calendar>): void;
        getInstance(): Java.Calendar;
        getInstanceP(): Promise<Java.Calendar>;
      }
    }
  }

  export module java.util {
    export interface Calendar$Builder extends Java.java.lang.Object {
      // public java.util.Calendar java.util.Calendar$Builder.build()
      buildA( cb: Callback<Java.Calendar>): void;
      build(): Java.Calendar;
      buildP(): Promise<Java.Calendar>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.util.Calendar$Builder java.util.Calendar$Builder.set(int,int)
      setA(arg0: integer_t, arg1: integer_t, cb: Callback<Java.Calendar$Builder>): void;
      set(arg0: integer_t, arg1: integer_t): Java.Calendar$Builder;
      setP(arg0: integer_t, arg1: integer_t): Promise<Java.Calendar$Builder>;
      // public java.util.Calendar$Builder java.util.Calendar$Builder.setCalendarType(java.lang.String)
      setCalendarTypeA(arg0: string_t, cb: Callback<Java.Calendar$Builder>): void;
      setCalendarType(arg0: string_t): Java.Calendar$Builder;
      setCalendarTypeP(arg0: string_t): Promise<Java.Calendar$Builder>;
      // public java.util.Calendar$Builder java.util.Calendar$Builder.setDate(int,int,int)
      setDateA(arg0: integer_t, arg1: integer_t, arg2: integer_t, cb: Callback<Java.Calendar$Builder>): void;
      setDate(arg0: integer_t, arg1: integer_t, arg2: integer_t): Java.Calendar$Builder;
      setDateP(arg0: integer_t, arg1: integer_t, arg2: integer_t): Promise<Java.Calendar$Builder>;
      // public java.util.Calendar$Builder java.util.Calendar$Builder.setFields(int...)
      setFieldsA(arg0: array_t<integer_t>, cb: Callback<Java.Calendar$Builder>): void;
      setFields(...arg0: integer_t[]): Java.Calendar$Builder;
      setFields(arg0: array_t<integer_t>): Java.Calendar$Builder;
      setFieldsP(...arg0: integer_t[]): Promise<Java.Calendar$Builder>;
      setFieldsP(arg0: array_t<integer_t>): Promise<Java.Calendar$Builder>;
      // public java.util.Calendar$Builder java.util.Calendar$Builder.setInstant(java.util.Date)
      setInstantA(arg0: Java.Date, cb: Callback<Java.Calendar$Builder>): void;
      setInstant(arg0: Java.Date): Java.Calendar$Builder;
      setInstantP(arg0: Java.Date): Promise<Java.Calendar$Builder>;
      // public java.util.Calendar$Builder java.util.Calendar$Builder.setInstant(long)
      setInstantA(arg0: long_t, cb: Callback<Java.Calendar$Builder>): void;
      setInstant(arg0: long_t): Java.Calendar$Builder;
      setInstantP(arg0: long_t): Promise<Java.Calendar$Builder>;
      // public java.util.Calendar$Builder java.util.Calendar$Builder.setLenient(boolean)
      setLenientA(arg0: boolean_t, cb: Callback<Java.Calendar$Builder>): void;
      setLenient(arg0: boolean_t): Java.Calendar$Builder;
      setLenientP(arg0: boolean_t): Promise<Java.Calendar$Builder>;
      // public java.util.Calendar$Builder java.util.Calendar$Builder.setLocale(java.util.Locale)
      setLocaleA(arg0: Java.Locale, cb: Callback<Java.Calendar$Builder>): void;
      setLocale(arg0: Java.Locale): Java.Calendar$Builder;
      setLocaleP(arg0: Java.Locale): Promise<Java.Calendar$Builder>;
      // public java.util.Calendar$Builder java.util.Calendar$Builder.setTimeOfDay(int,int,int,int)
      setTimeOfDayA(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<Java.Calendar$Builder>): void;
      setTimeOfDay(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): Java.Calendar$Builder;
      setTimeOfDayP(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<Java.Calendar$Builder>;
      // public java.util.Calendar$Builder java.util.Calendar$Builder.setTimeOfDay(int,int,int)
      setTimeOfDayA(arg0: integer_t, arg1: integer_t, arg2: integer_t, cb: Callback<Java.Calendar$Builder>): void;
      setTimeOfDay(arg0: integer_t, arg1: integer_t, arg2: integer_t): Java.Calendar$Builder;
      setTimeOfDayP(arg0: integer_t, arg1: integer_t, arg2: integer_t): Promise<Java.Calendar$Builder>;
      // public java.util.Calendar$Builder java.util.Calendar$Builder.setTimeZone(java.util.TimeZone)
      setTimeZoneA(arg0: Java.TimeZone, cb: Callback<Java.Calendar$Builder>): void;
      setTimeZone(arg0: Java.TimeZone): Java.Calendar$Builder;
      setTimeZoneP(arg0: Java.TimeZone): Promise<Java.Calendar$Builder>;
      // public java.util.Calendar$Builder java.util.Calendar$Builder.setWeekDate(int,int,int)
      setWeekDateA(arg0: integer_t, arg1: integer_t, arg2: integer_t, cb: Callback<Java.Calendar$Builder>): void;
      setWeekDate(arg0: integer_t, arg1: integer_t, arg2: integer_t): Java.Calendar$Builder;
      setWeekDateP(arg0: integer_t, arg1: integer_t, arg2: integer_t): Promise<Java.Calendar$Builder>;
      // public java.util.Calendar$Builder java.util.Calendar$Builder.setWeekDefinition(int,int)
      setWeekDefinitionA(arg0: integer_t, arg1: integer_t, cb: Callback<Java.Calendar$Builder>): void;
      setWeekDefinition(arg0: integer_t, arg1: integer_t): Java.Calendar$Builder;
      setWeekDefinitionP(arg0: integer_t, arg1: integer_t): Promise<Java.Calendar$Builder>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Calendar$Builder {
      export interface Static {
        new (): java.util.Calendar$Builder;
      }
    }
  }

  export module java.util {
    export interface Collection extends Java.java.lang.Object {
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module Collection {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface Collections extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Collections {
      export interface Static {
        EMPTY_SET: Java.Set;
        EMPTY_LIST: Java.List;
        EMPTY_MAP: Java.Map;
        // public static <T> boolean java.util.Collections.addAll(java.util.Collection<? super T>,T...)
        addAllA(arg0: Java.Collection, arg1: object_array_t, cb: Callback<boolean>): void;
        addAll(arg0: Java.Collection, ...arg1: object_t[]): boolean;
        addAll(arg0: Java.Collection, arg1: object_array_t): boolean;
        addAllP(arg0: Java.Collection, ...arg1: object_t[]): Promise<boolean>;
        addAllP(arg0: Java.Collection, arg1: object_array_t): Promise<boolean>;
        // public static <T> java.util.Queue<T> java.util.Collections.asLifoQueue(java.util.Deque<T>)
        asLifoQueueA(arg0: Java.Deque, cb: Callback<Java.Queue>): void;
        asLifoQueue(arg0: Java.Deque): Java.Queue;
        asLifoQueueP(arg0: Java.Deque): Promise<Java.Queue>;
        // public static <T> int java.util.Collections.binarySearch(java.util.List<? extends T>,T,java.util.Comparator<? super T>)
        binarySearchA(arg0: Java.List, arg1: object_t, arg2: Java.Comparator, cb: Callback<number>): void;
        binarySearch(arg0: Java.List, arg1: object_t, arg2: Java.Comparator): number;
        binarySearchP(arg0: Java.List, arg1: object_t, arg2: Java.Comparator): Promise<number>;
        // public static <T> int java.util.Collections.binarySearch(java.util.List<? extends java.lang.Comparable<? super T>>,T)
        binarySearchA(arg0: Java.List, arg1: object_t, cb: Callback<number>): void;
        binarySearch(arg0: Java.List, arg1: object_t): number;
        binarySearchP(arg0: Java.List, arg1: object_t): Promise<number>;
        // public static <E> java.util.Collection<E> java.util.Collections.checkedCollection(java.util.Collection<E>,java.lang.Class<E>)
        checkedCollectionA(arg0: Java.Collection, arg1: Java.Class, cb: Callback<Java.Collection>): void;
        checkedCollection(arg0: Java.Collection, arg1: Java.Class): Java.Collection;
        checkedCollectionP(arg0: Java.Collection, arg1: Java.Class): Promise<Java.Collection>;
        // public static <E> java.util.List<E> java.util.Collections.checkedList(java.util.List<E>,java.lang.Class<E>)
        checkedListA(arg0: Java.List, arg1: Java.Class, cb: Callback<Java.List>): void;
        checkedList(arg0: Java.List, arg1: Java.Class): Java.List;
        checkedListP(arg0: Java.List, arg1: Java.Class): Promise<Java.List>;
        // public static <K,V> java.util.Map<K, V> java.util.Collections.checkedMap(java.util.Map<K, V>,java.lang.Class<K>,java.lang.Class<V>)
        checkedMapA(arg0: Java.Map, arg1: Java.Class, arg2: Java.Class, cb: Callback<Java.Map>): void;
        checkedMap(arg0: Java.Map, arg1: Java.Class, arg2: Java.Class): Java.Map;
        checkedMapP(arg0: Java.Map, arg1: Java.Class, arg2: Java.Class): Promise<Java.Map>;
        // public static <K,V> java.util.NavigableMap<K, V> java.util.Collections.checkedNavigableMap(java.util.NavigableMap<K, V>,java.lang.Class<K>,java.lang.Class<V>)
        checkedNavigableMapA(arg0: Java.NavigableMap, arg1: Java.Class, arg2: Java.Class, cb: Callback<Java.NavigableMap>): void;
        checkedNavigableMap(arg0: Java.NavigableMap, arg1: Java.Class, arg2: Java.Class): Java.NavigableMap;
        checkedNavigableMapP(arg0: Java.NavigableMap, arg1: Java.Class, arg2: Java.Class): Promise<Java.NavigableMap>;
        // public static <E> java.util.NavigableSet<E> java.util.Collections.checkedNavigableSet(java.util.NavigableSet<E>,java.lang.Class<E>)
        checkedNavigableSetA(arg0: Java.NavigableSet, arg1: Java.Class, cb: Callback<Java.NavigableSet>): void;
        checkedNavigableSet(arg0: Java.NavigableSet, arg1: Java.Class): Java.NavigableSet;
        checkedNavigableSetP(arg0: Java.NavigableSet, arg1: Java.Class): Promise<Java.NavigableSet>;
        // public static <E> java.util.Queue<E> java.util.Collections.checkedQueue(java.util.Queue<E>,java.lang.Class<E>)
        checkedQueueA(arg0: Java.Queue, arg1: Java.Class, cb: Callback<Java.Queue>): void;
        checkedQueue(arg0: Java.Queue, arg1: Java.Class): Java.Queue;
        checkedQueueP(arg0: Java.Queue, arg1: Java.Class): Promise<Java.Queue>;
        // public static <E> java.util.Set<E> java.util.Collections.checkedSet(java.util.Set<E>,java.lang.Class<E>)
        checkedSetA(arg0: Java.Set, arg1: Java.Class, cb: Callback<Java.Set>): void;
        checkedSet(arg0: Java.Set, arg1: Java.Class): Java.Set;
        checkedSetP(arg0: Java.Set, arg1: Java.Class): Promise<Java.Set>;
        // public static <K,V> java.util.SortedMap<K, V> java.util.Collections.checkedSortedMap(java.util.SortedMap<K, V>,java.lang.Class<K>,java.lang.Class<V>)
        checkedSortedMapA(arg0: Java.SortedMap, arg1: Java.Class, arg2: Java.Class, cb: Callback<Java.SortedMap>): void;
        checkedSortedMap(arg0: Java.SortedMap, arg1: Java.Class, arg2: Java.Class): Java.SortedMap;
        checkedSortedMapP(arg0: Java.SortedMap, arg1: Java.Class, arg2: Java.Class): Promise<Java.SortedMap>;
        // public static <E> java.util.SortedSet<E> java.util.Collections.checkedSortedSet(java.util.SortedSet<E>,java.lang.Class<E>)
        checkedSortedSetA(arg0: Java.SortedSet, arg1: Java.Class, cb: Callback<Java.SortedSet>): void;
        checkedSortedSet(arg0: Java.SortedSet, arg1: Java.Class): Java.SortedSet;
        checkedSortedSetP(arg0: Java.SortedSet, arg1: Java.Class): Promise<Java.SortedSet>;
        // public static <T> void java.util.Collections.copy(java.util.List<? super T>,java.util.List<? extends T>)
        copyA(arg0: Java.List, arg1: Java.List, cb: Callback<void>): void;
        copy(arg0: Java.List, arg1: Java.List): void;
        copyP(arg0: Java.List, arg1: Java.List): Promise<void>;
        // public static boolean java.util.Collections.disjoint(java.util.Collection<?>,java.util.Collection<?>)
        disjointA(arg0: Java.Collection, arg1: Java.Collection, cb: Callback<boolean>): void;
        disjoint(arg0: Java.Collection, arg1: Java.Collection): boolean;
        disjointP(arg0: Java.Collection, arg1: Java.Collection): Promise<boolean>;
        // public static <T> java.util.Enumeration<T> java.util.Collections.emptyEnumeration()
        emptyEnumerationA( cb: Callback<Java.Enumeration>): void;
        emptyEnumeration(): Java.Enumeration;
        emptyEnumerationP(): Promise<Java.Enumeration>;
        // public static <T> java.util.Iterator<T> java.util.Collections.emptyIterator()
        emptyIteratorA( cb: Callback<Java.Iterator>): void;
        emptyIterator(): Java.Iterator;
        emptyIteratorP(): Promise<Java.Iterator>;
        // public static final <T> java.util.List<T> java.util.Collections.emptyList()
        emptyListA( cb: Callback<Java.List>): void;
        emptyList(): Java.List;
        emptyListP(): Promise<Java.List>;
        // public static <T> java.util.ListIterator<T> java.util.Collections.emptyListIterator()
        emptyListIteratorA( cb: Callback<Java.ListIterator>): void;
        emptyListIterator(): Java.ListIterator;
        emptyListIteratorP(): Promise<Java.ListIterator>;
        // public static final <K,V> java.util.Map<K, V> java.util.Collections.emptyMap()
        emptyMapA( cb: Callback<Java.Map>): void;
        emptyMap(): Java.Map;
        emptyMapP(): Promise<Java.Map>;
        // public static final <K,V> java.util.NavigableMap<K, V> java.util.Collections.emptyNavigableMap()
        emptyNavigableMapA( cb: Callback<Java.NavigableMap>): void;
        emptyNavigableMap(): Java.NavigableMap;
        emptyNavigableMapP(): Promise<Java.NavigableMap>;
        // public static <E> java.util.NavigableSet<E> java.util.Collections.emptyNavigableSet()
        emptyNavigableSetA( cb: Callback<Java.NavigableSet>): void;
        emptyNavigableSet(): Java.NavigableSet;
        emptyNavigableSetP(): Promise<Java.NavigableSet>;
        // public static final <T> java.util.Set<T> java.util.Collections.emptySet()
        emptySetA( cb: Callback<Java.Set>): void;
        emptySet(): Java.Set;
        emptySetP(): Promise<Java.Set>;
        // public static final <K,V> java.util.SortedMap<K, V> java.util.Collections.emptySortedMap()
        emptySortedMapA( cb: Callback<Java.SortedMap>): void;
        emptySortedMap(): Java.SortedMap;
        emptySortedMapP(): Promise<Java.SortedMap>;
        // public static <E> java.util.SortedSet<E> java.util.Collections.emptySortedSet()
        emptySortedSetA( cb: Callback<Java.SortedSet>): void;
        emptySortedSet(): Java.SortedSet;
        emptySortedSetP(): Promise<Java.SortedSet>;
        // public static <T> java.util.Enumeration<T> java.util.Collections.enumeration(java.util.Collection<T>)
        enumerationA(arg0: Java.Collection, cb: Callback<Java.Enumeration>): void;
        enumeration(arg0: Java.Collection): Java.Enumeration;
        enumerationP(arg0: Java.Collection): Promise<Java.Enumeration>;
        // public static <T> void java.util.Collections.fill(java.util.List<? super T>,T)
        fillA(arg0: Java.List, arg1: object_t, cb: Callback<void>): void;
        fill(arg0: Java.List, arg1: object_t): void;
        fillP(arg0: Java.List, arg1: object_t): Promise<void>;
        // public static int java.util.Collections.frequency(java.util.Collection<?>,java.lang.Object)
        frequencyA(arg0: Java.Collection, arg1: object_t, cb: Callback<number>): void;
        frequency(arg0: Java.Collection, arg1: object_t): number;
        frequencyP(arg0: Java.Collection, arg1: object_t): Promise<number>;
        // public static int java.util.Collections.indexOfSubList(java.util.List<?>,java.util.List<?>)
        indexOfSubListA(arg0: Java.List, arg1: Java.List, cb: Callback<number>): void;
        indexOfSubList(arg0: Java.List, arg1: Java.List): number;
        indexOfSubListP(arg0: Java.List, arg1: Java.List): Promise<number>;
        // public static int java.util.Collections.lastIndexOfSubList(java.util.List<?>,java.util.List<?>)
        lastIndexOfSubListA(arg0: Java.List, arg1: Java.List, cb: Callback<number>): void;
        lastIndexOfSubList(arg0: Java.List, arg1: Java.List): number;
        lastIndexOfSubListP(arg0: Java.List, arg1: Java.List): Promise<number>;
        // public static <T> java.util.ArrayList<T> java.util.Collections.list(java.util.Enumeration<T>)
        listA(arg0: Java.Enumeration, cb: Callback<Java.ArrayList>): void;
        list(arg0: Java.Enumeration): Java.ArrayList;
        listP(arg0: Java.Enumeration): Promise<Java.ArrayList>;
        // public static <T> T java.util.Collections.max(java.util.Collection<? extends T>,java.util.Comparator<? super T>)
        maxA(arg0: Java.Collection, arg1: Java.Comparator, cb: Callback<object_t>): void;
        max(arg0: Java.Collection, arg1: Java.Comparator): object_t;
        maxP(arg0: Java.Collection, arg1: Java.Comparator): Promise<object_t>;
        // public static <T> T java.util.Collections.max(java.util.Collection<? extends T>)
        maxA(arg0: Java.Collection, cb: Callback<object_t>): void;
        max(arg0: Java.Collection): object_t;
        maxP(arg0: Java.Collection): Promise<object_t>;
        // public static <T> T java.util.Collections.min(java.util.Collection<? extends T>,java.util.Comparator<? super T>)
        minA(arg0: Java.Collection, arg1: Java.Comparator, cb: Callback<object_t>): void;
        min(arg0: Java.Collection, arg1: Java.Comparator): object_t;
        minP(arg0: Java.Collection, arg1: Java.Comparator): Promise<object_t>;
        // public static <T> T java.util.Collections.min(java.util.Collection<? extends T>)
        minA(arg0: Java.Collection, cb: Callback<object_t>): void;
        min(arg0: Java.Collection): object_t;
        minP(arg0: Java.Collection): Promise<object_t>;
        // public static <T> java.util.List<T> java.util.Collections.nCopies(int,T)
        nCopiesA(arg0: integer_t, arg1: object_t, cb: Callback<Java.List>): void;
        nCopies(arg0: integer_t, arg1: object_t): Java.List;
        nCopiesP(arg0: integer_t, arg1: object_t): Promise<Java.List>;
        // public static <E> java.util.Set<E> java.util.Collections.newSetFromMap(java.util.Map<E, java.lang.Boolean>)
        newSetFromMapA(arg0: Java.Map, cb: Callback<Java.Set>): void;
        newSetFromMap(arg0: Java.Map): Java.Set;
        newSetFromMapP(arg0: Java.Map): Promise<Java.Set>;
        // public static <T> boolean java.util.Collections.replaceAll(java.util.List<T>,T,T)
        replaceAllA(arg0: Java.List, arg1: object_t, arg2: object_t, cb: Callback<boolean>): void;
        replaceAll(arg0: Java.List, arg1: object_t, arg2: object_t): boolean;
        replaceAllP(arg0: Java.List, arg1: object_t, arg2: object_t): Promise<boolean>;
        // public static void java.util.Collections.reverse(java.util.List<?>)
        reverseA(arg0: Java.List, cb: Callback<void>): void;
        reverse(arg0: Java.List): void;
        reverseP(arg0: Java.List): Promise<void>;
        // public static <T> java.util.Comparator<T> java.util.Collections.reverseOrder(java.util.Comparator<T>)
        reverseOrderA(arg0: Java.Comparator, cb: Callback<Java.Comparator>): void;
        reverseOrder(arg0: Java.Comparator): Java.Comparator;
        reverseOrderP(arg0: Java.Comparator): Promise<Java.Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Collections.reverseOrder()
        reverseOrderA( cb: Callback<Java.Comparator>): void;
        reverseOrder(): Java.Comparator;
        reverseOrderP(): Promise<Java.Comparator>;
        // public static void java.util.Collections.rotate(java.util.List<?>,int)
        rotateA(arg0: Java.List, arg1: integer_t, cb: Callback<void>): void;
        rotate(arg0: Java.List, arg1: integer_t): void;
        rotateP(arg0: Java.List, arg1: integer_t): Promise<void>;
        // public static void java.util.Collections.shuffle(java.util.List<?>,java.util.Random)
        shuffleA(arg0: Java.List, arg1: Java.Random, cb: Callback<void>): void;
        shuffle(arg0: Java.List, arg1: Java.Random): void;
        shuffleP(arg0: Java.List, arg1: Java.Random): Promise<void>;
        // public static void java.util.Collections.shuffle(java.util.List<?>)
        shuffleA(arg0: Java.List, cb: Callback<void>): void;
        shuffle(arg0: Java.List): void;
        shuffleP(arg0: Java.List): Promise<void>;
        // public static <T> java.util.Set<T> java.util.Collections.singleton(T)
        singletonA(arg0: object_t, cb: Callback<Java.Set>): void;
        singleton(arg0: object_t): Java.Set;
        singletonP(arg0: object_t): Promise<Java.Set>;
        // public static <T> java.util.List<T> java.util.Collections.singletonList(T)
        singletonListA(arg0: object_t, cb: Callback<Java.List>): void;
        singletonList(arg0: object_t): Java.List;
        singletonListP(arg0: object_t): Promise<Java.List>;
        // public static <K,V> java.util.Map<K, V> java.util.Collections.singletonMap(K,V)
        singletonMapA(arg0: object_t, arg1: object_t, cb: Callback<Java.Map>): void;
        singletonMap(arg0: object_t, arg1: object_t): Java.Map;
        singletonMapP(arg0: object_t, arg1: object_t): Promise<Java.Map>;
        // public static <T> void java.util.Collections.sort(java.util.List<T>,java.util.Comparator<? super T>)
        sortA(arg0: Java.List, arg1: Java.Comparator, cb: Callback<void>): void;
        sort(arg0: Java.List, arg1: Java.Comparator): void;
        sortP(arg0: Java.List, arg1: Java.Comparator): Promise<void>;
        // public static <T> void java.util.Collections.sort(java.util.List<T>)
        sortA(arg0: Java.List, cb: Callback<void>): void;
        sort(arg0: Java.List): void;
        sortP(arg0: Java.List): Promise<void>;
        // public static void java.util.Collections.swap(java.util.List<?>,int,int)
        swapA(arg0: Java.List, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
        swap(arg0: Java.List, arg1: integer_t, arg2: integer_t): void;
        swapP(arg0: Java.List, arg1: integer_t, arg2: integer_t): Promise<void>;
        // public static <T> java.util.Collection<T> java.util.Collections.synchronizedCollection(java.util.Collection<T>)
        synchronizedCollectionA(arg0: Java.Collection, cb: Callback<Java.Collection>): void;
        synchronizedCollection(arg0: Java.Collection): Java.Collection;
        synchronizedCollectionP(arg0: Java.Collection): Promise<Java.Collection>;
        // public static <T> java.util.List<T> java.util.Collections.synchronizedList(java.util.List<T>)
        synchronizedListA(arg0: Java.List, cb: Callback<Java.List>): void;
        synchronizedList(arg0: Java.List): Java.List;
        synchronizedListP(arg0: Java.List): Promise<Java.List>;
        // public static <K,V> java.util.Map<K, V> java.util.Collections.synchronizedMap(java.util.Map<K, V>)
        synchronizedMapA(arg0: Java.Map, cb: Callback<Java.Map>): void;
        synchronizedMap(arg0: Java.Map): Java.Map;
        synchronizedMapP(arg0: Java.Map): Promise<Java.Map>;
        // public static <K,V> java.util.NavigableMap<K, V> java.util.Collections.synchronizedNavigableMap(java.util.NavigableMap<K, V>)
        synchronizedNavigableMapA(arg0: Java.NavigableMap, cb: Callback<Java.NavigableMap>): void;
        synchronizedNavigableMap(arg0: Java.NavigableMap): Java.NavigableMap;
        synchronizedNavigableMapP(arg0: Java.NavigableMap): Promise<Java.NavigableMap>;
        // public static <T> java.util.NavigableSet<T> java.util.Collections.synchronizedNavigableSet(java.util.NavigableSet<T>)
        synchronizedNavigableSetA(arg0: Java.NavigableSet, cb: Callback<Java.NavigableSet>): void;
        synchronizedNavigableSet(arg0: Java.NavigableSet): Java.NavigableSet;
        synchronizedNavigableSetP(arg0: Java.NavigableSet): Promise<Java.NavigableSet>;
        // public static <T> java.util.Set<T> java.util.Collections.synchronizedSet(java.util.Set<T>)
        synchronizedSetA(arg0: Java.Set, cb: Callback<Java.Set>): void;
        synchronizedSet(arg0: Java.Set): Java.Set;
        synchronizedSetP(arg0: Java.Set): Promise<Java.Set>;
        // public static <K,V> java.util.SortedMap<K, V> java.util.Collections.synchronizedSortedMap(java.util.SortedMap<K, V>)
        synchronizedSortedMapA(arg0: Java.SortedMap, cb: Callback<Java.SortedMap>): void;
        synchronizedSortedMap(arg0: Java.SortedMap): Java.SortedMap;
        synchronizedSortedMapP(arg0: Java.SortedMap): Promise<Java.SortedMap>;
        // public static <T> java.util.SortedSet<T> java.util.Collections.synchronizedSortedSet(java.util.SortedSet<T>)
        synchronizedSortedSetA(arg0: Java.SortedSet, cb: Callback<Java.SortedSet>): void;
        synchronizedSortedSet(arg0: Java.SortedSet): Java.SortedSet;
        synchronizedSortedSetP(arg0: Java.SortedSet): Promise<Java.SortedSet>;
        // public static <T> java.util.Collection<T> java.util.Collections.unmodifiableCollection(java.util.Collection<? extends T>)
        unmodifiableCollectionA(arg0: Java.Collection, cb: Callback<Java.Collection>): void;
        unmodifiableCollection(arg0: Java.Collection): Java.Collection;
        unmodifiableCollectionP(arg0: Java.Collection): Promise<Java.Collection>;
        // public static <T> java.util.List<T> java.util.Collections.unmodifiableList(java.util.List<? extends T>)
        unmodifiableListA(arg0: Java.List, cb: Callback<Java.List>): void;
        unmodifiableList(arg0: Java.List): Java.List;
        unmodifiableListP(arg0: Java.List): Promise<Java.List>;
        // public static <K,V> java.util.Map<K, V> java.util.Collections.unmodifiableMap(java.util.Map<? extends K, ? extends V>)
        unmodifiableMapA(arg0: Java.Map, cb: Callback<Java.Map>): void;
        unmodifiableMap(arg0: Java.Map): Java.Map;
        unmodifiableMapP(arg0: Java.Map): Promise<Java.Map>;
        // public static <K,V> java.util.NavigableMap<K, V> java.util.Collections.unmodifiableNavigableMap(java.util.NavigableMap<K, ? extends V>)
        unmodifiableNavigableMapA(arg0: Java.NavigableMap, cb: Callback<Java.NavigableMap>): void;
        unmodifiableNavigableMap(arg0: Java.NavigableMap): Java.NavigableMap;
        unmodifiableNavigableMapP(arg0: Java.NavigableMap): Promise<Java.NavigableMap>;
        // public static <T> java.util.NavigableSet<T> java.util.Collections.unmodifiableNavigableSet(java.util.NavigableSet<T>)
        unmodifiableNavigableSetA(arg0: Java.NavigableSet, cb: Callback<Java.NavigableSet>): void;
        unmodifiableNavigableSet(arg0: Java.NavigableSet): Java.NavigableSet;
        unmodifiableNavigableSetP(arg0: Java.NavigableSet): Promise<Java.NavigableSet>;
        // public static <T> java.util.Set<T> java.util.Collections.unmodifiableSet(java.util.Set<? extends T>)
        unmodifiableSetA(arg0: Java.Set, cb: Callback<Java.Set>): void;
        unmodifiableSet(arg0: Java.Set): Java.Set;
        unmodifiableSetP(arg0: Java.Set): Promise<Java.Set>;
        // public static <K,V> java.util.SortedMap<K, V> java.util.Collections.unmodifiableSortedMap(java.util.SortedMap<K, ? extends V>)
        unmodifiableSortedMapA(arg0: Java.SortedMap, cb: Callback<Java.SortedMap>): void;
        unmodifiableSortedMap(arg0: Java.SortedMap): Java.SortedMap;
        unmodifiableSortedMapP(arg0: Java.SortedMap): Promise<Java.SortedMap>;
        // public static <T> java.util.SortedSet<T> java.util.Collections.unmodifiableSortedSet(java.util.SortedSet<T>)
        unmodifiableSortedSetA(arg0: Java.SortedSet, cb: Callback<Java.SortedSet>): void;
        unmodifiableSortedSet(arg0: Java.SortedSet): Java.SortedSet;
        unmodifiableSortedSetP(arg0: Java.SortedSet): Promise<Java.SortedSet>;
      }
    }
  }

  export module java.util {
    export interface Comparator extends Java.java.lang.Object {
      // public abstract int java.util.Comparator.compare(T,T)
      compareA(arg0: object_t, arg1: object_t, cb: Callback<number>): void;
      compare(arg0: object_t, arg1: object_t): number;
      compareP(arg0: object_t, arg1: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default java.util.Comparator<T> java.util.Comparator.reversed()
      reversedA( cb: Callback<Java.Comparator>): void;
      reversed(): Java.Comparator;
      reversedP(): Promise<Java.Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>,java.util.Comparator<? super U>)
      thenComparingA(arg0: Java.Function, arg1: Java.Comparator, cb: Callback<Java.Comparator>): void;
      thenComparing(arg0: Java.Function, arg1: Java.Comparator): Java.Comparator;
      thenComparingP(arg0: Java.Function, arg1: Java.Comparator): Promise<Java.Comparator>;
      // public default <U> java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.function.Function<? super T, ? extends U>)
      thenComparingA(arg0: Java.Function, cb: Callback<Java.Comparator>): void;
      thenComparing(arg0: Java.Function): Java.Comparator;
      thenComparingP(arg0: Java.Function): Promise<Java.Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparing(java.util.Comparator<? super T>)
      thenComparingA(arg0: Java.Comparator, cb: Callback<Java.Comparator>): void;
      thenComparing(arg0: Java.Comparator): Java.Comparator;
      thenComparingP(arg0: Java.Comparator): Promise<Java.Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingDouble(java.util.function.ToDoubleFunction<? super T>)
      thenComparingDoubleA(arg0: object_t, cb: Callback<Java.Comparator>): void;
      thenComparingDouble(arg0: object_t): Java.Comparator;
      thenComparingDoubleP(arg0: object_t): Promise<Java.Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingInt(java.util.function.ToIntFunction<? super T>)
      thenComparingIntA(arg0: object_t, cb: Callback<Java.Comparator>): void;
      thenComparingInt(arg0: object_t): Java.Comparator;
      thenComparingIntP(arg0: object_t): Promise<Java.Comparator>;
      // public default java.util.Comparator<T> java.util.Comparator.thenComparingLong(java.util.function.ToLongFunction<? super T>)
      thenComparingLongA(arg0: object_t, cb: Callback<Java.Comparator>): void;
      thenComparingLong(arg0: object_t): Java.Comparator;
      thenComparingLongP(arg0: object_t): Promise<Java.Comparator>;
    }
    export module Comparator {
      export interface Static {
        // public static <T,U> java.util.Comparator<T> java.util.Comparator.comparing(java.util.function.Function<? super T, ? extends U>,java.util.Comparator<? super U>)
        comparingA(arg0: Java.Function, arg1: Java.Comparator, cb: Callback<Java.Comparator>): void;
        comparing(arg0: Java.Function, arg1: Java.Comparator): Java.Comparator;
        comparingP(arg0: Java.Function, arg1: Java.Comparator): Promise<Java.Comparator>;
        // public static <T,U> java.util.Comparator<T> java.util.Comparator.comparing(java.util.function.Function<? super T, ? extends U>)
        comparingA(arg0: Java.Function, cb: Callback<Java.Comparator>): void;
        comparing(arg0: Java.Function): Java.Comparator;
        comparingP(arg0: Java.Function): Promise<Java.Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.comparingDouble(java.util.function.ToDoubleFunction<? super T>)
        comparingDoubleA(arg0: object_t, cb: Callback<Java.Comparator>): void;
        comparingDouble(arg0: object_t): Java.Comparator;
        comparingDoubleP(arg0: object_t): Promise<Java.Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.comparingInt(java.util.function.ToIntFunction<? super T>)
        comparingIntA(arg0: object_t, cb: Callback<Java.Comparator>): void;
        comparingInt(arg0: object_t): Java.Comparator;
        comparingIntP(arg0: object_t): Promise<Java.Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.comparingLong(java.util.function.ToLongFunction<? super T>)
        comparingLongA(arg0: object_t, cb: Callback<Java.Comparator>): void;
        comparingLong(arg0: object_t): Java.Comparator;
        comparingLongP(arg0: object_t): Promise<Java.Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.naturalOrder()
        naturalOrderA( cb: Callback<Java.Comparator>): void;
        naturalOrder(): Java.Comparator;
        naturalOrderP(): Promise<Java.Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.nullsFirst(java.util.Comparator<? super T>)
        nullsFirstA(arg0: Java.Comparator, cb: Callback<Java.Comparator>): void;
        nullsFirst(arg0: Java.Comparator): Java.Comparator;
        nullsFirstP(arg0: Java.Comparator): Promise<Java.Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.nullsLast(java.util.Comparator<? super T>)
        nullsLastA(arg0: Java.Comparator, cb: Callback<Java.Comparator>): void;
        nullsLast(arg0: Java.Comparator): Java.Comparator;
        nullsLastP(arg0: Java.Comparator): Promise<Java.Comparator>;
        // public static <T> java.util.Comparator<T> java.util.Comparator.reverseOrder()
        reverseOrderA( cb: Callback<Java.Comparator>): void;
        reverseOrder(): Java.Comparator;
        reverseOrderP(): Promise<Java.Comparator>;
      }
    }
  }

  export module java.util {
    export interface ConcurrentModificationException extends Java.java.lang.Object {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ConcurrentModificationException {
      export interface Static {
        new (arg0: string_t, arg1: object_t): java.util.ConcurrentModificationException;
        new (arg0: object_t): java.util.ConcurrentModificationException;
        new (arg0: string_t): java.util.ConcurrentModificationException;
        new (): java.util.ConcurrentModificationException;
      }
    }
  }

  export module java.util {
    export interface Currency extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.util.Currency.getCurrencyCode()
      getCurrencyCodeA( cb: Callback<string>): void;
      getCurrencyCode(): string;
      getCurrencyCodeP(): Promise<string>;
      // public int java.util.Currency.getDefaultFractionDigits()
      getDefaultFractionDigitsA( cb: Callback<number>): void;
      getDefaultFractionDigits(): number;
      getDefaultFractionDigitsP(): Promise<number>;
      // public java.lang.String java.util.Currency.getDisplayName(java.util.Locale)
      getDisplayNameA(arg0: Java.Locale, cb: Callback<string>): void;
      getDisplayName(arg0: Java.Locale): string;
      getDisplayNameP(arg0: Java.Locale): Promise<string>;
      // public java.lang.String java.util.Currency.getDisplayName()
      getDisplayNameA( cb: Callback<string>): void;
      getDisplayName(): string;
      getDisplayNameP(): Promise<string>;
      // public int java.util.Currency.getNumericCode()
      getNumericCodeA( cb: Callback<number>): void;
      getNumericCode(): number;
      getNumericCodeP(): Promise<number>;
      // public java.lang.String java.util.Currency.getSymbol(java.util.Locale)
      getSymbolA(arg0: Java.Locale, cb: Callback<string>): void;
      getSymbol(arg0: Java.Locale): string;
      getSymbolP(arg0: Java.Locale): Promise<string>;
      // public java.lang.String java.util.Currency.getSymbol()
      getSymbolA( cb: Callback<string>): void;
      getSymbol(): string;
      getSymbolP(): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Currency {
      export interface Static {
        // public static java.util.Set<java.util.Currency> java.util.Currency.getAvailableCurrencies()
        getAvailableCurrenciesA( cb: Callback<Java.Set>): void;
        getAvailableCurrencies(): Java.Set;
        getAvailableCurrenciesP(): Promise<Java.Set>;
        // public static java.util.Currency java.util.Currency.getInstance(java.util.Locale)
        getInstanceA(arg0: Java.Locale, cb: Callback<Java.Currency>): void;
        getInstance(arg0: Java.Locale): Java.Currency;
        getInstanceP(arg0: Java.Locale): Promise<Java.Currency>;
        // public static java.util.Currency java.util.Currency.getInstance(java.lang.String)
        getInstanceA(arg0: string_t, cb: Callback<Java.Currency>): void;
        getInstance(arg0: string_t): Java.Currency;
        getInstanceP(arg0: string_t): Promise<Java.Currency>;
      }
    }
  }

  export module java.util {
    export interface Date extends Java.java.lang.Object {
      // public boolean java.util.Date.after(java.util.Date)
      afterA(arg0: Java.Date, cb: Callback<boolean>): void;
      after(arg0: Java.Date): boolean;
      afterP(arg0: Java.Date): Promise<boolean>;
      // public boolean java.util.Date.before(java.util.Date)
      beforeA(arg0: Java.Date, cb: Callback<boolean>): void;
      before(arg0: Java.Date): boolean;
      beforeP(arg0: Java.Date): Promise<boolean>;
      // public java.lang.Object java.util.Date.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public int java.util.Date.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.util.Date.compareTo(java.util.Date)
      compareToA(arg0: Java.Date, cb: Callback<number>): void;
      compareTo(arg0: Java.Date): number;
      compareToP(arg0: Java.Date): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public int java.util.Date.getDate()
      getDateA( cb: Callback<number>): void;
      getDate(): number;
      getDateP(): Promise<number>;
      // public int java.util.Date.getDay()
      getDayA( cb: Callback<number>): void;
      getDay(): number;
      getDayP(): Promise<number>;
      // public int java.util.Date.getHours()
      getHoursA( cb: Callback<number>): void;
      getHours(): number;
      getHoursP(): Promise<number>;
      // public int java.util.Date.getMinutes()
      getMinutesA( cb: Callback<number>): void;
      getMinutes(): number;
      getMinutesP(): Promise<number>;
      // public int java.util.Date.getMonth()
      getMonthA( cb: Callback<number>): void;
      getMonth(): number;
      getMonthP(): Promise<number>;
      // public int java.util.Date.getSeconds()
      getSecondsA( cb: Callback<number>): void;
      getSeconds(): number;
      getSecondsP(): Promise<number>;
      // public long java.util.Date.getTime()
      getTimeA( cb: Callback<longValue_t>): void;
      getTime(): longValue_t;
      getTimeP(): Promise<longValue_t>;
      // public int java.util.Date.getTimezoneOffset()
      getTimezoneOffsetA( cb: Callback<number>): void;
      getTimezoneOffset(): number;
      getTimezoneOffsetP(): Promise<number>;
      // public int java.util.Date.getYear()
      getYearA( cb: Callback<number>): void;
      getYear(): number;
      getYearP(): Promise<number>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.util.Date.setDate(int)
      setDateA(arg0: integer_t, cb: Callback<void>): void;
      setDate(arg0: integer_t): void;
      setDateP(arg0: integer_t): Promise<void>;
      // public void java.util.Date.setHours(int)
      setHoursA(arg0: integer_t, cb: Callback<void>): void;
      setHours(arg0: integer_t): void;
      setHoursP(arg0: integer_t): Promise<void>;
      // public void java.util.Date.setMinutes(int)
      setMinutesA(arg0: integer_t, cb: Callback<void>): void;
      setMinutes(arg0: integer_t): void;
      setMinutesP(arg0: integer_t): Promise<void>;
      // public void java.util.Date.setMonth(int)
      setMonthA(arg0: integer_t, cb: Callback<void>): void;
      setMonth(arg0: integer_t): void;
      setMonthP(arg0: integer_t): Promise<void>;
      // public void java.util.Date.setSeconds(int)
      setSecondsA(arg0: integer_t, cb: Callback<void>): void;
      setSeconds(arg0: integer_t): void;
      setSecondsP(arg0: integer_t): Promise<void>;
      // public void java.util.Date.setTime(long)
      setTimeA(arg0: long_t, cb: Callback<void>): void;
      setTime(arg0: long_t): void;
      setTimeP(arg0: long_t): Promise<void>;
      // public void java.util.Date.setYear(int)
      setYearA(arg0: integer_t, cb: Callback<void>): void;
      setYear(arg0: integer_t): void;
      setYearP(arg0: integer_t): Promise<void>;
      // public java.lang.String java.util.Date.toGMTString()
      toGMTStringA( cb: Callback<string>): void;
      toGMTString(): string;
      toGMTStringP(): Promise<string>;
      // public java.time.Instant java.util.Date.toInstant()
      toInstantA( cb: Callback<object_t>): void;
      toInstant(): object_t;
      toInstantP(): Promise<object_t>;
      // public java.lang.String java.util.Date.toLocaleString()
      toLocaleStringA( cb: Callback<string>): void;
      toLocaleString(): string;
      toLocaleStringP(): Promise<string>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Date {
      export interface Static {
        new (arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): java.util.Date;
        new (arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): java.util.Date;
        new (arg0: integer_t, arg1: integer_t, arg2: integer_t): java.util.Date;
        new (arg0: string_t): java.util.Date;
        new (arg0: long_t): java.util.Date;
        new (): java.util.Date;
        // public static java.util.Date java.util.Date.from(java.time.Instant)
        fromA(arg0: object_t, cb: Callback<Java.Date>): void;
        from(arg0: object_t): Java.Date;
        fromP(arg0: object_t): Promise<Java.Date>;
        // public static long java.util.Date.parse(java.lang.String)
        parseA(arg0: string_t, cb: Callback<longValue_t>): void;
        parse(arg0: string_t): longValue_t;
        parseP(arg0: string_t): Promise<longValue_t>;
        // public static long java.util.Date.UTC(int,int,int,int,int,int)
        UTCA(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, cb: Callback<longValue_t>): void;
        UTC(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): longValue_t;
        UTCP(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): Promise<longValue_t>;
      }
    }
  }

  export module java.util {
    export interface Deque extends Java.java.util.Queue {
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Deque.addFirst(E)
      addFirstA(arg0: object_t, cb: Callback<void>): void;
      addFirst(arg0: object_t): void;
      addFirstP(arg0: object_t): Promise<void>;
      // public abstract void java.util.Deque.addLast(E)
      addLastA(arg0: object_t, cb: Callback<void>): void;
      addLast(arg0: object_t): void;
      addLastP(arg0: object_t): Promise<void>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Deque.descendingIterator()
      descendingIteratorA( cb: Callback<Java.Iterator>): void;
      descendingIterator(): Java.Iterator;
      descendingIteratorP(): Promise<Java.Iterator>;
      // public abstract E java.util.Queue.element()
      elementA( cb: Callback<object_t>): void;
      element(): object_t;
      elementP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract E java.util.Deque.getFirst()
      getFirstA( cb: Callback<object_t>): void;
      getFirst(): object_t;
      getFirstP(): Promise<object_t>;
      // public abstract E java.util.Deque.getLast()
      getLastA( cb: Callback<object_t>): void;
      getLast(): object_t;
      getLastP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public abstract boolean java.util.Queue.offer(E)
      offerA(arg0: object_t, cb: Callback<boolean>): void;
      offer(arg0: object_t): boolean;
      offerP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Deque.offerFirst(E)
      offerFirstA(arg0: object_t, cb: Callback<boolean>): void;
      offerFirst(arg0: object_t): boolean;
      offerFirstP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Deque.offerLast(E)
      offerLastA(arg0: object_t, cb: Callback<boolean>): void;
      offerLast(arg0: object_t): boolean;
      offerLastP(arg0: object_t): Promise<boolean>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract E java.util.Queue.peek()
      peekA( cb: Callback<object_t>): void;
      peek(): object_t;
      peekP(): Promise<object_t>;
      // public abstract E java.util.Deque.peekFirst()
      peekFirstA( cb: Callback<object_t>): void;
      peekFirst(): object_t;
      peekFirstP(): Promise<object_t>;
      // public abstract E java.util.Deque.peekLast()
      peekLastA( cb: Callback<object_t>): void;
      peekLast(): object_t;
      peekLastP(): Promise<object_t>;
      // public abstract E java.util.Queue.poll()
      pollA( cb: Callback<object_t>): void;
      poll(): object_t;
      pollP(): Promise<object_t>;
      // public abstract E java.util.Deque.pollFirst()
      pollFirstA( cb: Callback<object_t>): void;
      pollFirst(): object_t;
      pollFirstP(): Promise<object_t>;
      // public abstract E java.util.Deque.pollLast()
      pollLastA( cb: Callback<object_t>): void;
      pollLast(): object_t;
      pollLastP(): Promise<object_t>;
      // public abstract E java.util.Deque.pop()
      popA( cb: Callback<object_t>): void;
      pop(): object_t;
      popP(): Promise<object_t>;
      // public abstract void java.util.Deque.push(E)
      pushA(arg0: object_t, cb: Callback<void>): void;
      push(arg0: object_t): void;
      pushP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.Queue.remove()
      removeA( cb: Callback<object_t>): void;
      remove(): object_t;
      removeP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract E java.util.Deque.removeFirst()
      removeFirstA( cb: Callback<object_t>): void;
      removeFirst(): object_t;
      removeFirstP(): Promise<object_t>;
      // public abstract boolean java.util.Deque.removeFirstOccurrence(java.lang.Object)
      removeFirstOccurrenceA(arg0: object_t, cb: Callback<boolean>): void;
      removeFirstOccurrence(arg0: object_t): boolean;
      removeFirstOccurrenceP(arg0: object_t): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.Deque.removeLast()
      removeLastA( cb: Callback<object_t>): void;
      removeLast(): object_t;
      removeLastP(): Promise<object_t>;
      // public abstract boolean java.util.Deque.removeLastOccurrence(java.lang.Object)
      removeLastOccurrenceA(arg0: object_t, cb: Callback<boolean>): void;
      removeLastOccurrence(arg0: object_t): boolean;
      removeLastOccurrenceP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module Deque {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface Dictionary extends Java.java.lang.Object {
      // public abstract java.util.Enumeration<V> java.util.Dictionary.elements()
      elementsA( cb: Callback<Java.Enumeration>): void;
      elements(): Java.Enumeration;
      elementsP(): Promise<Java.Enumeration>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract V java.util.Dictionary.get(java.lang.Object)
      getA(arg0: object_t, cb: Callback<object_t>): void;
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Dictionary.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Enumeration<K> java.util.Dictionary.keys()
      keysA( cb: Callback<Java.Enumeration>): void;
      keys(): Java.Enumeration;
      keysP(): Promise<Java.Enumeration>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract V java.util.Dictionary.put(K,V)
      putA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract V java.util.Dictionary.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<object_t>): void;
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public abstract int java.util.Dictionary.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Dictionary {
      export interface Static {
        new (): java.util.Dictionary;
      }
    }
  }

  export module java.util {
    export interface DoubleSummaryStatistics extends Java.java.lang.Object {
      // public void java.util.DoubleSummaryStatistics.accept(double)
      acceptA(arg0: double_t, cb: Callback<void>): void;
      accept(arg0: double_t): void;
      acceptP(arg0: double_t): Promise<void>;
      // public default java.util.function.DoubleConsumer java.util.function.DoubleConsumer.andThen(java.util.function.DoubleConsumer)
      andThenA(arg0: object_t, cb: Callback<object_t>): void;
      andThen(arg0: object_t): object_t;
      andThenP(arg0: object_t): Promise<object_t>;
      // public void java.util.DoubleSummaryStatistics.combine(java.util.DoubleSummaryStatistics)
      combineA(arg0: Java.DoubleSummaryStatistics, cb: Callback<void>): void;
      combine(arg0: Java.DoubleSummaryStatistics): void;
      combineP(arg0: Java.DoubleSummaryStatistics): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final double java.util.DoubleSummaryStatistics.getAverage()
      getAverageA( cb: Callback<number>): void;
      getAverage(): number;
      getAverageP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public final long java.util.DoubleSummaryStatistics.getCount()
      getCountA( cb: Callback<longValue_t>): void;
      getCount(): longValue_t;
      getCountP(): Promise<longValue_t>;
      // public final double java.util.DoubleSummaryStatistics.getMax()
      getMaxA( cb: Callback<number>): void;
      getMax(): number;
      getMaxP(): Promise<number>;
      // public final double java.util.DoubleSummaryStatistics.getMin()
      getMinA( cb: Callback<number>): void;
      getMin(): number;
      getMinP(): Promise<number>;
      // public final double java.util.DoubleSummaryStatistics.getSum()
      getSumA( cb: Callback<number>): void;
      getSum(): number;
      getSumP(): Promise<number>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DoubleSummaryStatistics {
      export interface Static {
        new (): java.util.DoubleSummaryStatistics;
      }
    }
  }

  export module java.util {
    export interface DuplicateFormatFlagsException extends Java.java.util.IllegalFormatException {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.util.DuplicateFormatFlagsException.getFlags()
      getFlagsA( cb: Callback<string>): void;
      getFlags(): string;
      getFlagsP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module DuplicateFormatFlagsException {
      export interface Static {
        new (arg0: string_t): java.util.DuplicateFormatFlagsException;
      }
    }
  }

  export module java.util {
    export interface EmptyStackException extends Java.java.lang.Object {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EmptyStackException {
      export interface Static {
        new (): java.util.EmptyStackException;
      }
    }
  }

  export module java.util {
    export interface Enumeration extends Java.java.lang.Object {
      // public abstract boolean java.util.Enumeration.hasMoreElements()
      hasMoreElementsA( cb: Callback<boolean>): void;
      hasMoreElements(): boolean;
      hasMoreElementsP(): Promise<boolean>;
      // public abstract E java.util.Enumeration.nextElement()
      nextElementA( cb: Callback<object_t>): void;
      nextElement(): object_t;
      nextElementP(): Promise<object_t>;
    }
    export module Enumeration {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface EnumMap extends Java.java.util.AbstractMap {
      // public abstract void java.util.Map.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public java.util.EnumMap<K, V> java.util.EnumMap.clone()
      cloneA( cb: Callback<Java.EnumMap>): void;
      clone(): Java.EnumMap;
      cloneP(): Promise<Java.EnumMap>;
      // public java.lang.Object java.util.EnumMap.clone() throws java.lang.CloneNotSupportedException
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      compute(arg0: object_t, arg1: object_t): object_t;
      computeP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsentA(arg0: object_t, arg1: Java.Function, cb: Callback<object_t>): void;
      computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      computeIfPresent(arg0: object_t, arg1: object_t): object_t;
      computeIfPresentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKeyA(arg0: object_t, cb: Callback<boolean>): void;
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValueA(arg0: object_t, cb: Callback<boolean>): void;
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySetA( cb: Callback<Java.Set>): void;
      entrySet(): Java.Set;
      entrySetP(): Promise<Java.Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      getA(arg0: object_t, cb: Callback<object_t>): void;
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefaultA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySetA( cb: Callback<Java.Set>): void;
      keySet(): Java.Set;
      keySetP(): Promise<Java.Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      mergeA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<object_t>): void;
      merge(arg0: object_t, arg1: object_t, arg2: object_t): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract V java.util.Map.put(K,V)
      putA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public V java.util.EnumMap.put(K,V)
      putA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAllA(arg0: Java.Map, cb: Callback<void>): void;
      putAll(arg0: Java.Map): void;
      putAllP(arg0: Java.Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      removeA(arg0: object_t, arg1: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<object_t>): void;
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replaceA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<boolean>): void;
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replaceA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract int java.util.Map.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      valuesA( cb: Callback<Java.Collection>): void;
      values(): Java.Collection;
      valuesP(): Promise<Java.Collection>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EnumMap {
      export interface Static {
        new (arg0: Java.EnumMap): java.util.EnumMap;
        new (arg0: Java.Class): java.util.EnumMap;
        new (arg0: Java.Map): java.util.EnumMap;
      }
    }
  }

  export module java.util {
    export interface EnumSet extends Java.java.util.AbstractSet {
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public java.util.EnumSet<E> java.util.EnumSet.clone()
      cloneA( cb: Callback<Java.EnumSet>): void;
      clone(): Java.EnumSet;
      cloneP(): Promise<Java.EnumSet>;
      // public java.lang.Object java.util.EnumSet.clone() throws java.lang.CloneNotSupportedException
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EnumSet {
      export interface Static {
        // public static <E> java.util.EnumSet<E> java.util.EnumSet.allOf(java.lang.Class<E>)
        allOfA(arg0: Java.Class, cb: Callback<Java.EnumSet>): void;
        allOf(arg0: Java.Class): Java.EnumSet;
        allOfP(arg0: Java.Class): Promise<Java.EnumSet>;
        // public static <E> java.util.EnumSet<E> java.util.EnumSet.complementOf(java.util.EnumSet<E>)
        complementOfA(arg0: Java.EnumSet, cb: Callback<Java.EnumSet>): void;
        complementOf(arg0: Java.EnumSet): Java.EnumSet;
        complementOfP(arg0: Java.EnumSet): Promise<Java.EnumSet>;
        // public static <E> java.util.EnumSet<E> java.util.EnumSet.copyOf(java.util.Collection<E>)
        copyOfA(arg0: Java.Collection, cb: Callback<Java.EnumSet>): void;
        copyOf(arg0: Java.Collection): Java.EnumSet;
        copyOfP(arg0: Java.Collection): Promise<Java.EnumSet>;
        // public static <E> java.util.EnumSet<E> java.util.EnumSet.copyOf(java.util.EnumSet<E>)
        copyOfA(arg0: Java.EnumSet, cb: Callback<Java.EnumSet>): void;
        copyOf(arg0: Java.EnumSet): Java.EnumSet;
        copyOfP(arg0: Java.EnumSet): Promise<Java.EnumSet>;
        // public static <E> java.util.EnumSet<E> java.util.EnumSet.noneOf(java.lang.Class<E>)
        noneOfA(arg0: Java.Class, cb: Callback<Java.EnumSet>): void;
        noneOf(arg0: Java.Class): Java.EnumSet;
        noneOfP(arg0: Java.Class): Promise<Java.EnumSet>;
        // public static <E> java.util.EnumSet<E> java.util.EnumSet.of(E,E,E,E,E)
        ofA(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t, cb: Callback<Java.EnumSet>): void;
        of(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t): Java.EnumSet;
        ofP(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, arg4: object_t): Promise<Java.EnumSet>;
        // public static <E> java.util.EnumSet<E> java.util.EnumSet.of(E,E,E,E)
        ofA(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t, cb: Callback<Java.EnumSet>): void;
        of(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t): Java.EnumSet;
        ofP(arg0: object_t, arg1: object_t, arg2: object_t, arg3: object_t): Promise<Java.EnumSet>;
        // public static <E> java.util.EnumSet<E> java.util.EnumSet.of(E,E,E)
        ofA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<Java.EnumSet>): void;
        of(arg0: object_t, arg1: object_t, arg2: object_t): Java.EnumSet;
        ofP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<Java.EnumSet>;
        // public static <E> java.util.EnumSet<E> java.util.EnumSet.of(E,E...)
        ofA(arg0: object_t, arg1: object_array_t, cb: Callback<Java.EnumSet>): void;
        of(arg0: object_t, ...arg1: object_t[]): Java.EnumSet;
        of(arg0: object_t, arg1: object_array_t): Java.EnumSet;
        ofP(arg0: object_t, ...arg1: object_t[]): Promise<Java.EnumSet>;
        ofP(arg0: object_t, arg1: object_array_t): Promise<Java.EnumSet>;
        // public static <E> java.util.EnumSet<E> java.util.EnumSet.of(E,E)
        ofA(arg0: object_t, arg1: object_t, cb: Callback<Java.EnumSet>): void;
        of(arg0: object_t, arg1: object_t): Java.EnumSet;
        ofP(arg0: object_t, arg1: object_t): Promise<Java.EnumSet>;
        // public static <E> java.util.EnumSet<E> java.util.EnumSet.of(E)
        ofA(arg0: object_t, cb: Callback<Java.EnumSet>): void;
        of(arg0: object_t): Java.EnumSet;
        ofP(arg0: object_t): Promise<Java.EnumSet>;
        // public static <E> java.util.EnumSet<E> java.util.EnumSet.range(E,E)
        rangeA(arg0: object_t, arg1: object_t, cb: Callback<Java.EnumSet>): void;
        range(arg0: object_t, arg1: object_t): Java.EnumSet;
        rangeP(arg0: object_t, arg1: object_t): Promise<Java.EnumSet>;
      }
    }
  }

  export module java.util {
    export interface EventListener extends Java.java.lang.Object {
    }
    export module EventListener {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface EventListenerProxy extends Java.java.lang.Object, Java.java.util.EventListener {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public T java.util.EventListenerProxy.getListener()
      getListenerA( cb: Callback<Java.EventListener>): void;
      getListener(): Java.EventListener;
      getListenerP(): Promise<Java.EventListener>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EventListenerProxy {
      export interface Static {
        new (arg0: Java.EventListener): java.util.EventListenerProxy;
      }
    }
  }

  export module java.util {
    export interface EventObject extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.Object java.util.EventObject.getSource()
      getSourceA( cb: Callback<object_t>): void;
      getSource(): object_t;
      getSourceP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module EventObject {
      export interface Static {
        new (arg0: object_t): java.util.EventObject;
      }
    }
  }

  export module java.util {
    export interface FormatFlagsConversionMismatchException extends Java.java.util.IllegalFormatException {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public char java.util.FormatFlagsConversionMismatchException.getConversion()
      getConversionA( cb: Callback<object_t>): void;
      getConversion(): object_t;
      getConversionP(): Promise<object_t>;
      // public java.lang.String java.util.FormatFlagsConversionMismatchException.getFlags()
      getFlagsA( cb: Callback<string>): void;
      getFlags(): string;
      getFlagsP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module FormatFlagsConversionMismatchException {
      export interface Static {
        new (arg0: string_t, arg1: object_t): java.util.FormatFlagsConversionMismatchException;
      }
    }
  }

  export module java.util {
    export interface Formattable extends Java.java.lang.Object {
      // public abstract void java.util.Formattable.formatTo(java.util.Formatter,int,int,int)
      formatToA(arg0: Java.Formatter, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<void>): void;
      formatTo(arg0: Java.Formatter, arg1: integer_t, arg2: integer_t, arg3: integer_t): void;
      formatToP(arg0: Java.Formatter, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<void>;
    }
    export module Formattable {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface FormattableFlags extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module FormattableFlags {
      export interface Static {
        LEFT_JUSTIFY: number;
        UPPERCASE: number;
        ALTERNATE: number;
      }
    }
  }

  export module java.util {
    export interface Formatter extends Java.java.lang.Object {
      // public void java.util.Formatter.close()
      closeA( cb: Callback<void>): void;
      close(): void;
      closeP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public void java.util.Formatter.flush()
      flushA( cb: Callback<void>): void;
      flush(): void;
      flushP(): Promise<void>;
      // public java.util.Formatter java.util.Formatter.format(java.util.Locale,java.lang.String,java.lang.Object...)
      formatA(arg0: Java.Locale, arg1: string_t, arg2: object_array_t, cb: Callback<Java.Formatter>): void;
      format(arg0: Java.Locale, arg1: string_t, ...arg2: object_t[]): Java.Formatter;
      format(arg0: Java.Locale, arg1: string_t, arg2: object_array_t): Java.Formatter;
      formatP(arg0: Java.Locale, arg1: string_t, ...arg2: object_t[]): Promise<Java.Formatter>;
      formatP(arg0: Java.Locale, arg1: string_t, arg2: object_array_t): Promise<Java.Formatter>;
      // public java.util.Formatter java.util.Formatter.format(java.lang.String,java.lang.Object...)
      formatA(arg0: string_t, arg1: object_array_t, cb: Callback<Java.Formatter>): void;
      format(arg0: string_t, ...arg1: object_t[]): Java.Formatter;
      format(arg0: string_t, arg1: object_array_t): Java.Formatter;
      formatP(arg0: string_t, ...arg1: object_t[]): Promise<Java.Formatter>;
      formatP(arg0: string_t, arg1: object_array_t): Promise<Java.Formatter>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.io.IOException java.util.Formatter.ioException()
      ioExceptionA( cb: Callback<object_t>): void;
      ioException(): object_t;
      ioExceptionP(): Promise<object_t>;
      // public java.util.Locale java.util.Formatter.locale()
      localeA( cb: Callback<Java.Locale>): void;
      locale(): Java.Locale;
      localeP(): Promise<Java.Locale>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.Appendable java.util.Formatter.out()
      outA( cb: Callback<object_t>): void;
      out(): object_t;
      outP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Formatter {
      export interface Static {
        new (arg0: object_t, arg1: string_t, arg2: Java.Locale): java.util.Formatter;
        new (arg0: string_t, arg1: string_t, arg2: Java.Locale): java.util.Formatter;
        new (arg0: object_t, arg1: string_t, arg2: Java.Locale): java.util.Formatter;
        new (arg0: object_t, arg1: Java.Locale): java.util.Formatter;
        new (arg0: object_t, arg1: string_t): java.util.Formatter;
        new (arg0: string_t, arg1: string_t): java.util.Formatter;
        new (arg0: object_t, arg1: string_t): java.util.Formatter;
        new (arg0: object_t): java.util.Formatter;
        new (arg0: object_t): java.util.Formatter;
        new (arg0: object_t): java.util.Formatter;
        new (arg0: Java.Locale): java.util.Formatter;
        new (arg0: string_t): java.util.Formatter;
        new (arg0: object_t): java.util.Formatter;
        new (): java.util.Formatter;
      }
    }
  }

  export module java.util {
    export interface Formatter$BigDecimalLayoutForm extends Java.java.lang.Object {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClassA( cb: Callback<Java.Class>): void;
      getDeclaringClass(): Java.Class;
      getDeclaringClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      nameA( cb: Callback<string>): void;
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinalA( cb: Callback<number>): void;
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Formatter$BigDecimalLayoutForm {
      export interface Static {
        SCIENTIFIC: Java.Formatter$BigDecimalLayoutForm;
        DECIMAL_FLOAT: Java.Formatter$BigDecimalLayoutForm;
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOfA(arg0: Java.Class, arg1: string_t, cb: Callback<object_t>): void;
        valueOf(arg0: Java.Class, arg1: string_t): object_t;
        valueOfP(arg0: Java.Class, arg1: string_t): Promise<object_t>;
        // public static java.util.Formatter$BigDecimalLayoutForm java.util.Formatter$BigDecimalLayoutForm.valueOf(java.lang.String)
        valueOfA(arg0: string_t, cb: Callback<Java.Formatter$BigDecimalLayoutForm>): void;
        valueOf(arg0: string_t): Java.Formatter$BigDecimalLayoutForm;
        valueOfP(arg0: string_t): Promise<Java.Formatter$BigDecimalLayoutForm>;
        // public static java.util.Formatter$BigDecimalLayoutForm[] java.util.Formatter$BigDecimalLayoutForm.values()
        valuesA( cb: Callback<Java.Formatter$BigDecimalLayoutForm[]>): void;
        values(): Java.Formatter$BigDecimalLayoutForm[];
        valuesP(): Promise<Java.Formatter$BigDecimalLayoutForm[]>;
      }
    }
  }

  export module java.util {
    export interface FormatterClosedException extends Java.java.lang.Object {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module FormatterClosedException {
      export interface Static {
        new (): java.util.FormatterClosedException;
      }
    }
  }

  export module java.util.function_ {
    export interface Function extends Java.java.lang.Object {
      // public default <V> java.util.function.Function<T, V> java.util.function.Function.andThen(java.util.function.Function<? super R, ? extends V>)
      andThenA(arg0: Java.Function, cb: Callback<Java.Function>): void;
      andThen(arg0: Java.Function): Java.Function;
      andThenP(arg0: Java.Function): Promise<Java.Function>;
      // public abstract R java.util.function.Function.apply(T)
      applyA(arg0: object_t, cb: Callback<object_t>): void;
      apply(arg0: object_t): object_t;
      applyP(arg0: object_t): Promise<object_t>;
      // public default <V> java.util.function.Function<V, R> java.util.function.Function.compose(java.util.function.Function<? super V, ? extends T>)
      composeA(arg0: Java.Function, cb: Callback<Java.Function>): void;
      compose(arg0: Java.Function): Java.Function;
      composeP(arg0: Java.Function): Promise<Java.Function>;
    }
    export module Function {
      export interface Static {
        // public static <T> java.util.function.Function<T, T> java.util.function.Function.identity()
        identityA( cb: Callback<Java.Function>): void;
        identity(): Java.Function;
        identityP(): Promise<Java.Function>;
      }
    }
  }

  export module java.util {
    export interface GregorianCalendar extends Java.java.util.Calendar {
      // public abstract void java.util.Calendar.add(int,int)
      addA(arg0: integer_t, arg1: integer_t, cb: Callback<void>): void;
      add(arg0: integer_t, arg1: integer_t): void;
      addP(arg0: integer_t, arg1: integer_t): Promise<void>;
      // public boolean java.util.Calendar.after(java.lang.Object)
      afterA(arg0: object_t, cb: Callback<boolean>): void;
      after(arg0: object_t): boolean;
      afterP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.Calendar.before(java.lang.Object)
      beforeA(arg0: object_t, cb: Callback<boolean>): void;
      before(arg0: object_t): boolean;
      beforeP(arg0: object_t): Promise<boolean>;
      // public final void java.util.Calendar.clear(int)
      clearA(arg0: integer_t, cb: Callback<void>): void;
      clear(arg0: integer_t): void;
      clearP(arg0: integer_t): Promise<void>;
      // public final void java.util.Calendar.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.Calendar.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public int java.util.Calendar.compareTo(java.util.Calendar)
      compareToA(arg0: Java.Calendar, cb: Callback<number>): void;
      compareTo(arg0: Java.Calendar): number;
      compareToP(arg0: Java.Calendar): Promise<number>;
      // public int java.util.Calendar.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public int java.util.Calendar.get(int)
      getA(arg0: integer_t, cb: Callback<number>): void;
      get(arg0: integer_t): number;
      getP(arg0: integer_t): Promise<number>;
      // public int java.util.Calendar.getActualMaximum(int)
      getActualMaximumA(arg0: integer_t, cb: Callback<number>): void;
      getActualMaximum(arg0: integer_t): number;
      getActualMaximumP(arg0: integer_t): Promise<number>;
      // public int java.util.Calendar.getActualMinimum(int)
      getActualMinimumA(arg0: integer_t, cb: Callback<number>): void;
      getActualMinimum(arg0: integer_t): number;
      getActualMinimumP(arg0: integer_t): Promise<number>;
      // public java.lang.String java.util.Calendar.getCalendarType()
      getCalendarTypeA( cb: Callback<string>): void;
      getCalendarType(): string;
      getCalendarTypeP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.util.Calendar.getDisplayName(int,int,java.util.Locale)
      getDisplayNameA(arg0: integer_t, arg1: integer_t, arg2: Java.Locale, cb: Callback<string>): void;
      getDisplayName(arg0: integer_t, arg1: integer_t, arg2: Java.Locale): string;
      getDisplayNameP(arg0: integer_t, arg1: integer_t, arg2: Java.Locale): Promise<string>;
      // public java.util.Map<java.lang.String, java.lang.Integer> java.util.Calendar.getDisplayNames(int,int,java.util.Locale)
      getDisplayNamesA(arg0: integer_t, arg1: integer_t, arg2: Java.Locale, cb: Callback<Java.Map>): void;
      getDisplayNames(arg0: integer_t, arg1: integer_t, arg2: Java.Locale): Java.Map;
      getDisplayNamesP(arg0: integer_t, arg1: integer_t, arg2: Java.Locale): Promise<Java.Map>;
      // public int java.util.Calendar.getFirstDayOfWeek()
      getFirstDayOfWeekA( cb: Callback<number>): void;
      getFirstDayOfWeek(): number;
      getFirstDayOfWeekP(): Promise<number>;
      // public abstract int java.util.Calendar.getGreatestMinimum(int)
      getGreatestMinimumA(arg0: integer_t, cb: Callback<number>): void;
      getGreatestMinimum(arg0: integer_t): number;
      getGreatestMinimumP(arg0: integer_t): Promise<number>;
      // public final java.util.Date java.util.GregorianCalendar.getGregorianChange()
      getGregorianChangeA( cb: Callback<Java.Date>): void;
      getGregorianChange(): Java.Date;
      getGregorianChangeP(): Promise<Java.Date>;
      // public abstract int java.util.Calendar.getLeastMaximum(int)
      getLeastMaximumA(arg0: integer_t, cb: Callback<number>): void;
      getLeastMaximum(arg0: integer_t): number;
      getLeastMaximumP(arg0: integer_t): Promise<number>;
      // public abstract int java.util.Calendar.getMaximum(int)
      getMaximumA(arg0: integer_t, cb: Callback<number>): void;
      getMaximum(arg0: integer_t): number;
      getMaximumP(arg0: integer_t): Promise<number>;
      // public int java.util.Calendar.getMinimalDaysInFirstWeek()
      getMinimalDaysInFirstWeekA( cb: Callback<number>): void;
      getMinimalDaysInFirstWeek(): number;
      getMinimalDaysInFirstWeekP(): Promise<number>;
      // public abstract int java.util.Calendar.getMinimum(int)
      getMinimumA(arg0: integer_t, cb: Callback<number>): void;
      getMinimum(arg0: integer_t): number;
      getMinimumP(arg0: integer_t): Promise<number>;
      // public final java.util.Date java.util.Calendar.getTime()
      getTimeA( cb: Callback<Java.Date>): void;
      getTime(): Java.Date;
      getTimeP(): Promise<Java.Date>;
      // public long java.util.Calendar.getTimeInMillis()
      getTimeInMillisA( cb: Callback<longValue_t>): void;
      getTimeInMillis(): longValue_t;
      getTimeInMillisP(): Promise<longValue_t>;
      // public java.util.TimeZone java.util.Calendar.getTimeZone()
      getTimeZoneA( cb: Callback<Java.TimeZone>): void;
      getTimeZone(): Java.TimeZone;
      getTimeZoneP(): Promise<Java.TimeZone>;
      // public int java.util.Calendar.getWeeksInWeekYear()
      getWeeksInWeekYearA( cb: Callback<number>): void;
      getWeeksInWeekYear(): number;
      getWeeksInWeekYearP(): Promise<number>;
      // public int java.util.Calendar.getWeekYear()
      getWeekYearA( cb: Callback<number>): void;
      getWeekYear(): number;
      getWeekYearP(): Promise<number>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean java.util.GregorianCalendar.isLeapYear(int)
      isLeapYearA(arg0: integer_t, cb: Callback<boolean>): void;
      isLeapYear(arg0: integer_t): boolean;
      isLeapYearP(arg0: integer_t): Promise<boolean>;
      // public boolean java.util.Calendar.isLenient()
      isLenientA( cb: Callback<boolean>): void;
      isLenient(): boolean;
      isLenientP(): Promise<boolean>;
      // public final boolean java.util.Calendar.isSet(int)
      isSetA(arg0: integer_t, cb: Callback<boolean>): void;
      isSet(arg0: integer_t): boolean;
      isSetP(arg0: integer_t): Promise<boolean>;
      // public boolean java.util.Calendar.isWeekDateSupported()
      isWeekDateSupportedA( cb: Callback<boolean>): void;
      isWeekDateSupported(): boolean;
      isWeekDateSupportedP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract void java.util.Calendar.roll(int,boolean)
      rollA(arg0: integer_t, arg1: boolean_t, cb: Callback<void>): void;
      roll(arg0: integer_t, arg1: boolean_t): void;
      rollP(arg0: integer_t, arg1: boolean_t): Promise<void>;
      // public void java.util.Calendar.roll(int,int)
      rollA(arg0: integer_t, arg1: integer_t, cb: Callback<void>): void;
      roll(arg0: integer_t, arg1: integer_t): void;
      rollP(arg0: integer_t, arg1: integer_t): Promise<void>;
      // public final void java.util.Calendar.set(int,int,int,int,int,int)
      setA(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, cb: Callback<void>): void;
      set(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): void;
      setP(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): Promise<void>;
      // public final void java.util.Calendar.set(int,int,int,int,int)
      setA(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, cb: Callback<void>): void;
      set(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): void;
      setP(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): Promise<void>;
      // public final void java.util.Calendar.set(int,int,int)
      setA(arg0: integer_t, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
      set(arg0: integer_t, arg1: integer_t, arg2: integer_t): void;
      setP(arg0: integer_t, arg1: integer_t, arg2: integer_t): Promise<void>;
      // public void java.util.Calendar.set(int,int)
      setA(arg0: integer_t, arg1: integer_t, cb: Callback<void>): void;
      set(arg0: integer_t, arg1: integer_t): void;
      setP(arg0: integer_t, arg1: integer_t): Promise<void>;
      // public void java.util.Calendar.setFirstDayOfWeek(int)
      setFirstDayOfWeekA(arg0: integer_t, cb: Callback<void>): void;
      setFirstDayOfWeek(arg0: integer_t): void;
      setFirstDayOfWeekP(arg0: integer_t): Promise<void>;
      // public void java.util.GregorianCalendar.setGregorianChange(java.util.Date)
      setGregorianChangeA(arg0: Java.Date, cb: Callback<void>): void;
      setGregorianChange(arg0: Java.Date): void;
      setGregorianChangeP(arg0: Java.Date): Promise<void>;
      // public void java.util.Calendar.setLenient(boolean)
      setLenientA(arg0: boolean_t, cb: Callback<void>): void;
      setLenient(arg0: boolean_t): void;
      setLenientP(arg0: boolean_t): Promise<void>;
      // public void java.util.Calendar.setMinimalDaysInFirstWeek(int)
      setMinimalDaysInFirstWeekA(arg0: integer_t, cb: Callback<void>): void;
      setMinimalDaysInFirstWeek(arg0: integer_t): void;
      setMinimalDaysInFirstWeekP(arg0: integer_t): Promise<void>;
      // public final void java.util.Calendar.setTime(java.util.Date)
      setTimeA(arg0: Java.Date, cb: Callback<void>): void;
      setTime(arg0: Java.Date): void;
      setTimeP(arg0: Java.Date): Promise<void>;
      // public void java.util.Calendar.setTimeInMillis(long)
      setTimeInMillisA(arg0: long_t, cb: Callback<void>): void;
      setTimeInMillis(arg0: long_t): void;
      setTimeInMillisP(arg0: long_t): Promise<void>;
      // public void java.util.Calendar.setTimeZone(java.util.TimeZone)
      setTimeZoneA(arg0: Java.TimeZone, cb: Callback<void>): void;
      setTimeZone(arg0: Java.TimeZone): void;
      setTimeZoneP(arg0: Java.TimeZone): Promise<void>;
      // public void java.util.Calendar.setWeekDate(int,int,int)
      setWeekDateA(arg0: integer_t, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
      setWeekDate(arg0: integer_t, arg1: integer_t, arg2: integer_t): void;
      setWeekDateP(arg0: integer_t, arg1: integer_t, arg2: integer_t): Promise<void>;
      // public final java.time.Instant java.util.Calendar.toInstant()
      toInstantA( cb: Callback<object_t>): void;
      toInstant(): object_t;
      toInstantP(): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public java.time.ZonedDateTime java.util.GregorianCalendar.toZonedDateTime()
      toZonedDateTimeA( cb: Callback<object_t>): void;
      toZonedDateTime(): object_t;
      toZonedDateTimeP(): Promise<object_t>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module GregorianCalendar {
      export interface Static {
        BC: number;
        AD: number;
        ERA: number;
        YEAR: number;
        MONTH: number;
        WEEK_OF_YEAR: number;
        WEEK_OF_MONTH: number;
        DATE: number;
        DAY_OF_MONTH: number;
        DAY_OF_YEAR: number;
        DAY_OF_WEEK: number;
        DAY_OF_WEEK_IN_MONTH: number;
        AM_PM: number;
        HOUR: number;
        HOUR_OF_DAY: number;
        MINUTE: number;
        SECOND: number;
        MILLISECOND: number;
        ZONE_OFFSET: number;
        DST_OFFSET: number;
        FIELD_COUNT: number;
        SUNDAY: number;
        MONDAY: number;
        TUESDAY: number;
        WEDNESDAY: number;
        THURSDAY: number;
        FRIDAY: number;
        SATURDAY: number;
        JANUARY: number;
        FEBRUARY: number;
        MARCH: number;
        APRIL: number;
        MAY: number;
        JUNE: number;
        JULY: number;
        AUGUST: number;
        SEPTEMBER: number;
        OCTOBER: number;
        NOVEMBER: number;
        DECEMBER: number;
        UNDECIMBER: number;
        AM: number;
        PM: number;
        ALL_STYLES: number;
        SHORT: number;
        LONG: number;
        NARROW_FORMAT: number;
        NARROW_STANDALONE: number;
        SHORT_FORMAT: number;
        LONG_FORMAT: number;
        SHORT_STANDALONE: number;
        LONG_STANDALONE: number;
        new (arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): java.util.GregorianCalendar;
        new (arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t): java.util.GregorianCalendar;
        new (arg0: integer_t, arg1: integer_t, arg2: integer_t): java.util.GregorianCalendar;
        new (arg0: Java.TimeZone, arg1: Java.Locale): java.util.GregorianCalendar;
        new (arg0: Java.TimeZone): java.util.GregorianCalendar;
        new (arg0: Java.Locale): java.util.GregorianCalendar;
        new (): java.util.GregorianCalendar;
        // public static java.util.GregorianCalendar java.util.GregorianCalendar.from(java.time.ZonedDateTime)
        fromA(arg0: object_t, cb: Callback<Java.GregorianCalendar>): void;
        from(arg0: object_t): Java.GregorianCalendar;
        fromP(arg0: object_t): Promise<Java.GregorianCalendar>;
        // public static java.util.Set<java.lang.String> java.util.Calendar.getAvailableCalendarTypes()
        getAvailableCalendarTypesA( cb: Callback<Java.Set>): void;
        getAvailableCalendarTypes(): Java.Set;
        getAvailableCalendarTypesP(): Promise<Java.Set>;
        // public static synchronized java.util.Locale[] java.util.Calendar.getAvailableLocales()
        getAvailableLocalesA( cb: Callback<Java.Locale[]>): void;
        getAvailableLocales(): Java.Locale[];
        getAvailableLocalesP(): Promise<Java.Locale[]>;
        // public static java.util.Calendar java.util.Calendar.getInstance(java.util.TimeZone,java.util.Locale)
        getInstanceA(arg0: Java.TimeZone, arg1: Java.Locale, cb: Callback<Java.Calendar>): void;
        getInstance(arg0: Java.TimeZone, arg1: Java.Locale): Java.Calendar;
        getInstanceP(arg0: Java.TimeZone, arg1: Java.Locale): Promise<Java.Calendar>;
        // public static java.util.Calendar java.util.Calendar.getInstance(java.util.TimeZone)
        getInstanceA(arg0: Java.TimeZone, cb: Callback<Java.Calendar>): void;
        getInstance(arg0: Java.TimeZone): Java.Calendar;
        getInstanceP(arg0: Java.TimeZone): Promise<Java.Calendar>;
        // public static java.util.Calendar java.util.Calendar.getInstance(java.util.Locale)
        getInstanceA(arg0: Java.Locale, cb: Callback<Java.Calendar>): void;
        getInstance(arg0: Java.Locale): Java.Calendar;
        getInstanceP(arg0: Java.Locale): Promise<Java.Calendar>;
        // public static java.util.Calendar java.util.Calendar.getInstance()
        getInstanceA( cb: Callback<Java.Calendar>): void;
        getInstance(): Java.Calendar;
        getInstanceP(): Promise<Java.Calendar>;
      }
    }
  }

  export module java.util {
    export interface HashMap extends Java.java.util.AbstractMap, Java.java.util.Map {
      // public abstract void java.util.Map.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.HashMap.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      compute(arg0: object_t, arg1: object_t): object_t;
      computeP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsentA(arg0: object_t, arg1: Java.Function, cb: Callback<object_t>): void;
      computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      computeIfPresent(arg0: object_t, arg1: object_t): object_t;
      computeIfPresentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKeyA(arg0: object_t, cb: Callback<boolean>): void;
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValueA(arg0: object_t, cb: Callback<boolean>): void;
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySetA( cb: Callback<Java.Set>): void;
      entrySet(): Java.Set;
      entrySetP(): Promise<Java.Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      getA(arg0: object_t, cb: Callback<object_t>): void;
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefaultA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySetA( cb: Callback<Java.Set>): void;
      keySet(): Java.Set;
      keySetP(): Promise<Java.Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      mergeA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<object_t>): void;
      merge(arg0: object_t, arg1: object_t, arg2: object_t): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract V java.util.Map.put(K,V)
      putA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAllA(arg0: Java.Map, cb: Callback<void>): void;
      putAll(arg0: Java.Map): void;
      putAllP(arg0: Java.Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      removeA(arg0: object_t, arg1: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<object_t>): void;
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replaceA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<boolean>): void;
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replaceA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract int java.util.Map.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      valuesA( cb: Callback<Java.Collection>): void;
      values(): Java.Collection;
      valuesP(): Promise<Java.Collection>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module HashMap {
      export interface Static {
        new (arg0: integer_t, arg1: float_t): java.util.HashMap;
        new (arg0: Java.Map): java.util.HashMap;
        new (arg0: integer_t): java.util.HashMap;
        new (): java.util.HashMap;
      }
    }
  }

  export module java.util {
    export interface HashSet extends Java.java.util.AbstractSet, Java.java.util.Set {
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.HashSet.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module HashSet {
      export interface Static {
        new (arg0: integer_t, arg1: float_t): java.util.HashSet;
        new (arg0: Java.Collection): java.util.HashSet;
        new (arg0: integer_t): java.util.HashSet;
        new (): java.util.HashSet;
      }
    }
  }

  export module java.util {
    export interface Hashtable extends Java.java.util.Dictionary, Java.java.util.Map {
      // public abstract void java.util.Map.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public synchronized java.lang.Object java.util.Hashtable.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      compute(arg0: object_t, arg1: object_t): object_t;
      computeP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsentA(arg0: object_t, arg1: Java.Function, cb: Callback<object_t>): void;
      computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      computeIfPresent(arg0: object_t, arg1: object_t): object_t;
      computeIfPresentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public synchronized boolean java.util.Hashtable.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKeyA(arg0: object_t, cb: Callback<boolean>): void;
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValueA(arg0: object_t, cb: Callback<boolean>): void;
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Enumeration<V> java.util.Dictionary.elements()
      elementsA( cb: Callback<Java.Enumeration>): void;
      elements(): Java.Enumeration;
      elementsP(): Promise<Java.Enumeration>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySetA( cb: Callback<Java.Set>): void;
      entrySet(): Java.Set;
      entrySetP(): Promise<Java.Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      getA(arg0: object_t, cb: Callback<object_t>): void;
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefaultA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Enumeration<K> java.util.Dictionary.keys()
      keysA( cb: Callback<Java.Enumeration>): void;
      keys(): Java.Enumeration;
      keysP(): Promise<Java.Enumeration>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySetA( cb: Callback<Java.Set>): void;
      keySet(): Java.Set;
      keySetP(): Promise<Java.Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      mergeA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<object_t>): void;
      merge(arg0: object_t, arg1: object_t, arg2: object_t): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract V java.util.Map.put(K,V)
      putA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAllA(arg0: Java.Map, cb: Callback<void>): void;
      putAll(arg0: Java.Map): void;
      putAllP(arg0: Java.Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      removeA(arg0: object_t, arg1: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<object_t>): void;
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replaceA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<boolean>): void;
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replaceA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract int java.util.Map.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      valuesA( cb: Callback<Java.Collection>): void;
      values(): Java.Collection;
      valuesP(): Promise<Java.Collection>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Hashtable {
      export interface Static {
        new (arg0: integer_t, arg1: float_t): java.util.Hashtable;
        new (arg0: Java.Map): java.util.Hashtable;
        new (arg0: integer_t): java.util.Hashtable;
        new (): java.util.Hashtable;
      }
    }
  }

  export module java.util {
    export interface IdentityHashMap extends Java.java.util.AbstractMap, Java.java.util.Map {
      // public abstract void java.util.Map.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.IdentityHashMap.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      compute(arg0: object_t, arg1: object_t): object_t;
      computeP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsentA(arg0: object_t, arg1: Java.Function, cb: Callback<object_t>): void;
      computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      computeIfPresent(arg0: object_t, arg1: object_t): object_t;
      computeIfPresentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKeyA(arg0: object_t, cb: Callback<boolean>): void;
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValueA(arg0: object_t, cb: Callback<boolean>): void;
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySetA( cb: Callback<Java.Set>): void;
      entrySet(): Java.Set;
      entrySetP(): Promise<Java.Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      getA(arg0: object_t, cb: Callback<object_t>): void;
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefaultA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySetA( cb: Callback<Java.Set>): void;
      keySet(): Java.Set;
      keySetP(): Promise<Java.Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      mergeA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<object_t>): void;
      merge(arg0: object_t, arg1: object_t, arg2: object_t): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract V java.util.Map.put(K,V)
      putA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAllA(arg0: Java.Map, cb: Callback<void>): void;
      putAll(arg0: Java.Map): void;
      putAllP(arg0: Java.Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      removeA(arg0: object_t, arg1: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<object_t>): void;
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replaceA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<boolean>): void;
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replaceA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract int java.util.Map.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      valuesA( cb: Callback<Java.Collection>): void;
      values(): Java.Collection;
      valuesP(): Promise<Java.Collection>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module IdentityHashMap {
      export interface Static {
        new (arg0: Java.Map): java.util.IdentityHashMap;
        new (arg0: integer_t): java.util.IdentityHashMap;
        new (): java.util.IdentityHashMap;
      }
    }
  }

  export module java.util {
    export interface IllegalFormatCodePointException extends Java.java.util.IllegalFormatException {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public int java.util.IllegalFormatCodePointException.getCodePoint()
      getCodePointA( cb: Callback<number>): void;
      getCodePoint(): number;
      getCodePointP(): Promise<number>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module IllegalFormatCodePointException {
      export interface Static {
        new (arg0: integer_t): java.util.IllegalFormatCodePointException;
      }
    }
  }

  export module java.util {
    export interface IllegalFormatConversionException extends Java.java.util.IllegalFormatException {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public java.lang.Class<?> java.util.IllegalFormatConversionException.getArgumentClass()
      getArgumentClassA( cb: Callback<Java.Class>): void;
      getArgumentClass(): Java.Class;
      getArgumentClassP(): Promise<Java.Class>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public char java.util.IllegalFormatConversionException.getConversion()
      getConversionA( cb: Callback<object_t>): void;
      getConversion(): object_t;
      getConversionP(): Promise<object_t>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module IllegalFormatConversionException {
      export interface Static {
        new (arg0: object_t, arg1: Java.Class): java.util.IllegalFormatConversionException;
      }
    }
  }

  export module java.util {
    export interface IllegalFormatException extends Java.java.lang.Object {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module IllegalFormatException {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface IllegalFormatFlagsException extends Java.java.util.IllegalFormatException {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.util.IllegalFormatFlagsException.getFlags()
      getFlagsA( cb: Callback<string>): void;
      getFlags(): string;
      getFlagsP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module IllegalFormatFlagsException {
      export interface Static {
        new (arg0: string_t): java.util.IllegalFormatFlagsException;
      }
    }
  }

  export module java.util {
    export interface IllegalFormatPrecisionException extends Java.java.util.IllegalFormatException {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public int java.util.IllegalFormatPrecisionException.getPrecision()
      getPrecisionA( cb: Callback<number>): void;
      getPrecision(): number;
      getPrecisionP(): Promise<number>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module IllegalFormatPrecisionException {
      export interface Static {
        new (arg0: integer_t): java.util.IllegalFormatPrecisionException;
      }
    }
  }

  export module java.util {
    export interface IllegalFormatWidthException extends Java.java.util.IllegalFormatException {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public int java.util.IllegalFormatWidthException.getWidth()
      getWidthA( cb: Callback<number>): void;
      getWidth(): number;
      getWidthP(): Promise<number>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module IllegalFormatWidthException {
      export interface Static {
        new (arg0: integer_t): java.util.IllegalFormatWidthException;
      }
    }
  }

  export module java.util {
    export interface IllformedLocaleException extends Java.java.lang.Object {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public int java.util.IllformedLocaleException.getErrorIndex()
      getErrorIndexA( cb: Callback<number>): void;
      getErrorIndex(): number;
      getErrorIndexP(): Promise<number>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module IllformedLocaleException {
      export interface Static {
        new (arg0: string_t, arg1: integer_t): java.util.IllformedLocaleException;
        new (arg0: string_t): java.util.IllformedLocaleException;
        new (): java.util.IllformedLocaleException;
      }
    }
  }

  export module java.util {
    export interface InputMismatchException extends Java.java.util.NoSuchElementException {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module InputMismatchException {
      export interface Static {
        new (arg0: string_t): java.util.InputMismatchException;
        new (): java.util.InputMismatchException;
      }
    }
  }

  export module java.util {
    export interface IntSummaryStatistics extends Java.java.lang.Object {
      // public void java.util.IntSummaryStatistics.accept(int)
      acceptA(arg0: integer_t, cb: Callback<void>): void;
      accept(arg0: integer_t): void;
      acceptP(arg0: integer_t): Promise<void>;
      // public default java.util.function.IntConsumer java.util.function.IntConsumer.andThen(java.util.function.IntConsumer)
      andThenA(arg0: object_t, cb: Callback<object_t>): void;
      andThen(arg0: object_t): object_t;
      andThenP(arg0: object_t): Promise<object_t>;
      // public void java.util.IntSummaryStatistics.combine(java.util.IntSummaryStatistics)
      combineA(arg0: Java.IntSummaryStatistics, cb: Callback<void>): void;
      combine(arg0: Java.IntSummaryStatistics): void;
      combineP(arg0: Java.IntSummaryStatistics): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final double java.util.IntSummaryStatistics.getAverage()
      getAverageA( cb: Callback<number>): void;
      getAverage(): number;
      getAverageP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public final long java.util.IntSummaryStatistics.getCount()
      getCountA( cb: Callback<longValue_t>): void;
      getCount(): longValue_t;
      getCountP(): Promise<longValue_t>;
      // public final int java.util.IntSummaryStatistics.getMax()
      getMaxA( cb: Callback<number>): void;
      getMax(): number;
      getMaxP(): Promise<number>;
      // public final int java.util.IntSummaryStatistics.getMin()
      getMinA( cb: Callback<number>): void;
      getMin(): number;
      getMinP(): Promise<number>;
      // public final long java.util.IntSummaryStatistics.getSum()
      getSumA( cb: Callback<longValue_t>): void;
      getSum(): longValue_t;
      getSumP(): Promise<longValue_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module IntSummaryStatistics {
      export interface Static {
        new (): java.util.IntSummaryStatistics;
      }
    }
  }

  export module java.util {
    export interface InvalidPropertiesFormatException extends Java.java.lang.Object {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module InvalidPropertiesFormatException {
      export interface Static {
        new (arg0: object_t): java.util.InvalidPropertiesFormatException;
        new (arg0: string_t): java.util.InvalidPropertiesFormatException;
      }
    }
  }

  export module java.util {
    export interface Iterator extends Java.java.lang.Object {
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNextA( cb: Callback<boolean>): void;
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public abstract E java.util.Iterator.next()
      nextA( cb: Callback<object_t>): void;
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default void java.util.Iterator.remove()
      removeA( cb: Callback<void>): void;
      remove(): void;
      removeP(): Promise<void>;
    }
    export module Iterator {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface LinkedHashMap extends Java.java.util.HashMap, Java.java.util.Map {
      // public abstract void java.util.Map.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.HashMap.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      compute(arg0: object_t, arg1: object_t): object_t;
      computeP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsentA(arg0: object_t, arg1: Java.Function, cb: Callback<object_t>): void;
      computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      computeIfPresent(arg0: object_t, arg1: object_t): object_t;
      computeIfPresentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKeyA(arg0: object_t, cb: Callback<boolean>): void;
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValueA(arg0: object_t, cb: Callback<boolean>): void;
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySetA( cb: Callback<Java.Set>): void;
      entrySet(): Java.Set;
      entrySetP(): Promise<Java.Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      getA(arg0: object_t, cb: Callback<object_t>): void;
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefaultA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySetA( cb: Callback<Java.Set>): void;
      keySet(): Java.Set;
      keySetP(): Promise<Java.Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      mergeA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<object_t>): void;
      merge(arg0: object_t, arg1: object_t, arg2: object_t): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract V java.util.Map.put(K,V)
      putA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAllA(arg0: Java.Map, cb: Callback<void>): void;
      putAll(arg0: Java.Map): void;
      putAllP(arg0: Java.Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      removeA(arg0: object_t, arg1: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<object_t>): void;
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replaceA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<boolean>): void;
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replaceA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract int java.util.Map.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      valuesA( cb: Callback<Java.Collection>): void;
      values(): Java.Collection;
      valuesP(): Promise<Java.Collection>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module LinkedHashMap {
      export interface Static {
        new (arg0: integer_t, arg1: float_t, arg2: boolean_t): java.util.LinkedHashMap;
        new (arg0: integer_t, arg1: float_t): java.util.LinkedHashMap;
        new (arg0: Java.Map): java.util.LinkedHashMap;
        new (arg0: integer_t): java.util.LinkedHashMap;
        new (): java.util.LinkedHashMap;
      }
    }
  }

  export module java.util {
    export interface LinkedHashSet extends Java.java.util.HashSet, Java.java.util.Set {
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.HashSet.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module LinkedHashSet {
      export interface Static {
        new (arg0: integer_t, arg1: float_t): java.util.LinkedHashSet;
        new (arg0: Java.Collection): java.util.LinkedHashSet;
        new (arg0: integer_t): java.util.LinkedHashSet;
        new (): java.util.LinkedHashSet;
      }
    }
  }

  export module java.util {
    export interface LinkedList extends Java.java.util.AbstractSequentialList, Java.java.util.Deque, Java.java.util.List {
      // public abstract void java.util.List.add(int,E)
      addA(arg0: integer_t, arg1: object_t, cb: Callback<void>): void;
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAllA(arg0: integer_t, arg1: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: integer_t, arg1: Java.Collection): boolean;
      addAllP(arg0: integer_t, arg1: Java.Collection): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Deque.addFirst(E)
      addFirstA(arg0: object_t, cb: Callback<void>): void;
      addFirst(arg0: object_t): void;
      addFirstP(arg0: object_t): Promise<void>;
      // public abstract void java.util.Deque.addLast(E)
      addLastA(arg0: object_t, cb: Callback<void>): void;
      addLast(arg0: object_t): void;
      addLastP(arg0: object_t): Promise<void>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.LinkedList.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Deque.descendingIterator()
      descendingIteratorA( cb: Callback<Java.Iterator>): void;
      descendingIterator(): Java.Iterator;
      descendingIteratorP(): Promise<Java.Iterator>;
      // public abstract E java.util.Queue.element()
      elementA( cb: Callback<object_t>): void;
      element(): object_t;
      elementP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract E java.util.List.get(int)
      getA(arg0: integer_t, cb: Callback<object_t>): void;
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public abstract E java.util.Deque.getFirst()
      getFirstA( cb: Callback<object_t>): void;
      getFirst(): object_t;
      getFirstP(): Promise<object_t>;
      // public abstract E java.util.Deque.getLast()
      getLastA( cb: Callback<object_t>): void;
      getLast(): object_t;
      getLastP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOfA(arg0: object_t, cb: Callback<number>): void;
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOfA(arg0: object_t, cb: Callback<number>): void;
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIteratorA(arg0: integer_t, cb: Callback<Java.ListIterator>): void;
      listIterator(arg0: integer_t): Java.ListIterator;
      listIteratorP(arg0: integer_t): Promise<Java.ListIterator>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIteratorA( cb: Callback<Java.ListIterator>): void;
      listIterator(): Java.ListIterator;
      listIteratorP(): Promise<Java.ListIterator>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract boolean java.util.Queue.offer(E)
      offerA(arg0: object_t, cb: Callback<boolean>): void;
      offer(arg0: object_t): boolean;
      offerP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Deque.offerFirst(E)
      offerFirstA(arg0: object_t, cb: Callback<boolean>): void;
      offerFirst(arg0: object_t): boolean;
      offerFirstP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Deque.offerLast(E)
      offerLastA(arg0: object_t, cb: Callback<boolean>): void;
      offerLast(arg0: object_t): boolean;
      offerLastP(arg0: object_t): Promise<boolean>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract E java.util.Queue.peek()
      peekA( cb: Callback<object_t>): void;
      peek(): object_t;
      peekP(): Promise<object_t>;
      // public abstract E java.util.Deque.peekFirst()
      peekFirstA( cb: Callback<object_t>): void;
      peekFirst(): object_t;
      peekFirstP(): Promise<object_t>;
      // public abstract E java.util.Deque.peekLast()
      peekLastA( cb: Callback<object_t>): void;
      peekLast(): object_t;
      peekLastP(): Promise<object_t>;
      // public abstract E java.util.Queue.poll()
      pollA( cb: Callback<object_t>): void;
      poll(): object_t;
      pollP(): Promise<object_t>;
      // public abstract E java.util.Deque.pollFirst()
      pollFirstA( cb: Callback<object_t>): void;
      pollFirst(): object_t;
      pollFirstP(): Promise<object_t>;
      // public abstract E java.util.Deque.pollLast()
      pollLastA( cb: Callback<object_t>): void;
      pollLast(): object_t;
      pollLastP(): Promise<object_t>;
      // public abstract E java.util.Deque.pop()
      popA( cb: Callback<object_t>): void;
      pop(): object_t;
      popP(): Promise<object_t>;
      // public abstract void java.util.Deque.push(E)
      pushA(arg0: object_t, cb: Callback<void>): void;
      push(arg0: object_t): void;
      pushP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.List.remove(int)
      removeA(arg0: integer_t, cb: Callback<object_t>): void;
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public abstract E java.util.Queue.remove()
      removeA( cb: Callback<object_t>): void;
      remove(): object_t;
      removeP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract E java.util.Deque.removeFirst()
      removeFirstA( cb: Callback<object_t>): void;
      removeFirst(): object_t;
      removeFirstP(): Promise<object_t>;
      // public abstract boolean java.util.Deque.removeFirstOccurrence(java.lang.Object)
      removeFirstOccurrenceA(arg0: object_t, cb: Callback<boolean>): void;
      removeFirstOccurrence(arg0: object_t): boolean;
      removeFirstOccurrenceP(arg0: object_t): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.Deque.removeLast()
      removeLastA( cb: Callback<object_t>): void;
      removeLast(): object_t;
      removeLastP(): Promise<object_t>;
      // public abstract boolean java.util.Deque.removeLastOccurrence(java.lang.Object)
      removeLastOccurrenceA(arg0: object_t, cb: Callback<boolean>): void;
      removeLastOccurrence(arg0: object_t): boolean;
      removeLastOccurrenceP(arg0: object_t): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract E java.util.List.set(int,E)
      setA(arg0: integer_t, arg1: object_t, cb: Callback<object_t>): void;
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sortA(arg0: Java.Comparator, cb: Callback<void>): void;
      sort(arg0: Java.Comparator): void;
      sortP(arg0: Java.Comparator): Promise<void>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subListA(arg0: integer_t, arg1: integer_t, cb: Callback<Java.List>): void;
      subList(arg0: integer_t, arg1: integer_t): Java.List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<Java.List>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module LinkedList {
      export interface Static {
        new (arg0: Java.Collection): java.util.LinkedList;
        new (): java.util.LinkedList;
      }
    }
  }

  export module java.util {
    export interface List extends Java.java.util.Collection {
      // public abstract void java.util.List.add(int,E)
      addA(arg0: integer_t, arg1: object_t, cb: Callback<void>): void;
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAllA(arg0: integer_t, arg1: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: integer_t, arg1: Java.Collection): boolean;
      addAllP(arg0: integer_t, arg1: Java.Collection): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract E java.util.List.get(int)
      getA(arg0: integer_t, cb: Callback<object_t>): void;
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOfA(arg0: object_t, cb: Callback<number>): void;
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOfA(arg0: object_t, cb: Callback<number>): void;
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIteratorA(arg0: integer_t, cb: Callback<Java.ListIterator>): void;
      listIterator(arg0: integer_t): Java.ListIterator;
      listIteratorP(arg0: integer_t): Promise<Java.ListIterator>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIteratorA( cb: Callback<Java.ListIterator>): void;
      listIterator(): Java.ListIterator;
      listIteratorP(): Promise<Java.ListIterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.List.remove(int)
      removeA(arg0: integer_t, cb: Callback<object_t>): void;
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract E java.util.List.set(int,E)
      setA(arg0: integer_t, arg1: object_t, cb: Callback<object_t>): void;
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sortA(arg0: Java.Comparator, cb: Callback<void>): void;
      sort(arg0: Java.Comparator): void;
      sortP(arg0: Java.Comparator): Promise<void>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subListA(arg0: integer_t, arg1: integer_t, cb: Callback<Java.List>): void;
      subList(arg0: integer_t, arg1: integer_t): Java.List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<Java.List>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module List {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface ListIterator extends Java.java.util.Iterator {
      // public abstract void java.util.ListIterator.add(E)
      addA(arg0: object_t, cb: Callback<void>): void;
      add(arg0: object_t): void;
      addP(arg0: object_t): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNextA( cb: Callback<boolean>): void;
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public abstract boolean java.util.ListIterator.hasPrevious()
      hasPreviousA( cb: Callback<boolean>): void;
      hasPrevious(): boolean;
      hasPreviousP(): Promise<boolean>;
      // public abstract E java.util.Iterator.next()
      nextA( cb: Callback<object_t>): void;
      next(): object_t;
      nextP(): Promise<object_t>;
      // public abstract int java.util.ListIterator.nextIndex()
      nextIndexA( cb: Callback<number>): void;
      nextIndex(): number;
      nextIndexP(): Promise<number>;
      // public abstract E java.util.ListIterator.previous()
      previousA( cb: Callback<object_t>): void;
      previous(): object_t;
      previousP(): Promise<object_t>;
      // public abstract int java.util.ListIterator.previousIndex()
      previousIndexA( cb: Callback<number>): void;
      previousIndex(): number;
      previousIndexP(): Promise<number>;
      // public default void java.util.Iterator.remove()
      removeA( cb: Callback<void>): void;
      remove(): void;
      removeP(): Promise<void>;
      // public abstract void java.util.ListIterator.set(E)
      setA(arg0: object_t, cb: Callback<void>): void;
      set(arg0: object_t): void;
      setP(arg0: object_t): Promise<void>;
    }
    export module ListIterator {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface ListResourceBundle extends Java.java.util.ResourceBundle {
      // public boolean java.util.ResourceBundle.containsKey(java.lang.String)
      containsKeyA(arg0: string_t, cb: Callback<boolean>): void;
      containsKey(arg0: string_t): boolean;
      containsKeyP(arg0: string_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.String java.util.ResourceBundle.getBaseBundleName()
      getBaseBundleNameA( cb: Callback<string>): void;
      getBaseBundleName(): string;
      getBaseBundleNameP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public abstract java.util.Enumeration<java.lang.String> java.util.ResourceBundle.getKeys()
      getKeysA( cb: Callback<Java.Enumeration>): void;
      getKeys(): Java.Enumeration;
      getKeysP(): Promise<Java.Enumeration>;
      // public java.util.Locale java.util.ResourceBundle.getLocale()
      getLocaleA( cb: Callback<Java.Locale>): void;
      getLocale(): Java.Locale;
      getLocaleP(): Promise<Java.Locale>;
      // public final java.lang.Object java.util.ResourceBundle.getObject(java.lang.String)
      getObjectA(arg0: string_t, cb: Callback<object_t>): void;
      getObject(arg0: string_t): object_t;
      getObjectP(arg0: string_t): Promise<object_t>;
      // public final java.lang.String java.util.ResourceBundle.getString(java.lang.String)
      getStringA(arg0: string_t, cb: Callback<string>): void;
      getString(arg0: string_t): string;
      getStringP(arg0: string_t): Promise<string>;
      // public final java.lang.String[] java.util.ResourceBundle.getStringArray(java.lang.String)
      getStringArrayA(arg0: string_t, cb: Callback<string[]>): void;
      getStringArray(arg0: string_t): string[];
      getStringArrayP(arg0: string_t): Promise<string[]>;
      // public final java.lang.Object java.util.ListResourceBundle.handleGetObject(java.lang.String)
      handleGetObjectA(arg0: string_t, cb: Callback<object_t>): void;
      handleGetObject(arg0: string_t): object_t;
      handleGetObjectP(arg0: string_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.util.Set<java.lang.String> java.util.ResourceBundle.keySet()
      keySetA( cb: Callback<Java.Set>): void;
      keySet(): Java.Set;
      keySetP(): Promise<Java.Set>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ListResourceBundle {
      export interface Static {
        new (): java.util.ListResourceBundle;
        // public static final void java.util.ResourceBundle.clearCache(java.lang.ClassLoader)
        clearCacheA(arg0: object_t, cb: Callback<void>): void;
        clearCache(arg0: object_t): void;
        clearCacheP(arg0: object_t): Promise<void>;
        // public static final void java.util.ResourceBundle.clearCache()
        clearCacheA( cb: Callback<void>): void;
        clearCache(): void;
        clearCacheP(): Promise<void>;
        // public static java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)
        getBundleA(arg0: string_t, arg1: Java.Locale, arg2: object_t, arg3: Java.ResourceBundle$Control, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t, arg1: Java.Locale, arg2: object_t, arg3: Java.ResourceBundle$Control): Java.ResourceBundle;
        getBundleP(arg0: string_t, arg1: Java.Locale, arg2: object_t, arg3: Java.ResourceBundle$Control): Promise<Java.ResourceBundle>;
        // public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle$Control)
        getBundleA(arg0: string_t, arg1: Java.Locale, arg2: Java.ResourceBundle$Control, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t, arg1: Java.Locale, arg2: Java.ResourceBundle$Control): Java.ResourceBundle;
        getBundleP(arg0: string_t, arg1: Java.Locale, arg2: Java.ResourceBundle$Control): Promise<Java.ResourceBundle>;
        // public static java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)
        getBundleA(arg0: string_t, arg1: Java.Locale, arg2: object_t, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t, arg1: Java.Locale, arg2: object_t): Java.ResourceBundle;
        getBundleP(arg0: string_t, arg1: Java.Locale, arg2: object_t): Promise<Java.ResourceBundle>;
        // public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.ResourceBundle$Control)
        getBundleA(arg0: string_t, arg1: Java.ResourceBundle$Control, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t, arg1: Java.ResourceBundle$Control): Java.ResourceBundle;
        getBundleP(arg0: string_t, arg1: Java.ResourceBundle$Control): Promise<Java.ResourceBundle>;
        // public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale)
        getBundleA(arg0: string_t, arg1: Java.Locale, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t, arg1: Java.Locale): Java.ResourceBundle;
        getBundleP(arg0: string_t, arg1: Java.Locale): Promise<Java.ResourceBundle>;
        // public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String)
        getBundleA(arg0: string_t, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t): Java.ResourceBundle;
        getBundleP(arg0: string_t): Promise<Java.ResourceBundle>;
      }
    }
  }

  export module java.util {
    export interface Locale extends Java.java.lang.Object {
      // public java.lang.Object java.util.Locale.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.util.Locale.getCountry()
      getCountryA( cb: Callback<string>): void;
      getCountry(): string;
      getCountryP(): Promise<string>;
      // public java.lang.String java.util.Locale.getDisplayCountry(java.util.Locale)
      getDisplayCountryA(arg0: Java.Locale, cb: Callback<string>): void;
      getDisplayCountry(arg0: Java.Locale): string;
      getDisplayCountryP(arg0: Java.Locale): Promise<string>;
      // public final java.lang.String java.util.Locale.getDisplayCountry()
      getDisplayCountryA( cb: Callback<string>): void;
      getDisplayCountry(): string;
      getDisplayCountryP(): Promise<string>;
      // public java.lang.String java.util.Locale.getDisplayLanguage(java.util.Locale)
      getDisplayLanguageA(arg0: Java.Locale, cb: Callback<string>): void;
      getDisplayLanguage(arg0: Java.Locale): string;
      getDisplayLanguageP(arg0: Java.Locale): Promise<string>;
      // public final java.lang.String java.util.Locale.getDisplayLanguage()
      getDisplayLanguageA( cb: Callback<string>): void;
      getDisplayLanguage(): string;
      getDisplayLanguageP(): Promise<string>;
      // public java.lang.String java.util.Locale.getDisplayName(java.util.Locale)
      getDisplayNameA(arg0: Java.Locale, cb: Callback<string>): void;
      getDisplayName(arg0: Java.Locale): string;
      getDisplayNameP(arg0: Java.Locale): Promise<string>;
      // public final java.lang.String java.util.Locale.getDisplayName()
      getDisplayNameA( cb: Callback<string>): void;
      getDisplayName(): string;
      getDisplayNameP(): Promise<string>;
      // public java.lang.String java.util.Locale.getDisplayScript(java.util.Locale)
      getDisplayScriptA(arg0: Java.Locale, cb: Callback<string>): void;
      getDisplayScript(arg0: Java.Locale): string;
      getDisplayScriptP(arg0: Java.Locale): Promise<string>;
      // public java.lang.String java.util.Locale.getDisplayScript()
      getDisplayScriptA( cb: Callback<string>): void;
      getDisplayScript(): string;
      getDisplayScriptP(): Promise<string>;
      // public java.lang.String java.util.Locale.getDisplayVariant(java.util.Locale)
      getDisplayVariantA(arg0: Java.Locale, cb: Callback<string>): void;
      getDisplayVariant(arg0: Java.Locale): string;
      getDisplayVariantP(arg0: Java.Locale): Promise<string>;
      // public final java.lang.String java.util.Locale.getDisplayVariant()
      getDisplayVariantA( cb: Callback<string>): void;
      getDisplayVariant(): string;
      getDisplayVariantP(): Promise<string>;
      // public java.lang.String java.util.Locale.getExtension(char)
      getExtensionA(arg0: object_t, cb: Callback<string>): void;
      getExtension(arg0: object_t): string;
      getExtensionP(arg0: object_t): Promise<string>;
      // public java.util.Set<java.lang.Character> java.util.Locale.getExtensionKeys()
      getExtensionKeysA( cb: Callback<Java.Set>): void;
      getExtensionKeys(): Java.Set;
      getExtensionKeysP(): Promise<Java.Set>;
      // public java.lang.String java.util.Locale.getISO3Country() throws java.util.MissingResourceException
      getISO3CountryA( cb: Callback<string>): void;
      getISO3Country(): string;
      getISO3CountryP(): Promise<string>;
      // public java.lang.String java.util.Locale.getISO3Language() throws java.util.MissingResourceException
      getISO3LanguageA( cb: Callback<string>): void;
      getISO3Language(): string;
      getISO3LanguageP(): Promise<string>;
      // public java.lang.String java.util.Locale.getLanguage()
      getLanguageA( cb: Callback<string>): void;
      getLanguage(): string;
      getLanguageP(): Promise<string>;
      // public java.lang.String java.util.Locale.getScript()
      getScriptA( cb: Callback<string>): void;
      getScript(): string;
      getScriptP(): Promise<string>;
      // public java.util.Set<java.lang.String> java.util.Locale.getUnicodeLocaleAttributes()
      getUnicodeLocaleAttributesA( cb: Callback<Java.Set>): void;
      getUnicodeLocaleAttributes(): Java.Set;
      getUnicodeLocaleAttributesP(): Promise<Java.Set>;
      // public java.util.Set<java.lang.String> java.util.Locale.getUnicodeLocaleKeys()
      getUnicodeLocaleKeysA( cb: Callback<Java.Set>): void;
      getUnicodeLocaleKeys(): Java.Set;
      getUnicodeLocaleKeysP(): Promise<Java.Set>;
      // public java.lang.String java.util.Locale.getUnicodeLocaleType(java.lang.String)
      getUnicodeLocaleTypeA(arg0: string_t, cb: Callback<string>): void;
      getUnicodeLocaleType(arg0: string_t): string;
      getUnicodeLocaleTypeP(arg0: string_t): Promise<string>;
      // public java.lang.String java.util.Locale.getVariant()
      getVariantA( cb: Callback<string>): void;
      getVariant(): string;
      getVariantP(): Promise<string>;
      // public boolean java.util.Locale.hasExtensions()
      hasExtensionsA( cb: Callback<boolean>): void;
      hasExtensions(): boolean;
      hasExtensionsP(): Promise<boolean>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.util.Locale java.util.Locale.stripExtensions()
      stripExtensionsA( cb: Callback<Java.Locale>): void;
      stripExtensions(): Java.Locale;
      stripExtensionsP(): Promise<Java.Locale>;
      // public java.lang.String java.util.Locale.toLanguageTag()
      toLanguageTagA( cb: Callback<string>): void;
      toLanguageTag(): string;
      toLanguageTagP(): Promise<string>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Locale {
      export interface Static {
        ENGLISH: Java.Locale;
        FRENCH: Java.Locale;
        GERMAN: Java.Locale;
        ITALIAN: Java.Locale;
        JAPANESE: Java.Locale;
        KOREAN: Java.Locale;
        CHINESE: Java.Locale;
        SIMPLIFIED_CHINESE: Java.Locale;
        TRADITIONAL_CHINESE: Java.Locale;
        FRANCE: Java.Locale;
        GERMANY: Java.Locale;
        ITALY: Java.Locale;
        JAPAN: Java.Locale;
        KOREA: Java.Locale;
        CHINA: Java.Locale;
        PRC: Java.Locale;
        TAIWAN: Java.Locale;
        UK: Java.Locale;
        US: Java.Locale;
        CANADA: Java.Locale;
        CANADA_FRENCH: Java.Locale;
        ROOT: Java.Locale;
        PRIVATE_USE_EXTENSION: object_t;
        UNICODE_LOCALE_EXTENSION: object_t;
        new (arg0: string_t, arg1: string_t, arg2: string_t): java.util.Locale;
        new (arg0: string_t, arg1: string_t): java.util.Locale;
        new (arg0: string_t): java.util.Locale;
        // public static java.util.List<java.util.Locale> java.util.Locale.filter(java.util.List<java.util.Locale$LanguageRange>,java.util.Collection<java.util.Locale>,java.util.Locale$FilteringMode)
        filterA(arg0: Java.List, arg1: Java.Collection, arg2: Java.Locale$FilteringMode, cb: Callback<Java.List>): void;
        filter(arg0: Java.List, arg1: Java.Collection, arg2: Java.Locale$FilteringMode): Java.List;
        filterP(arg0: Java.List, arg1: Java.Collection, arg2: Java.Locale$FilteringMode): Promise<Java.List>;
        // public static java.util.List<java.util.Locale> java.util.Locale.filter(java.util.List<java.util.Locale$LanguageRange>,java.util.Collection<java.util.Locale>)
        filterA(arg0: Java.List, arg1: Java.Collection, cb: Callback<Java.List>): void;
        filter(arg0: Java.List, arg1: Java.Collection): Java.List;
        filterP(arg0: Java.List, arg1: Java.Collection): Promise<Java.List>;
        // public static java.util.List<java.lang.String> java.util.Locale.filterTags(java.util.List<java.util.Locale$LanguageRange>,java.util.Collection<java.lang.String>,java.util.Locale$FilteringMode)
        filterTagsA(arg0: Java.List, arg1: Java.Collection, arg2: Java.Locale$FilteringMode, cb: Callback<Java.List>): void;
        filterTags(arg0: Java.List, arg1: Java.Collection, arg2: Java.Locale$FilteringMode): Java.List;
        filterTagsP(arg0: Java.List, arg1: Java.Collection, arg2: Java.Locale$FilteringMode): Promise<Java.List>;
        // public static java.util.List<java.lang.String> java.util.Locale.filterTags(java.util.List<java.util.Locale$LanguageRange>,java.util.Collection<java.lang.String>)
        filterTagsA(arg0: Java.List, arg1: Java.Collection, cb: Callback<Java.List>): void;
        filterTags(arg0: Java.List, arg1: Java.Collection): Java.List;
        filterTagsP(arg0: Java.List, arg1: Java.Collection): Promise<Java.List>;
        // public static java.util.Locale java.util.Locale.forLanguageTag(java.lang.String)
        forLanguageTagA(arg0: string_t, cb: Callback<Java.Locale>): void;
        forLanguageTag(arg0: string_t): Java.Locale;
        forLanguageTagP(arg0: string_t): Promise<Java.Locale>;
        // public static java.util.Locale[] java.util.Locale.getAvailableLocales()
        getAvailableLocalesA( cb: Callback<Java.Locale[]>): void;
        getAvailableLocales(): Java.Locale[];
        getAvailableLocalesP(): Promise<Java.Locale[]>;
        // public static java.util.Locale java.util.Locale.getDefault(java.util.Locale$Category)
        getDefaultA(arg0: Java.Locale$Category, cb: Callback<Java.Locale>): void;
        getDefault(arg0: Java.Locale$Category): Java.Locale;
        getDefaultP(arg0: Java.Locale$Category): Promise<Java.Locale>;
        // public static java.util.Locale java.util.Locale.getDefault()
        getDefaultA( cb: Callback<Java.Locale>): void;
        getDefault(): Java.Locale;
        getDefaultP(): Promise<Java.Locale>;
        // public static java.lang.String[] java.util.Locale.getISOCountries()
        getISOCountriesA( cb: Callback<string[]>): void;
        getISOCountries(): string[];
        getISOCountriesP(): Promise<string[]>;
        // public static java.lang.String[] java.util.Locale.getISOLanguages()
        getISOLanguagesA( cb: Callback<string[]>): void;
        getISOLanguages(): string[];
        getISOLanguagesP(): Promise<string[]>;
        // public static java.util.Locale java.util.Locale.lookup(java.util.List<java.util.Locale$LanguageRange>,java.util.Collection<java.util.Locale>)
        lookupA(arg0: Java.List, arg1: Java.Collection, cb: Callback<Java.Locale>): void;
        lookup(arg0: Java.List, arg1: Java.Collection): Java.Locale;
        lookupP(arg0: Java.List, arg1: Java.Collection): Promise<Java.Locale>;
        // public static java.lang.String java.util.Locale.lookupTag(java.util.List<java.util.Locale$LanguageRange>,java.util.Collection<java.lang.String>)
        lookupTagA(arg0: Java.List, arg1: Java.Collection, cb: Callback<string>): void;
        lookupTag(arg0: Java.List, arg1: Java.Collection): string;
        lookupTagP(arg0: Java.List, arg1: Java.Collection): Promise<string>;
        // public static synchronized void java.util.Locale.setDefault(java.util.Locale$Category,java.util.Locale)
        setDefaultA(arg0: Java.Locale$Category, arg1: Java.Locale, cb: Callback<void>): void;
        setDefault(arg0: Java.Locale$Category, arg1: Java.Locale): void;
        setDefaultP(arg0: Java.Locale$Category, arg1: Java.Locale): Promise<void>;
        // public static synchronized void java.util.Locale.setDefault(java.util.Locale)
        setDefaultA(arg0: Java.Locale, cb: Callback<void>): void;
        setDefault(arg0: Java.Locale): void;
        setDefaultP(arg0: Java.Locale): Promise<void>;
      }
    }
  }

  export module java.util {
    export interface Locale$Builder extends Java.java.lang.Object {
      // public java.util.Locale$Builder java.util.Locale$Builder.addUnicodeLocaleAttribute(java.lang.String)
      addUnicodeLocaleAttributeA(arg0: string_t, cb: Callback<Java.Locale$Builder>): void;
      addUnicodeLocaleAttribute(arg0: string_t): Java.Locale$Builder;
      addUnicodeLocaleAttributeP(arg0: string_t): Promise<Java.Locale$Builder>;
      // public java.util.Locale java.util.Locale$Builder.build()
      buildA( cb: Callback<Java.Locale>): void;
      build(): Java.Locale;
      buildP(): Promise<Java.Locale>;
      // public java.util.Locale$Builder java.util.Locale$Builder.clear()
      clearA( cb: Callback<Java.Locale$Builder>): void;
      clear(): Java.Locale$Builder;
      clearP(): Promise<Java.Locale$Builder>;
      // public java.util.Locale$Builder java.util.Locale$Builder.clearExtensions()
      clearExtensionsA( cb: Callback<Java.Locale$Builder>): void;
      clearExtensions(): Java.Locale$Builder;
      clearExtensionsP(): Promise<Java.Locale$Builder>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.util.Locale$Builder java.util.Locale$Builder.removeUnicodeLocaleAttribute(java.lang.String)
      removeUnicodeLocaleAttributeA(arg0: string_t, cb: Callback<Java.Locale$Builder>): void;
      removeUnicodeLocaleAttribute(arg0: string_t): Java.Locale$Builder;
      removeUnicodeLocaleAttributeP(arg0: string_t): Promise<Java.Locale$Builder>;
      // public java.util.Locale$Builder java.util.Locale$Builder.setExtension(char,java.lang.String)
      setExtensionA(arg0: object_t, arg1: string_t, cb: Callback<Java.Locale$Builder>): void;
      setExtension(arg0: object_t, arg1: string_t): Java.Locale$Builder;
      setExtensionP(arg0: object_t, arg1: string_t): Promise<Java.Locale$Builder>;
      // public java.util.Locale$Builder java.util.Locale$Builder.setLanguage(java.lang.String)
      setLanguageA(arg0: string_t, cb: Callback<Java.Locale$Builder>): void;
      setLanguage(arg0: string_t): Java.Locale$Builder;
      setLanguageP(arg0: string_t): Promise<Java.Locale$Builder>;
      // public java.util.Locale$Builder java.util.Locale$Builder.setLanguageTag(java.lang.String)
      setLanguageTagA(arg0: string_t, cb: Callback<Java.Locale$Builder>): void;
      setLanguageTag(arg0: string_t): Java.Locale$Builder;
      setLanguageTagP(arg0: string_t): Promise<Java.Locale$Builder>;
      // public java.util.Locale$Builder java.util.Locale$Builder.setLocale(java.util.Locale)
      setLocaleA(arg0: Java.Locale, cb: Callback<Java.Locale$Builder>): void;
      setLocale(arg0: Java.Locale): Java.Locale$Builder;
      setLocaleP(arg0: Java.Locale): Promise<Java.Locale$Builder>;
      // public java.util.Locale$Builder java.util.Locale$Builder.setRegion(java.lang.String)
      setRegionA(arg0: string_t, cb: Callback<Java.Locale$Builder>): void;
      setRegion(arg0: string_t): Java.Locale$Builder;
      setRegionP(arg0: string_t): Promise<Java.Locale$Builder>;
      // public java.util.Locale$Builder java.util.Locale$Builder.setScript(java.lang.String)
      setScriptA(arg0: string_t, cb: Callback<Java.Locale$Builder>): void;
      setScript(arg0: string_t): Java.Locale$Builder;
      setScriptP(arg0: string_t): Promise<Java.Locale$Builder>;
      // public java.util.Locale$Builder java.util.Locale$Builder.setUnicodeLocaleKeyword(java.lang.String,java.lang.String)
      setUnicodeLocaleKeywordA(arg0: string_t, arg1: string_t, cb: Callback<Java.Locale$Builder>): void;
      setUnicodeLocaleKeyword(arg0: string_t, arg1: string_t): Java.Locale$Builder;
      setUnicodeLocaleKeywordP(arg0: string_t, arg1: string_t): Promise<Java.Locale$Builder>;
      // public java.util.Locale$Builder java.util.Locale$Builder.setVariant(java.lang.String)
      setVariantA(arg0: string_t, cb: Callback<Java.Locale$Builder>): void;
      setVariant(arg0: string_t): Java.Locale$Builder;
      setVariantP(arg0: string_t): Promise<Java.Locale$Builder>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Locale$Builder {
      export interface Static {
        new (): java.util.Locale$Builder;
      }
    }
  }

  export module java.util {
    export interface Locale$Category extends Java.java.lang.Object {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClassA( cb: Callback<Java.Class>): void;
      getDeclaringClass(): Java.Class;
      getDeclaringClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      nameA( cb: Callback<string>): void;
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinalA( cb: Callback<number>): void;
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Locale$Category {
      export interface Static {
        DISPLAY: Java.Locale$Category;
        FORMAT: Java.Locale$Category;
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOfA(arg0: Java.Class, arg1: string_t, cb: Callback<object_t>): void;
        valueOf(arg0: Java.Class, arg1: string_t): object_t;
        valueOfP(arg0: Java.Class, arg1: string_t): Promise<object_t>;
        // public static java.util.Locale$Category java.util.Locale$Category.valueOf(java.lang.String)
        valueOfA(arg0: string_t, cb: Callback<Java.Locale$Category>): void;
        valueOf(arg0: string_t): Java.Locale$Category;
        valueOfP(arg0: string_t): Promise<Java.Locale$Category>;
        // public static java.util.Locale$Category[] java.util.Locale$Category.values()
        valuesA( cb: Callback<Java.Locale$Category[]>): void;
        values(): Java.Locale$Category[];
        valuesP(): Promise<Java.Locale$Category[]>;
      }
    }
  }

  export module java.util {
    export interface Locale$FilteringMode extends Java.java.lang.Object {
      // public int java.lang.Enum.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public final int java.lang.Enum.compareTo(E)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public final java.lang.Class<E> java.lang.Enum.getDeclaringClass()
      getDeclaringClassA( cb: Callback<Java.Class>): void;
      getDeclaringClass(): Java.Class;
      getDeclaringClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final java.lang.String java.lang.Enum.name()
      nameA( cb: Callback<string>): void;
      name(): string;
      nameP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public final int java.lang.Enum.ordinal()
      ordinalA( cb: Callback<number>): void;
      ordinal(): number;
      ordinalP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Locale$FilteringMode {
      export interface Static {
        AUTOSELECT_FILTERING: Java.Locale$FilteringMode;
        EXTENDED_FILTERING: Java.Locale$FilteringMode;
        IGNORE_EXTENDED_RANGES: Java.Locale$FilteringMode;
        MAP_EXTENDED_RANGES: Java.Locale$FilteringMode;
        REJECT_EXTENDED_RANGES: Java.Locale$FilteringMode;
        // public static <T> T java.lang.Enum.valueOf(java.lang.Class<T>,java.lang.String)
        valueOfA(arg0: Java.Class, arg1: string_t, cb: Callback<object_t>): void;
        valueOf(arg0: Java.Class, arg1: string_t): object_t;
        valueOfP(arg0: Java.Class, arg1: string_t): Promise<object_t>;
        // public static java.util.Locale$FilteringMode java.util.Locale$FilteringMode.valueOf(java.lang.String)
        valueOfA(arg0: string_t, cb: Callback<Java.Locale$FilteringMode>): void;
        valueOf(arg0: string_t): Java.Locale$FilteringMode;
        valueOfP(arg0: string_t): Promise<Java.Locale$FilteringMode>;
        // public static java.util.Locale$FilteringMode[] java.util.Locale$FilteringMode.values()
        valuesA( cb: Callback<Java.Locale$FilteringMode[]>): void;
        values(): Java.Locale$FilteringMode[];
        valuesP(): Promise<Java.Locale$FilteringMode[]>;
      }
    }
  }

  export module java.util {
    export interface Locale$LanguageRange extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.util.Locale$LanguageRange.getRange()
      getRangeA( cb: Callback<string>): void;
      getRange(): string;
      getRangeP(): Promise<string>;
      // public double java.util.Locale$LanguageRange.getWeight()
      getWeightA( cb: Callback<number>): void;
      getWeight(): number;
      getWeightP(): Promise<number>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Locale$LanguageRange {
      export interface Static {
        MAX_WEIGHT: number;
        MIN_WEIGHT: number;
        new (arg0: string_t, arg1: double_t): java.util.Locale$LanguageRange;
        new (arg0: string_t): java.util.Locale$LanguageRange;
        // public static java.util.List<java.util.Locale$LanguageRange> java.util.Locale$LanguageRange.mapEquivalents(java.util.List<java.util.Locale$LanguageRange>,java.util.Map<java.lang.String, java.util.List<java.lang.String>>)
        mapEquivalentsA(arg0: Java.List, arg1: Java.Map, cb: Callback<Java.List>): void;
        mapEquivalents(arg0: Java.List, arg1: Java.Map): Java.List;
        mapEquivalentsP(arg0: Java.List, arg1: Java.Map): Promise<Java.List>;
        // public static java.util.List<java.util.Locale$LanguageRange> java.util.Locale$LanguageRange.parse(java.lang.String,java.util.Map<java.lang.String, java.util.List<java.lang.String>>)
        parseA(arg0: string_t, arg1: Java.Map, cb: Callback<Java.List>): void;
        parse(arg0: string_t, arg1: Java.Map): Java.List;
        parseP(arg0: string_t, arg1: Java.Map): Promise<Java.List>;
        // public static java.util.List<java.util.Locale$LanguageRange> java.util.Locale$LanguageRange.parse(java.lang.String)
        parseA(arg0: string_t, cb: Callback<Java.List>): void;
        parse(arg0: string_t): Java.List;
        parseP(arg0: string_t): Promise<Java.List>;
      }
    }
  }

  export module java.util {
    export interface LongSummaryStatistics extends Java.java.lang.Object {
      // public void java.util.LongSummaryStatistics.accept(long)
      acceptA(arg0: long_t, cb: Callback<void>): void;
      accept(arg0: long_t): void;
      acceptP(arg0: long_t): Promise<void>;
      // public void java.util.LongSummaryStatistics.accept(int)
      acceptA(arg0: integer_t, cb: Callback<void>): void;
      accept(arg0: integer_t): void;
      acceptP(arg0: integer_t): Promise<void>;
      // public default java.util.function.LongConsumer java.util.function.LongConsumer.andThen(java.util.function.LongConsumer)
      andThenA(arg0: object_t, cb: Callback<object_t>): void;
      andThen(arg0: object_t): object_t;
      andThenP(arg0: object_t): Promise<object_t>;
      // public default java.util.function.IntConsumer java.util.function.IntConsumer.andThen(java.util.function.IntConsumer)
      andThenA(arg0: object_t, cb: Callback<object_t>): void;
      andThen(arg0: object_t): object_t;
      andThenP(arg0: object_t): Promise<object_t>;
      // public void java.util.LongSummaryStatistics.combine(java.util.LongSummaryStatistics)
      combineA(arg0: Java.LongSummaryStatistics, cb: Callback<void>): void;
      combine(arg0: Java.LongSummaryStatistics): void;
      combineP(arg0: Java.LongSummaryStatistics): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final double java.util.LongSummaryStatistics.getAverage()
      getAverageA( cb: Callback<number>): void;
      getAverage(): number;
      getAverageP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public final long java.util.LongSummaryStatistics.getCount()
      getCountA( cb: Callback<longValue_t>): void;
      getCount(): longValue_t;
      getCountP(): Promise<longValue_t>;
      // public final long java.util.LongSummaryStatistics.getMax()
      getMaxA( cb: Callback<longValue_t>): void;
      getMax(): longValue_t;
      getMaxP(): Promise<longValue_t>;
      // public final long java.util.LongSummaryStatistics.getMin()
      getMinA( cb: Callback<longValue_t>): void;
      getMin(): longValue_t;
      getMinP(): Promise<longValue_t>;
      // public final long java.util.LongSummaryStatistics.getSum()
      getSumA( cb: Callback<longValue_t>): void;
      getSum(): longValue_t;
      getSumP(): Promise<longValue_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module LongSummaryStatistics {
      export interface Static {
        new (): java.util.LongSummaryStatistics;
      }
    }
  }

  export module java.util {
    export interface Map extends Java.java.lang.Object {
      // public abstract void java.util.Map.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      compute(arg0: object_t, arg1: object_t): object_t;
      computeP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsentA(arg0: object_t, arg1: Java.Function, cb: Callback<object_t>): void;
      computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      computeIfPresent(arg0: object_t, arg1: object_t): object_t;
      computeIfPresentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKeyA(arg0: object_t, cb: Callback<boolean>): void;
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValueA(arg0: object_t, cb: Callback<boolean>): void;
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySetA( cb: Callback<Java.Set>): void;
      entrySet(): Java.Set;
      entrySetP(): Promise<Java.Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      getA(arg0: object_t, cb: Callback<object_t>): void;
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefaultA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySetA( cb: Callback<Java.Set>): void;
      keySet(): Java.Set;
      keySetP(): Promise<Java.Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      mergeA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<object_t>): void;
      merge(arg0: object_t, arg1: object_t, arg2: object_t): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<object_t>;
      // public abstract V java.util.Map.put(K,V)
      putA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAllA(arg0: Java.Map, cb: Callback<void>): void;
      putAll(arg0: Java.Map): void;
      putAllP(arg0: Java.Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      removeA(arg0: object_t, arg1: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<object_t>): void;
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replaceA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<boolean>): void;
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replaceA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract int java.util.Map.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      valuesA( cb: Callback<Java.Collection>): void;
      values(): Java.Collection;
      valuesP(): Promise<Java.Collection>;
    }
    export module Map {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface Map$Entry extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract K java.util.Map$Entry.getKey()
      getKeyA( cb: Callback<object_t>): void;
      getKey(): object_t;
      getKeyP(): Promise<object_t>;
      // public abstract V java.util.Map$Entry.getValue()
      getValueA( cb: Callback<object_t>): void;
      getValue(): object_t;
      getValueP(): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract V java.util.Map$Entry.setValue(V)
      setValueA(arg0: object_t, cb: Callback<object_t>): void;
      setValue(arg0: object_t): object_t;
      setValueP(arg0: object_t): Promise<object_t>;
    }
    export module Map$Entry {
      export interface Static {
        // public static <K,V> java.util.Comparator<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map$Entry.comparingByKey(java.util.Comparator<? super K>)
        comparingByKeyA(arg0: Java.Comparator, cb: Callback<Java.Comparator>): void;
        comparingByKey(arg0: Java.Comparator): Java.Comparator;
        comparingByKeyP(arg0: Java.Comparator): Promise<Java.Comparator>;
        // public static <K,V> java.util.Comparator<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map$Entry.comparingByKey()
        comparingByKeyA( cb: Callback<Java.Comparator>): void;
        comparingByKey(): Java.Comparator;
        comparingByKeyP(): Promise<Java.Comparator>;
        // public static <K,V> java.util.Comparator<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map$Entry.comparingByValue(java.util.Comparator<? super V>)
        comparingByValueA(arg0: Java.Comparator, cb: Callback<Java.Comparator>): void;
        comparingByValue(arg0: Java.Comparator): Java.Comparator;
        comparingByValueP(arg0: Java.Comparator): Promise<Java.Comparator>;
        // public static <K,V> java.util.Comparator<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map$Entry.comparingByValue()
        comparingByValueA( cb: Callback<Java.Comparator>): void;
        comparingByValue(): Java.Comparator;
        comparingByValueP(): Promise<Java.Comparator>;
      }
    }
  }

  export module java.util {
    export interface MissingFormatArgumentException extends Java.java.util.IllegalFormatException {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.util.MissingFormatArgumentException.getFormatSpecifier()
      getFormatSpecifierA( cb: Callback<string>): void;
      getFormatSpecifier(): string;
      getFormatSpecifierP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MissingFormatArgumentException {
      export interface Static {
        new (arg0: string_t): java.util.MissingFormatArgumentException;
      }
    }
  }

  export module java.util {
    export interface MissingFormatWidthException extends Java.java.util.IllegalFormatException {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.util.MissingFormatWidthException.getFormatSpecifier()
      getFormatSpecifierA( cb: Callback<string>): void;
      getFormatSpecifier(): string;
      getFormatSpecifierP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MissingFormatWidthException {
      export interface Static {
        new (arg0: string_t): java.util.MissingFormatWidthException;
      }
    }
  }

  export module java.util {
    export interface MissingResourceException extends Java.java.lang.Object {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.util.MissingResourceException.getClassName()
      getClassNameA( cb: Callback<string>): void;
      getClassName(): string;
      getClassNameP(): Promise<string>;
      // public java.lang.String java.util.MissingResourceException.getKey()
      getKeyA( cb: Callback<string>): void;
      getKey(): string;
      getKeyP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module MissingResourceException {
      export interface Static {
        new (arg0: string_t, arg1: string_t, arg2: string_t): java.util.MissingResourceException;
      }
    }
  }

  export module java.util {
    export interface NavigableMap extends Java.java.util.SortedMap {
      // public abstract java.util.Map.java.util.Map$Entry<K, V> java.util.NavigableMap.ceilingEntry(K)
      ceilingEntryA(arg0: object_t, cb: Callback<Java.Map$Entry>): void;
      ceilingEntry(arg0: object_t): Java.Map$Entry;
      ceilingEntryP(arg0: object_t): Promise<Java.Map$Entry>;
      // public abstract K java.util.NavigableMap.ceilingKey(K)
      ceilingKeyA(arg0: object_t, cb: Callback<object_t>): void;
      ceilingKey(arg0: object_t): object_t;
      ceilingKeyP(arg0: object_t): Promise<object_t>;
      // public abstract void java.util.Map.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public abstract java.util.Comparator<? super K> java.util.SortedMap.comparator()
      comparatorA( cb: Callback<Java.Comparator>): void;
      comparator(): Java.Comparator;
      comparatorP(): Promise<Java.Comparator>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      compute(arg0: object_t, arg1: object_t): object_t;
      computeP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsentA(arg0: object_t, arg1: Java.Function, cb: Callback<object_t>): void;
      computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      computeIfPresent(arg0: object_t, arg1: object_t): object_t;
      computeIfPresentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKeyA(arg0: object_t, cb: Callback<boolean>): void;
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValueA(arg0: object_t, cb: Callback<boolean>): void;
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.NavigableSet<K> java.util.NavigableMap.descendingKeySet()
      descendingKeySetA( cb: Callback<Java.NavigableSet>): void;
      descendingKeySet(): Java.NavigableSet;
      descendingKeySetP(): Promise<Java.NavigableSet>;
      // public abstract java.util.NavigableMap<K, V> java.util.NavigableMap.descendingMap()
      descendingMapA( cb: Callback<Java.NavigableMap>): void;
      descendingMap(): Java.NavigableMap;
      descendingMapP(): Promise<Java.NavigableMap>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySetA( cb: Callback<Java.Set>): void;
      entrySet(): Java.Set;
      entrySetP(): Promise<Java.Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Map.java.util.Map$Entry<K, V> java.util.NavigableMap.firstEntry()
      firstEntryA( cb: Callback<Java.Map$Entry>): void;
      firstEntry(): Java.Map$Entry;
      firstEntryP(): Promise<Java.Map$Entry>;
      // public abstract K java.util.SortedMap.firstKey()
      firstKeyA( cb: Callback<object_t>): void;
      firstKey(): object_t;
      firstKeyP(): Promise<object_t>;
      // public abstract java.util.Map.java.util.Map$Entry<K, V> java.util.NavigableMap.floorEntry(K)
      floorEntryA(arg0: object_t, cb: Callback<Java.Map$Entry>): void;
      floorEntry(arg0: object_t): Java.Map$Entry;
      floorEntryP(arg0: object_t): Promise<Java.Map$Entry>;
      // public abstract K java.util.NavigableMap.floorKey(K)
      floorKeyA(arg0: object_t, cb: Callback<object_t>): void;
      floorKey(arg0: object_t): object_t;
      floorKeyP(arg0: object_t): Promise<object_t>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      getA(arg0: object_t, cb: Callback<object_t>): void;
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefaultA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.util.NavigableMap<K, V> java.util.NavigableMap.headMap(K,boolean)
      headMapA(arg0: object_t, arg1: boolean_t, cb: Callback<Java.NavigableMap>): void;
      headMap(arg0: object_t, arg1: boolean_t): Java.NavigableMap;
      headMapP(arg0: object_t, arg1: boolean_t): Promise<Java.NavigableMap>;
      // public abstract java.util.SortedMap<K, V> java.util.SortedMap.headMap(K)
      headMapA(arg0: object_t, cb: Callback<Java.SortedMap>): void;
      headMap(arg0: object_t): Java.SortedMap;
      headMapP(arg0: object_t): Promise<Java.SortedMap>;
      // public abstract java.util.Map.java.util.Map$Entry<K, V> java.util.NavigableMap.higherEntry(K)
      higherEntryA(arg0: object_t, cb: Callback<Java.Map$Entry>): void;
      higherEntry(arg0: object_t): Java.Map$Entry;
      higherEntryP(arg0: object_t): Promise<Java.Map$Entry>;
      // public abstract K java.util.NavigableMap.higherKey(K)
      higherKeyA(arg0: object_t, cb: Callback<object_t>): void;
      higherKey(arg0: object_t): object_t;
      higherKeyP(arg0: object_t): Promise<object_t>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySetA( cb: Callback<Java.Set>): void;
      keySet(): Java.Set;
      keySetP(): Promise<Java.Set>;
      // public abstract java.util.Map.java.util.Map$Entry<K, V> java.util.NavigableMap.lastEntry()
      lastEntryA( cb: Callback<Java.Map$Entry>): void;
      lastEntry(): Java.Map$Entry;
      lastEntryP(): Promise<Java.Map$Entry>;
      // public abstract K java.util.SortedMap.lastKey()
      lastKeyA( cb: Callback<object_t>): void;
      lastKey(): object_t;
      lastKeyP(): Promise<object_t>;
      // public abstract java.util.Map.java.util.Map$Entry<K, V> java.util.NavigableMap.lowerEntry(K)
      lowerEntryA(arg0: object_t, cb: Callback<Java.Map$Entry>): void;
      lowerEntry(arg0: object_t): Java.Map$Entry;
      lowerEntryP(arg0: object_t): Promise<Java.Map$Entry>;
      // public abstract K java.util.NavigableMap.lowerKey(K)
      lowerKeyA(arg0: object_t, cb: Callback<object_t>): void;
      lowerKey(arg0: object_t): object_t;
      lowerKeyP(arg0: object_t): Promise<object_t>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      mergeA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<object_t>): void;
      merge(arg0: object_t, arg1: object_t, arg2: object_t): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<object_t>;
      // public abstract java.util.NavigableSet<K> java.util.NavigableMap.navigableKeySet()
      navigableKeySetA( cb: Callback<Java.NavigableSet>): void;
      navigableKeySet(): Java.NavigableSet;
      navigableKeySetP(): Promise<Java.NavigableSet>;
      // public abstract java.util.Map.java.util.Map$Entry<K, V> java.util.NavigableMap.pollFirstEntry()
      pollFirstEntryA( cb: Callback<Java.Map$Entry>): void;
      pollFirstEntry(): Java.Map$Entry;
      pollFirstEntryP(): Promise<Java.Map$Entry>;
      // public abstract java.util.Map.java.util.Map$Entry<K, V> java.util.NavigableMap.pollLastEntry()
      pollLastEntryA( cb: Callback<Java.Map$Entry>): void;
      pollLastEntry(): Java.Map$Entry;
      pollLastEntryP(): Promise<Java.Map$Entry>;
      // public abstract V java.util.Map.put(K,V)
      putA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAllA(arg0: Java.Map, cb: Callback<void>): void;
      putAll(arg0: Java.Map): void;
      putAllP(arg0: Java.Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      removeA(arg0: object_t, arg1: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<object_t>): void;
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replaceA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<boolean>): void;
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replaceA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract int java.util.Map.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public abstract java.util.NavigableMap<K, V> java.util.NavigableMap.subMap(K,boolean,K,boolean)
      subMapA(arg0: object_t, arg1: boolean_t, arg2: object_t, arg3: boolean_t, cb: Callback<Java.NavigableMap>): void;
      subMap(arg0: object_t, arg1: boolean_t, arg2: object_t, arg3: boolean_t): Java.NavigableMap;
      subMapP(arg0: object_t, arg1: boolean_t, arg2: object_t, arg3: boolean_t): Promise<Java.NavigableMap>;
      // public abstract java.util.SortedMap<K, V> java.util.SortedMap.subMap(K,K)
      subMapA(arg0: object_t, arg1: object_t, cb: Callback<Java.SortedMap>): void;
      subMap(arg0: object_t, arg1: object_t): Java.SortedMap;
      subMapP(arg0: object_t, arg1: object_t): Promise<Java.SortedMap>;
      // public abstract java.util.NavigableMap<K, V> java.util.NavigableMap.tailMap(K,boolean)
      tailMapA(arg0: object_t, arg1: boolean_t, cb: Callback<Java.NavigableMap>): void;
      tailMap(arg0: object_t, arg1: boolean_t): Java.NavigableMap;
      tailMapP(arg0: object_t, arg1: boolean_t): Promise<Java.NavigableMap>;
      // public abstract java.util.SortedMap<K, V> java.util.SortedMap.tailMap(K)
      tailMapA(arg0: object_t, cb: Callback<Java.SortedMap>): void;
      tailMap(arg0: object_t): Java.SortedMap;
      tailMapP(arg0: object_t): Promise<Java.SortedMap>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      valuesA( cb: Callback<Java.Collection>): void;
      values(): Java.Collection;
      valuesP(): Promise<Java.Collection>;
    }
    export module NavigableMap {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface NavigableSet extends Java.java.util.SortedSet {
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract E java.util.NavigableSet.ceiling(E)
      ceilingA(arg0: object_t, cb: Callback<object_t>): void;
      ceiling(arg0: object_t): object_t;
      ceilingP(arg0: object_t): Promise<object_t>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public abstract java.util.Comparator<? super E> java.util.SortedSet.comparator()
      comparatorA( cb: Callback<Java.Comparator>): void;
      comparator(): Java.Comparator;
      comparatorP(): Promise<Java.Comparator>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.NavigableSet.descendingIterator()
      descendingIteratorA( cb: Callback<Java.Iterator>): void;
      descendingIterator(): Java.Iterator;
      descendingIteratorP(): Promise<Java.Iterator>;
      // public abstract java.util.NavigableSet<E> java.util.NavigableSet.descendingSet()
      descendingSetA( cb: Callback<Java.NavigableSet>): void;
      descendingSet(): Java.NavigableSet;
      descendingSetP(): Promise<Java.NavigableSet>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.SortedSet.first()
      firstA( cb: Callback<object_t>): void;
      first(): object_t;
      firstP(): Promise<object_t>;
      // public abstract E java.util.NavigableSet.floor(E)
      floorA(arg0: object_t, cb: Callback<object_t>): void;
      floor(arg0: object_t): object_t;
      floorP(arg0: object_t): Promise<object_t>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.util.NavigableSet<E> java.util.NavigableSet.headSet(E,boolean)
      headSetA(arg0: object_t, arg1: boolean_t, cb: Callback<Java.NavigableSet>): void;
      headSet(arg0: object_t, arg1: boolean_t): Java.NavigableSet;
      headSetP(arg0: object_t, arg1: boolean_t): Promise<Java.NavigableSet>;
      // public abstract java.util.SortedSet<E> java.util.SortedSet.headSet(E)
      headSetA(arg0: object_t, cb: Callback<Java.SortedSet>): void;
      headSet(arg0: object_t): Java.SortedSet;
      headSetP(arg0: object_t): Promise<Java.SortedSet>;
      // public abstract E java.util.NavigableSet.higher(E)
      higherA(arg0: object_t, cb: Callback<object_t>): void;
      higher(arg0: object_t): object_t;
      higherP(arg0: object_t): Promise<object_t>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public abstract E java.util.SortedSet.last()
      lastA( cb: Callback<object_t>): void;
      last(): object_t;
      lastP(): Promise<object_t>;
      // public abstract E java.util.NavigableSet.lower(E)
      lowerA(arg0: object_t, cb: Callback<object_t>): void;
      lower(arg0: object_t): object_t;
      lowerP(arg0: object_t): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract E java.util.NavigableSet.pollFirst()
      pollFirstA( cb: Callback<object_t>): void;
      pollFirst(): object_t;
      pollFirstP(): Promise<object_t>;
      // public abstract E java.util.NavigableSet.pollLast()
      pollLastA( cb: Callback<object_t>): void;
      pollLast(): object_t;
      pollLastP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.NavigableSet<E> java.util.NavigableSet.subSet(E,boolean,E,boolean)
      subSetA(arg0: object_t, arg1: boolean_t, arg2: object_t, arg3: boolean_t, cb: Callback<Java.NavigableSet>): void;
      subSet(arg0: object_t, arg1: boolean_t, arg2: object_t, arg3: boolean_t): Java.NavigableSet;
      subSetP(arg0: object_t, arg1: boolean_t, arg2: object_t, arg3: boolean_t): Promise<Java.NavigableSet>;
      // public abstract java.util.SortedSet<E> java.util.SortedSet.subSet(E,E)
      subSetA(arg0: object_t, arg1: object_t, cb: Callback<Java.SortedSet>): void;
      subSet(arg0: object_t, arg1: object_t): Java.SortedSet;
      subSetP(arg0: object_t, arg1: object_t): Promise<Java.SortedSet>;
      // public abstract java.util.NavigableSet<E> java.util.NavigableSet.tailSet(E,boolean)
      tailSetA(arg0: object_t, arg1: boolean_t, cb: Callback<Java.NavigableSet>): void;
      tailSet(arg0: object_t, arg1: boolean_t): Java.NavigableSet;
      tailSetP(arg0: object_t, arg1: boolean_t): Promise<Java.NavigableSet>;
      // public abstract java.util.SortedSet<E> java.util.SortedSet.tailSet(E)
      tailSetA(arg0: object_t, cb: Callback<Java.SortedSet>): void;
      tailSet(arg0: object_t): Java.SortedSet;
      tailSetP(arg0: object_t): Promise<Java.SortedSet>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module NavigableSet {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface NoSuchElementException extends Java.java.lang.Object {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module NoSuchElementException {
      export interface Static {
        new (arg0: string_t): java.util.NoSuchElementException;
        new (): java.util.NoSuchElementException;
      }
    }
  }

  export module java.util {
    export interface Objects extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Objects {
      export interface Static {
        // public static <T> int java.util.Objects.compare(T,T,java.util.Comparator<? super T>)
        compareA(arg0: object_t, arg1: object_t, arg2: Java.Comparator, cb: Callback<number>): void;
        compare(arg0: object_t, arg1: object_t, arg2: Java.Comparator): number;
        compareP(arg0: object_t, arg1: object_t, arg2: Java.Comparator): Promise<number>;
        // public static boolean java.util.Objects.deepEquals(java.lang.Object,java.lang.Object)
        deepEqualsA(arg0: object_t, arg1: object_t, cb: Callback<boolean>): void;
        deepEquals(arg0: object_t, arg1: object_t): boolean;
        deepEqualsP(arg0: object_t, arg1: object_t): Promise<boolean>;
        // public static boolean java.util.Objects.equals(java.lang.Object,java.lang.Object)
        equalsA(arg0: object_t, arg1: object_t, cb: Callback<boolean>): void;
        equals(arg0: object_t, arg1: object_t): boolean;
        equalsP(arg0: object_t, arg1: object_t): Promise<boolean>;
        // public static int java.util.Objects.hash(java.lang.Object...)
        hashA(arg0: object_array_t, cb: Callback<number>): void;
        hash(...arg0: object_t[]): number;
        hash(arg0: object_array_t): number;
        hashP(...arg0: object_t[]): Promise<number>;
        hashP(arg0: object_array_t): Promise<number>;
        // public static int java.util.Objects.hashCode(java.lang.Object)
        hashCodeA(arg0: object_t, cb: Callback<number>): void;
        hashCode(arg0: object_t): number;
        hashCodeP(arg0: object_t): Promise<number>;
        // public static boolean java.util.Objects.isNull(java.lang.Object)
        isNullA(arg0: object_t, cb: Callback<boolean>): void;
        isNull(arg0: object_t): boolean;
        isNullP(arg0: object_t): Promise<boolean>;
        // public static boolean java.util.Objects.nonNull(java.lang.Object)
        nonNullA(arg0: object_t, cb: Callback<boolean>): void;
        nonNull(arg0: object_t): boolean;
        nonNullP(arg0: object_t): Promise<boolean>;
        // public static <T> T java.util.Objects.requireNonNull(T,java.util.function.Supplier<java.lang.String>)
        requireNonNullA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
        requireNonNull(arg0: object_t, arg1: object_t): object_t;
        requireNonNullP(arg0: object_t, arg1: object_t): Promise<object_t>;
        // public static <T> T java.util.Objects.requireNonNull(T,java.lang.String)
        requireNonNullA(arg0: object_t, arg1: string_t, cb: Callback<object_t>): void;
        requireNonNull(arg0: object_t, arg1: string_t): object_t;
        requireNonNullP(arg0: object_t, arg1: string_t): Promise<object_t>;
        // public static <T> T java.util.Objects.requireNonNull(T)
        requireNonNullA(arg0: object_t, cb: Callback<object_t>): void;
        requireNonNull(arg0: object_t): object_t;
        requireNonNullP(arg0: object_t): Promise<object_t>;
        // public static java.lang.String java.util.Objects.toString(java.lang.Object,java.lang.String)
        toStringA(arg0: object_t, arg1: string_t, cb: Callback<string>): void;
        toString(arg0: object_t, arg1: string_t): string;
        toStringP(arg0: object_t, arg1: string_t): Promise<string>;
        // public static java.lang.String java.util.Objects.toString(java.lang.Object)
        toStringA(arg0: object_t, cb: Callback<string>): void;
        toString(arg0: object_t): string;
        toStringP(arg0: object_t): Promise<string>;
      }
    }
  }

  export module java.util {
    export interface Observable extends Java.java.lang.Object {
      // public synchronized void java.util.Observable.addObserver(java.util.Observer)
      addObserverA(arg0: Java.Observer, cb: Callback<void>): void;
      addObserver(arg0: Java.Observer): void;
      addObserverP(arg0: Java.Observer): Promise<void>;
      // public synchronized int java.util.Observable.countObservers()
      countObserversA( cb: Callback<number>): void;
      countObservers(): number;
      countObserversP(): Promise<number>;
      // public synchronized void java.util.Observable.deleteObserver(java.util.Observer)
      deleteObserverA(arg0: Java.Observer, cb: Callback<void>): void;
      deleteObserver(arg0: Java.Observer): void;
      deleteObserverP(arg0: Java.Observer): Promise<void>;
      // public synchronized void java.util.Observable.deleteObservers()
      deleteObserversA( cb: Callback<void>): void;
      deleteObservers(): void;
      deleteObserversP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public synchronized boolean java.util.Observable.hasChanged()
      hasChangedA( cb: Callback<boolean>): void;
      hasChanged(): boolean;
      hasChangedP(): Promise<boolean>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.util.Observable.notifyObservers(java.lang.Object)
      notifyObserversA(arg0: object_t, cb: Callback<void>): void;
      notifyObservers(arg0: object_t): void;
      notifyObserversP(arg0: object_t): Promise<void>;
      // public void java.util.Observable.notifyObservers()
      notifyObserversA( cb: Callback<void>): void;
      notifyObservers(): void;
      notifyObserversP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Observable {
      export interface Static {
        new (): java.util.Observable;
      }
    }
  }

  export module java.util {
    export interface Observer extends Java.java.lang.Object {
      // public abstract void java.util.Observer.update(java.util.Observable,java.lang.Object)
      updateA(arg0: Java.Observable, arg1: object_t, cb: Callback<void>): void;
      update(arg0: Java.Observable, arg1: object_t): void;
      updateP(arg0: Java.Observable, arg1: object_t): Promise<void>;
    }
    export module Observer {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface Optional extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.util.Optional<T> java.util.Optional.filter(java.util.function.Predicate<? super T>)
      filterA(arg0: object_t, cb: Callback<Java.Optional>): void;
      filter(arg0: object_t): Java.Optional;
      filterP(arg0: object_t): Promise<Java.Optional>;
      // public <U> java.util.Optional<U> java.util.Optional.flatMap(java.util.function.Function<? super T, java.util.Optional<U>>)
      flatMapA(arg0: Java.Function, cb: Callback<Java.Optional>): void;
      flatMap(arg0: Java.Function): Java.Optional;
      flatMapP(arg0: Java.Function): Promise<Java.Optional>;
      // public T java.util.Optional.get()
      getA( cb: Callback<object_t>): void;
      get(): object_t;
      getP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public void java.util.Optional.ifPresent(java.util.function.Consumer<? super T>)
      ifPresentA(arg0: object_t, cb: Callback<void>): void;
      ifPresent(arg0: object_t): void;
      ifPresentP(arg0: object_t): Promise<void>;
      // public boolean java.util.Optional.isPresent()
      isPresentA( cb: Callback<boolean>): void;
      isPresent(): boolean;
      isPresentP(): Promise<boolean>;
      // public <U> java.util.Optional<U> java.util.Optional.map(java.util.function.Function<? super T, ? extends U>)
      mapA(arg0: Java.Function, cb: Callback<Java.Optional>): void;
      map(arg0: Java.Function): Java.Optional;
      mapP(arg0: Java.Function): Promise<Java.Optional>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public T java.util.Optional.orElse(T)
      orElseA(arg0: object_t, cb: Callback<object_t>): void;
      orElse(arg0: object_t): object_t;
      orElseP(arg0: object_t): Promise<object_t>;
      // public T java.util.Optional.orElseGet(java.util.function.Supplier<? extends T>)
      orElseGetA(arg0: object_t, cb: Callback<object_t>): void;
      orElseGet(arg0: object_t): object_t;
      orElseGetP(arg0: object_t): Promise<object_t>;
      // public <X> T java.util.Optional.orElseThrow(java.util.function.Supplier<? extends X>) throws X
      orElseThrowA(arg0: object_t, cb: Callback<object_t>): void;
      orElseThrow(arg0: object_t): object_t;
      orElseThrowP(arg0: object_t): Promise<object_t>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Optional {
      export interface Static {
        // public static <T> java.util.Optional<T> java.util.Optional.empty()
        emptyA( cb: Callback<Java.Optional>): void;
        empty(): Java.Optional;
        emptyP(): Promise<Java.Optional>;
        // public static <T> java.util.Optional<T> java.util.Optional.of(T)
        ofA(arg0: object_t, cb: Callback<Java.Optional>): void;
        of(arg0: object_t): Java.Optional;
        ofP(arg0: object_t): Promise<Java.Optional>;
        // public static <T> java.util.Optional<T> java.util.Optional.ofNullable(T)
        ofNullableA(arg0: object_t, cb: Callback<Java.Optional>): void;
        ofNullable(arg0: object_t): Java.Optional;
        ofNullableP(arg0: object_t): Promise<Java.Optional>;
      }
    }
  }

  export module java.util {
    export interface OptionalDouble extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public double java.util.OptionalDouble.getAsDouble()
      getAsDoubleA( cb: Callback<number>): void;
      getAsDouble(): number;
      getAsDoubleP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public void java.util.OptionalDouble.ifPresent(java.util.function.DoubleConsumer)
      ifPresentA(arg0: object_t, cb: Callback<void>): void;
      ifPresent(arg0: object_t): void;
      ifPresentP(arg0: object_t): Promise<void>;
      // public boolean java.util.OptionalDouble.isPresent()
      isPresentA( cb: Callback<boolean>): void;
      isPresent(): boolean;
      isPresentP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public double java.util.OptionalDouble.orElse(double)
      orElseA(arg0: double_t, cb: Callback<number>): void;
      orElse(arg0: double_t): number;
      orElseP(arg0: double_t): Promise<number>;
      // public double java.util.OptionalDouble.orElseGet(java.util.function.DoubleSupplier)
      orElseGetA(arg0: object_t, cb: Callback<number>): void;
      orElseGet(arg0: object_t): number;
      orElseGetP(arg0: object_t): Promise<number>;
      // public <X> double java.util.OptionalDouble.orElseThrow(java.util.function.Supplier<X>) throws X
      orElseThrowA(arg0: object_t, cb: Callback<number>): void;
      orElseThrow(arg0: object_t): number;
      orElseThrowP(arg0: object_t): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module OptionalDouble {
      export interface Static {
        // public static java.util.OptionalDouble java.util.OptionalDouble.empty()
        emptyA( cb: Callback<Java.OptionalDouble>): void;
        empty(): Java.OptionalDouble;
        emptyP(): Promise<Java.OptionalDouble>;
        // public static java.util.OptionalDouble java.util.OptionalDouble.of(double)
        ofA(arg0: double_t, cb: Callback<Java.OptionalDouble>): void;
        of(arg0: double_t): Java.OptionalDouble;
        ofP(arg0: double_t): Promise<Java.OptionalDouble>;
      }
    }
  }

  export module java.util {
    export interface OptionalInt extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public int java.util.OptionalInt.getAsInt()
      getAsIntA( cb: Callback<number>): void;
      getAsInt(): number;
      getAsIntP(): Promise<number>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public void java.util.OptionalInt.ifPresent(java.util.function.IntConsumer)
      ifPresentA(arg0: object_t, cb: Callback<void>): void;
      ifPresent(arg0: object_t): void;
      ifPresentP(arg0: object_t): Promise<void>;
      // public boolean java.util.OptionalInt.isPresent()
      isPresentA( cb: Callback<boolean>): void;
      isPresent(): boolean;
      isPresentP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public int java.util.OptionalInt.orElse(int)
      orElseA(arg0: integer_t, cb: Callback<number>): void;
      orElse(arg0: integer_t): number;
      orElseP(arg0: integer_t): Promise<number>;
      // public int java.util.OptionalInt.orElseGet(java.util.function.IntSupplier)
      orElseGetA(arg0: object_t, cb: Callback<number>): void;
      orElseGet(arg0: object_t): number;
      orElseGetP(arg0: object_t): Promise<number>;
      // public <X> int java.util.OptionalInt.orElseThrow(java.util.function.Supplier<X>) throws X
      orElseThrowA(arg0: object_t, cb: Callback<number>): void;
      orElseThrow(arg0: object_t): number;
      orElseThrowP(arg0: object_t): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module OptionalInt {
      export interface Static {
        // public static java.util.OptionalInt java.util.OptionalInt.empty()
        emptyA( cb: Callback<Java.OptionalInt>): void;
        empty(): Java.OptionalInt;
        emptyP(): Promise<Java.OptionalInt>;
        // public static java.util.OptionalInt java.util.OptionalInt.of(int)
        ofA(arg0: integer_t, cb: Callback<Java.OptionalInt>): void;
        of(arg0: integer_t): Java.OptionalInt;
        ofP(arg0: integer_t): Promise<Java.OptionalInt>;
      }
    }
  }

  export module java.util {
    export interface OptionalLong extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public long java.util.OptionalLong.getAsLong()
      getAsLongA( cb: Callback<longValue_t>): void;
      getAsLong(): longValue_t;
      getAsLongP(): Promise<longValue_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public void java.util.OptionalLong.ifPresent(java.util.function.LongConsumer)
      ifPresentA(arg0: object_t, cb: Callback<void>): void;
      ifPresent(arg0: object_t): void;
      ifPresentP(arg0: object_t): Promise<void>;
      // public boolean java.util.OptionalLong.isPresent()
      isPresentA( cb: Callback<boolean>): void;
      isPresent(): boolean;
      isPresentP(): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public long java.util.OptionalLong.orElse(long)
      orElseA(arg0: long_t, cb: Callback<longValue_t>): void;
      orElse(arg0: long_t): longValue_t;
      orElseP(arg0: long_t): Promise<longValue_t>;
      // public long java.util.OptionalLong.orElseGet(java.util.function.LongSupplier)
      orElseGetA(arg0: object_t, cb: Callback<longValue_t>): void;
      orElseGet(arg0: object_t): longValue_t;
      orElseGetP(arg0: object_t): Promise<longValue_t>;
      // public <X> long java.util.OptionalLong.orElseThrow(java.util.function.Supplier<X>) throws X
      orElseThrowA(arg0: object_t, cb: Callback<longValue_t>): void;
      orElseThrow(arg0: object_t): longValue_t;
      orElseThrowP(arg0: object_t): Promise<longValue_t>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module OptionalLong {
      export interface Static {
        // public static java.util.OptionalLong java.util.OptionalLong.empty()
        emptyA( cb: Callback<Java.OptionalLong>): void;
        empty(): Java.OptionalLong;
        emptyP(): Promise<Java.OptionalLong>;
        // public static java.util.OptionalLong java.util.OptionalLong.of(long)
        ofA(arg0: long_t, cb: Callback<Java.OptionalLong>): void;
        of(arg0: long_t): Java.OptionalLong;
        ofP(arg0: long_t): Promise<Java.OptionalLong>;
      }
    }
  }

  export module java.util {
    export interface PrimitiveIterator extends Java.java.util.Iterator {
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public abstract void java.util.PrimitiveIterator.forEachRemaining(T_CONS)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNextA( cb: Callback<boolean>): void;
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public abstract E java.util.Iterator.next()
      nextA( cb: Callback<object_t>): void;
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default void java.util.Iterator.remove()
      removeA( cb: Callback<void>): void;
      remove(): void;
      removeP(): Promise<void>;
    }
    export module PrimitiveIterator {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface PrimitiveIterator$OfDouble extends Java.java.util.PrimitiveIterator {
      // public default void java.util.PrimitiveIterator$OfDouble.forEachRemaining(java.util.function.DoubleConsumer)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public abstract void java.util.PrimitiveIterator.forEachRemaining(T_CONS)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNextA( cb: Callback<boolean>): void;
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public abstract E java.util.Iterator.next()
      nextA( cb: Callback<object_t>): void;
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default java.lang.Double java.util.PrimitiveIterator$OfDouble.next()
      nextA( cb: Callback<number>): void;
      next(): number;
      nextP(): Promise<number>;
      // public abstract double java.util.PrimitiveIterator$OfDouble.nextDouble()
      nextDoubleA( cb: Callback<number>): void;
      nextDouble(): number;
      nextDoubleP(): Promise<number>;
      // public default void java.util.Iterator.remove()
      removeA( cb: Callback<void>): void;
      remove(): void;
      removeP(): Promise<void>;
    }
    export module PrimitiveIterator$OfDouble {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface PrimitiveIterator$OfInt extends Java.java.util.PrimitiveIterator {
      // public default void java.util.PrimitiveIterator$OfInt.forEachRemaining(java.util.function.IntConsumer)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public abstract void java.util.PrimitiveIterator.forEachRemaining(T_CONS)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNextA( cb: Callback<boolean>): void;
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public default java.lang.Integer java.util.PrimitiveIterator$OfInt.next()
      nextA( cb: Callback<number>): void;
      next(): number;
      nextP(): Promise<number>;
      // public abstract E java.util.Iterator.next()
      nextA( cb: Callback<object_t>): void;
      next(): object_t;
      nextP(): Promise<object_t>;
      // public abstract int java.util.PrimitiveIterator$OfInt.nextInt()
      nextIntA( cb: Callback<number>): void;
      nextInt(): number;
      nextIntP(): Promise<number>;
      // public default void java.util.Iterator.remove()
      removeA( cb: Callback<void>): void;
      remove(): void;
      removeP(): Promise<void>;
    }
    export module PrimitiveIterator$OfInt {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface PrimitiveIterator$OfLong extends Java.java.util.PrimitiveIterator {
      // public default void java.util.PrimitiveIterator$OfLong.forEachRemaining(java.util.function.LongConsumer)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public abstract void java.util.PrimitiveIterator.forEachRemaining(T_CONS)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNextA( cb: Callback<boolean>): void;
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public abstract E java.util.Iterator.next()
      nextA( cb: Callback<object_t>): void;
      next(): object_t;
      nextP(): Promise<object_t>;
      // public default java.lang.Long java.util.PrimitiveIterator$OfLong.next()
      nextA( cb: Callback<longValue_t>): void;
      next(): longValue_t;
      nextP(): Promise<longValue_t>;
      // public abstract long java.util.PrimitiveIterator$OfLong.nextLong()
      nextLongA( cb: Callback<longValue_t>): void;
      nextLong(): longValue_t;
      nextLongP(): Promise<longValue_t>;
      // public default void java.util.Iterator.remove()
      removeA( cb: Callback<void>): void;
      remove(): void;
      removeP(): Promise<void>;
    }
    export module PrimitiveIterator$OfLong {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface PriorityQueue extends Java.java.util.AbstractQueue {
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public java.util.Comparator<? super E> java.util.PriorityQueue.comparator()
      comparatorA( cb: Callback<Java.Comparator>): void;
      comparator(): Java.Comparator;
      comparatorP(): Promise<Java.Comparator>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract E java.util.Queue.element()
      elementA( cb: Callback<object_t>): void;
      element(): object_t;
      elementP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract boolean java.util.Queue.offer(E)
      offerA(arg0: object_t, cb: Callback<boolean>): void;
      offer(arg0: object_t): boolean;
      offerP(arg0: object_t): Promise<boolean>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract E java.util.Queue.peek()
      peekA( cb: Callback<object_t>): void;
      peek(): object_t;
      peekP(): Promise<object_t>;
      // public abstract E java.util.Queue.poll()
      pollA( cb: Callback<object_t>): void;
      poll(): object_t;
      pollP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.Queue.remove()
      removeA( cb: Callback<object_t>): void;
      remove(): object_t;
      removeP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module PriorityQueue {
      export interface Static {
        new (arg0: integer_t, arg1: Java.Comparator): java.util.PriorityQueue;
        new (arg0: Java.PriorityQueue): java.util.PriorityQueue;
        new (arg0: Java.Comparator): java.util.PriorityQueue;
        new (arg0: Java.Collection): java.util.PriorityQueue;
        new (arg0: Java.SortedSet): java.util.PriorityQueue;
        new (arg0: integer_t): java.util.PriorityQueue;
        new (): java.util.PriorityQueue;
      }
    }
  }

  export module java.util {
    export interface Properties extends Java.java.util.Hashtable {
      // public abstract void java.util.Map.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public synchronized java.lang.Object java.util.Hashtable.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      compute(arg0: object_t, arg1: object_t): object_t;
      computeP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsentA(arg0: object_t, arg1: Java.Function, cb: Callback<object_t>): void;
      computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      computeIfPresent(arg0: object_t, arg1: object_t): object_t;
      computeIfPresentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public synchronized boolean java.util.Hashtable.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKeyA(arg0: object_t, cb: Callback<boolean>): void;
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValueA(arg0: object_t, cb: Callback<boolean>): void;
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Enumeration<V> java.util.Dictionary.elements()
      elementsA( cb: Callback<Java.Enumeration>): void;
      elements(): Java.Enumeration;
      elementsP(): Promise<Java.Enumeration>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySetA( cb: Callback<Java.Set>): void;
      entrySet(): Java.Set;
      entrySetP(): Promise<Java.Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract V java.util.Dictionary.get(java.lang.Object)
      getA(arg0: object_t, cb: Callback<object_t>): void;
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefaultA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public java.lang.String java.util.Properties.getProperty(java.lang.String,java.lang.String)
      getPropertyA(arg0: string_t, arg1: string_t, cb: Callback<string>): void;
      getProperty(arg0: string_t, arg1: string_t): string;
      getPropertyP(arg0: string_t, arg1: string_t): Promise<string>;
      // public java.lang.String java.util.Properties.getProperty(java.lang.String)
      getPropertyA(arg0: string_t, cb: Callback<string>): void;
      getProperty(arg0: string_t): string;
      getPropertyP(arg0: string_t): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Dictionary.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Enumeration<K> java.util.Dictionary.keys()
      keysA( cb: Callback<Java.Enumeration>): void;
      keys(): Java.Enumeration;
      keysP(): Promise<Java.Enumeration>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySetA( cb: Callback<Java.Set>): void;
      keySet(): Java.Set;
      keySetP(): Promise<Java.Set>;
      // public void java.util.Properties.list(java.io.PrintWriter)
      listA(arg0: object_t, cb: Callback<void>): void;
      list(arg0: object_t): void;
      listP(arg0: object_t): Promise<void>;
      // public void java.util.Properties.list(java.io.PrintStream)
      listA(arg0: object_t, cb: Callback<void>): void;
      list(arg0: object_t): void;
      listP(arg0: object_t): Promise<void>;
      // public synchronized void java.util.Properties.load(java.io.InputStream) throws java.io.IOException
      loadA(arg0: object_t, cb: Callback<void>): void;
      load(arg0: object_t): void;
      loadP(arg0: object_t): Promise<void>;
      // public synchronized void java.util.Properties.load(java.io.Reader) throws java.io.IOException
      loadA(arg0: object_t, cb: Callback<void>): void;
      load(arg0: object_t): void;
      loadP(arg0: object_t): Promise<void>;
      // public synchronized void java.util.Properties.loadFromXML(java.io.InputStream) throws java.io.IOException,java.util.InvalidPropertiesFormatException
      loadFromXMLA(arg0: object_t, cb: Callback<void>): void;
      loadFromXML(arg0: object_t): void;
      loadFromXMLP(arg0: object_t): Promise<void>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      mergeA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<object_t>): void;
      merge(arg0: object_t, arg1: object_t, arg2: object_t): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.util.Enumeration<?> java.util.Properties.propertyNames()
      propertyNamesA( cb: Callback<Java.Enumeration>): void;
      propertyNames(): Java.Enumeration;
      propertyNamesP(): Promise<Java.Enumeration>;
      // public abstract V java.util.Dictionary.put(K,V)
      putA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAllA(arg0: Java.Map, cb: Callback<void>): void;
      putAll(arg0: Java.Map): void;
      putAllP(arg0: Java.Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      removeA(arg0: object_t, arg1: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Dictionary.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<object_t>): void;
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replaceA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<boolean>): void;
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replaceA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public void java.util.Properties.save(java.io.OutputStream,java.lang.String)
      saveA(arg0: object_t, arg1: string_t, cb: Callback<void>): void;
      save(arg0: object_t, arg1: string_t): void;
      saveP(arg0: object_t, arg1: string_t): Promise<void>;
      // public synchronized java.lang.Object java.util.Properties.setProperty(java.lang.String,java.lang.String)
      setPropertyA(arg0: string_t, arg1: string_t, cb: Callback<object_t>): void;
      setProperty(arg0: string_t, arg1: string_t): object_t;
      setPropertyP(arg0: string_t, arg1: string_t): Promise<object_t>;
      // public abstract int java.util.Dictionary.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public void java.util.Properties.store(java.io.OutputStream,java.lang.String) throws java.io.IOException
      storeA(arg0: object_t, arg1: string_t, cb: Callback<void>): void;
      store(arg0: object_t, arg1: string_t): void;
      storeP(arg0: object_t, arg1: string_t): Promise<void>;
      // public void java.util.Properties.store(java.io.Writer,java.lang.String) throws java.io.IOException
      storeA(arg0: object_t, arg1: string_t, cb: Callback<void>): void;
      store(arg0: object_t, arg1: string_t): void;
      storeP(arg0: object_t, arg1: string_t): Promise<void>;
      // public void java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String,java.lang.String) throws java.io.IOException
      storeToXMLA(arg0: object_t, arg1: string_t, arg2: string_t, cb: Callback<void>): void;
      storeToXML(arg0: object_t, arg1: string_t, arg2: string_t): void;
      storeToXMLP(arg0: object_t, arg1: string_t, arg2: string_t): Promise<void>;
      // public void java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String) throws java.io.IOException
      storeToXMLA(arg0: object_t, arg1: string_t, cb: Callback<void>): void;
      storeToXML(arg0: object_t, arg1: string_t): void;
      storeToXMLP(arg0: object_t, arg1: string_t): Promise<void>;
      // public java.util.Set<java.lang.String> java.util.Properties.stringPropertyNames()
      stringPropertyNamesA( cb: Callback<Java.Set>): void;
      stringPropertyNames(): Java.Set;
      stringPropertyNamesP(): Promise<Java.Set>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      valuesA( cb: Callback<Java.Collection>): void;
      values(): Java.Collection;
      valuesP(): Promise<Java.Collection>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Properties {
      export interface Static {
        new (arg0: Java.Properties): java.util.Properties;
        new (): java.util.Properties;
      }
    }
  }

  export module java.util {
    export interface PropertyPermission extends Java.java.lang.Object {
      // public void java.security.Permission.checkGuard(java.lang.Object) throws java.lang.SecurityException
      checkGuardA(arg0: object_t, cb: Callback<void>): void;
      checkGuard(arg0: object_t): void;
      checkGuardP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.String java.util.PropertyPermission.getActions()
      getActionsA( cb: Callback<string>): void;
      getActions(): string;
      getActionsP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public final java.lang.String java.security.Permission.getName()
      getNameA( cb: Callback<string>): void;
      getName(): string;
      getNameP(): Promise<string>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean java.util.PropertyPermission.implies(java.security.Permission)
      impliesA(arg0: object_t, cb: Callback<boolean>): void;
      implies(arg0: object_t): boolean;
      impliesP(arg0: object_t): Promise<boolean>;
      // public java.security.PermissionCollection java.util.PropertyPermission.newPermissionCollection()
      newPermissionCollectionA( cb: Callback<object_t>): void;
      newPermissionCollection(): object_t;
      newPermissionCollectionP(): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module PropertyPermission {
      export interface Static {
        new (arg0: string_t, arg1: string_t): java.util.PropertyPermission;
      }
    }
  }

  export module java.util {
    export interface PropertyResourceBundle extends Java.java.util.ResourceBundle {
      // public boolean java.util.ResourceBundle.containsKey(java.lang.String)
      containsKeyA(arg0: string_t, cb: Callback<boolean>): void;
      containsKey(arg0: string_t): boolean;
      containsKeyP(arg0: string_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.String java.util.ResourceBundle.getBaseBundleName()
      getBaseBundleNameA( cb: Callback<string>): void;
      getBaseBundleName(): string;
      getBaseBundleNameP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public abstract java.util.Enumeration<java.lang.String> java.util.ResourceBundle.getKeys()
      getKeysA( cb: Callback<Java.Enumeration>): void;
      getKeys(): Java.Enumeration;
      getKeysP(): Promise<Java.Enumeration>;
      // public java.util.Locale java.util.ResourceBundle.getLocale()
      getLocaleA( cb: Callback<Java.Locale>): void;
      getLocale(): Java.Locale;
      getLocaleP(): Promise<Java.Locale>;
      // public final java.lang.Object java.util.ResourceBundle.getObject(java.lang.String)
      getObjectA(arg0: string_t, cb: Callback<object_t>): void;
      getObject(arg0: string_t): object_t;
      getObjectP(arg0: string_t): Promise<object_t>;
      // public final java.lang.String java.util.ResourceBundle.getString(java.lang.String)
      getStringA(arg0: string_t, cb: Callback<string>): void;
      getString(arg0: string_t): string;
      getStringP(arg0: string_t): Promise<string>;
      // public final java.lang.String[] java.util.ResourceBundle.getStringArray(java.lang.String)
      getStringArrayA(arg0: string_t, cb: Callback<string[]>): void;
      getStringArray(arg0: string_t): string[];
      getStringArrayP(arg0: string_t): Promise<string[]>;
      // public java.lang.Object java.util.PropertyResourceBundle.handleGetObject(java.lang.String)
      handleGetObjectA(arg0: string_t, cb: Callback<object_t>): void;
      handleGetObject(arg0: string_t): object_t;
      handleGetObjectP(arg0: string_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.util.Set<java.lang.String> java.util.ResourceBundle.keySet()
      keySetA( cb: Callback<Java.Set>): void;
      keySet(): Java.Set;
      keySetP(): Promise<Java.Set>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module PropertyResourceBundle {
      export interface Static {
        new (arg0: object_t): java.util.PropertyResourceBundle;
        new (arg0: object_t): java.util.PropertyResourceBundle;
        // public static final void java.util.ResourceBundle.clearCache(java.lang.ClassLoader)
        clearCacheA(arg0: object_t, cb: Callback<void>): void;
        clearCache(arg0: object_t): void;
        clearCacheP(arg0: object_t): Promise<void>;
        // public static final void java.util.ResourceBundle.clearCache()
        clearCacheA( cb: Callback<void>): void;
        clearCache(): void;
        clearCacheP(): Promise<void>;
        // public static java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)
        getBundleA(arg0: string_t, arg1: Java.Locale, arg2: object_t, arg3: Java.ResourceBundle$Control, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t, arg1: Java.Locale, arg2: object_t, arg3: Java.ResourceBundle$Control): Java.ResourceBundle;
        getBundleP(arg0: string_t, arg1: Java.Locale, arg2: object_t, arg3: Java.ResourceBundle$Control): Promise<Java.ResourceBundle>;
        // public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle$Control)
        getBundleA(arg0: string_t, arg1: Java.Locale, arg2: Java.ResourceBundle$Control, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t, arg1: Java.Locale, arg2: Java.ResourceBundle$Control): Java.ResourceBundle;
        getBundleP(arg0: string_t, arg1: Java.Locale, arg2: Java.ResourceBundle$Control): Promise<Java.ResourceBundle>;
        // public static java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)
        getBundleA(arg0: string_t, arg1: Java.Locale, arg2: object_t, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t, arg1: Java.Locale, arg2: object_t): Java.ResourceBundle;
        getBundleP(arg0: string_t, arg1: Java.Locale, arg2: object_t): Promise<Java.ResourceBundle>;
        // public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.ResourceBundle$Control)
        getBundleA(arg0: string_t, arg1: Java.ResourceBundle$Control, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t, arg1: Java.ResourceBundle$Control): Java.ResourceBundle;
        getBundleP(arg0: string_t, arg1: Java.ResourceBundle$Control): Promise<Java.ResourceBundle>;
        // public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale)
        getBundleA(arg0: string_t, arg1: Java.Locale, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t, arg1: Java.Locale): Java.ResourceBundle;
        getBundleP(arg0: string_t, arg1: Java.Locale): Promise<Java.ResourceBundle>;
        // public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String)
        getBundleA(arg0: string_t, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t): Java.ResourceBundle;
        getBundleP(arg0: string_t): Promise<Java.ResourceBundle>;
      }
    }
  }

  export module java.util {
    export interface Queue extends Java.java.util.Collection {
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract E java.util.Queue.element()
      elementA( cb: Callback<object_t>): void;
      element(): object_t;
      elementP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public abstract boolean java.util.Queue.offer(E)
      offerA(arg0: object_t, cb: Callback<boolean>): void;
      offer(arg0: object_t): boolean;
      offerP(arg0: object_t): Promise<boolean>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract E java.util.Queue.peek()
      peekA( cb: Callback<object_t>): void;
      peek(): object_t;
      peekP(): Promise<object_t>;
      // public abstract E java.util.Queue.poll()
      pollA( cb: Callback<object_t>): void;
      poll(): object_t;
      pollP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.Queue.remove()
      removeA( cb: Callback<object_t>): void;
      remove(): object_t;
      removeP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module Queue {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface Random extends Java.java.lang.Object {
      // public java.util.stream.DoubleStream java.util.Random.doubles(long,double,double)
      doublesA(arg0: long_t, arg1: double_t, arg2: double_t, cb: Callback<object_t>): void;
      doubles(arg0: long_t, arg1: double_t, arg2: double_t): object_t;
      doublesP(arg0: long_t, arg1: double_t, arg2: double_t): Promise<object_t>;
      // public java.util.stream.DoubleStream java.util.Random.doubles(double,double)
      doublesA(arg0: double_t, arg1: double_t, cb: Callback<object_t>): void;
      doubles(arg0: double_t, arg1: double_t): object_t;
      doublesP(arg0: double_t, arg1: double_t): Promise<object_t>;
      // public java.util.stream.DoubleStream java.util.Random.doubles(long)
      doublesA(arg0: long_t, cb: Callback<object_t>): void;
      doubles(arg0: long_t): object_t;
      doublesP(arg0: long_t): Promise<object_t>;
      // public java.util.stream.DoubleStream java.util.Random.doubles()
      doublesA( cb: Callback<object_t>): void;
      doubles(): object_t;
      doublesP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.util.stream.IntStream java.util.Random.ints(long,int,int)
      intsA(arg0: long_t, arg1: integer_t, arg2: integer_t, cb: Callback<object_t>): void;
      ints(arg0: long_t, arg1: integer_t, arg2: integer_t): object_t;
      intsP(arg0: long_t, arg1: integer_t, arg2: integer_t): Promise<object_t>;
      // public java.util.stream.IntStream java.util.Random.ints(int,int)
      intsA(arg0: integer_t, arg1: integer_t, cb: Callback<object_t>): void;
      ints(arg0: integer_t, arg1: integer_t): object_t;
      intsP(arg0: integer_t, arg1: integer_t): Promise<object_t>;
      // public java.util.stream.IntStream java.util.Random.ints(long)
      intsA(arg0: long_t, cb: Callback<object_t>): void;
      ints(arg0: long_t): object_t;
      intsP(arg0: long_t): Promise<object_t>;
      // public java.util.stream.IntStream java.util.Random.ints()
      intsA( cb: Callback<object_t>): void;
      ints(): object_t;
      intsP(): Promise<object_t>;
      // public java.util.stream.LongStream java.util.Random.longs(long,long,long)
      longsA(arg0: long_t, arg1: long_t, arg2: long_t, cb: Callback<object_t>): void;
      longs(arg0: long_t, arg1: long_t, arg2: long_t): object_t;
      longsP(arg0: long_t, arg1: long_t, arg2: long_t): Promise<object_t>;
      // public java.util.stream.LongStream java.util.Random.longs(long,long)
      longsA(arg0: long_t, arg1: long_t, cb: Callback<object_t>): void;
      longs(arg0: long_t, arg1: long_t): object_t;
      longsP(arg0: long_t, arg1: long_t): Promise<object_t>;
      // public java.util.stream.LongStream java.util.Random.longs(long)
      longsA(arg0: long_t, cb: Callback<object_t>): void;
      longs(arg0: long_t): object_t;
      longsP(arg0: long_t): Promise<object_t>;
      // public java.util.stream.LongStream java.util.Random.longs()
      longsA( cb: Callback<object_t>): void;
      longs(): object_t;
      longsP(): Promise<object_t>;
      // public boolean java.util.Random.nextBoolean()
      nextBooleanA( cb: Callback<boolean>): void;
      nextBoolean(): boolean;
      nextBooleanP(): Promise<boolean>;
      // public void java.util.Random.nextBytes(byte[])
      nextBytesA(arg0: object_array_t, cb: Callback<void>): void;
      nextBytes(arg0: object_array_t): void;
      nextBytesP(arg0: object_array_t): Promise<void>;
      // public double java.util.Random.nextDouble()
      nextDoubleA( cb: Callback<number>): void;
      nextDouble(): number;
      nextDoubleP(): Promise<number>;
      // public float java.util.Random.nextFloat()
      nextFloatA( cb: Callback<number>): void;
      nextFloat(): number;
      nextFloatP(): Promise<number>;
      // public synchronized double java.util.Random.nextGaussian()
      nextGaussianA( cb: Callback<number>): void;
      nextGaussian(): number;
      nextGaussianP(): Promise<number>;
      // public int java.util.Random.nextInt(int)
      nextIntA(arg0: integer_t, cb: Callback<number>): void;
      nextInt(arg0: integer_t): number;
      nextIntP(arg0: integer_t): Promise<number>;
      // public int java.util.Random.nextInt()
      nextIntA( cb: Callback<number>): void;
      nextInt(): number;
      nextIntP(): Promise<number>;
      // public long java.util.Random.nextLong()
      nextLongA( cb: Callback<longValue_t>): void;
      nextLong(): longValue_t;
      nextLongP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public synchronized void java.util.Random.setSeed(long)
      setSeedA(arg0: long_t, cb: Callback<void>): void;
      setSeed(arg0: long_t): void;
      setSeedP(arg0: long_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Random {
      export interface Static {
        new (arg0: long_t): java.util.Random;
        new (): java.util.Random;
      }
    }
  }

  export module java.util {
    export interface RandomAccess extends Java.java.lang.Object {
    }
    export module RandomAccess {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface ResourceBundle extends Java.java.lang.Object {
      // public boolean java.util.ResourceBundle.containsKey(java.lang.String)
      containsKeyA(arg0: string_t, cb: Callback<boolean>): void;
      containsKey(arg0: string_t): boolean;
      containsKeyP(arg0: string_t): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.String java.util.ResourceBundle.getBaseBundleName()
      getBaseBundleNameA( cb: Callback<string>): void;
      getBaseBundleName(): string;
      getBaseBundleNameP(): Promise<string>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public abstract java.util.Enumeration<java.lang.String> java.util.ResourceBundle.getKeys()
      getKeysA( cb: Callback<Java.Enumeration>): void;
      getKeys(): Java.Enumeration;
      getKeysP(): Promise<Java.Enumeration>;
      // public java.util.Locale java.util.ResourceBundle.getLocale()
      getLocaleA( cb: Callback<Java.Locale>): void;
      getLocale(): Java.Locale;
      getLocaleP(): Promise<Java.Locale>;
      // public final java.lang.Object java.util.ResourceBundle.getObject(java.lang.String)
      getObjectA(arg0: string_t, cb: Callback<object_t>): void;
      getObject(arg0: string_t): object_t;
      getObjectP(arg0: string_t): Promise<object_t>;
      // public final java.lang.String java.util.ResourceBundle.getString(java.lang.String)
      getStringA(arg0: string_t, cb: Callback<string>): void;
      getString(arg0: string_t): string;
      getStringP(arg0: string_t): Promise<string>;
      // public final java.lang.String[] java.util.ResourceBundle.getStringArray(java.lang.String)
      getStringArrayA(arg0: string_t, cb: Callback<string[]>): void;
      getStringArray(arg0: string_t): string[];
      getStringArrayP(arg0: string_t): Promise<string[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.util.Set<java.lang.String> java.util.ResourceBundle.keySet()
      keySetA( cb: Callback<Java.Set>): void;
      keySet(): Java.Set;
      keySetP(): Promise<Java.Set>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ResourceBundle {
      export interface Static {
        new (): java.util.ResourceBundle;
        // public static final void java.util.ResourceBundle.clearCache(java.lang.ClassLoader)
        clearCacheA(arg0: object_t, cb: Callback<void>): void;
        clearCache(arg0: object_t): void;
        clearCacheP(arg0: object_t): Promise<void>;
        // public static final void java.util.ResourceBundle.clearCache()
        clearCacheA( cb: Callback<void>): void;
        clearCache(): void;
        clearCacheP(): Promise<void>;
        // public static java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)
        getBundleA(arg0: string_t, arg1: Java.Locale, arg2: object_t, arg3: Java.ResourceBundle$Control, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t, arg1: Java.Locale, arg2: object_t, arg3: Java.ResourceBundle$Control): Java.ResourceBundle;
        getBundleP(arg0: string_t, arg1: Java.Locale, arg2: object_t, arg3: Java.ResourceBundle$Control): Promise<Java.ResourceBundle>;
        // public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle$Control)
        getBundleA(arg0: string_t, arg1: Java.Locale, arg2: Java.ResourceBundle$Control, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t, arg1: Java.Locale, arg2: Java.ResourceBundle$Control): Java.ResourceBundle;
        getBundleP(arg0: string_t, arg1: Java.Locale, arg2: Java.ResourceBundle$Control): Promise<Java.ResourceBundle>;
        // public static java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)
        getBundleA(arg0: string_t, arg1: Java.Locale, arg2: object_t, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t, arg1: Java.Locale, arg2: object_t): Java.ResourceBundle;
        getBundleP(arg0: string_t, arg1: Java.Locale, arg2: object_t): Promise<Java.ResourceBundle>;
        // public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.ResourceBundle$Control)
        getBundleA(arg0: string_t, arg1: Java.ResourceBundle$Control, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t, arg1: Java.ResourceBundle$Control): Java.ResourceBundle;
        getBundleP(arg0: string_t, arg1: Java.ResourceBundle$Control): Promise<Java.ResourceBundle>;
        // public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String,java.util.Locale)
        getBundleA(arg0: string_t, arg1: Java.Locale, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t, arg1: Java.Locale): Java.ResourceBundle;
        getBundleP(arg0: string_t, arg1: Java.Locale): Promise<Java.ResourceBundle>;
        // public static final java.util.ResourceBundle java.util.ResourceBundle.getBundle(java.lang.String)
        getBundleA(arg0: string_t, cb: Callback<Java.ResourceBundle>): void;
        getBundle(arg0: string_t): Java.ResourceBundle;
        getBundleP(arg0: string_t): Promise<Java.ResourceBundle>;
      }
    }
  }

  export module java.util {
    export interface ResourceBundle$Control extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.util.List<java.util.Locale> java.util.ResourceBundle$Control.getCandidateLocales(java.lang.String,java.util.Locale)
      getCandidateLocalesA(arg0: string_t, arg1: Java.Locale, cb: Callback<Java.List>): void;
      getCandidateLocales(arg0: string_t, arg1: Java.Locale): Java.List;
      getCandidateLocalesP(arg0: string_t, arg1: Java.Locale): Promise<Java.List>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.util.Locale java.util.ResourceBundle$Control.getFallbackLocale(java.lang.String,java.util.Locale)
      getFallbackLocaleA(arg0: string_t, arg1: Java.Locale, cb: Callback<Java.Locale>): void;
      getFallbackLocale(arg0: string_t, arg1: Java.Locale): Java.Locale;
      getFallbackLocaleP(arg0: string_t, arg1: Java.Locale): Promise<Java.Locale>;
      // public java.util.List<java.lang.String> java.util.ResourceBundle$Control.getFormats(java.lang.String)
      getFormatsA(arg0: string_t, cb: Callback<Java.List>): void;
      getFormats(arg0: string_t): Java.List;
      getFormatsP(arg0: string_t): Promise<Java.List>;
      // public long java.util.ResourceBundle$Control.getTimeToLive(java.lang.String,java.util.Locale)
      getTimeToLiveA(arg0: string_t, arg1: Java.Locale, cb: Callback<longValue_t>): void;
      getTimeToLive(arg0: string_t, arg1: Java.Locale): longValue_t;
      getTimeToLiveP(arg0: string_t, arg1: Java.Locale): Promise<longValue_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean java.util.ResourceBundle$Control.needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)
      needsReloadA(arg0: string_t, arg1: Java.Locale, arg2: string_t, arg3: object_t, arg4: Java.ResourceBundle, arg5: long_t, cb: Callback<boolean>): void;
      needsReload(arg0: string_t, arg1: Java.Locale, arg2: string_t, arg3: object_t, arg4: Java.ResourceBundle, arg5: long_t): boolean;
      needsReloadP(arg0: string_t, arg1: Java.Locale, arg2: string_t, arg3: object_t, arg4: Java.ResourceBundle, arg5: long_t): Promise<boolean>;
      // public java.util.ResourceBundle java.util.ResourceBundle$Control.newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean) throws java.lang.IllegalAccessException,java.lang.InstantiationException,java.io.IOException
      newBundleA(arg0: string_t, arg1: Java.Locale, arg2: string_t, arg3: object_t, arg4: boolean_t, cb: Callback<Java.ResourceBundle>): void;
      newBundle(arg0: string_t, arg1: Java.Locale, arg2: string_t, arg3: object_t, arg4: boolean_t): Java.ResourceBundle;
      newBundleP(arg0: string_t, arg1: Java.Locale, arg2: string_t, arg3: object_t, arg4: boolean_t): Promise<Java.ResourceBundle>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.util.ResourceBundle$Control.toBundleName(java.lang.String,java.util.Locale)
      toBundleNameA(arg0: string_t, arg1: Java.Locale, cb: Callback<string>): void;
      toBundleName(arg0: string_t, arg1: Java.Locale): string;
      toBundleNameP(arg0: string_t, arg1: Java.Locale): Promise<string>;
      // public final java.lang.String java.util.ResourceBundle$Control.toResourceName(java.lang.String,java.lang.String)
      toResourceNameA(arg0: string_t, arg1: string_t, cb: Callback<string>): void;
      toResourceName(arg0: string_t, arg1: string_t): string;
      toResourceNameP(arg0: string_t, arg1: string_t): Promise<string>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ResourceBundle$Control {
      export interface Static {
        FORMAT_DEFAULT: Java.List;
        FORMAT_CLASS: Java.List;
        FORMAT_PROPERTIES: Java.List;
        TTL_DONT_CACHE: longValue_t;
        TTL_NO_EXPIRATION_CONTROL: longValue_t;
        // public static final java.util.ResourceBundle$Control java.util.ResourceBundle$Control.getControl(java.util.List<java.lang.String>)
        getControlA(arg0: Java.List, cb: Callback<Java.ResourceBundle$Control>): void;
        getControl(arg0: Java.List): Java.ResourceBundle$Control;
        getControlP(arg0: Java.List): Promise<Java.ResourceBundle$Control>;
        // public static final java.util.ResourceBundle$Control java.util.ResourceBundle$Control.getNoFallbackControl(java.util.List<java.lang.String>)
        getNoFallbackControlA(arg0: Java.List, cb: Callback<Java.ResourceBundle$Control>): void;
        getNoFallbackControl(arg0: Java.List): Java.ResourceBundle$Control;
        getNoFallbackControlP(arg0: Java.List): Promise<Java.ResourceBundle$Control>;
      }
    }
  }

  export module java.util {
    export interface Scanner extends Java.java.lang.Object, Java.java.util.Iterator {
      // public void java.util.Scanner.close()
      closeA( cb: Callback<void>): void;
      close(): void;
      closeP(): Promise<void>;
      // public java.util.regex.Pattern java.util.Scanner.delimiter()
      delimiterA( cb: Callback<object_t>): void;
      delimiter(): object_t;
      delimiterP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public java.lang.String java.util.Scanner.findInLine(java.util.regex.Pattern)
      findInLineA(arg0: object_t, cb: Callback<string>): void;
      findInLine(arg0: object_t): string;
      findInLineP(arg0: object_t): Promise<string>;
      // public java.lang.String java.util.Scanner.findInLine(java.lang.String)
      findInLineA(arg0: string_t, cb: Callback<string>): void;
      findInLine(arg0: string_t): string;
      findInLineP(arg0: string_t): Promise<string>;
      // public java.lang.String java.util.Scanner.findWithinHorizon(java.util.regex.Pattern,int)
      findWithinHorizonA(arg0: object_t, arg1: integer_t, cb: Callback<string>): void;
      findWithinHorizon(arg0: object_t, arg1: integer_t): string;
      findWithinHorizonP(arg0: object_t, arg1: integer_t): Promise<string>;
      // public java.lang.String java.util.Scanner.findWithinHorizon(java.lang.String,int)
      findWithinHorizonA(arg0: string_t, arg1: integer_t, cb: Callback<string>): void;
      findWithinHorizon(arg0: string_t, arg1: integer_t): string;
      findWithinHorizonP(arg0: string_t, arg1: integer_t): Promise<string>;
      // public default void java.util.Iterator.forEachRemaining(java.util.function.Consumer<? super E>)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean java.util.Scanner.hasNext(java.util.regex.Pattern)
      hasNextA(arg0: object_t, cb: Callback<boolean>): void;
      hasNext(arg0: object_t): boolean;
      hasNextP(arg0: object_t): Promise<boolean>;
      // public boolean java.util.Scanner.hasNext(java.lang.String)
      hasNextA(arg0: string_t, cb: Callback<boolean>): void;
      hasNext(arg0: string_t): boolean;
      hasNextP(arg0: string_t): Promise<boolean>;
      // public abstract boolean java.util.Iterator.hasNext()
      hasNextA( cb: Callback<boolean>): void;
      hasNext(): boolean;
      hasNextP(): Promise<boolean>;
      // public boolean java.util.Scanner.hasNextBigDecimal()
      hasNextBigDecimalA( cb: Callback<boolean>): void;
      hasNextBigDecimal(): boolean;
      hasNextBigDecimalP(): Promise<boolean>;
      // public boolean java.util.Scanner.hasNextBigInteger(int)
      hasNextBigIntegerA(arg0: integer_t, cb: Callback<boolean>): void;
      hasNextBigInteger(arg0: integer_t): boolean;
      hasNextBigIntegerP(arg0: integer_t): Promise<boolean>;
      // public boolean java.util.Scanner.hasNextBigInteger()
      hasNextBigIntegerA( cb: Callback<boolean>): void;
      hasNextBigInteger(): boolean;
      hasNextBigIntegerP(): Promise<boolean>;
      // public boolean java.util.Scanner.hasNextBoolean()
      hasNextBooleanA( cb: Callback<boolean>): void;
      hasNextBoolean(): boolean;
      hasNextBooleanP(): Promise<boolean>;
      // public boolean java.util.Scanner.hasNextByte(int)
      hasNextByteA(arg0: integer_t, cb: Callback<boolean>): void;
      hasNextByte(arg0: integer_t): boolean;
      hasNextByteP(arg0: integer_t): Promise<boolean>;
      // public boolean java.util.Scanner.hasNextByte()
      hasNextByteA( cb: Callback<boolean>): void;
      hasNextByte(): boolean;
      hasNextByteP(): Promise<boolean>;
      // public boolean java.util.Scanner.hasNextDouble()
      hasNextDoubleA( cb: Callback<boolean>): void;
      hasNextDouble(): boolean;
      hasNextDoubleP(): Promise<boolean>;
      // public boolean java.util.Scanner.hasNextFloat()
      hasNextFloatA( cb: Callback<boolean>): void;
      hasNextFloat(): boolean;
      hasNextFloatP(): Promise<boolean>;
      // public boolean java.util.Scanner.hasNextInt(int)
      hasNextIntA(arg0: integer_t, cb: Callback<boolean>): void;
      hasNextInt(arg0: integer_t): boolean;
      hasNextIntP(arg0: integer_t): Promise<boolean>;
      // public boolean java.util.Scanner.hasNextInt()
      hasNextIntA( cb: Callback<boolean>): void;
      hasNextInt(): boolean;
      hasNextIntP(): Promise<boolean>;
      // public boolean java.util.Scanner.hasNextLine()
      hasNextLineA( cb: Callback<boolean>): void;
      hasNextLine(): boolean;
      hasNextLineP(): Promise<boolean>;
      // public boolean java.util.Scanner.hasNextLong(int)
      hasNextLongA(arg0: integer_t, cb: Callback<boolean>): void;
      hasNextLong(arg0: integer_t): boolean;
      hasNextLongP(arg0: integer_t): Promise<boolean>;
      // public boolean java.util.Scanner.hasNextLong()
      hasNextLongA( cb: Callback<boolean>): void;
      hasNextLong(): boolean;
      hasNextLongP(): Promise<boolean>;
      // public boolean java.util.Scanner.hasNextShort(int)
      hasNextShortA(arg0: integer_t, cb: Callback<boolean>): void;
      hasNextShort(arg0: integer_t): boolean;
      hasNextShortP(arg0: integer_t): Promise<boolean>;
      // public boolean java.util.Scanner.hasNextShort()
      hasNextShortA( cb: Callback<boolean>): void;
      hasNextShort(): boolean;
      hasNextShortP(): Promise<boolean>;
      // public java.io.IOException java.util.Scanner.ioException()
      ioExceptionA( cb: Callback<object_t>): void;
      ioException(): object_t;
      ioExceptionP(): Promise<object_t>;
      // public java.util.Locale java.util.Scanner.locale()
      localeA( cb: Callback<Java.Locale>): void;
      locale(): Java.Locale;
      localeP(): Promise<Java.Locale>;
      // public java.util.regex.MatchResult java.util.Scanner.match()
      matchA( cb: Callback<object_t>): void;
      match(): object_t;
      matchP(): Promise<object_t>;
      // public java.lang.String java.util.Scanner.next(java.util.regex.Pattern)
      nextA(arg0: object_t, cb: Callback<string>): void;
      next(arg0: object_t): string;
      nextP(arg0: object_t): Promise<string>;
      // public java.lang.String java.util.Scanner.next(java.lang.String)
      nextA(arg0: string_t, cb: Callback<string>): void;
      next(arg0: string_t): string;
      nextP(arg0: string_t): Promise<string>;
      // public java.lang.String java.util.Scanner.next()
      nextA( cb: Callback<string>): void;
      next(): string;
      nextP(): Promise<string>;
      // public abstract E java.util.Iterator.next()
      nextA( cb: Callback<object_t>): void;
      next(): object_t;
      nextP(): Promise<object_t>;
      // public java.math.BigDecimal java.util.Scanner.nextBigDecimal()
      nextBigDecimalA( cb: Callback<object_t>): void;
      nextBigDecimal(): object_t;
      nextBigDecimalP(): Promise<object_t>;
      // public java.math.BigInteger java.util.Scanner.nextBigInteger(int)
      nextBigIntegerA(arg0: integer_t, cb: Callback<object_t>): void;
      nextBigInteger(arg0: integer_t): object_t;
      nextBigIntegerP(arg0: integer_t): Promise<object_t>;
      // public java.math.BigInteger java.util.Scanner.nextBigInteger()
      nextBigIntegerA( cb: Callback<object_t>): void;
      nextBigInteger(): object_t;
      nextBigIntegerP(): Promise<object_t>;
      // public boolean java.util.Scanner.nextBoolean()
      nextBooleanA( cb: Callback<boolean>): void;
      nextBoolean(): boolean;
      nextBooleanP(): Promise<boolean>;
      // public byte java.util.Scanner.nextByte(int)
      nextByteA(arg0: integer_t, cb: Callback<object_t>): void;
      nextByte(arg0: integer_t): object_t;
      nextByteP(arg0: integer_t): Promise<object_t>;
      // public byte java.util.Scanner.nextByte()
      nextByteA( cb: Callback<object_t>): void;
      nextByte(): object_t;
      nextByteP(): Promise<object_t>;
      // public double java.util.Scanner.nextDouble()
      nextDoubleA( cb: Callback<number>): void;
      nextDouble(): number;
      nextDoubleP(): Promise<number>;
      // public float java.util.Scanner.nextFloat()
      nextFloatA( cb: Callback<number>): void;
      nextFloat(): number;
      nextFloatP(): Promise<number>;
      // public int java.util.Scanner.nextInt(int)
      nextIntA(arg0: integer_t, cb: Callback<number>): void;
      nextInt(arg0: integer_t): number;
      nextIntP(arg0: integer_t): Promise<number>;
      // public int java.util.Scanner.nextInt()
      nextIntA( cb: Callback<number>): void;
      nextInt(): number;
      nextIntP(): Promise<number>;
      // public java.lang.String java.util.Scanner.nextLine()
      nextLineA( cb: Callback<string>): void;
      nextLine(): string;
      nextLineP(): Promise<string>;
      // public long java.util.Scanner.nextLong(int)
      nextLongA(arg0: integer_t, cb: Callback<longValue_t>): void;
      nextLong(arg0: integer_t): longValue_t;
      nextLongP(arg0: integer_t): Promise<longValue_t>;
      // public long java.util.Scanner.nextLong()
      nextLongA( cb: Callback<longValue_t>): void;
      nextLong(): longValue_t;
      nextLongP(): Promise<longValue_t>;
      // public short java.util.Scanner.nextShort(int)
      nextShortA(arg0: integer_t, cb: Callback<number>): void;
      nextShort(arg0: integer_t): number;
      nextShortP(arg0: integer_t): Promise<number>;
      // public short java.util.Scanner.nextShort()
      nextShortA( cb: Callback<number>): void;
      nextShort(): number;
      nextShortP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public int java.util.Scanner.radix()
      radixA( cb: Callback<number>): void;
      radix(): number;
      radixP(): Promise<number>;
      // public default void java.util.Iterator.remove()
      removeA( cb: Callback<void>): void;
      remove(): void;
      removeP(): Promise<void>;
      // public java.util.Scanner java.util.Scanner.reset()
      resetA( cb: Callback<Java.Scanner>): void;
      reset(): Java.Scanner;
      resetP(): Promise<Java.Scanner>;
      // public java.util.Scanner java.util.Scanner.skip(java.util.regex.Pattern)
      skipA(arg0: object_t, cb: Callback<Java.Scanner>): void;
      skip(arg0: object_t): Java.Scanner;
      skipP(arg0: object_t): Promise<Java.Scanner>;
      // public java.util.Scanner java.util.Scanner.skip(java.lang.String)
      skipA(arg0: string_t, cb: Callback<Java.Scanner>): void;
      skip(arg0: string_t): Java.Scanner;
      skipP(arg0: string_t): Promise<Java.Scanner>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public java.util.Scanner java.util.Scanner.useDelimiter(java.util.regex.Pattern)
      useDelimiterA(arg0: object_t, cb: Callback<Java.Scanner>): void;
      useDelimiter(arg0: object_t): Java.Scanner;
      useDelimiterP(arg0: object_t): Promise<Java.Scanner>;
      // public java.util.Scanner java.util.Scanner.useDelimiter(java.lang.String)
      useDelimiterA(arg0: string_t, cb: Callback<Java.Scanner>): void;
      useDelimiter(arg0: string_t): Java.Scanner;
      useDelimiterP(arg0: string_t): Promise<Java.Scanner>;
      // public java.util.Scanner java.util.Scanner.useLocale(java.util.Locale)
      useLocaleA(arg0: Java.Locale, cb: Callback<Java.Scanner>): void;
      useLocale(arg0: Java.Locale): Java.Scanner;
      useLocaleP(arg0: Java.Locale): Promise<Java.Scanner>;
      // public java.util.Scanner java.util.Scanner.useRadix(int)
      useRadixA(arg0: integer_t, cb: Callback<Java.Scanner>): void;
      useRadix(arg0: integer_t): Java.Scanner;
      useRadixP(arg0: integer_t): Promise<Java.Scanner>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Scanner {
      export interface Static {
        new (arg0: object_t, arg1: string_t): java.util.Scanner;
        new (arg0: object_t, arg1: string_t): java.util.Scanner;
        new (arg0: object_t, arg1: string_t): java.util.Scanner;
        new (arg0: object_t, arg1: string_t): java.util.Scanner;
        new (arg0: object_t): java.util.Scanner;
        new (arg0: object_t): java.util.Scanner;
        new (arg0: object_t): java.util.Scanner;
        new (arg0: object_t): java.util.Scanner;
        new (arg0: string_t): java.util.Scanner;
        new (arg0: object_t): java.util.Scanner;
      }
    }
  }

  export module java.util {
    export interface ServiceConfigurationError extends Java.java.lang.Object {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ServiceConfigurationError {
      export interface Static {
        new (arg0: string_t, arg1: object_t): java.util.ServiceConfigurationError;
        new (arg0: string_t): java.util.ServiceConfigurationError;
      }
    }
  }

  export module java.util {
    export interface ServiceLoader extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.util.Iterator<S> java.util.ServiceLoader.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.util.ServiceLoader.reload()
      reloadA( cb: Callback<void>): void;
      reload(): void;
      reloadP(): Promise<void>;
      // public default java.util.Spliterator<T> java.lang.Iterable.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module ServiceLoader {
      export interface Static {
        // public static <S> java.util.ServiceLoader<S> java.util.ServiceLoader.load(java.lang.Class<S>,java.lang.ClassLoader)
        loadA(arg0: Java.Class, arg1: object_t, cb: Callback<Java.ServiceLoader>): void;
        load(arg0: Java.Class, arg1: object_t): Java.ServiceLoader;
        loadP(arg0: Java.Class, arg1: object_t): Promise<Java.ServiceLoader>;
        // public static <S> java.util.ServiceLoader<S> java.util.ServiceLoader.load(java.lang.Class<S>)
        loadA(arg0: Java.Class, cb: Callback<Java.ServiceLoader>): void;
        load(arg0: Java.Class): Java.ServiceLoader;
        loadP(arg0: Java.Class): Promise<Java.ServiceLoader>;
        // public static <S> java.util.ServiceLoader<S> java.util.ServiceLoader.loadInstalled(java.lang.Class<S>)
        loadInstalledA(arg0: Java.Class, cb: Callback<Java.ServiceLoader>): void;
        loadInstalled(arg0: Java.Class): Java.ServiceLoader;
        loadInstalledP(arg0: Java.Class): Promise<Java.ServiceLoader>;
      }
    }
  }

  export module java.util {
    export interface Set extends Java.java.util.Collection {
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module Set {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface SimpleTimeZone extends Java.java.util.TimeZone {
      // public java.lang.Object java.util.TimeZone.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.util.TimeZone.getDisplayName(boolean,int,java.util.Locale)
      getDisplayNameA(arg0: boolean_t, arg1: integer_t, arg2: Java.Locale, cb: Callback<string>): void;
      getDisplayName(arg0: boolean_t, arg1: integer_t, arg2: Java.Locale): string;
      getDisplayNameP(arg0: boolean_t, arg1: integer_t, arg2: Java.Locale): Promise<string>;
      // public final java.lang.String java.util.TimeZone.getDisplayName(boolean,int)
      getDisplayNameA(arg0: boolean_t, arg1: integer_t, cb: Callback<string>): void;
      getDisplayName(arg0: boolean_t, arg1: integer_t): string;
      getDisplayNameP(arg0: boolean_t, arg1: integer_t): Promise<string>;
      // public final java.lang.String java.util.TimeZone.getDisplayName(java.util.Locale)
      getDisplayNameA(arg0: Java.Locale, cb: Callback<string>): void;
      getDisplayName(arg0: Java.Locale): string;
      getDisplayNameP(arg0: Java.Locale): Promise<string>;
      // public final java.lang.String java.util.TimeZone.getDisplayName()
      getDisplayNameA( cb: Callback<string>): void;
      getDisplayName(): string;
      getDisplayNameP(): Promise<string>;
      // public int java.util.TimeZone.getDSTSavings()
      getDSTSavingsA( cb: Callback<number>): void;
      getDSTSavings(): number;
      getDSTSavingsP(): Promise<number>;
      // public java.lang.String java.util.TimeZone.getID()
      getIDA( cb: Callback<string>): void;
      getID(): string;
      getIDP(): Promise<string>;
      // public abstract int java.util.TimeZone.getOffset(int,int,int,int,int,int)
      getOffsetA(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, cb: Callback<number>): void;
      getOffset(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): number;
      getOffsetP(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): Promise<number>;
      // public int java.util.TimeZone.getOffset(long)
      getOffsetA(arg0: long_t, cb: Callback<number>): void;
      getOffset(arg0: long_t): number;
      getOffsetP(arg0: long_t): Promise<number>;
      // public abstract int java.util.TimeZone.getRawOffset()
      getRawOffsetA( cb: Callback<number>): void;
      getRawOffset(): number;
      getRawOffsetP(): Promise<number>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean java.util.TimeZone.hasSameRules(java.util.TimeZone)
      hasSameRulesA(arg0: Java.TimeZone, cb: Callback<boolean>): void;
      hasSameRules(arg0: Java.TimeZone): boolean;
      hasSameRulesP(arg0: Java.TimeZone): Promise<boolean>;
      // public abstract boolean java.util.TimeZone.inDaylightTime(java.util.Date)
      inDaylightTimeA(arg0: Java.Date, cb: Callback<boolean>): void;
      inDaylightTime(arg0: Java.Date): boolean;
      inDaylightTimeP(arg0: Java.Date): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public boolean java.util.TimeZone.observesDaylightTime()
      observesDaylightTimeA( cb: Callback<boolean>): void;
      observesDaylightTime(): boolean;
      observesDaylightTimeP(): Promise<boolean>;
      // public void java.util.SimpleTimeZone.setDSTSavings(int)
      setDSTSavingsA(arg0: integer_t, cb: Callback<void>): void;
      setDSTSavings(arg0: integer_t): void;
      setDSTSavingsP(arg0: integer_t): Promise<void>;
      // public void java.util.SimpleTimeZone.setEndRule(int,int,int,int,boolean)
      setEndRuleA(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: boolean_t, cb: Callback<void>): void;
      setEndRule(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: boolean_t): void;
      setEndRuleP(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: boolean_t): Promise<void>;
      // public void java.util.SimpleTimeZone.setEndRule(int,int,int,int)
      setEndRuleA(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<void>): void;
      setEndRule(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): void;
      setEndRuleP(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<void>;
      // public void java.util.SimpleTimeZone.setEndRule(int,int,int)
      setEndRuleA(arg0: integer_t, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
      setEndRule(arg0: integer_t, arg1: integer_t, arg2: integer_t): void;
      setEndRuleP(arg0: integer_t, arg1: integer_t, arg2: integer_t): Promise<void>;
      // public void java.util.TimeZone.setID(java.lang.String)
      setIDA(arg0: string_t, cb: Callback<void>): void;
      setID(arg0: string_t): void;
      setIDP(arg0: string_t): Promise<void>;
      // public abstract void java.util.TimeZone.setRawOffset(int)
      setRawOffsetA(arg0: integer_t, cb: Callback<void>): void;
      setRawOffset(arg0: integer_t): void;
      setRawOffsetP(arg0: integer_t): Promise<void>;
      // public void java.util.SimpleTimeZone.setStartRule(int,int,int,int,boolean)
      setStartRuleA(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: boolean_t, cb: Callback<void>): void;
      setStartRule(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: boolean_t): void;
      setStartRuleP(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: boolean_t): Promise<void>;
      // public void java.util.SimpleTimeZone.setStartRule(int,int,int,int)
      setStartRuleA(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<void>): void;
      setStartRule(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): void;
      setStartRuleP(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<void>;
      // public void java.util.SimpleTimeZone.setStartRule(int,int,int)
      setStartRuleA(arg0: integer_t, arg1: integer_t, arg2: integer_t, cb: Callback<void>): void;
      setStartRule(arg0: integer_t, arg1: integer_t, arg2: integer_t): void;
      setStartRuleP(arg0: integer_t, arg1: integer_t, arg2: integer_t): Promise<void>;
      // public void java.util.SimpleTimeZone.setStartYear(int)
      setStartYearA(arg0: integer_t, cb: Callback<void>): void;
      setStartYear(arg0: integer_t): void;
      setStartYearP(arg0: integer_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public java.time.ZoneId java.util.TimeZone.toZoneId()
      toZoneIdA( cb: Callback<object_t>): void;
      toZoneId(): object_t;
      toZoneIdP(): Promise<object_t>;
      // public abstract boolean java.util.TimeZone.useDaylightTime()
      useDaylightTimeA( cb: Callback<boolean>): void;
      useDaylightTime(): boolean;
      useDaylightTimeP(): Promise<boolean>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module SimpleTimeZone {
      export interface Static {
        WALL_TIME: number;
        STANDARD_TIME: number;
        UTC_TIME: number;
        SHORT: number;
        LONG: number;
        new (arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, arg6: integer_t, arg7: integer_t, arg8: integer_t, arg9: integer_t, arg10: integer_t, arg11: integer_t, arg12: integer_t): java.util.SimpleTimeZone;
        new (arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, arg6: integer_t, arg7: integer_t, arg8: integer_t, arg9: integer_t, arg10: integer_t): java.util.SimpleTimeZone;
        new (arg0: integer_t, arg1: string_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, arg6: integer_t, arg7: integer_t, arg8: integer_t, arg9: integer_t): java.util.SimpleTimeZone;
        new (arg0: integer_t, arg1: string_t): java.util.SimpleTimeZone;
        // public static synchronized java.lang.String[] java.util.TimeZone.getAvailableIDs(int)
        getAvailableIDsA(arg0: integer_t, cb: Callback<string[]>): void;
        getAvailableIDs(arg0: integer_t): string[];
        getAvailableIDsP(arg0: integer_t): Promise<string[]>;
        // public static synchronized java.lang.String[] java.util.TimeZone.getAvailableIDs()
        getAvailableIDsA( cb: Callback<string[]>): void;
        getAvailableIDs(): string[];
        getAvailableIDsP(): Promise<string[]>;
        // public static java.util.TimeZone java.util.TimeZone.getDefault()
        getDefaultA( cb: Callback<Java.TimeZone>): void;
        getDefault(): Java.TimeZone;
        getDefaultP(): Promise<Java.TimeZone>;
        // public static java.util.TimeZone java.util.TimeZone.getTimeZone(java.time.ZoneId)
        getTimeZoneA(arg0: object_t, cb: Callback<Java.TimeZone>): void;
        getTimeZone(arg0: object_t): Java.TimeZone;
        getTimeZoneP(arg0: object_t): Promise<Java.TimeZone>;
        // public static synchronized java.util.TimeZone java.util.TimeZone.getTimeZone(java.lang.String)
        getTimeZoneA(arg0: string_t, cb: Callback<Java.TimeZone>): void;
        getTimeZone(arg0: string_t): Java.TimeZone;
        getTimeZoneP(arg0: string_t): Promise<Java.TimeZone>;
        // public static void java.util.TimeZone.setDefault(java.util.TimeZone)
        setDefaultA(arg0: Java.TimeZone, cb: Callback<void>): void;
        setDefault(arg0: Java.TimeZone): void;
        setDefaultP(arg0: Java.TimeZone): Promise<void>;
      }
    }
  }

  export module java.util {
    export interface SortedMap extends Java.java.util.Map {
      // public abstract void java.util.Map.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public abstract java.util.Comparator<? super K> java.util.SortedMap.comparator()
      comparatorA( cb: Callback<Java.Comparator>): void;
      comparator(): Java.Comparator;
      comparatorP(): Promise<Java.Comparator>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      compute(arg0: object_t, arg1: object_t): object_t;
      computeP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsentA(arg0: object_t, arg1: Java.Function, cb: Callback<object_t>): void;
      computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      computeIfPresent(arg0: object_t, arg1: object_t): object_t;
      computeIfPresentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKeyA(arg0: object_t, cb: Callback<boolean>): void;
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValueA(arg0: object_t, cb: Callback<boolean>): void;
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySetA( cb: Callback<Java.Set>): void;
      entrySet(): Java.Set;
      entrySetP(): Promise<Java.Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract K java.util.SortedMap.firstKey()
      firstKeyA( cb: Callback<object_t>): void;
      firstKey(): object_t;
      firstKeyP(): Promise<object_t>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      getA(arg0: object_t, cb: Callback<object_t>): void;
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefaultA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.util.SortedMap<K, V> java.util.SortedMap.headMap(K)
      headMapA(arg0: object_t, cb: Callback<Java.SortedMap>): void;
      headMap(arg0: object_t): Java.SortedMap;
      headMapP(arg0: object_t): Promise<Java.SortedMap>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySetA( cb: Callback<Java.Set>): void;
      keySet(): Java.Set;
      keySetP(): Promise<Java.Set>;
      // public abstract K java.util.SortedMap.lastKey()
      lastKeyA( cb: Callback<object_t>): void;
      lastKey(): object_t;
      lastKeyP(): Promise<object_t>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      mergeA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<object_t>): void;
      merge(arg0: object_t, arg1: object_t, arg2: object_t): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<object_t>;
      // public abstract V java.util.Map.put(K,V)
      putA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAllA(arg0: Java.Map, cb: Callback<void>): void;
      putAll(arg0: Java.Map): void;
      putAllP(arg0: Java.Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      removeA(arg0: object_t, arg1: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<object_t>): void;
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replaceA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<boolean>): void;
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replaceA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract int java.util.Map.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public abstract java.util.SortedMap<K, V> java.util.SortedMap.subMap(K,K)
      subMapA(arg0: object_t, arg1: object_t, cb: Callback<Java.SortedMap>): void;
      subMap(arg0: object_t, arg1: object_t): Java.SortedMap;
      subMapP(arg0: object_t, arg1: object_t): Promise<Java.SortedMap>;
      // public abstract java.util.SortedMap<K, V> java.util.SortedMap.tailMap(K)
      tailMapA(arg0: object_t, cb: Callback<Java.SortedMap>): void;
      tailMap(arg0: object_t): Java.SortedMap;
      tailMapP(arg0: object_t): Promise<Java.SortedMap>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      valuesA( cb: Callback<Java.Collection>): void;
      values(): Java.Collection;
      valuesP(): Promise<Java.Collection>;
    }
    export module SortedMap {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface SortedSet extends Java.java.util.Set {
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public abstract java.util.Comparator<? super E> java.util.SortedSet.comparator()
      comparatorA( cb: Callback<Java.Comparator>): void;
      comparator(): Java.Comparator;
      comparatorP(): Promise<Java.Comparator>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.SortedSet.first()
      firstA( cb: Callback<object_t>): void;
      first(): object_t;
      firstP(): Promise<object_t>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.util.SortedSet<E> java.util.SortedSet.headSet(E)
      headSetA(arg0: object_t, cb: Callback<Java.SortedSet>): void;
      headSet(arg0: object_t): Java.SortedSet;
      headSetP(arg0: object_t): Promise<Java.SortedSet>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public abstract E java.util.SortedSet.last()
      lastA( cb: Callback<object_t>): void;
      last(): object_t;
      lastP(): Promise<object_t>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.SortedSet<E> java.util.SortedSet.subSet(E,E)
      subSetA(arg0: object_t, arg1: object_t, cb: Callback<Java.SortedSet>): void;
      subSet(arg0: object_t, arg1: object_t): Java.SortedSet;
      subSetP(arg0: object_t, arg1: object_t): Promise<Java.SortedSet>;
      // public abstract java.util.SortedSet<E> java.util.SortedSet.tailSet(E)
      tailSetA(arg0: object_t, cb: Callback<Java.SortedSet>): void;
      tailSet(arg0: object_t): Java.SortedSet;
      tailSetP(arg0: object_t): Promise<Java.SortedSet>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
    }
    export module SortedSet {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface Spliterator extends Java.java.lang.Object {
      // public abstract int java.util.Spliterator.characteristics()
      characteristicsA( cb: Callback<number>): void;
      characteristics(): number;
      characteristicsP(): Promise<number>;
      // public abstract long java.util.Spliterator.estimateSize()
      estimateSizeA( cb: Callback<longValue_t>): void;
      estimateSize(): longValue_t;
      estimateSizeP(): Promise<longValue_t>;
      // public default void java.util.Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default java.util.Comparator<? super T> java.util.Spliterator.getComparator()
      getComparatorA( cb: Callback<Java.Comparator>): void;
      getComparator(): Java.Comparator;
      getComparatorP(): Promise<Java.Comparator>;
      // public default long java.util.Spliterator.getExactSizeIfKnown()
      getExactSizeIfKnownA( cb: Callback<longValue_t>): void;
      getExactSizeIfKnown(): longValue_t;
      getExactSizeIfKnownP(): Promise<longValue_t>;
      // public default boolean java.util.Spliterator.hasCharacteristics(int)
      hasCharacteristicsA(arg0: integer_t, cb: Callback<boolean>): void;
      hasCharacteristics(arg0: integer_t): boolean;
      hasCharacteristicsP(arg0: integer_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator.tryAdvance(java.util.function.Consumer<? super T>)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Spliterator<T> java.util.Spliterator.trySplit()
      trySplitA( cb: Callback<Java.Spliterator>): void;
      trySplit(): Java.Spliterator;
      trySplitP(): Promise<Java.Spliterator>;
    }
    export module Spliterator {
      export interface Static {
        ORDERED: number;
        DISTINCT: number;
        SORTED: number;
        SIZED: number;
        NONNULL: number;
        IMMUTABLE: number;
        CONCURRENT: number;
        SUBSIZED: number;
      }
    }
  }

  export module java.util {
    export interface Spliterator$OfDouble extends Java.java.util.Spliterator$OfPrimitive {
      // public abstract int java.util.Spliterator.characteristics()
      characteristicsA( cb: Callback<number>): void;
      characteristics(): number;
      characteristicsP(): Promise<number>;
      // public abstract long java.util.Spliterator.estimateSize()
      estimateSizeA( cb: Callback<longValue_t>): void;
      estimateSize(): longValue_t;
      estimateSizeP(): Promise<longValue_t>;
      // public default void java.util.Spliterator$OfDouble.forEachRemaining(java.util.function.DoubleConsumer)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default void java.util.Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default void java.util.Spliterator$OfPrimitive.forEachRemaining(T_CONS)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default java.util.Comparator<? super T> java.util.Spliterator.getComparator()
      getComparatorA( cb: Callback<Java.Comparator>): void;
      getComparator(): Java.Comparator;
      getComparatorP(): Promise<Java.Comparator>;
      // public default long java.util.Spliterator.getExactSizeIfKnown()
      getExactSizeIfKnownA( cb: Callback<longValue_t>): void;
      getExactSizeIfKnown(): longValue_t;
      getExactSizeIfKnownP(): Promise<longValue_t>;
      // public default boolean java.util.Spliterator.hasCharacteristics(int)
      hasCharacteristicsA(arg0: integer_t, cb: Callback<boolean>): void;
      hasCharacteristics(arg0: integer_t): boolean;
      hasCharacteristicsP(arg0: integer_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator$OfDouble.tryAdvance(java.util.function.DoubleConsumer)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator.tryAdvance(java.util.function.Consumer<? super T>)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator$OfPrimitive.tryAdvance(T_CONS)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract T_SPLITR java.util.Spliterator$OfPrimitive.trySplit()
      trySplitA( cb: Callback<Java.Spliterator$OfPrimitive>): void;
      trySplit(): Java.Spliterator$OfPrimitive;
      trySplitP(): Promise<Java.Spliterator$OfPrimitive>;
      // public abstract java.util.Spliterator$OfDouble java.util.Spliterator$OfDouble.trySplit()
      trySplitA( cb: Callback<Java.Spliterator$OfDouble>): void;
      trySplit(): Java.Spliterator$OfDouble;
      trySplitP(): Promise<Java.Spliterator$OfDouble>;
      // public abstract java.util.Spliterator<T> java.util.Spliterator.trySplit()
      trySplitA( cb: Callback<Java.Spliterator>): void;
      trySplit(): Java.Spliterator;
      trySplitP(): Promise<Java.Spliterator>;
    }
    export module Spliterator$OfDouble {
      export interface Static {
        ORDERED: number;
        DISTINCT: number;
        SORTED: number;
        SIZED: number;
        NONNULL: number;
        IMMUTABLE: number;
        CONCURRENT: number;
        SUBSIZED: number;
      }
    }
  }

  export module java.util {
    export interface Spliterator$OfInt extends Java.java.util.Spliterator$OfPrimitive {
      // public abstract int java.util.Spliterator.characteristics()
      characteristicsA( cb: Callback<number>): void;
      characteristics(): number;
      characteristicsP(): Promise<number>;
      // public abstract long java.util.Spliterator.estimateSize()
      estimateSizeA( cb: Callback<longValue_t>): void;
      estimateSize(): longValue_t;
      estimateSizeP(): Promise<longValue_t>;
      // public default void java.util.Spliterator$OfInt.forEachRemaining(java.util.function.IntConsumer)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default void java.util.Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default void java.util.Spliterator$OfPrimitive.forEachRemaining(T_CONS)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default java.util.Comparator<? super T> java.util.Spliterator.getComparator()
      getComparatorA( cb: Callback<Java.Comparator>): void;
      getComparator(): Java.Comparator;
      getComparatorP(): Promise<Java.Comparator>;
      // public default long java.util.Spliterator.getExactSizeIfKnown()
      getExactSizeIfKnownA( cb: Callback<longValue_t>): void;
      getExactSizeIfKnown(): longValue_t;
      getExactSizeIfKnownP(): Promise<longValue_t>;
      // public default boolean java.util.Spliterator.hasCharacteristics(int)
      hasCharacteristicsA(arg0: integer_t, cb: Callback<boolean>): void;
      hasCharacteristics(arg0: integer_t): boolean;
      hasCharacteristicsP(arg0: integer_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator$OfInt.tryAdvance(java.util.function.IntConsumer)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator.tryAdvance(java.util.function.Consumer<? super T>)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator$OfPrimitive.tryAdvance(T_CONS)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract T_SPLITR java.util.Spliterator$OfPrimitive.trySplit()
      trySplitA( cb: Callback<Java.Spliterator$OfPrimitive>): void;
      trySplit(): Java.Spliterator$OfPrimitive;
      trySplitP(): Promise<Java.Spliterator$OfPrimitive>;
      // public abstract java.util.Spliterator$OfInt java.util.Spliterator$OfInt.trySplit()
      trySplitA( cb: Callback<Java.Spliterator$OfInt>): void;
      trySplit(): Java.Spliterator$OfInt;
      trySplitP(): Promise<Java.Spliterator$OfInt>;
      // public abstract java.util.Spliterator<T> java.util.Spliterator.trySplit()
      trySplitA( cb: Callback<Java.Spliterator>): void;
      trySplit(): Java.Spliterator;
      trySplitP(): Promise<Java.Spliterator>;
    }
    export module Spliterator$OfInt {
      export interface Static {
        ORDERED: number;
        DISTINCT: number;
        SORTED: number;
        SIZED: number;
        NONNULL: number;
        IMMUTABLE: number;
        CONCURRENT: number;
        SUBSIZED: number;
      }
    }
  }

  export module java.util {
    export interface Spliterator$OfLong extends Java.java.util.Spliterator$OfPrimitive {
      // public abstract int java.util.Spliterator.characteristics()
      characteristicsA( cb: Callback<number>): void;
      characteristics(): number;
      characteristicsP(): Promise<number>;
      // public abstract long java.util.Spliterator.estimateSize()
      estimateSizeA( cb: Callback<longValue_t>): void;
      estimateSize(): longValue_t;
      estimateSizeP(): Promise<longValue_t>;
      // public default void java.util.Spliterator$OfLong.forEachRemaining(java.util.function.LongConsumer)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default void java.util.Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default void java.util.Spliterator$OfPrimitive.forEachRemaining(T_CONS)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default java.util.Comparator<? super T> java.util.Spliterator.getComparator()
      getComparatorA( cb: Callback<Java.Comparator>): void;
      getComparator(): Java.Comparator;
      getComparatorP(): Promise<Java.Comparator>;
      // public default long java.util.Spliterator.getExactSizeIfKnown()
      getExactSizeIfKnownA( cb: Callback<longValue_t>): void;
      getExactSizeIfKnown(): longValue_t;
      getExactSizeIfKnownP(): Promise<longValue_t>;
      // public default boolean java.util.Spliterator.hasCharacteristics(int)
      hasCharacteristicsA(arg0: integer_t, cb: Callback<boolean>): void;
      hasCharacteristics(arg0: integer_t): boolean;
      hasCharacteristicsP(arg0: integer_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator$OfLong.tryAdvance(java.util.function.LongConsumer)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator.tryAdvance(java.util.function.Consumer<? super T>)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator$OfPrimitive.tryAdvance(T_CONS)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract T_SPLITR java.util.Spliterator$OfPrimitive.trySplit()
      trySplitA( cb: Callback<Java.Spliterator$OfPrimitive>): void;
      trySplit(): Java.Spliterator$OfPrimitive;
      trySplitP(): Promise<Java.Spliterator$OfPrimitive>;
      // public abstract java.util.Spliterator$OfLong java.util.Spliterator$OfLong.trySplit()
      trySplitA( cb: Callback<Java.Spliterator$OfLong>): void;
      trySplit(): Java.Spliterator$OfLong;
      trySplitP(): Promise<Java.Spliterator$OfLong>;
      // public abstract java.util.Spliterator<T> java.util.Spliterator.trySplit()
      trySplitA( cb: Callback<Java.Spliterator>): void;
      trySplit(): Java.Spliterator;
      trySplitP(): Promise<Java.Spliterator>;
    }
    export module Spliterator$OfLong {
      export interface Static {
        ORDERED: number;
        DISTINCT: number;
        SORTED: number;
        SIZED: number;
        NONNULL: number;
        IMMUTABLE: number;
        CONCURRENT: number;
        SUBSIZED: number;
      }
    }
  }

  export module java.util {
    export interface Spliterator$OfPrimitive extends Java.java.util.Spliterator {
      // public abstract int java.util.Spliterator.characteristics()
      characteristicsA( cb: Callback<number>): void;
      characteristics(): number;
      characteristicsP(): Promise<number>;
      // public abstract long java.util.Spliterator.estimateSize()
      estimateSizeA( cb: Callback<longValue_t>): void;
      estimateSize(): longValue_t;
      estimateSizeP(): Promise<longValue_t>;
      // public default void java.util.Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default void java.util.Spliterator$OfPrimitive.forEachRemaining(T_CONS)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default java.util.Comparator<? super T> java.util.Spliterator.getComparator()
      getComparatorA( cb: Callback<Java.Comparator>): void;
      getComparator(): Java.Comparator;
      getComparatorP(): Promise<Java.Comparator>;
      // public default long java.util.Spliterator.getExactSizeIfKnown()
      getExactSizeIfKnownA( cb: Callback<longValue_t>): void;
      getExactSizeIfKnown(): longValue_t;
      getExactSizeIfKnownP(): Promise<longValue_t>;
      // public default boolean java.util.Spliterator.hasCharacteristics(int)
      hasCharacteristicsA(arg0: integer_t, cb: Callback<boolean>): void;
      hasCharacteristics(arg0: integer_t): boolean;
      hasCharacteristicsP(arg0: integer_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator.tryAdvance(java.util.function.Consumer<? super T>)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator$OfPrimitive.tryAdvance(T_CONS)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract T_SPLITR java.util.Spliterator$OfPrimitive.trySplit()
      trySplitA( cb: Callback<Java.Spliterator$OfPrimitive>): void;
      trySplit(): Java.Spliterator$OfPrimitive;
      trySplitP(): Promise<Java.Spliterator$OfPrimitive>;
      // public abstract java.util.Spliterator<T> java.util.Spliterator.trySplit()
      trySplitA( cb: Callback<Java.Spliterator>): void;
      trySplit(): Java.Spliterator;
      trySplitP(): Promise<Java.Spliterator>;
    }
    export module Spliterator$OfPrimitive {
      export interface Static {
        ORDERED: number;
        DISTINCT: number;
        SORTED: number;
        SIZED: number;
        NONNULL: number;
        IMMUTABLE: number;
        CONCURRENT: number;
        SUBSIZED: number;
      }
    }
  }

  export module java.util {
    export interface Spliterators extends Java.java.lang.Object {
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Spliterators {
      export interface Static {
        // public static java.util.Spliterator$OfDouble java.util.Spliterators.emptyDoubleSpliterator()
        emptyDoubleSpliteratorA( cb: Callback<Java.Spliterator$OfDouble>): void;
        emptyDoubleSpliterator(): Java.Spliterator$OfDouble;
        emptyDoubleSpliteratorP(): Promise<Java.Spliterator$OfDouble>;
        // public static java.util.Spliterator$OfInt java.util.Spliterators.emptyIntSpliterator()
        emptyIntSpliteratorA( cb: Callback<Java.Spliterator$OfInt>): void;
        emptyIntSpliterator(): Java.Spliterator$OfInt;
        emptyIntSpliteratorP(): Promise<Java.Spliterator$OfInt>;
        // public static java.util.Spliterator$OfLong java.util.Spliterators.emptyLongSpliterator()
        emptyLongSpliteratorA( cb: Callback<Java.Spliterator$OfLong>): void;
        emptyLongSpliterator(): Java.Spliterator$OfLong;
        emptyLongSpliteratorP(): Promise<Java.Spliterator$OfLong>;
        // public static <T> java.util.Spliterator<T> java.util.Spliterators.emptySpliterator()
        emptySpliteratorA( cb: Callback<Java.Spliterator>): void;
        emptySpliterator(): Java.Spliterator;
        emptySpliteratorP(): Promise<Java.Spliterator>;
        // public static java.util.PrimitiveIterator$OfDouble java.util.Spliterators.iterator(java.util.Spliterator$OfDouble)
        iteratorA(arg0: Java.Spliterator$OfDouble, cb: Callback<Java.PrimitiveIterator$OfDouble>): void;
        iterator(arg0: Java.Spliterator$OfDouble): Java.PrimitiveIterator$OfDouble;
        iteratorP(arg0: Java.Spliterator$OfDouble): Promise<Java.PrimitiveIterator$OfDouble>;
        // public static java.util.PrimitiveIterator$OfLong java.util.Spliterators.iterator(java.util.Spliterator$OfLong)
        iteratorA(arg0: Java.Spliterator$OfLong, cb: Callback<Java.PrimitiveIterator$OfLong>): void;
        iterator(arg0: Java.Spliterator$OfLong): Java.PrimitiveIterator$OfLong;
        iteratorP(arg0: Java.Spliterator$OfLong): Promise<Java.PrimitiveIterator$OfLong>;
        // public static java.util.PrimitiveIterator$OfInt java.util.Spliterators.iterator(java.util.Spliterator$OfInt)
        iteratorA(arg0: Java.Spliterator$OfInt, cb: Callback<Java.PrimitiveIterator$OfInt>): void;
        iterator(arg0: Java.Spliterator$OfInt): Java.PrimitiveIterator$OfInt;
        iteratorP(arg0: Java.Spliterator$OfInt): Promise<Java.PrimitiveIterator$OfInt>;
        // public static <T> java.util.Iterator<T> java.util.Spliterators.iterator(java.util.Spliterator<? extends T>)
        iteratorA(arg0: Java.Spliterator, cb: Callback<Java.Iterator>): void;
        iterator(arg0: Java.Spliterator): Java.Iterator;
        iteratorP(arg0: Java.Spliterator): Promise<Java.Iterator>;
        // public static <T> java.util.Spliterator<T> java.util.Spliterators.spliterator(java.lang.Object[],int,int,int)
        spliteratorA(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<Java.Spliterator>): void;
        spliterator(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): Java.Spliterator;
        spliteratorP(arg0: object_array_t, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<Java.Spliterator>;
        // public static java.util.Spliterator$OfDouble java.util.Spliterators.spliterator(double[],int,int,int)
        spliteratorA(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<Java.Spliterator$OfDouble>): void;
        spliterator(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t): Java.Spliterator$OfDouble;
        spliteratorP(arg0: array_t<double_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<Java.Spliterator$OfDouble>;
        // public static java.util.Spliterator$OfLong java.util.Spliterators.spliterator(long[],int,int,int)
        spliteratorA(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<Java.Spliterator$OfLong>): void;
        spliterator(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t): Java.Spliterator$OfLong;
        spliteratorP(arg0: array_t<long_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<Java.Spliterator$OfLong>;
        // public static java.util.Spliterator$OfInt java.util.Spliterators.spliterator(int[],int,int,int)
        spliteratorA(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t, cb: Callback<Java.Spliterator$OfInt>): void;
        spliterator(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t): Java.Spliterator$OfInt;
        spliteratorP(arg0: array_t<integer_t>, arg1: integer_t, arg2: integer_t, arg3: integer_t): Promise<Java.Spliterator$OfInt>;
        // public static java.util.Spliterator$OfDouble java.util.Spliterators.spliterator(java.util.PrimitiveIterator$OfDouble,long,int)
        spliteratorA(arg0: Java.PrimitiveIterator$OfDouble, arg1: long_t, arg2: integer_t, cb: Callback<Java.Spliterator$OfDouble>): void;
        spliterator(arg0: Java.PrimitiveIterator$OfDouble, arg1: long_t, arg2: integer_t): Java.Spliterator$OfDouble;
        spliteratorP(arg0: Java.PrimitiveIterator$OfDouble, arg1: long_t, arg2: integer_t): Promise<Java.Spliterator$OfDouble>;
        // public static java.util.Spliterator$OfLong java.util.Spliterators.spliterator(java.util.PrimitiveIterator$OfLong,long,int)
        spliteratorA(arg0: Java.PrimitiveIterator$OfLong, arg1: long_t, arg2: integer_t, cb: Callback<Java.Spliterator$OfLong>): void;
        spliterator(arg0: Java.PrimitiveIterator$OfLong, arg1: long_t, arg2: integer_t): Java.Spliterator$OfLong;
        spliteratorP(arg0: Java.PrimitiveIterator$OfLong, arg1: long_t, arg2: integer_t): Promise<Java.Spliterator$OfLong>;
        // public static java.util.Spliterator$OfInt java.util.Spliterators.spliterator(java.util.PrimitiveIterator$OfInt,long,int)
        spliteratorA(arg0: Java.PrimitiveIterator$OfInt, arg1: long_t, arg2: integer_t, cb: Callback<Java.Spliterator$OfInt>): void;
        spliterator(arg0: Java.PrimitiveIterator$OfInt, arg1: long_t, arg2: integer_t): Java.Spliterator$OfInt;
        spliteratorP(arg0: Java.PrimitiveIterator$OfInt, arg1: long_t, arg2: integer_t): Promise<Java.Spliterator$OfInt>;
        // public static <T> java.util.Spliterator<T> java.util.Spliterators.spliterator(java.util.Iterator<? extends T>,long,int)
        spliteratorA(arg0: Java.Iterator, arg1: long_t, arg2: integer_t, cb: Callback<Java.Spliterator>): void;
        spliterator(arg0: Java.Iterator, arg1: long_t, arg2: integer_t): Java.Spliterator;
        spliteratorP(arg0: Java.Iterator, arg1: long_t, arg2: integer_t): Promise<Java.Spliterator>;
        // public static <T> java.util.Spliterator<T> java.util.Spliterators.spliterator(java.util.Collection<? extends T>,int)
        spliteratorA(arg0: Java.Collection, arg1: integer_t, cb: Callback<Java.Spliterator>): void;
        spliterator(arg0: Java.Collection, arg1: integer_t): Java.Spliterator;
        spliteratorP(arg0: Java.Collection, arg1: integer_t): Promise<Java.Spliterator>;
        // public static <T> java.util.Spliterator<T> java.util.Spliterators.spliterator(java.lang.Object[],int)
        spliteratorA(arg0: object_array_t, arg1: integer_t, cb: Callback<Java.Spliterator>): void;
        spliterator(arg0: object_array_t, arg1: integer_t): Java.Spliterator;
        spliteratorP(arg0: object_array_t, arg1: integer_t): Promise<Java.Spliterator>;
        // public static java.util.Spliterator$OfDouble java.util.Spliterators.spliterator(double[],int)
        spliteratorA(arg0: array_t<double_t>, arg1: integer_t, cb: Callback<Java.Spliterator$OfDouble>): void;
        spliterator(arg0: array_t<double_t>, arg1: integer_t): Java.Spliterator$OfDouble;
        spliteratorP(arg0: array_t<double_t>, arg1: integer_t): Promise<Java.Spliterator$OfDouble>;
        // public static java.util.Spliterator$OfLong java.util.Spliterators.spliterator(long[],int)
        spliteratorA(arg0: array_t<long_t>, arg1: integer_t, cb: Callback<Java.Spliterator$OfLong>): void;
        spliterator(arg0: array_t<long_t>, arg1: integer_t): Java.Spliterator$OfLong;
        spliteratorP(arg0: array_t<long_t>, arg1: integer_t): Promise<Java.Spliterator$OfLong>;
        // public static java.util.Spliterator$OfInt java.util.Spliterators.spliterator(int[],int)
        spliteratorA(arg0: array_t<integer_t>, arg1: integer_t, cb: Callback<Java.Spliterator$OfInt>): void;
        spliterator(arg0: array_t<integer_t>, arg1: integer_t): Java.Spliterator$OfInt;
        spliteratorP(arg0: array_t<integer_t>, arg1: integer_t): Promise<Java.Spliterator$OfInt>;
        // public static java.util.Spliterator$OfDouble java.util.Spliterators.spliteratorUnknownSize(java.util.PrimitiveIterator$OfDouble,int)
        spliteratorUnknownSizeA(arg0: Java.PrimitiveIterator$OfDouble, arg1: integer_t, cb: Callback<Java.Spliterator$OfDouble>): void;
        spliteratorUnknownSize(arg0: Java.PrimitiveIterator$OfDouble, arg1: integer_t): Java.Spliterator$OfDouble;
        spliteratorUnknownSizeP(arg0: Java.PrimitiveIterator$OfDouble, arg1: integer_t): Promise<Java.Spliterator$OfDouble>;
        // public static java.util.Spliterator$OfLong java.util.Spliterators.spliteratorUnknownSize(java.util.PrimitiveIterator$OfLong,int)
        spliteratorUnknownSizeA(arg0: Java.PrimitiveIterator$OfLong, arg1: integer_t, cb: Callback<Java.Spliterator$OfLong>): void;
        spliteratorUnknownSize(arg0: Java.PrimitiveIterator$OfLong, arg1: integer_t): Java.Spliterator$OfLong;
        spliteratorUnknownSizeP(arg0: Java.PrimitiveIterator$OfLong, arg1: integer_t): Promise<Java.Spliterator$OfLong>;
        // public static java.util.Spliterator$OfInt java.util.Spliterators.spliteratorUnknownSize(java.util.PrimitiveIterator$OfInt,int)
        spliteratorUnknownSizeA(arg0: Java.PrimitiveIterator$OfInt, arg1: integer_t, cb: Callback<Java.Spliterator$OfInt>): void;
        spliteratorUnknownSize(arg0: Java.PrimitiveIterator$OfInt, arg1: integer_t): Java.Spliterator$OfInt;
        spliteratorUnknownSizeP(arg0: Java.PrimitiveIterator$OfInt, arg1: integer_t): Promise<Java.Spliterator$OfInt>;
        // public static <T> java.util.Spliterator<T> java.util.Spliterators.spliteratorUnknownSize(java.util.Iterator<? extends T>,int)
        spliteratorUnknownSizeA(arg0: Java.Iterator, arg1: integer_t, cb: Callback<Java.Spliterator>): void;
        spliteratorUnknownSize(arg0: Java.Iterator, arg1: integer_t): Java.Spliterator;
        spliteratorUnknownSizeP(arg0: Java.Iterator, arg1: integer_t): Promise<Java.Spliterator>;
      }
    }
  }

  export module java.util {
    export interface Spliterators$AbstractDoubleSpliterator extends Java.java.lang.Object, Java.java.util.Spliterator$OfDouble {
      // public abstract int java.util.Spliterator.characteristics()
      characteristicsA( cb: Callback<number>): void;
      characteristics(): number;
      characteristicsP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract long java.util.Spliterator.estimateSize()
      estimateSizeA( cb: Callback<longValue_t>): void;
      estimateSize(): longValue_t;
      estimateSizeP(): Promise<longValue_t>;
      // public default void java.util.Spliterator$OfDouble.forEachRemaining(java.util.function.DoubleConsumer)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default void java.util.Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default void java.util.Spliterator$OfPrimitive.forEachRemaining(T_CONS)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public default java.util.Comparator<? super T> java.util.Spliterator.getComparator()
      getComparatorA( cb: Callback<Java.Comparator>): void;
      getComparator(): Java.Comparator;
      getComparatorP(): Promise<Java.Comparator>;
      // public default long java.util.Spliterator.getExactSizeIfKnown()
      getExactSizeIfKnownA( cb: Callback<longValue_t>): void;
      getExactSizeIfKnown(): longValue_t;
      getExactSizeIfKnownP(): Promise<longValue_t>;
      // public default boolean java.util.Spliterator.hasCharacteristics(int)
      hasCharacteristicsA(arg0: integer_t, cb: Callback<boolean>): void;
      hasCharacteristics(arg0: integer_t): boolean;
      hasCharacteristicsP(arg0: integer_t): Promise<boolean>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract boolean java.util.Spliterator$OfDouble.tryAdvance(java.util.function.DoubleConsumer)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator.tryAdvance(java.util.function.Consumer<? super T>)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator$OfPrimitive.tryAdvance(T_CONS)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract T_SPLITR java.util.Spliterator$OfPrimitive.trySplit()
      trySplitA( cb: Callback<Java.Spliterator$OfPrimitive>): void;
      trySplit(): Java.Spliterator$OfPrimitive;
      trySplitP(): Promise<Java.Spliterator$OfPrimitive>;
      // public abstract java.util.Spliterator$OfDouble java.util.Spliterator$OfDouble.trySplit()
      trySplitA( cb: Callback<Java.Spliterator$OfDouble>): void;
      trySplit(): Java.Spliterator$OfDouble;
      trySplitP(): Promise<Java.Spliterator$OfDouble>;
      // public abstract java.util.Spliterator<T> java.util.Spliterator.trySplit()
      trySplitA( cb: Callback<Java.Spliterator>): void;
      trySplit(): Java.Spliterator;
      trySplitP(): Promise<Java.Spliterator>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Spliterators$AbstractDoubleSpliterator {
      export interface Static {
        ORDERED: number;
        DISTINCT: number;
        SORTED: number;
        SIZED: number;
        NONNULL: number;
        IMMUTABLE: number;
        CONCURRENT: number;
        SUBSIZED: number;
      }
    }
  }

  export module java.util {
    export interface Spliterators$AbstractIntSpliterator extends Java.java.lang.Object, Java.java.util.Spliterator$OfInt {
      // public abstract int java.util.Spliterator.characteristics()
      characteristicsA( cb: Callback<number>): void;
      characteristics(): number;
      characteristicsP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract long java.util.Spliterator.estimateSize()
      estimateSizeA( cb: Callback<longValue_t>): void;
      estimateSize(): longValue_t;
      estimateSizeP(): Promise<longValue_t>;
      // public default void java.util.Spliterator$OfInt.forEachRemaining(java.util.function.IntConsumer)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default void java.util.Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default void java.util.Spliterator$OfPrimitive.forEachRemaining(T_CONS)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public default java.util.Comparator<? super T> java.util.Spliterator.getComparator()
      getComparatorA( cb: Callback<Java.Comparator>): void;
      getComparator(): Java.Comparator;
      getComparatorP(): Promise<Java.Comparator>;
      // public default long java.util.Spliterator.getExactSizeIfKnown()
      getExactSizeIfKnownA( cb: Callback<longValue_t>): void;
      getExactSizeIfKnown(): longValue_t;
      getExactSizeIfKnownP(): Promise<longValue_t>;
      // public default boolean java.util.Spliterator.hasCharacteristics(int)
      hasCharacteristicsA(arg0: integer_t, cb: Callback<boolean>): void;
      hasCharacteristics(arg0: integer_t): boolean;
      hasCharacteristicsP(arg0: integer_t): Promise<boolean>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract boolean java.util.Spliterator$OfInt.tryAdvance(java.util.function.IntConsumer)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator.tryAdvance(java.util.function.Consumer<? super T>)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator$OfPrimitive.tryAdvance(T_CONS)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract T_SPLITR java.util.Spliterator$OfPrimitive.trySplit()
      trySplitA( cb: Callback<Java.Spliterator$OfPrimitive>): void;
      trySplit(): Java.Spliterator$OfPrimitive;
      trySplitP(): Promise<Java.Spliterator$OfPrimitive>;
      // public abstract java.util.Spliterator$OfInt java.util.Spliterator$OfInt.trySplit()
      trySplitA( cb: Callback<Java.Spliterator$OfInt>): void;
      trySplit(): Java.Spliterator$OfInt;
      trySplitP(): Promise<Java.Spliterator$OfInt>;
      // public abstract java.util.Spliterator<T> java.util.Spliterator.trySplit()
      trySplitA( cb: Callback<Java.Spliterator>): void;
      trySplit(): Java.Spliterator;
      trySplitP(): Promise<Java.Spliterator>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Spliterators$AbstractIntSpliterator {
      export interface Static {
        ORDERED: number;
        DISTINCT: number;
        SORTED: number;
        SIZED: number;
        NONNULL: number;
        IMMUTABLE: number;
        CONCURRENT: number;
        SUBSIZED: number;
      }
    }
  }

  export module java.util {
    export interface Spliterators$AbstractLongSpliterator extends Java.java.lang.Object, Java.java.util.Spliterator$OfLong {
      // public abstract int java.util.Spliterator.characteristics()
      characteristicsA( cb: Callback<number>): void;
      characteristics(): number;
      characteristicsP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract long java.util.Spliterator.estimateSize()
      estimateSizeA( cb: Callback<longValue_t>): void;
      estimateSize(): longValue_t;
      estimateSizeP(): Promise<longValue_t>;
      // public default void java.util.Spliterator$OfLong.forEachRemaining(java.util.function.LongConsumer)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default void java.util.Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public default void java.util.Spliterator$OfPrimitive.forEachRemaining(T_CONS)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public default java.util.Comparator<? super T> java.util.Spliterator.getComparator()
      getComparatorA( cb: Callback<Java.Comparator>): void;
      getComparator(): Java.Comparator;
      getComparatorP(): Promise<Java.Comparator>;
      // public default long java.util.Spliterator.getExactSizeIfKnown()
      getExactSizeIfKnownA( cb: Callback<longValue_t>): void;
      getExactSizeIfKnown(): longValue_t;
      getExactSizeIfKnownP(): Promise<longValue_t>;
      // public default boolean java.util.Spliterator.hasCharacteristics(int)
      hasCharacteristicsA(arg0: integer_t, cb: Callback<boolean>): void;
      hasCharacteristics(arg0: integer_t): boolean;
      hasCharacteristicsP(arg0: integer_t): Promise<boolean>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract boolean java.util.Spliterator$OfLong.tryAdvance(java.util.function.LongConsumer)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator.tryAdvance(java.util.function.Consumer<? super T>)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Spliterator$OfPrimitive.tryAdvance(T_CONS)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract T_SPLITR java.util.Spliterator$OfPrimitive.trySplit()
      trySplitA( cb: Callback<Java.Spliterator$OfPrimitive>): void;
      trySplit(): Java.Spliterator$OfPrimitive;
      trySplitP(): Promise<Java.Spliterator$OfPrimitive>;
      // public abstract java.util.Spliterator$OfLong java.util.Spliterator$OfLong.trySplit()
      trySplitA( cb: Callback<Java.Spliterator$OfLong>): void;
      trySplit(): Java.Spliterator$OfLong;
      trySplitP(): Promise<Java.Spliterator$OfLong>;
      // public abstract java.util.Spliterator<T> java.util.Spliterator.trySplit()
      trySplitA( cb: Callback<Java.Spliterator>): void;
      trySplit(): Java.Spliterator;
      trySplitP(): Promise<Java.Spliterator>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Spliterators$AbstractLongSpliterator {
      export interface Static {
        ORDERED: number;
        DISTINCT: number;
        SORTED: number;
        SIZED: number;
        NONNULL: number;
        IMMUTABLE: number;
        CONCURRENT: number;
        SUBSIZED: number;
      }
    }
  }

  export module java.util {
    export interface Spliterators$AbstractSpliterator extends Java.java.lang.Object, Java.java.util.Spliterator {
      // public abstract int java.util.Spliterator.characteristics()
      characteristicsA( cb: Callback<number>): void;
      characteristics(): number;
      characteristicsP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract long java.util.Spliterator.estimateSize()
      estimateSizeA( cb: Callback<longValue_t>): void;
      estimateSize(): longValue_t;
      estimateSizeP(): Promise<longValue_t>;
      // public default void java.util.Spliterator.forEachRemaining(java.util.function.Consumer<? super T>)
      forEachRemainingA(arg0: object_t, cb: Callback<void>): void;
      forEachRemaining(arg0: object_t): void;
      forEachRemainingP(arg0: object_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public default java.util.Comparator<? super T> java.util.Spliterator.getComparator()
      getComparatorA( cb: Callback<Java.Comparator>): void;
      getComparator(): Java.Comparator;
      getComparatorP(): Promise<Java.Comparator>;
      // public default long java.util.Spliterator.getExactSizeIfKnown()
      getExactSizeIfKnownA( cb: Callback<longValue_t>): void;
      getExactSizeIfKnown(): longValue_t;
      getExactSizeIfKnownP(): Promise<longValue_t>;
      // public default boolean java.util.Spliterator.hasCharacteristics(int)
      hasCharacteristicsA(arg0: integer_t, cb: Callback<boolean>): void;
      hasCharacteristics(arg0: integer_t): boolean;
      hasCharacteristicsP(arg0: integer_t): Promise<boolean>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract boolean java.util.Spliterator.tryAdvance(java.util.function.Consumer<? super T>)
      tryAdvanceA(arg0: object_t, cb: Callback<boolean>): void;
      tryAdvance(arg0: object_t): boolean;
      tryAdvanceP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Spliterator<T> java.util.Spliterator.trySplit()
      trySplitA( cb: Callback<Java.Spliterator>): void;
      trySplit(): Java.Spliterator;
      trySplitP(): Promise<Java.Spliterator>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Spliterators$AbstractSpliterator {
      export interface Static {
        ORDERED: number;
        DISTINCT: number;
        SORTED: number;
        SIZED: number;
        NONNULL: number;
        IMMUTABLE: number;
        CONCURRENT: number;
        SUBSIZED: number;
      }
    }
  }

  export module java.util {
    export interface SplittableRandom extends Java.java.lang.Object {
      // public java.util.stream.DoubleStream java.util.SplittableRandom.doubles(long,double,double)
      doublesA(arg0: long_t, arg1: double_t, arg2: double_t, cb: Callback<object_t>): void;
      doubles(arg0: long_t, arg1: double_t, arg2: double_t): object_t;
      doublesP(arg0: long_t, arg1: double_t, arg2: double_t): Promise<object_t>;
      // public java.util.stream.DoubleStream java.util.SplittableRandom.doubles(double,double)
      doublesA(arg0: double_t, arg1: double_t, cb: Callback<object_t>): void;
      doubles(arg0: double_t, arg1: double_t): object_t;
      doublesP(arg0: double_t, arg1: double_t): Promise<object_t>;
      // public java.util.stream.DoubleStream java.util.SplittableRandom.doubles(long)
      doublesA(arg0: long_t, cb: Callback<object_t>): void;
      doubles(arg0: long_t): object_t;
      doublesP(arg0: long_t): Promise<object_t>;
      // public java.util.stream.DoubleStream java.util.SplittableRandom.doubles()
      doublesA( cb: Callback<object_t>): void;
      doubles(): object_t;
      doublesP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public java.util.stream.IntStream java.util.SplittableRandom.ints(long,int,int)
      intsA(arg0: long_t, arg1: integer_t, arg2: integer_t, cb: Callback<object_t>): void;
      ints(arg0: long_t, arg1: integer_t, arg2: integer_t): object_t;
      intsP(arg0: long_t, arg1: integer_t, arg2: integer_t): Promise<object_t>;
      // public java.util.stream.IntStream java.util.SplittableRandom.ints(int,int)
      intsA(arg0: integer_t, arg1: integer_t, cb: Callback<object_t>): void;
      ints(arg0: integer_t, arg1: integer_t): object_t;
      intsP(arg0: integer_t, arg1: integer_t): Promise<object_t>;
      // public java.util.stream.IntStream java.util.SplittableRandom.ints(long)
      intsA(arg0: long_t, cb: Callback<object_t>): void;
      ints(arg0: long_t): object_t;
      intsP(arg0: long_t): Promise<object_t>;
      // public java.util.stream.IntStream java.util.SplittableRandom.ints()
      intsA( cb: Callback<object_t>): void;
      ints(): object_t;
      intsP(): Promise<object_t>;
      // public java.util.stream.LongStream java.util.SplittableRandom.longs(long,long,long)
      longsA(arg0: long_t, arg1: long_t, arg2: long_t, cb: Callback<object_t>): void;
      longs(arg0: long_t, arg1: long_t, arg2: long_t): object_t;
      longsP(arg0: long_t, arg1: long_t, arg2: long_t): Promise<object_t>;
      // public java.util.stream.LongStream java.util.SplittableRandom.longs(long,long)
      longsA(arg0: long_t, arg1: long_t, cb: Callback<object_t>): void;
      longs(arg0: long_t, arg1: long_t): object_t;
      longsP(arg0: long_t, arg1: long_t): Promise<object_t>;
      // public java.util.stream.LongStream java.util.SplittableRandom.longs(long)
      longsA(arg0: long_t, cb: Callback<object_t>): void;
      longs(arg0: long_t): object_t;
      longsP(arg0: long_t): Promise<object_t>;
      // public java.util.stream.LongStream java.util.SplittableRandom.longs()
      longsA( cb: Callback<object_t>): void;
      longs(): object_t;
      longsP(): Promise<object_t>;
      // public boolean java.util.SplittableRandom.nextBoolean()
      nextBooleanA( cb: Callback<boolean>): void;
      nextBoolean(): boolean;
      nextBooleanP(): Promise<boolean>;
      // public double java.util.SplittableRandom.nextDouble(double,double)
      nextDoubleA(arg0: double_t, arg1: double_t, cb: Callback<number>): void;
      nextDouble(arg0: double_t, arg1: double_t): number;
      nextDoubleP(arg0: double_t, arg1: double_t): Promise<number>;
      // public double java.util.SplittableRandom.nextDouble(double)
      nextDoubleA(arg0: double_t, cb: Callback<number>): void;
      nextDouble(arg0: double_t): number;
      nextDoubleP(arg0: double_t): Promise<number>;
      // public double java.util.SplittableRandom.nextDouble()
      nextDoubleA( cb: Callback<number>): void;
      nextDouble(): number;
      nextDoubleP(): Promise<number>;
      // public int java.util.SplittableRandom.nextInt(int,int)
      nextIntA(arg0: integer_t, arg1: integer_t, cb: Callback<number>): void;
      nextInt(arg0: integer_t, arg1: integer_t): number;
      nextIntP(arg0: integer_t, arg1: integer_t): Promise<number>;
      // public int java.util.SplittableRandom.nextInt(int)
      nextIntA(arg0: integer_t, cb: Callback<number>): void;
      nextInt(arg0: integer_t): number;
      nextIntP(arg0: integer_t): Promise<number>;
      // public int java.util.SplittableRandom.nextInt()
      nextIntA( cb: Callback<number>): void;
      nextInt(): number;
      nextIntP(): Promise<number>;
      // public long java.util.SplittableRandom.nextLong(long,long)
      nextLongA(arg0: long_t, arg1: long_t, cb: Callback<longValue_t>): void;
      nextLong(arg0: long_t, arg1: long_t): longValue_t;
      nextLongP(arg0: long_t, arg1: long_t): Promise<longValue_t>;
      // public long java.util.SplittableRandom.nextLong(long)
      nextLongA(arg0: long_t, cb: Callback<longValue_t>): void;
      nextLong(arg0: long_t): longValue_t;
      nextLongP(arg0: long_t): Promise<longValue_t>;
      // public long java.util.SplittableRandom.nextLong()
      nextLongA( cb: Callback<longValue_t>): void;
      nextLong(): longValue_t;
      nextLongP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.util.SplittableRandom java.util.SplittableRandom.split()
      splitA( cb: Callback<Java.SplittableRandom>): void;
      split(): Java.SplittableRandom;
      splitP(): Promise<Java.SplittableRandom>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module SplittableRandom {
      export interface Static {
        new (arg0: long_t): java.util.SplittableRandom;
        new (): java.util.SplittableRandom;
      }
    }
  }

  export module java.util {
    export interface Stack extends Java.java.util.Vector {
      // public abstract void java.util.List.add(int,E)
      addA(arg0: integer_t, arg1: object_t, cb: Callback<void>): void;
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAllA(arg0: integer_t, arg1: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: integer_t, arg1: Java.Collection): boolean;
      addAllP(arg0: integer_t, arg1: Java.Collection): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public synchronized void java.util.Vector.addElement(E)
      addElementA(arg0: object_t, cb: Callback<void>): void;
      addElement(arg0: object_t): void;
      addElementP(arg0: object_t): Promise<void>;
      // public synchronized int java.util.Vector.capacity()
      capacityA( cb: Callback<number>): void;
      capacity(): number;
      capacityP(): Promise<number>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public synchronized java.lang.Object java.util.Vector.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public synchronized void java.util.Vector.copyInto(java.lang.Object[])
      copyIntoA(arg0: object_array_t, cb: Callback<void>): void;
      copyInto(arg0: object_array_t): void;
      copyIntoP(arg0: object_array_t): Promise<void>;
      // public synchronized E java.util.Vector.elementAt(int)
      elementAtA(arg0: integer_t, cb: Callback<object_t>): void;
      elementAt(arg0: integer_t): object_t;
      elementAtP(arg0: integer_t): Promise<object_t>;
      // public java.util.Enumeration<E> java.util.Vector.elements()
      elementsA( cb: Callback<Java.Enumeration>): void;
      elements(): Java.Enumeration;
      elementsP(): Promise<Java.Enumeration>;
      // public boolean java.util.Stack.empty()
      emptyA( cb: Callback<boolean>): void;
      empty(): boolean;
      emptyP(): Promise<boolean>;
      // public synchronized void java.util.Vector.ensureCapacity(int)
      ensureCapacityA(arg0: integer_t, cb: Callback<void>): void;
      ensureCapacity(arg0: integer_t): void;
      ensureCapacityP(arg0: integer_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized E java.util.Vector.firstElement()
      firstElementA( cb: Callback<object_t>): void;
      firstElement(): object_t;
      firstElementP(): Promise<object_t>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract E java.util.List.get(int)
      getA(arg0: integer_t, cb: Callback<object_t>): void;
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized int java.util.Vector.indexOf(java.lang.Object,int)
      indexOfA(arg0: object_t, arg1: integer_t, cb: Callback<number>): void;
      indexOf(arg0: object_t, arg1: integer_t): number;
      indexOfP(arg0: object_t, arg1: integer_t): Promise<number>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOfA(arg0: object_t, cb: Callback<number>): void;
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public synchronized void java.util.Vector.insertElementAt(E,int)
      insertElementAtA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
      insertElementAt(arg0: object_t, arg1: integer_t): void;
      insertElementAtP(arg0: object_t, arg1: integer_t): Promise<void>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public synchronized E java.util.Vector.lastElement()
      lastElementA( cb: Callback<object_t>): void;
      lastElement(): object_t;
      lastElementP(): Promise<object_t>;
      // public synchronized int java.util.Vector.lastIndexOf(java.lang.Object,int)
      lastIndexOfA(arg0: object_t, arg1: integer_t, cb: Callback<number>): void;
      lastIndexOf(arg0: object_t, arg1: integer_t): number;
      lastIndexOfP(arg0: object_t, arg1: integer_t): Promise<number>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOfA(arg0: object_t, cb: Callback<number>): void;
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIteratorA(arg0: integer_t, cb: Callback<Java.ListIterator>): void;
      listIterator(arg0: integer_t): Java.ListIterator;
      listIteratorP(arg0: integer_t): Promise<Java.ListIterator>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIteratorA( cb: Callback<Java.ListIterator>): void;
      listIterator(): Java.ListIterator;
      listIteratorP(): Promise<Java.ListIterator>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public synchronized E java.util.Stack.peek()
      peekA( cb: Callback<object_t>): void;
      peek(): object_t;
      peekP(): Promise<object_t>;
      // public synchronized E java.util.Stack.pop()
      popA( cb: Callback<object_t>): void;
      pop(): object_t;
      popP(): Promise<object_t>;
      // public E java.util.Stack.push(E)
      pushA(arg0: object_t, cb: Callback<object_t>): void;
      push(arg0: object_t): object_t;
      pushP(arg0: object_t): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.List.remove(int)
      removeA(arg0: integer_t, cb: Callback<object_t>): void;
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public synchronized void java.util.Vector.removeAllElements()
      removeAllElementsA( cb: Callback<void>): void;
      removeAllElements(): void;
      removeAllElementsP(): Promise<void>;
      // public synchronized boolean java.util.Vector.removeElement(java.lang.Object)
      removeElementA(arg0: object_t, cb: Callback<boolean>): void;
      removeElement(arg0: object_t): boolean;
      removeElementP(arg0: object_t): Promise<boolean>;
      // public synchronized void java.util.Vector.removeElementAt(int)
      removeElementAtA(arg0: integer_t, cb: Callback<void>): void;
      removeElementAt(arg0: integer_t): void;
      removeElementAtP(arg0: integer_t): Promise<void>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public synchronized int java.util.Stack.search(java.lang.Object)
      searchA(arg0: object_t, cb: Callback<number>): void;
      search(arg0: object_t): number;
      searchP(arg0: object_t): Promise<number>;
      // public abstract E java.util.List.set(int,E)
      setA(arg0: integer_t, arg1: object_t, cb: Callback<object_t>): void;
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public synchronized void java.util.Vector.setElementAt(E,int)
      setElementAtA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
      setElementAt(arg0: object_t, arg1: integer_t): void;
      setElementAtP(arg0: object_t, arg1: integer_t): Promise<void>;
      // public synchronized void java.util.Vector.setSize(int)
      setSizeA(arg0: integer_t, cb: Callback<void>): void;
      setSize(arg0: integer_t): void;
      setSizeP(arg0: integer_t): Promise<void>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sortA(arg0: Java.Comparator, cb: Callback<void>): void;
      sort(arg0: Java.Comparator): void;
      sortP(arg0: Java.Comparator): Promise<void>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subListA(arg0: integer_t, arg1: integer_t, cb: Callback<Java.List>): void;
      subList(arg0: integer_t, arg1: integer_t): Java.List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<Java.List>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public synchronized void java.util.Vector.trimToSize()
      trimToSizeA( cb: Callback<void>): void;
      trimToSize(): void;
      trimToSizeP(): Promise<void>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Stack {
      export interface Static {
        new (): java.util.Stack;
      }
    }
  }

  export module java.util {
    export interface StringJoiner extends Java.java.lang.Object {
      // public java.util.StringJoiner java.util.StringJoiner.add(java.lang.CharSequence)
      addA(arg0: object_t, cb: Callback<Java.StringJoiner>): void;
      add(arg0: object_t): Java.StringJoiner;
      addP(arg0: object_t): Promise<Java.StringJoiner>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public int java.util.StringJoiner.length()
      lengthA( cb: Callback<number>): void;
      length(): number;
      lengthP(): Promise<number>;
      // public java.util.StringJoiner java.util.StringJoiner.merge(java.util.StringJoiner)
      mergeA(arg0: Java.StringJoiner, cb: Callback<Java.StringJoiner>): void;
      merge(arg0: Java.StringJoiner): Java.StringJoiner;
      mergeP(arg0: Java.StringJoiner): Promise<Java.StringJoiner>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.util.StringJoiner java.util.StringJoiner.setEmptyValue(java.lang.CharSequence)
      setEmptyValueA(arg0: object_t, cb: Callback<Java.StringJoiner>): void;
      setEmptyValue(arg0: object_t): Java.StringJoiner;
      setEmptyValueP(arg0: object_t): Promise<Java.StringJoiner>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module StringJoiner {
      export interface Static {
        new (arg0: object_t, arg1: object_t, arg2: object_t): java.util.StringJoiner;
        new (arg0: object_t): java.util.StringJoiner;
      }
    }
  }

  export module java.util {
    export interface StringTokenizer extends Java.java.lang.Object, Java.java.util.Enumeration {
      // public int java.util.StringTokenizer.countTokens()
      countTokensA( cb: Callback<number>): void;
      countTokens(): number;
      countTokensP(): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Enumeration.hasMoreElements()
      hasMoreElementsA( cb: Callback<boolean>): void;
      hasMoreElements(): boolean;
      hasMoreElementsP(): Promise<boolean>;
      // public boolean java.util.StringTokenizer.hasMoreTokens()
      hasMoreTokensA( cb: Callback<boolean>): void;
      hasMoreTokens(): boolean;
      hasMoreTokensP(): Promise<boolean>;
      // public abstract E java.util.Enumeration.nextElement()
      nextElementA( cb: Callback<object_t>): void;
      nextElement(): object_t;
      nextElementP(): Promise<object_t>;
      // public java.lang.String java.util.StringTokenizer.nextToken(java.lang.String)
      nextTokenA(arg0: string_t, cb: Callback<string>): void;
      nextToken(arg0: string_t): string;
      nextTokenP(arg0: string_t): Promise<string>;
      // public java.lang.String java.util.StringTokenizer.nextToken()
      nextTokenA( cb: Callback<string>): void;
      nextToken(): string;
      nextTokenP(): Promise<string>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module StringTokenizer {
      export interface Static {
        new (arg0: string_t, arg1: string_t, arg2: boolean_t): java.util.StringTokenizer;
        new (arg0: string_t, arg1: string_t): java.util.StringTokenizer;
        new (arg0: string_t): java.util.StringTokenizer;
      }
    }
  }

  export module java.util {
    export interface Timer extends Java.java.lang.Object {
      // public void java.util.Timer.cancel()
      cancelA( cb: Callback<void>): void;
      cancel(): void;
      cancelP(): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public int java.util.Timer.purge()
      purgeA( cb: Callback<number>): void;
      purge(): number;
      purgeP(): Promise<number>;
      // public void java.util.Timer.schedule(java.util.TimerTask,java.util.Date,long)
      scheduleA(arg0: Java.TimerTask, arg1: Java.Date, arg2: long_t, cb: Callback<void>): void;
      schedule(arg0: Java.TimerTask, arg1: Java.Date, arg2: long_t): void;
      scheduleP(arg0: Java.TimerTask, arg1: Java.Date, arg2: long_t): Promise<void>;
      // public void java.util.Timer.schedule(java.util.TimerTask,long,long)
      scheduleA(arg0: Java.TimerTask, arg1: long_t, arg2: long_t, cb: Callback<void>): void;
      schedule(arg0: Java.TimerTask, arg1: long_t, arg2: long_t): void;
      scheduleP(arg0: Java.TimerTask, arg1: long_t, arg2: long_t): Promise<void>;
      // public void java.util.Timer.schedule(java.util.TimerTask,java.util.Date)
      scheduleA(arg0: Java.TimerTask, arg1: Java.Date, cb: Callback<void>): void;
      schedule(arg0: Java.TimerTask, arg1: Java.Date): void;
      scheduleP(arg0: Java.TimerTask, arg1: Java.Date): Promise<void>;
      // public void java.util.Timer.schedule(java.util.TimerTask,long)
      scheduleA(arg0: Java.TimerTask, arg1: long_t, cb: Callback<void>): void;
      schedule(arg0: Java.TimerTask, arg1: long_t): void;
      scheduleP(arg0: Java.TimerTask, arg1: long_t): Promise<void>;
      // public void java.util.Timer.scheduleAtFixedRate(java.util.TimerTask,java.util.Date,long)
      scheduleAtFixedRateA(arg0: Java.TimerTask, arg1: Java.Date, arg2: long_t, cb: Callback<void>): void;
      scheduleAtFixedRate(arg0: Java.TimerTask, arg1: Java.Date, arg2: long_t): void;
      scheduleAtFixedRateP(arg0: Java.TimerTask, arg1: Java.Date, arg2: long_t): Promise<void>;
      // public void java.util.Timer.scheduleAtFixedRate(java.util.TimerTask,long,long)
      scheduleAtFixedRateA(arg0: Java.TimerTask, arg1: long_t, arg2: long_t, cb: Callback<void>): void;
      scheduleAtFixedRate(arg0: Java.TimerTask, arg1: long_t, arg2: long_t): void;
      scheduleAtFixedRateP(arg0: Java.TimerTask, arg1: long_t, arg2: long_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Timer {
      export interface Static {
        new (arg0: string_t, arg1: boolean_t): java.util.Timer;
        new (arg0: string_t): java.util.Timer;
        new (arg0: boolean_t): java.util.Timer;
        new (): java.util.Timer;
      }
    }
  }

  export module java.util {
    export interface TimerTask extends Java.java.lang.Object {
      // public boolean java.util.TimerTask.cancel()
      cancelA( cb: Callback<boolean>): void;
      cancel(): boolean;
      cancelP(): Promise<boolean>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract void java.util.TimerTask.run()
      runA( cb: Callback<void>): void;
      run(): void;
      runP(): Promise<void>;
      // public long java.util.TimerTask.scheduledExecutionTime()
      scheduledExecutionTimeA( cb: Callback<longValue_t>): void;
      scheduledExecutionTime(): longValue_t;
      scheduledExecutionTimeP(): Promise<longValue_t>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TimerTask {
      export interface Static {
      }
    }
  }

  export module java.util {
    export interface TimeZone extends Java.java.lang.Object {
      // public java.lang.Object java.util.TimeZone.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.util.TimeZone.getDisplayName(boolean,int,java.util.Locale)
      getDisplayNameA(arg0: boolean_t, arg1: integer_t, arg2: Java.Locale, cb: Callback<string>): void;
      getDisplayName(arg0: boolean_t, arg1: integer_t, arg2: Java.Locale): string;
      getDisplayNameP(arg0: boolean_t, arg1: integer_t, arg2: Java.Locale): Promise<string>;
      // public final java.lang.String java.util.TimeZone.getDisplayName(boolean,int)
      getDisplayNameA(arg0: boolean_t, arg1: integer_t, cb: Callback<string>): void;
      getDisplayName(arg0: boolean_t, arg1: integer_t): string;
      getDisplayNameP(arg0: boolean_t, arg1: integer_t): Promise<string>;
      // public final java.lang.String java.util.TimeZone.getDisplayName(java.util.Locale)
      getDisplayNameA(arg0: Java.Locale, cb: Callback<string>): void;
      getDisplayName(arg0: Java.Locale): string;
      getDisplayNameP(arg0: Java.Locale): Promise<string>;
      // public final java.lang.String java.util.TimeZone.getDisplayName()
      getDisplayNameA( cb: Callback<string>): void;
      getDisplayName(): string;
      getDisplayNameP(): Promise<string>;
      // public int java.util.TimeZone.getDSTSavings()
      getDSTSavingsA( cb: Callback<number>): void;
      getDSTSavings(): number;
      getDSTSavingsP(): Promise<number>;
      // public java.lang.String java.util.TimeZone.getID()
      getIDA( cb: Callback<string>): void;
      getID(): string;
      getIDP(): Promise<string>;
      // public abstract int java.util.TimeZone.getOffset(int,int,int,int,int,int)
      getOffsetA(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t, cb: Callback<number>): void;
      getOffset(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): number;
      getOffsetP(arg0: integer_t, arg1: integer_t, arg2: integer_t, arg3: integer_t, arg4: integer_t, arg5: integer_t): Promise<number>;
      // public int java.util.TimeZone.getOffset(long)
      getOffsetA(arg0: long_t, cb: Callback<number>): void;
      getOffset(arg0: long_t): number;
      getOffsetP(arg0: long_t): Promise<number>;
      // public abstract int java.util.TimeZone.getRawOffset()
      getRawOffsetA( cb: Callback<number>): void;
      getRawOffset(): number;
      getRawOffsetP(): Promise<number>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public boolean java.util.TimeZone.hasSameRules(java.util.TimeZone)
      hasSameRulesA(arg0: Java.TimeZone, cb: Callback<boolean>): void;
      hasSameRules(arg0: Java.TimeZone): boolean;
      hasSameRulesP(arg0: Java.TimeZone): Promise<boolean>;
      // public abstract boolean java.util.TimeZone.inDaylightTime(java.util.Date)
      inDaylightTimeA(arg0: Java.Date, cb: Callback<boolean>): void;
      inDaylightTime(arg0: Java.Date): boolean;
      inDaylightTimeP(arg0: Java.Date): Promise<boolean>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public boolean java.util.TimeZone.observesDaylightTime()
      observesDaylightTimeA( cb: Callback<boolean>): void;
      observesDaylightTime(): boolean;
      observesDaylightTimeP(): Promise<boolean>;
      // public void java.util.TimeZone.setID(java.lang.String)
      setIDA(arg0: string_t, cb: Callback<void>): void;
      setID(arg0: string_t): void;
      setIDP(arg0: string_t): Promise<void>;
      // public abstract void java.util.TimeZone.setRawOffset(int)
      setRawOffsetA(arg0: integer_t, cb: Callback<void>): void;
      setRawOffset(arg0: integer_t): void;
      setRawOffsetP(arg0: integer_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public java.time.ZoneId java.util.TimeZone.toZoneId()
      toZoneIdA( cb: Callback<object_t>): void;
      toZoneId(): object_t;
      toZoneIdP(): Promise<object_t>;
      // public abstract boolean java.util.TimeZone.useDaylightTime()
      useDaylightTimeA( cb: Callback<boolean>): void;
      useDaylightTime(): boolean;
      useDaylightTimeP(): Promise<boolean>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TimeZone {
      export interface Static {
        SHORT: number;
        LONG: number;
        new (): java.util.TimeZone;
        // public static synchronized java.lang.String[] java.util.TimeZone.getAvailableIDs(int)
        getAvailableIDsA(arg0: integer_t, cb: Callback<string[]>): void;
        getAvailableIDs(arg0: integer_t): string[];
        getAvailableIDsP(arg0: integer_t): Promise<string[]>;
        // public static synchronized java.lang.String[] java.util.TimeZone.getAvailableIDs()
        getAvailableIDsA( cb: Callback<string[]>): void;
        getAvailableIDs(): string[];
        getAvailableIDsP(): Promise<string[]>;
        // public static java.util.TimeZone java.util.TimeZone.getDefault()
        getDefaultA( cb: Callback<Java.TimeZone>): void;
        getDefault(): Java.TimeZone;
        getDefaultP(): Promise<Java.TimeZone>;
        // public static java.util.TimeZone java.util.TimeZone.getTimeZone(java.time.ZoneId)
        getTimeZoneA(arg0: object_t, cb: Callback<Java.TimeZone>): void;
        getTimeZone(arg0: object_t): Java.TimeZone;
        getTimeZoneP(arg0: object_t): Promise<Java.TimeZone>;
        // public static synchronized java.util.TimeZone java.util.TimeZone.getTimeZone(java.lang.String)
        getTimeZoneA(arg0: string_t, cb: Callback<Java.TimeZone>): void;
        getTimeZone(arg0: string_t): Java.TimeZone;
        getTimeZoneP(arg0: string_t): Promise<Java.TimeZone>;
        // public static void java.util.TimeZone.setDefault(java.util.TimeZone)
        setDefaultA(arg0: Java.TimeZone, cb: Callback<void>): void;
        setDefault(arg0: Java.TimeZone): void;
        setDefaultP(arg0: Java.TimeZone): Promise<void>;
      }
    }
  }

  export module java.util {
    export interface TooManyListenersException extends Java.java.lang.Object {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TooManyListenersException {
      export interface Static {
        new (arg0: string_t): java.util.TooManyListenersException;
        new (): java.util.TooManyListenersException;
      }
    }
  }

  export module java.util {
    export interface TreeMap extends Java.java.util.AbstractMap, Java.java.util.NavigableMap {
      // public abstract java.util.Map.java.util.Map$Entry<K, V> java.util.NavigableMap.ceilingEntry(K)
      ceilingEntryA(arg0: object_t, cb: Callback<Java.Map$Entry>): void;
      ceilingEntry(arg0: object_t): Java.Map$Entry;
      ceilingEntryP(arg0: object_t): Promise<Java.Map$Entry>;
      // public abstract K java.util.NavigableMap.ceilingKey(K)
      ceilingKeyA(arg0: object_t, cb: Callback<object_t>): void;
      ceilingKey(arg0: object_t): object_t;
      ceilingKeyP(arg0: object_t): Promise<object_t>;
      // public abstract void java.util.Map.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.TreeMap.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public abstract java.util.Comparator<? super K> java.util.SortedMap.comparator()
      comparatorA( cb: Callback<Java.Comparator>): void;
      comparator(): Java.Comparator;
      comparatorP(): Promise<Java.Comparator>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      compute(arg0: object_t, arg1: object_t): object_t;
      computeP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsentA(arg0: object_t, arg1: Java.Function, cb: Callback<object_t>): void;
      computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      computeIfPresent(arg0: object_t, arg1: object_t): object_t;
      computeIfPresentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKeyA(arg0: object_t, cb: Callback<boolean>): void;
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValueA(arg0: object_t, cb: Callback<boolean>): void;
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.NavigableSet<K> java.util.NavigableMap.descendingKeySet()
      descendingKeySetA( cb: Callback<Java.NavigableSet>): void;
      descendingKeySet(): Java.NavigableSet;
      descendingKeySetP(): Promise<Java.NavigableSet>;
      // public abstract java.util.NavigableMap<K, V> java.util.NavigableMap.descendingMap()
      descendingMapA( cb: Callback<Java.NavigableMap>): void;
      descendingMap(): Java.NavigableMap;
      descendingMapP(): Promise<Java.NavigableMap>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySetA( cb: Callback<Java.Set>): void;
      entrySet(): Java.Set;
      entrySetP(): Promise<Java.Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Map.java.util.Map$Entry<K, V> java.util.NavigableMap.firstEntry()
      firstEntryA( cb: Callback<Java.Map$Entry>): void;
      firstEntry(): Java.Map$Entry;
      firstEntryP(): Promise<Java.Map$Entry>;
      // public abstract K java.util.SortedMap.firstKey()
      firstKeyA( cb: Callback<object_t>): void;
      firstKey(): object_t;
      firstKeyP(): Promise<object_t>;
      // public abstract java.util.Map.java.util.Map$Entry<K, V> java.util.NavigableMap.floorEntry(K)
      floorEntryA(arg0: object_t, cb: Callback<Java.Map$Entry>): void;
      floorEntry(arg0: object_t): Java.Map$Entry;
      floorEntryP(arg0: object_t): Promise<Java.Map$Entry>;
      // public abstract K java.util.NavigableMap.floorKey(K)
      floorKeyA(arg0: object_t, cb: Callback<object_t>): void;
      floorKey(arg0: object_t): object_t;
      floorKeyP(arg0: object_t): Promise<object_t>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      getA(arg0: object_t, cb: Callback<object_t>): void;
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefaultA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.util.NavigableMap<K, V> java.util.NavigableMap.headMap(K,boolean)
      headMapA(arg0: object_t, arg1: boolean_t, cb: Callback<Java.NavigableMap>): void;
      headMap(arg0: object_t, arg1: boolean_t): Java.NavigableMap;
      headMapP(arg0: object_t, arg1: boolean_t): Promise<Java.NavigableMap>;
      // public abstract java.util.SortedMap<K, V> java.util.SortedMap.headMap(K)
      headMapA(arg0: object_t, cb: Callback<Java.SortedMap>): void;
      headMap(arg0: object_t): Java.SortedMap;
      headMapP(arg0: object_t): Promise<Java.SortedMap>;
      // public abstract java.util.Map.java.util.Map$Entry<K, V> java.util.NavigableMap.higherEntry(K)
      higherEntryA(arg0: object_t, cb: Callback<Java.Map$Entry>): void;
      higherEntry(arg0: object_t): Java.Map$Entry;
      higherEntryP(arg0: object_t): Promise<Java.Map$Entry>;
      // public abstract K java.util.NavigableMap.higherKey(K)
      higherKeyA(arg0: object_t, cb: Callback<object_t>): void;
      higherKey(arg0: object_t): object_t;
      higherKeyP(arg0: object_t): Promise<object_t>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySetA( cb: Callback<Java.Set>): void;
      keySet(): Java.Set;
      keySetP(): Promise<Java.Set>;
      // public abstract java.util.Map.java.util.Map$Entry<K, V> java.util.NavigableMap.lastEntry()
      lastEntryA( cb: Callback<Java.Map$Entry>): void;
      lastEntry(): Java.Map$Entry;
      lastEntryP(): Promise<Java.Map$Entry>;
      // public abstract K java.util.SortedMap.lastKey()
      lastKeyA( cb: Callback<object_t>): void;
      lastKey(): object_t;
      lastKeyP(): Promise<object_t>;
      // public abstract java.util.Map.java.util.Map$Entry<K, V> java.util.NavigableMap.lowerEntry(K)
      lowerEntryA(arg0: object_t, cb: Callback<Java.Map$Entry>): void;
      lowerEntry(arg0: object_t): Java.Map$Entry;
      lowerEntryP(arg0: object_t): Promise<Java.Map$Entry>;
      // public abstract K java.util.NavigableMap.lowerKey(K)
      lowerKeyA(arg0: object_t, cb: Callback<object_t>): void;
      lowerKey(arg0: object_t): object_t;
      lowerKeyP(arg0: object_t): Promise<object_t>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      mergeA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<object_t>): void;
      merge(arg0: object_t, arg1: object_t, arg2: object_t): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<object_t>;
      // public abstract java.util.NavigableSet<K> java.util.NavigableMap.navigableKeySet()
      navigableKeySetA( cb: Callback<Java.NavigableSet>): void;
      navigableKeySet(): Java.NavigableSet;
      navigableKeySetP(): Promise<Java.NavigableSet>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract java.util.Map.java.util.Map$Entry<K, V> java.util.NavigableMap.pollFirstEntry()
      pollFirstEntryA( cb: Callback<Java.Map$Entry>): void;
      pollFirstEntry(): Java.Map$Entry;
      pollFirstEntryP(): Promise<Java.Map$Entry>;
      // public abstract java.util.Map.java.util.Map$Entry<K, V> java.util.NavigableMap.pollLastEntry()
      pollLastEntryA( cb: Callback<Java.Map$Entry>): void;
      pollLastEntry(): Java.Map$Entry;
      pollLastEntryP(): Promise<Java.Map$Entry>;
      // public abstract V java.util.Map.put(K,V)
      putA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAllA(arg0: Java.Map, cb: Callback<void>): void;
      putAll(arg0: Java.Map): void;
      putAllP(arg0: Java.Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      removeA(arg0: object_t, arg1: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<object_t>): void;
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replaceA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<boolean>): void;
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replaceA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract int java.util.Map.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public abstract java.util.NavigableMap<K, V> java.util.NavigableMap.subMap(K,boolean,K,boolean)
      subMapA(arg0: object_t, arg1: boolean_t, arg2: object_t, arg3: boolean_t, cb: Callback<Java.NavigableMap>): void;
      subMap(arg0: object_t, arg1: boolean_t, arg2: object_t, arg3: boolean_t): Java.NavigableMap;
      subMapP(arg0: object_t, arg1: boolean_t, arg2: object_t, arg3: boolean_t): Promise<Java.NavigableMap>;
      // public abstract java.util.SortedMap<K, V> java.util.SortedMap.subMap(K,K)
      subMapA(arg0: object_t, arg1: object_t, cb: Callback<Java.SortedMap>): void;
      subMap(arg0: object_t, arg1: object_t): Java.SortedMap;
      subMapP(arg0: object_t, arg1: object_t): Promise<Java.SortedMap>;
      // public abstract java.util.NavigableMap<K, V> java.util.NavigableMap.tailMap(K,boolean)
      tailMapA(arg0: object_t, arg1: boolean_t, cb: Callback<Java.NavigableMap>): void;
      tailMap(arg0: object_t, arg1: boolean_t): Java.NavigableMap;
      tailMapP(arg0: object_t, arg1: boolean_t): Promise<Java.NavigableMap>;
      // public abstract java.util.SortedMap<K, V> java.util.SortedMap.tailMap(K)
      tailMapA(arg0: object_t, cb: Callback<Java.SortedMap>): void;
      tailMap(arg0: object_t): Java.SortedMap;
      tailMapP(arg0: object_t): Promise<Java.SortedMap>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      valuesA( cb: Callback<Java.Collection>): void;
      values(): Java.Collection;
      valuesP(): Promise<Java.Collection>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TreeMap {
      export interface Static {
        new (arg0: Java.Comparator): java.util.TreeMap;
        new (arg0: Java.SortedMap): java.util.TreeMap;
        new (arg0: Java.Map): java.util.TreeMap;
        new (): java.util.TreeMap;
      }
    }
  }

  export module java.util {
    export interface TreeSet extends Java.java.util.AbstractSet, Java.java.util.NavigableSet {
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract E java.util.NavigableSet.ceiling(E)
      ceilingA(arg0: object_t, cb: Callback<object_t>): void;
      ceiling(arg0: object_t): object_t;
      ceilingP(arg0: object_t): Promise<object_t>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public java.lang.Object java.util.TreeSet.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public abstract java.util.Comparator<? super E> java.util.SortedSet.comparator()
      comparatorA( cb: Callback<Java.Comparator>): void;
      comparator(): Java.Comparator;
      comparatorP(): Promise<Java.Comparator>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.NavigableSet.descendingIterator()
      descendingIteratorA( cb: Callback<Java.Iterator>): void;
      descendingIterator(): Java.Iterator;
      descendingIteratorP(): Promise<Java.Iterator>;
      // public abstract java.util.NavigableSet<E> java.util.NavigableSet.descendingSet()
      descendingSetA( cb: Callback<Java.NavigableSet>): void;
      descendingSet(): Java.NavigableSet;
      descendingSetP(): Promise<Java.NavigableSet>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.SortedSet.first()
      firstA( cb: Callback<object_t>): void;
      first(): object_t;
      firstP(): Promise<object_t>;
      // public abstract E java.util.NavigableSet.floor(E)
      floorA(arg0: object_t, cb: Callback<object_t>): void;
      floor(arg0: object_t): object_t;
      floorP(arg0: object_t): Promise<object_t>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract java.util.NavigableSet<E> java.util.NavigableSet.headSet(E,boolean)
      headSetA(arg0: object_t, arg1: boolean_t, cb: Callback<Java.NavigableSet>): void;
      headSet(arg0: object_t, arg1: boolean_t): Java.NavigableSet;
      headSetP(arg0: object_t, arg1: boolean_t): Promise<Java.NavigableSet>;
      // public abstract java.util.SortedSet<E> java.util.SortedSet.headSet(E)
      headSetA(arg0: object_t, cb: Callback<Java.SortedSet>): void;
      headSet(arg0: object_t): Java.SortedSet;
      headSetP(arg0: object_t): Promise<Java.SortedSet>;
      // public abstract E java.util.NavigableSet.higher(E)
      higherA(arg0: object_t, cb: Callback<object_t>): void;
      higher(arg0: object_t): object_t;
      higherP(arg0: object_t): Promise<object_t>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public abstract E java.util.SortedSet.last()
      lastA( cb: Callback<object_t>): void;
      last(): object_t;
      lastP(): Promise<object_t>;
      // public abstract E java.util.NavigableSet.lower(E)
      lowerA(arg0: object_t, cb: Callback<object_t>): void;
      lower(arg0: object_t): object_t;
      lowerP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract E java.util.NavigableSet.pollFirst()
      pollFirstA( cb: Callback<object_t>): void;
      pollFirst(): object_t;
      pollFirstP(): Promise<object_t>;
      // public abstract E java.util.NavigableSet.pollLast()
      pollLastA( cb: Callback<object_t>): void;
      pollLast(): object_t;
      pollLastP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.NavigableSet<E> java.util.NavigableSet.subSet(E,boolean,E,boolean)
      subSetA(arg0: object_t, arg1: boolean_t, arg2: object_t, arg3: boolean_t, cb: Callback<Java.NavigableSet>): void;
      subSet(arg0: object_t, arg1: boolean_t, arg2: object_t, arg3: boolean_t): Java.NavigableSet;
      subSetP(arg0: object_t, arg1: boolean_t, arg2: object_t, arg3: boolean_t): Promise<Java.NavigableSet>;
      // public abstract java.util.SortedSet<E> java.util.SortedSet.subSet(E,E)
      subSetA(arg0: object_t, arg1: object_t, cb: Callback<Java.SortedSet>): void;
      subSet(arg0: object_t, arg1: object_t): Java.SortedSet;
      subSetP(arg0: object_t, arg1: object_t): Promise<Java.SortedSet>;
      // public abstract java.util.NavigableSet<E> java.util.NavigableSet.tailSet(E,boolean)
      tailSetA(arg0: object_t, arg1: boolean_t, cb: Callback<Java.NavigableSet>): void;
      tailSet(arg0: object_t, arg1: boolean_t): Java.NavigableSet;
      tailSetP(arg0: object_t, arg1: boolean_t): Promise<Java.NavigableSet>;
      // public abstract java.util.SortedSet<E> java.util.SortedSet.tailSet(E)
      tailSetA(arg0: object_t, cb: Callback<Java.SortedSet>): void;
      tailSet(arg0: object_t): Java.SortedSet;
      tailSetP(arg0: object_t): Promise<Java.SortedSet>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module TreeSet {
      export interface Static {
        new (arg0: Java.Comparator): java.util.TreeSet;
        new (arg0: Java.Collection): java.util.TreeSet;
        new (arg0: Java.SortedSet): java.util.TreeSet;
        new (): java.util.TreeSet;
      }
    }
  }

  export module java.util {
    export interface UnknownFormatConversionException extends Java.java.util.IllegalFormatException {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.util.UnknownFormatConversionException.getConversion()
      getConversionA( cb: Callback<string>): void;
      getConversion(): string;
      getConversionP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module UnknownFormatConversionException {
      export interface Static {
        new (arg0: string_t): java.util.UnknownFormatConversionException;
      }
    }
  }

  export module java.util {
    export interface UnknownFormatFlagsException extends Java.java.util.IllegalFormatException {
      // public final synchronized void java.lang.Throwable.addSuppressed(java.lang.Throwable)
      addSuppressedA(arg0: object_t, cb: Callback<void>): void;
      addSuppressed(arg0: object_t): void;
      addSuppressedP(arg0: object_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized java.lang.Throwable java.lang.Throwable.fillInStackTrace()
      fillInStackTraceA( cb: Callback<object_t>): void;
      fillInStackTrace(): object_t;
      fillInStackTraceP(): Promise<object_t>;
      // public synchronized java.lang.Throwable java.lang.Throwable.getCause()
      getCauseA( cb: Callback<object_t>): void;
      getCause(): object_t;
      getCauseP(): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public java.lang.String java.util.UnknownFormatFlagsException.getFlags()
      getFlagsA( cb: Callback<string>): void;
      getFlags(): string;
      getFlagsP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getLocalizedMessage()
      getLocalizedMessageA( cb: Callback<string>): void;
      getLocalizedMessage(): string;
      getLocalizedMessageP(): Promise<string>;
      // public java.lang.String java.lang.Throwable.getMessage()
      getMessageA( cb: Callback<string>): void;
      getMessage(): string;
      getMessageP(): Promise<string>;
      // public java.lang.StackTraceElement[] java.lang.Throwable.getStackTrace()
      getStackTraceA( cb: Callback<object_t[]>): void;
      getStackTrace(): object_t[];
      getStackTraceP(): Promise<object_t[]>;
      // public final synchronized java.lang.Throwable[] java.lang.Throwable.getSuppressed()
      getSuppressedA( cb: Callback<object_t[]>): void;
      getSuppressed(): object_t[];
      getSuppressedP(): Promise<object_t[]>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized java.lang.Throwable java.lang.Throwable.initCause(java.lang.Throwable)
      initCauseA(arg0: object_t, cb: Callback<object_t>): void;
      initCause(arg0: object_t): object_t;
      initCauseP(arg0: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintWriter)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace(java.io.PrintStream)
      printStackTraceA(arg0: object_t, cb: Callback<void>): void;
      printStackTrace(arg0: object_t): void;
      printStackTraceP(arg0: object_t): Promise<void>;
      // public void java.lang.Throwable.printStackTrace()
      printStackTraceA( cb: Callback<void>): void;
      printStackTrace(): void;
      printStackTraceP(): Promise<void>;
      // public void java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[])
      setStackTraceA(arg0: object_array_t, cb: Callback<void>): void;
      setStackTrace(arg0: object_array_t): void;
      setStackTraceP(arg0: object_array_t): Promise<void>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module UnknownFormatFlagsException {
      export interface Static {
        new (arg0: string_t): java.util.UnknownFormatFlagsException;
      }
    }
  }

  export module java.util {
    export interface UUID extends Java.java.lang.Object {
      // public int java.util.UUID.clockSequence()
      clockSequenceA( cb: Callback<number>): void;
      clockSequence(): number;
      clockSequenceP(): Promise<number>;
      // public int java.util.UUID.compareTo(java.lang.Object)
      compareToA(arg0: object_t, cb: Callback<number>): void;
      compareTo(arg0: object_t): number;
      compareToP(arg0: object_t): Promise<number>;
      // public int java.util.UUID.compareTo(java.util.UUID)
      compareToA(arg0: Java.UUID, cb: Callback<number>): void;
      compareTo(arg0: Java.UUID): number;
      compareToP(arg0: Java.UUID): Promise<number>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public long java.util.UUID.getLeastSignificantBits()
      getLeastSignificantBitsA( cb: Callback<longValue_t>): void;
      getLeastSignificantBits(): longValue_t;
      getLeastSignificantBitsP(): Promise<longValue_t>;
      // public long java.util.UUID.getMostSignificantBits()
      getMostSignificantBitsA( cb: Callback<longValue_t>): void;
      getMostSignificantBits(): longValue_t;
      getMostSignificantBitsP(): Promise<longValue_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public long java.util.UUID.node()
      nodeA( cb: Callback<longValue_t>): void;
      node(): longValue_t;
      nodeP(): Promise<longValue_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public long java.util.UUID.timestamp()
      timestampA( cb: Callback<longValue_t>): void;
      timestamp(): longValue_t;
      timestampP(): Promise<longValue_t>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public int java.util.UUID.variant()
      variantA( cb: Callback<number>): void;
      variant(): number;
      variantP(): Promise<number>;
      // public int java.util.UUID.version()
      versionA( cb: Callback<number>): void;
      version(): number;
      versionP(): Promise<number>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module UUID {
      export interface Static {
        new (arg0: long_t, arg1: long_t): java.util.UUID;
        // public static java.util.UUID java.util.UUID.fromString(java.lang.String)
        fromStringA(arg0: string_t, cb: Callback<Java.UUID>): void;
        fromString(arg0: string_t): Java.UUID;
        fromStringP(arg0: string_t): Promise<Java.UUID>;
        // public static java.util.UUID java.util.UUID.nameUUIDFromBytes(byte[])
        nameUUIDFromBytesA(arg0: object_array_t, cb: Callback<Java.UUID>): void;
        nameUUIDFromBytes(arg0: object_array_t): Java.UUID;
        nameUUIDFromBytesP(arg0: object_array_t): Promise<Java.UUID>;
        // public static java.util.UUID java.util.UUID.randomUUID()
        randomUUIDA( cb: Callback<Java.UUID>): void;
        randomUUID(): Java.UUID;
        randomUUIDP(): Promise<Java.UUID>;
      }
    }
  }

  export module java.util {
    export interface Vector extends Java.java.util.AbstractList, Java.java.util.List, Java.java.util.RandomAccess {
      // public abstract void java.util.List.add(int,E)
      addA(arg0: integer_t, arg1: object_t, cb: Callback<void>): void;
      add(arg0: integer_t, arg1: object_t): void;
      addP(arg0: integer_t, arg1: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.add(E)
      addA(arg0: object_t, cb: Callback<boolean>): void;
      add(arg0: object_t): boolean;
      addP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.List.addAll(int,java.util.Collection<? extends E>)
      addAllA(arg0: integer_t, arg1: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: integer_t, arg1: Java.Collection): boolean;
      addAllP(arg0: integer_t, arg1: Java.Collection): Promise<boolean>;
      // public abstract boolean java.util.Collection.addAll(java.util.Collection<? extends E>)
      addAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      addAll(arg0: Java.Collection): boolean;
      addAllP(arg0: Java.Collection): Promise<boolean>;
      // public synchronized void java.util.Vector.addElement(E)
      addElementA(arg0: object_t, cb: Callback<void>): void;
      addElement(arg0: object_t): void;
      addElementP(arg0: object_t): Promise<void>;
      // public synchronized int java.util.Vector.capacity()
      capacityA( cb: Callback<number>): void;
      capacity(): number;
      capacityP(): Promise<number>;
      // public abstract void java.util.Collection.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public synchronized java.lang.Object java.util.Vector.clone()
      cloneA( cb: Callback<object_t>): void;
      clone(): object_t;
      cloneP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.contains(java.lang.Object)
      containsA(arg0: object_t, cb: Callback<boolean>): void;
      contains(arg0: object_t): boolean;
      containsP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Collection.containsAll(java.util.Collection<?>)
      containsAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      containsAll(arg0: Java.Collection): boolean;
      containsAllP(arg0: Java.Collection): Promise<boolean>;
      // public synchronized void java.util.Vector.copyInto(java.lang.Object[])
      copyIntoA(arg0: object_array_t, cb: Callback<void>): void;
      copyInto(arg0: object_array_t): void;
      copyIntoP(arg0: object_array_t): Promise<void>;
      // public synchronized E java.util.Vector.elementAt(int)
      elementAtA(arg0: integer_t, cb: Callback<object_t>): void;
      elementAt(arg0: integer_t): object_t;
      elementAtP(arg0: integer_t): Promise<object_t>;
      // public java.util.Enumeration<E> java.util.Vector.elements()
      elementsA( cb: Callback<Java.Enumeration>): void;
      elements(): Java.Enumeration;
      elementsP(): Promise<Java.Enumeration>;
      // public synchronized void java.util.Vector.ensureCapacity(int)
      ensureCapacityA(arg0: integer_t, cb: Callback<void>): void;
      ensureCapacity(arg0: integer_t): void;
      ensureCapacityP(arg0: integer_t): Promise<void>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public synchronized E java.util.Vector.firstElement()
      firstElementA( cb: Callback<object_t>): void;
      firstElement(): object_t;
      firstElementP(): Promise<object_t>;
      // public default void java.lang.Iterable.forEach(java.util.function.Consumer<? super T>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract E java.util.List.get(int)
      getA(arg0: integer_t, cb: Callback<object_t>): void;
      get(arg0: integer_t): object_t;
      getP(arg0: integer_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public synchronized int java.util.Vector.indexOf(java.lang.Object,int)
      indexOfA(arg0: object_t, arg1: integer_t, cb: Callback<number>): void;
      indexOf(arg0: object_t, arg1: integer_t): number;
      indexOfP(arg0: object_t, arg1: integer_t): Promise<number>;
      // public abstract int java.util.List.indexOf(java.lang.Object)
      indexOfA(arg0: object_t, cb: Callback<number>): void;
      indexOf(arg0: object_t): number;
      indexOfP(arg0: object_t): Promise<number>;
      // public synchronized void java.util.Vector.insertElementAt(E,int)
      insertElementAtA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
      insertElementAt(arg0: object_t, arg1: integer_t): void;
      insertElementAtP(arg0: object_t, arg1: integer_t): Promise<void>;
      // public abstract boolean java.util.Collection.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Iterator<E> java.util.Collection.iterator()
      iteratorA( cb: Callback<Java.Iterator>): void;
      iterator(): Java.Iterator;
      iteratorP(): Promise<Java.Iterator>;
      // public synchronized E java.util.Vector.lastElement()
      lastElementA( cb: Callback<object_t>): void;
      lastElement(): object_t;
      lastElementP(): Promise<object_t>;
      // public synchronized int java.util.Vector.lastIndexOf(java.lang.Object,int)
      lastIndexOfA(arg0: object_t, arg1: integer_t, cb: Callback<number>): void;
      lastIndexOf(arg0: object_t, arg1: integer_t): number;
      lastIndexOfP(arg0: object_t, arg1: integer_t): Promise<number>;
      // public abstract int java.util.List.lastIndexOf(java.lang.Object)
      lastIndexOfA(arg0: object_t, cb: Callback<number>): void;
      lastIndexOf(arg0: object_t): number;
      lastIndexOfP(arg0: object_t): Promise<number>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator(int)
      listIteratorA(arg0: integer_t, cb: Callback<Java.ListIterator>): void;
      listIterator(arg0: integer_t): Java.ListIterator;
      listIteratorP(arg0: integer_t): Promise<Java.ListIterator>;
      // public abstract java.util.ListIterator<E> java.util.List.listIterator()
      listIteratorA( cb: Callback<Java.ListIterator>): void;
      listIterator(): Java.ListIterator;
      listIteratorP(): Promise<Java.ListIterator>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public default java.util.stream.Stream<E> java.util.Collection.parallelStream()
      parallelStreamA( cb: Callback<object_t>): void;
      parallelStream(): object_t;
      parallelStreamP(): Promise<object_t>;
      // public abstract boolean java.util.Collection.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t): boolean;
      removeP(arg0: object_t): Promise<boolean>;
      // public abstract E java.util.List.remove(int)
      removeA(arg0: integer_t, cb: Callback<object_t>): void;
      remove(arg0: integer_t): object_t;
      removeP(arg0: integer_t): Promise<object_t>;
      // public abstract boolean java.util.Collection.removeAll(java.util.Collection<?>)
      removeAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      removeAll(arg0: Java.Collection): boolean;
      removeAllP(arg0: Java.Collection): Promise<boolean>;
      // public synchronized void java.util.Vector.removeAllElements()
      removeAllElementsA( cb: Callback<void>): void;
      removeAllElements(): void;
      removeAllElementsP(): Promise<void>;
      // public synchronized boolean java.util.Vector.removeElement(java.lang.Object)
      removeElementA(arg0: object_t, cb: Callback<boolean>): void;
      removeElement(arg0: object_t): boolean;
      removeElementP(arg0: object_t): Promise<boolean>;
      // public synchronized void java.util.Vector.removeElementAt(int)
      removeElementAtA(arg0: integer_t, cb: Callback<void>): void;
      removeElementAt(arg0: integer_t): void;
      removeElementAtP(arg0: integer_t): Promise<void>;
      // public default boolean java.util.Collection.removeIf(java.util.function.Predicate<? super E>)
      removeIfA(arg0: object_t, cb: Callback<boolean>): void;
      removeIf(arg0: object_t): boolean;
      removeIfP(arg0: object_t): Promise<boolean>;
      // public default void java.util.List.replaceAll(java.util.function.UnaryOperator<E>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract boolean java.util.Collection.retainAll(java.util.Collection<?>)
      retainAllA(arg0: Java.Collection, cb: Callback<boolean>): void;
      retainAll(arg0: Java.Collection): boolean;
      retainAllP(arg0: Java.Collection): Promise<boolean>;
      // public abstract E java.util.List.set(int,E)
      setA(arg0: integer_t, arg1: object_t, cb: Callback<object_t>): void;
      set(arg0: integer_t, arg1: object_t): object_t;
      setP(arg0: integer_t, arg1: object_t): Promise<object_t>;
      // public synchronized void java.util.Vector.setElementAt(E,int)
      setElementAtA(arg0: object_t, arg1: integer_t, cb: Callback<void>): void;
      setElementAt(arg0: object_t, arg1: integer_t): void;
      setElementAtP(arg0: object_t, arg1: integer_t): Promise<void>;
      // public synchronized void java.util.Vector.setSize(int)
      setSizeA(arg0: integer_t, cb: Callback<void>): void;
      setSize(arg0: integer_t): void;
      setSizeP(arg0: integer_t): Promise<void>;
      // public abstract int java.util.Collection.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public default void java.util.List.sort(java.util.Comparator<? super E>)
      sortA(arg0: Java.Comparator, cb: Callback<void>): void;
      sort(arg0: Java.Comparator): void;
      sortP(arg0: Java.Comparator): Promise<void>;
      // public default java.util.Spliterator<E> java.util.Collection.spliterator()
      spliteratorA( cb: Callback<Java.Spliterator>): void;
      spliterator(): Java.Spliterator;
      spliteratorP(): Promise<Java.Spliterator>;
      // public default java.util.stream.Stream<E> java.util.Collection.stream()
      streamA( cb: Callback<object_t>): void;
      stream(): object_t;
      streamP(): Promise<object_t>;
      // public abstract java.util.List<E> java.util.List.subList(int,int)
      subListA(arg0: integer_t, arg1: integer_t, cb: Callback<Java.List>): void;
      subList(arg0: integer_t, arg1: integer_t): Java.List;
      subListP(arg0: integer_t, arg1: integer_t): Promise<Java.List>;
      // public abstract <T> T[] java.util.Collection.toArray(T[])
      toArrayA(arg0: object_array_t, cb: Callback<object_t[]>): void;
      toArray(arg0: object_array_t): object_t[];
      toArrayP(arg0: object_array_t): Promise<object_t[]>;
      // public abstract java.lang.Object[] java.util.Collection.toArray()
      toArrayA( cb: Callback<object_t[]>): void;
      toArray(): object_t[];
      toArrayP(): Promise<object_t[]>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public synchronized void java.util.Vector.trimToSize()
      trimToSizeA( cb: Callback<void>): void;
      trimToSize(): void;
      trimToSizeP(): Promise<void>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module Vector {
      export interface Static {
        new (arg0: integer_t, arg1: integer_t): java.util.Vector;
        new (arg0: Java.Collection): java.util.Vector;
        new (arg0: integer_t): java.util.Vector;
        new (): java.util.Vector;
      }
    }
  }

  export module java.util {
    export interface WeakHashMap extends Java.java.util.AbstractMap, Java.java.util.Map {
      // public abstract void java.util.Map.clear()
      clearA( cb: Callback<void>): void;
      clear(): void;
      clearP(): Promise<void>;
      // public default V java.util.Map.compute(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      compute(arg0: object_t, arg1: object_t): object_t;
      computeP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default V java.util.Map.computeIfAbsent(K,java.util.function.Function<? super K, ? extends V>)
      computeIfAbsentA(arg0: object_t, arg1: Java.Function, cb: Callback<object_t>): void;
      computeIfAbsent(arg0: object_t, arg1: Java.Function): object_t;
      computeIfAbsentP(arg0: object_t, arg1: Java.Function): Promise<object_t>;
      // public default V java.util.Map.computeIfPresent(K,java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      computeIfPresentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      computeIfPresent(arg0: object_t, arg1: object_t): object_t;
      computeIfPresentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract boolean java.util.Map.containsKey(java.lang.Object)
      containsKeyA(arg0: object_t, cb: Callback<boolean>): void;
      containsKey(arg0: object_t): boolean;
      containsKeyP(arg0: object_t): Promise<boolean>;
      // public abstract boolean java.util.Map.containsValue(java.lang.Object)
      containsValueA(arg0: object_t, cb: Callback<boolean>): void;
      containsValue(arg0: object_t): boolean;
      containsValueP(arg0: object_t): Promise<boolean>;
      // public abstract java.util.Set<java.util.Map.java.util.Map$Entry<K, V>> java.util.Map.entrySet()
      entrySetA( cb: Callback<Java.Set>): void;
      entrySet(): Java.Set;
      entrySetP(): Promise<Java.Set>;
      // public boolean java.lang.Object.equals(java.lang.Object)
      equalsA(arg0: object_t, cb: Callback<boolean>): void;
      equals(arg0: object_t): boolean;
      equalsP(arg0: object_t): Promise<boolean>;
      // public default void java.util.Map.forEach(java.util.function.BiConsumer<? super K, ? super V>)
      forEachA(arg0: object_t, cb: Callback<void>): void;
      forEach(arg0: object_t): void;
      forEachP(arg0: object_t): Promise<void>;
      // public abstract V java.util.Map.get(java.lang.Object)
      getA(arg0: object_t, cb: Callback<object_t>): void;
      get(arg0: object_t): object_t;
      getP(arg0: object_t): Promise<object_t>;
      // public final native java.lang.Class<?> java.lang.Object.getClass()
      getClassA( cb: Callback<Java.Class>): void;
      getClass(): Java.Class;
      getClassP(): Promise<Java.Class>;
      // public default V java.util.Map.getOrDefault(java.lang.Object,V)
      getOrDefaultA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      getOrDefault(arg0: object_t, arg1: object_t): object_t;
      getOrDefaultP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public native int java.lang.Object.hashCode()
      hashCodeA( cb: Callback<number>): void;
      hashCode(): number;
      hashCodeP(): Promise<number>;
      // public abstract boolean java.util.Map.isEmpty()
      isEmptyA( cb: Callback<boolean>): void;
      isEmpty(): boolean;
      isEmptyP(): Promise<boolean>;
      // public abstract java.util.Set<K> java.util.Map.keySet()
      keySetA( cb: Callback<Java.Set>): void;
      keySet(): Java.Set;
      keySetP(): Promise<Java.Set>;
      // public default V java.util.Map.merge(K,V,java.util.function.BiFunction<? super V, ? super V, ? extends V>)
      mergeA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<object_t>): void;
      merge(arg0: object_t, arg1: object_t, arg2: object_t): object_t;
      mergeP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<object_t>;
      // public final native void java.lang.Object.notify()
      notifyA( cb: Callback<void>): void;
      notify(): void;
      notifyP(): Promise<void>;
      // public final native void java.lang.Object.notifyAll()
      notifyAllA( cb: Callback<void>): void;
      notifyAll(): void;
      notifyAllP(): Promise<void>;
      // public abstract V java.util.Map.put(K,V)
      putA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      put(arg0: object_t, arg1: object_t): object_t;
      putP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public abstract void java.util.Map.putAll(java.util.Map<? extends K, ? extends V>)
      putAllA(arg0: Java.Map, cb: Callback<void>): void;
      putAll(arg0: Java.Map): void;
      putAllP(arg0: Java.Map): Promise<void>;
      // public default V java.util.Map.putIfAbsent(K,V)
      putIfAbsentA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      putIfAbsent(arg0: object_t, arg1: object_t): object_t;
      putIfAbsentP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default boolean java.util.Map.remove(java.lang.Object,java.lang.Object)
      removeA(arg0: object_t, arg1: object_t, cb: Callback<boolean>): void;
      remove(arg0: object_t, arg1: object_t): boolean;
      removeP(arg0: object_t, arg1: object_t): Promise<boolean>;
      // public abstract V java.util.Map.remove(java.lang.Object)
      removeA(arg0: object_t, cb: Callback<object_t>): void;
      remove(arg0: object_t): object_t;
      removeP(arg0: object_t): Promise<object_t>;
      // public default boolean java.util.Map.replace(K,V,V)
      replaceA(arg0: object_t, arg1: object_t, arg2: object_t, cb: Callback<boolean>): void;
      replace(arg0: object_t, arg1: object_t, arg2: object_t): boolean;
      replaceP(arg0: object_t, arg1: object_t, arg2: object_t): Promise<boolean>;
      // public default V java.util.Map.replace(K,V)
      replaceA(arg0: object_t, arg1: object_t, cb: Callback<object_t>): void;
      replace(arg0: object_t, arg1: object_t): object_t;
      replaceP(arg0: object_t, arg1: object_t): Promise<object_t>;
      // public default void java.util.Map.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)
      replaceAllA(arg0: object_t, cb: Callback<void>): void;
      replaceAll(arg0: object_t): void;
      replaceAllP(arg0: object_t): Promise<void>;
      // public abstract int java.util.Map.size()
      sizeA( cb: Callback<number>): void;
      size(): number;
      sizeP(): Promise<number>;
      // public java.lang.String java.lang.Object.toString()
      toStringA( cb: Callback<string>): void;
      toString(): string;
      toStringP(): Promise<string>;
      // public abstract java.util.Collection<V> java.util.Map.values()
      valuesA( cb: Callback<Java.Collection>): void;
      values(): Java.Collection;
      valuesP(): Promise<Java.Collection>;
      // public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException
      waitA(arg0: long_t, arg1: integer_t, cb: Callback<void>): void;
      wait(arg0: long_t, arg1: integer_t): void;
      waitP(arg0: long_t, arg1: integer_t): Promise<void>;
      // public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException
      waitA(arg0: long_t, cb: Callback<void>): void;
      wait(arg0: long_t): void;
      waitP(arg0: long_t): Promise<void>;
      // public final void java.lang.Object.wait() throws java.lang.InterruptedException
      waitA( cb: Callback<void>): void;
      wait(): void;
      waitP(): Promise<void>;
    }
    export module WeakHashMap {
      export interface Static {
        new (arg0: integer_t, arg1: float_t): java.util.WeakHashMap;
        new (arg0: Java.Map): java.util.WeakHashMap;
        new (arg0: integer_t): java.util.WeakHashMap;
        new (): java.util.WeakHashMap;
      }
    }
  }


  // } // module Java

} // module Module
